unit OpcLabs_EasyOpcUA_TLB;

// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// $Rev: 98336 $
// File generated on 11/3/2024 2:20:24 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Program Files (x86)\OPC Labs OPC Studio 2024.2\SDK\lib\OpcLabs.EasyOpcUA.tlb (1)
// LIBID: {E15CAAE0-617E-49C6-BB42-B521F9DF3983}
// LCID: 0
// Helpfile: 
// HelpString: OPC Labs EasyOPC-UA Library
// DepndLst: 
//   (1) v2.0 stdole, (C:\Windows\SysWOW64\stdole2.tlb)
//   (2) v2.4 mscorlib, (C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.tlb)
//   (3) v5.81 OpcLabs_BaseLib, (C:\Program Files (x86)\OPC Labs OPC Studio 2024.2\SDK\lib\OpcLabs.BaseLib.tlb)
//   (4) v2.4 System, (C:\Windows\Microsoft.NET\Framework\v4.0.30319\System.tlb)
// SYS_KIND: SYS_WIN32
// ************************************************************************ //
{$TYPEDADDRESS OFF} // Unit must be compiled without type-checked pointers. 
{$WARN SYMBOL_PLATFORM OFF}
{$WRITEABLECONST ON}
{$VARPROPSETTER ON}
{$ALIGN 4}

interface

uses Winapi.Windows, mscorlib_TLB, OpcLabs_BaseLib_TLB, System.Classes, System.Variants, System.Win.StdVCL, System_TLB, Vcl.Graphics, 
Vcl.OleServer, Winapi.ActiveX;
  

// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLASS_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
const
  // TypeLibrary Major and minor versions
  OpcLabs_EasyOpcUAMajorVersion = 5;
  OpcLabs_EasyOpcUAMinorVersion = 81;

  LIBID_OpcLabs_EasyOpcUA: TGUID = '{E15CAAE0-617E-49C6-BB42-B521F9DF3983}';

  IID__EasyUAClientSelector: TGUID = '{CAD63DE0-9783-4FD2-A4DD-4837C10F2850}';
  IID__EasyUASpecializedClient: TGUID = '{2C94D060-0A90-45CD-B693-701E9EFBFF36}';
  IID__UAAttributeField: TGUID = '{B98ECAAE-4281-4BF3-B05B-946CDB30897F}';
  IID__StringUANodeIdReadOnlyDictionary: TGUID = '{5F478C83-7438-4815-8EB0-5CFD4E704F37}';
  IID__UAAttributeFieldCollection: TGUID = '{DB3969A7-EFA7-4DBF-B9BB-917C4E098064}';
  IID__UAEndpointDescriptorCollection: TGUID = '{B62C28B1-A42F-400C-8C82-D6BE8EEE6455}';
  IID__UAEndpointDescriptorUANodeIdReadOnlyDictionary: TGUID = '{49652E16-8921-4980-B090-A16B2B5AFD4F}';
  IID__UAFieldResultDictionary: TGUID = '{30ECB8F5-C32F-40F0-BD69-397417BC354A}';
  IID__UAKeyValueDictionary: TGUID = '{DC5653A0-EC58-41F3-B719-73EB4A04A154}';
  IID__UANodeIdUAApplicationElementReadOnlyDictionary: TGUID = '{ED1E8655-709D-4630-9617-E51EF097C384}';
  IID__UADataValue: TGUID = '{8007E7F1-6A08-48B5-AD64-A11A0ABE3C3E}';
  CLASS_UADataValue: TGUID = '{F0AA1082-1B20-4661-865B-A5BDC32D2C29}';
  IID__UAEventData: TGUID = '{865781B1-A39D-4513-A283-6234A3205CDB}';
  IID__UAExtensionObject: TGUID = '{F01EF350-CBBA-46B2-96FA-8590C6568C21}';
  IID__UAIndexRange: TGUID = '{7EC9D06E-F36E-466E-9213-ADAFFC0B9789}';
  IID__UAIndexRangeList: TGUID = '{1C890D25-D1FA-49EF-A5DB-077F9176324F}';
  IID__UAKeyValuePair: TGUID = '{AA44D00D-CA8A-4893-9046-ADAC86691C56}';
  IID__UAServiceResult: TGUID = '{4FC070CC-3154-410D-8C6C-102D49B9E192}';
  IID__UAStatusCode: TGUID = '{4B00D336-5728-47D1-B3CE-585C09DBE8E5}';
  IID__UATimeZoneData: TGUID = '{00C84025-D680-4152-8E77-11F7C7807E06}';
  IID__UAEndpointDescriptor: TGUID = '{39E66E2C-2192-414C-86D8-41022342C186}';
  IID__UANodeDescriptor: TGUID = '{8687F067-3D6F-41DB-B149-33225CE13A48}';
  IID__EasyUAEngineException: TGUID = '{23309CA8-0649-414E-B116-C57CD515584D}';
  IID__UAServiceException: TGUID = '{24E865DB-0521-4A10-A995-42B21CB201FF}';
  IID__UAResultException: TGUID = '{DCB10B57-CD3F-46ED-8BB8-43D6F12F624B}';
  CLASS_UAResultException: TGUID = '{B1E752EE-1C4D-49C8-BEE8-2A7219A47D25}';
  CLASS_UAServiceException: TGUID = '{83F4125E-A9CF-4071-AA2C-2D89BF13082A}';
  IID__UAStatusCodeException: TGUID = '{3F285DEA-2A11-408B-9C9B-8304F9A675F5}';
  IID__UADataChangeFilter: TGUID = '{D0141446-A931-4514-A25E-2C9FF10B527E}';
  IID__UAEventFilter: TGUID = '{5E9D0A8F-D791-4FE8-856F-C4699F7C2A46}';
  IID__UABrowseParameters: TGUID = '{C1524019-718E-4D03-AA7B-A00D5A32D7BD}';
  IID__UAMonitoringParameters: TGUID = '{2037F99C-D57F-46B9-A7D1-6EFFCAA6A2C8}';
  IID__UAReadParameters: TGUID = '{F50E67FF-583F-4666-956F-79A6E8992B9D}';
  IID__UASubscriptionParameters: TGUID = '{5D75AE7B-22D0-4777-894A-B355351B8417}';
  IID__EasyUAClientConnectionControl: TGUID = '{2D98A3F0-0050-46CC-B3BD-3E9D57DD0A3B}';
  IID__EasyUAClientConnectionMonitoring: TGUID = '{44D352A4-542F-4881-9CA4-5E4D5F0D7802}';
  IID__EasyUAClientNodeRegistration: TGUID = '{630024EF-25C0-480C-A6D0-C37E8BD659E8}';
  IID__UAServerTables: TGUID = '{EBC0E09E-8B2D-4629-99D2-2FAA6F937E96}';
  CLASS_ComEasyUAClientConnectionControl: TGUID = '{D092EB7F-D060-4A5E-8332-2EFB89DEFC56}';
  DIID_DEasyUAClientConnectionMonitoringEvents: TGUID = '{68427062-23DA-4E3E-82CF-74012D87B782}';
  CLASS_ComEasyUAClientNodeRegistration: TGUID = '{53387064-CD24-427D-AB58-F9FCEA55149E}';
  IID__EasyUASubscriberSelector: TGUID = '{1A47BBB1-9F4D-4CFE-A3E6-E17A38121CAA}';
  IID__UASubscribeDataSetFilter: TGUID = '{8D97D14B-6B1E-4251-88B3-7BEBCDE13175}';
  IID__UAGuidDataSetFieldDataDictionary: TGUID = '{0BBD9BA4-2711-4BD7-B08A-1C15C092D3DA}';
  IID__UAStringDataSetFieldDataDictionary: TGUID = '{792FFFC4-2065-4D6B-B4DC-30ECDA74CC79}';
  IID__UAPubSubLocators: TGUID = '{0D4EB582-A52A-4951-B9CF-46B79B21AA6B}';
  IID__UADataSetFieldData: TGUID = '{9E9EC982-3335-41D9-9A51-808C63C865EB}';
  IID__UAPubSubHeader: TGUID = '{34C0B10D-C825-4302-9B07-F9FACEC9CB90}';
  IID__UAPublisherId: TGUID = '{EE8D564D-05F4-4865-AB46-C255D8F9AE1F}';
  CLASS_UAPubSubHeader: TGUID = '{C307BBEB-FA89-4BBD-9659-6C94B7A6B63F}';
  CLASS_UAPubSubLocators: TGUID = '{3F9EC413-1A2E-4E0E-A8B3-1F283BB0029A}';
  IID__UAPubSubObjectDescriptor: TGUID = '{DDE20692-3CF4-4282-9664-6F786C083AFD}';
  IID__UADataSetSubscriptionDescriptor: TGUID = '{88F53C60-CAFC-43EA-ACAB-BE89C9BBEB6D}';
  IID__UADataSetWriterDescriptor: TGUID = '{B371E7E9-AF62-4F24-A74E-1660C93151C5}';
  IID__UAPubSubConnectionDescriptor: TGUID = '{4A0D460D-B71A-4009-9EB7-A081AC6AACEA}';
  IID__UAPubSubResolverDescriptor: TGUID = '{6160E016-5591-48AC-8BD1-499459DDE6A4}';
  IID__UAWriterGroupDescriptor: TGUID = '{8C64A48B-E50A-492D-B094-21AB44F50A5A}';
  IID__UAPubSubCommunicationParameters: TGUID = '{D78C7E17-0E17-4081-A467-032E66AEC298}';
  IID__UASubscriberCommunicationParameters: TGUID = '{5D65321B-169C-4DFE-B039-2F25C3D0BDA4}';
  IID__UAPubSubSecurityKeyService: TGUID = '{19406528-82E3-4F71-9755-9981A1ED9CD7}';
  IID__UAReadOnlyPubSubSecurityKeyService: TGUID = '{94E67087-2DA5-4BB1-9F2C-05824A1D06B5}';
  IID__EasyUADataSetSubscriptionChangeArguments: TGUID = '{48E631D2-9858-4605-BF08-58AC05F0F9DA}';
  IID__UASubscribeDataSetArguments: TGUID = '{B52904E1-6EE9-4AAE-868D-7C63DB6E5F7D}';
  IID__EasyUASubscribeDataSetArgumentsDictionary: TGUID = '{14DE08AF-640B-46CE-A57C-FE2A4919E579}';
  CLASS_UASubscribeDataSetArguments: TGUID = '{7A871DF3-1FE1-4D5F-BC84-961182C37347}';
  IID__EasyUAPubSubMessageEventArgs: TGUID = '{00D3D0EC-9F69-4475-A89C-0ECC58B13B21}';
  IID__EasyUAResolverAccessEventArgs: TGUID = '{C565BB9D-B8CE-4806-B73D-BEE883F32B81}';
  IID__EasyUASubscriptionResolvedEventArgs: TGUID = '{948E4C59-9521-4D4F-8355-5A9A4869C39A}';
  IID__EasyUADataSetMessageEventArgs: TGUID = '{EB7AA408-2FD0-4331-B8A8-D0567E27C766}';
  CLASS_EasyUADataSetSubscriptionChangeArguments: TGUID = '{BC6A01C3-DEC5-47D8-A1E0-9A75B370FF74}';
  CLASS_EasyUADataSetMessageEventArgs: TGUID = '{AB4ADB6F-E7CC-4FEB-91FF-A2A84E738B13}';
  CLASS_EasyUAResolverAccessEventArgs: TGUID = '{A832053F-E56A-4790-BCA5-B38AEA2E9865}';
  IID__EasyUASubscribeDataSetArguments: TGUID = '{B1AA6506-00C4-481F-9839-771A56C3A70A}';
  CLASS_EasyUASubscribeDataSetArgumentsDictionary: TGUID = '{A12AC987-73C1-4D38-BBEE-5147F2616B7B}';
  CLASS_EasyUASubscriptionResolvedEventArgs: TGUID = '{74C6F7D0-288C-433B-ACAC-6FC86769AFEA}';
  CLASS_EasyUASubscribeDataSetArguments: TGUID = '{0DF356DA-30CF-48D1-AE01-9626CDBE4155}';
  IID__UAPublishSubscribeElement: TGUID = '{B4BF8E98-91A3-4002-A514-3C50987E1D9B}';
  IID__EasyUAPublishSubscribeClient: TGUID = '{4CF8E5E7-2DFF-4BF7-B3E5-32767D5FCD0B}';
  CLASS_UAPublishSubscribeElement: TGUID = '{CA74823A-5F32-4A95-A0DD-EDF7A18D768A}';
  IID__UAPubSubResolverParameters: TGUID = '{944E8BD0-A740-49F1-BCAE-6D190283E4F4}';
  IID__UAPublisherSubscriberAdaptableParameters: TGUID = '{B567F45D-4581-40FC-9555-FA826E3477AD}';
  IID__EasyUASubscriberInstanceParameters: TGUID = '{BA81311A-64D2-43E4-AAC2-57CB06815BFF}';
  IID__EasyUASubscriberSharedParameters: TGUID = '{F9C726A7-D353-4FF5-AD98-FDC507E10B68}';
  IID__UAPublisherConfigurationResolutionParameters: TGUID = '{64684BBB-2874-47A7-99D7-73EDD3E1E02F}';
  IID__UAPublisherEndpointResolverParameters: TGUID = '{369B6E35-3357-4E40-8E15-A1D6F9BE4CBD}';
  CLASS_UAPublisherSubscriberAdaptableParameters: TGUID = '{9B8C3689-164F-4FC1-8551-E986C18F9116}';
  CLASS_UAPubSubResolverParameters: TGUID = '{5BBEF801-E8C8-4E43-A8B8-EADF8492B098}';
  IID__EasyUAPubSubResolverParameters: TGUID = '{26FDDFB7-1197-4B0A-9951-53B1C2847970}';
  IID__EasyUASubscriberAdaptableParameters: TGUID = '{494CC092-F648-4A27-8910-7DB5E10E032A}';
  CLASS_EasyUASubscriberInstanceParameters: TGUID = '{9554FD95-D810-48B2-882B-9DDA95F392AF}';
  CLASS_EasyUASubscriberSharedParameters: TGUID = '{F6A3E4E3-CBF9-441A-96B6-8F65E8A1707A}';
  CLASS_UAPublisherConfigurationResolutionParameters: TGUID = '{F284DEF7-B2B1-48BB-9D68-5159404418BF}';
  CLASS_UAPublisherEndpointResolverParameters: TGUID = '{992E3F65-D672-423D-AB67-FC2079EEFE90}';
  CLASS_EasyUASubscriberAdaptableParameters: TGUID = '{96972DEB-7072-4C9F-B9B1-2F1D4A30BB1F}';
  CLASS_EasyUAPubSubResolverParameters: TGUID = '{5932600C-05A3-4F5E-BAB3-CF7DB2A5F387}';
  IID__UADataSetFolderDataCollection: TGUID = '{AF4D7B01-EEFD-4553-8079-8211B679F3DA}';
  IID__UADataSetWriterDataCollection: TGUID = '{E043D88F-49AF-45AB-B9D1-B67F27BC775B}';
  IID__UAFieldMetaDataCollection: TGUID = '{F87FCA00-9D53-4ABF-9D3F-03BD1CD9F46E}';
  IID__UAPublishedDataSetDataCollection: TGUID = '{AA28B62B-A8E5-4974-852C-F533DA8DD8DF}';
  IID__UAPublishedVariableDataCollection: TGUID = '{DD86E744-C8F9-4074-A726-9790AC6B512B}';
  IID__UAPubSubConnectionDataCollection: TGUID = '{795F2CA1-CBE3-4BA7-BA12-889A012847DE}';
  IID__UAWriterGroupDataCollection: TGUID = '{A1B16ABF-A926-4FFC-94F9-0DD757199E8A}';
  IID__UAConfigurationVersion: TGUID = '{0514BCB9-150D-4D3B-9498-E068EEA87043}';
  IID__UAReadOnlyDataTypeSchema: TGUID = '{B7CCA8FC-5F30-44CD-88EB-7AAB5B0C9F6F}';
  IID__UADataSetWriterLocator: TGUID = '{F926848D-B391-42A2-BB52-EAE387A5371B}';
  IID__UAPubSubObjectElement: TGUID = '{4614B76F-7224-424B-AA14-56E1B05F5464}';
  IID__UAPublishedVariableData: TGUID = '{43B8EC27-B084-432B-8272-1F43314A8B09}';
  IID__UADataSetFolderData: TGUID = '{B42A0B0E-BFD8-4689-ACF0-6E7DB1D549F2}';
  IID__UAPubSubComponentElement: TGUID = '{23743679-F5CD-408E-8CCF-4E849341B7EB}';
  IID__UAPublishedDataSetElement: TGUID = '{B5C6FE9E-40ED-45F5-8D2E-56C24DB99C95}';
  IID__UAPubSubConfigurationElement: TGUID = '{F0A172D0-986C-4A8A-9FF5-60EAC4409764}';
  IID__UAPubSubConnectionElement: TGUID = '{42C799D9-395C-468A-A968-DF81BEB32446}';
  IID__UAPubSubGroupElement: TGUID = '{D2FBAB9F-C7F0-410A-A0BB-2422C681298C}';
  IID__UADataSetWriterElement: TGUID = '{62E37EEA-59BE-4E48-B423-4D5598B347B2}';
  IID__UAPublishedDataSetSourceElement: TGUID = '{510A31A6-100E-4929-B870-DF7DB35BA13C}';
  CLASS_UAPublishedDataSetElement: TGUID = '{798F6976-C03A-46F9-A0C6-4E7F50FA6B4B}';
  IID__UAPublishedEventsElement: TGUID = '{8E0FC48E-841B-4C19-9D08-DD6718CC628A}';
  CLASS_UAPubSubConfigurationElement: TGUID = '{58CE4825-46EB-4F44-8FA5-CDCE71F78E94}';
  CLASS_UAPubSubConnectionElement: TGUID = '{BCDB627F-658A-4888-9AC6-5D44D84F7894}';
  IID__UAWriterGroupElement: TGUID = '{79FAE3C0-5B78-4A99-963C-6148E2583C97}';
  IID__UAConnectionTransportParameters: TGUID = '{E650C346-85FB-49C5-8051-29FEF4A71682}';
  IID__UADataSetReaderTransportParameters: TGUID = '{D6179040-6D8A-4449-91C1-4BE258E23CA2}';
  IID__UADataSetWriterTransportParameters: TGUID = '{4304B7A6-3350-4B8D-95C1-7E67BF2B9093}';
  IID__UAWriterGroupTransportParameters: TGUID = '{97808850-B8D5-4750-A986-C44E7DFED7DA}';
  CLASS_UAConnectionTransportParameters: TGUID = '{A43A5939-D08D-48D9-B8CF-D487E9D019CD}';
  IID__UADatagramConnectionTransportParameters: TGUID = '{1119B094-5007-45B6-95E2-FB4AAE0B058D}';
  IID__UADatagramWriterGroupTransportParameters: TGUID = '{26724D20-A513-4066-83BA-6E498C83DBDD}';
  IID__UADataSetReaderMessageParameters: TGUID = '{C31CF355-AAB9-4CFB-B9DC-D79266DF4D37}';
  IID__UAJsonDataSetReaderMessageParameters: TGUID = '{1AFA8307-A142-4A4A-91E3-FEB7D2ED9270}';
  IID__UADataSetWriterMessageParameters: TGUID = '{316714C9-9CD7-456F-B368-8DC48E2F3394}';
  IID__UAWriterGroupMessageParameters: TGUID = '{D0DABF28-BD3D-4595-B4EC-04303BFB8CA2}';
  IID__UAUadpDataSetReaderMessageParameters: TGUID = '{94568946-BD82-4EEF-96D2-A90046059B44}';
  IID__UAUadpDataSetWriterMessageParameters: TGUID = '{FE711423-3518-4B4F-B2E0-FB14BF6E5927}';
  IID__UAUadpWriterGroupMessageParameters: TGUID = '{868E2586-8FE3-447D-89F8-5B6787B75775}';
  IID__UABrokerConnectionTransportParameters: TGUID = '{03974A3E-6CF1-4C4C-A6EF-6E14D75A4E24}';
  IID__UABrokerDataSetReaderTransportParameters: TGUID = '{8811FE82-2CA0-41B5-A98B-7C5B57EC9605}';
  IID__UABrokerDataSetWriterTransportParameters: TGUID = '{CB810C59-3CA9-4D5C-B5DE-B5A3A31DA2F5}';
  IID__UABrokerWriterGroupTransportParameters: TGUID = '{7EFE6A1D-9A41-4CC1-8530-035665BE13AF}';
  CLASS_UAConfigurationVersion: TGUID = '{949BE0B2-0E2D-4F01-8B09-34B0127093FA}';
  CLASS_UABrokerConnectionTransportParameters: TGUID = '{AB3064FE-9C7F-4A8F-BC1D-F928E46D6B67}';
  CLASS_UADatagramConnectionTransportParameters: TGUID = '{43CFB687-BF0C-400E-8A2E-1E490140AE36}';
  CLASS_UADatagramWriterGroupTransportParameters: TGUID = '{D4E27A38-F07E-4DB2-A0B1-56B1746CFDA6}';
  CLASS_UADataSetFolderData: TGUID = '{6228059C-878F-428C-817E-3B020D277282}';
  CLASS_UADataSetFolderDataCollection: TGUID = '{5BD9679C-77B7-4968-BA3A-F12936064F8B}';
  IID__UADataSetMetaData: TGUID = '{FF5E42E9-C19F-4404-9F7E-440A30B77989}';
  CLASS_UADataSetReaderMessageParameters: TGUID = '{8C4017B8-8853-48C5-99FC-A457D4B6256E}';
  CLASS_UABrokerDataSetReaderTransportParameters: TGUID = '{7E050655-33C0-4E26-AB6F-1CF72A2ECE7C}';
  IID__UADataSetWriterData: TGUID = '{4BBFC129-C3EF-4684-8947-84EB6F97D54D}';
  CLASS_UADataSetWriterDataCollection: TGUID = '{11C65BF7-0789-48D3-AAA1-6BCC5F7D52CF}';
  CLASS_UADataSetWriterElement: TGUID = '{8583E60F-A939-4FA8-A864-1BFDA1F7FF8D}';
  CLASS_UADataSetWriterLocator: TGUID = '{C999F2DB-0B73-4D60-9A65-DAC6F244FF80}';
  IID__UAJsonDataSetWriterMessageParameters: TGUID = '{001D188D-67A3-4BE3-82FC-9EE06DF4E527}';
  CLASS_UABrokerDataSetWriterTransportParameters: TGUID = '{47D30246-B8AD-419C-874F-735E50582E88}';
  IID__UAFieldMetaData: TGUID = '{05A7FEF5-81F6-457D-B04D-883BBF8BC312}';
  CLASS_UAFieldMetaDataCollection: TGUID = '{56F0D16D-8B4F-433B-95D4-BAF9D8CFD30B}';
  CLASS_UAJsonDataSetReaderMessageParameters: TGUID = '{58FC15DB-B991-4CC1-9A8E-ECBF4EF1FF50}';
  CLASS_UAJsonDataSetWriterMessageParameters: TGUID = '{56EEFDD5-7197-4496-8320-51E147EF1AC8}';
  IID__UAJsonWriterGroupMessageParameters: TGUID = '{2688FC99-7DB9-4D3D-88E5-3DD6C7B1FC93}';
  IID__UAPublishedDataItemsElement: TGUID = '{1D65B0A6-261F-4DA2-9878-8CFB173FDE6B}';
  IID__UAPublishedDataSetData: TGUID = '{453E8464-E93B-413F-B99D-C95F34F8CCA6}';
  CLASS_UAPublishedDataSetDataCollection: TGUID = '{84FB0CD5-AC87-4C98-9E52-F314F1BA743B}';
  CLASS_UAPublishedDataSetData: TGUID = '{CB4CFFFE-6C17-4310-AD0D-B5574BE496AA}';
  CLASS_UAPublishedDataItemsElement: TGUID = '{71B5EB57-11E6-4557-BFF6-729422DDEB82}';
  CLASS_UAPublishedEventsElement: TGUID = '{DD9B75E7-AEFC-492B-9EB3-E28608767E1A}';
  CLASS_UAPublishedVariableData: TGUID = '{DA798E7B-F9EE-4C63-B134-AF1F7DA9C077}';
  CLASS_UAPublishedVariableDataCollection: TGUID = '{C80DEA50-8085-4C82-9370-3981948EABC0}';
  CLASS_UADataSetWriterData: TGUID = '{F65540FA-7B52-42F1-A571-25072BB31CFE}';
  IID__UAPubSubConfigurationData: TGUID = '{00889884-908B-4644-A325-01ED63D49D78}';
  CLASS_UAPubSubConfigurationData: TGUID = '{2A9B9D29-D0AC-4142-9AEA-1052212CE29C}';
  IID__UAPubSubConnectionData: TGUID = '{57492A54-EC53-40BB-BFCE-E34EF63E366C}';
  CLASS_UAPubSubConnectionDataCollection: TGUID = '{03FCE393-BE17-49F7-8281-3767085C0E33}';
  CLASS_UAPubSubConnectionData: TGUID = '{E09DDAED-93A6-4178-A5F1-0BDA213A4827}';
  IID__UAWriterGroupData: TGUID = '{5DA5F2AF-FFBD-4403-8563-477BD4198356}';
  CLASS_UAFieldMetaData: TGUID = '{5A7A0C93-FFB3-4ABE-BAD2-654047BE9419}';
  IID__UAReaderGroupMessageParameters: TGUID = '{762B8220-DACB-46F2-A4E1-3C1F6BB95C19}';
  IID__UAReaderGroupTransportParameters: TGUID = '{C673BF39-897B-4A47-8552-F2464A9DE90C}';
  IID__UAReadOnlyPubSubConfiguration: TGUID = '{FB78014B-B3E9-49D8-9D69-B235BB4A168E}';
  CLASS_UAUadpDataSetReaderMessageParameters: TGUID = '{0A8F0B9A-E56B-4F0D-81DE-880F561E2744}';
  CLASS_UAUadpDataSetWriterMessageParameters: TGUID = '{A4901D38-2639-48D3-BF2C-C3ADDF7C766A}';
  CLASS_UAUadpWriterGroupMessageParameters: TGUID = '{0ECBC727-F520-4A4C-B4DC-02CC47814DE8}';
  CLASS_UAWriterGroupData: TGUID = '{9BD469EB-DAD7-4629-84AA-9AEE8EC3B295}';
  CLASS_UAWriterGroupDataCollection: TGUID = '{BA262886-6999-4975-9D30-662202EAE572}';
  CLASS_UAWriterGroupElement: TGUID = '{F041BA29-2F48-48AD-BA2C-9C130BCF3B74}';
  CLASS_UAJsonWriterGroupMessageParameters: TGUID = '{A0F46848-F1F2-4052-BDB7-A58A81AA95FC}';
  CLASS_UABrokerWriterGroupTransportParameters: TGUID = '{BC616BD5-BE56-4EC5-8586-25A2628D50CC}';
  DIID_DEasyUASubscriberEvents: TGUID = '{AB25F585-7859-40FC-9181-E255E8AFD7B6}';
  DIID_DEasyUASubscriberManagementEvents: TGUID = '{78AEB4F6-5242-429A-BCFD-09C055C06CFB}';
  IID__EasyUASubscriber: TGUID = '{30C649D2-ED07-40CC-9BC0-3C629B0CFF5B}';
  IID__EasyUASubscriberManagement: TGUID = '{B40CCFD3-C5B2-4E9A-ADCB-075C89FFB45C}';
  CLASS_EasyUASubscriberSelector: TGUID = '{A73E01B4-954E-466C-BF54-5CE811A7A7D7}';
  IID__UADataSetData: TGUID = '{C6BA7AC5-78F1-4C81-AD6E-0D0D53D4F352}';
  CLASS_UADataSetFieldData: TGUID = '{7CD4DBEC-7E71-4AF5-9479-7B9129E69941}';
  IID__UADataSetFieldDescriptor: TGUID = '{2ECD7F80-C6A5-4EFE-BE12-75B351A230E8}';
  IID__UADataSetHeader: TGUID = '{4FA1A49E-CC33-40A1-8CF2-8DBE6E7F2E50}';
  CLASS_UADataSetSubscriptionDescriptor: TGUID = '{377752BF-B7E1-48BC-ABD3-F3E652C673C5}';
  CLASS_UADataSetWriterDescriptor: TGUID = '{A41F2B7E-1CA2-4C35-ADC8-F53CEDDB4B30}';
  CLASS_UAGuidDataSetFieldDataDictionary: TGUID = '{D218789D-DCAC-4B12-87BC-AEA9D574FDD2}';
  CLASS_UAPublisherId: TGUID = '{E4ECD2E2-4E6A-4158-8FA1-4E9C6DAB5318}';
  CLASS_UAPubSubCommunicationParameters: TGUID = '{D6953030-0FD2-42FC-AF26-B88E95B04EC8}';
  CLASS_UAPubSubConnectionDescriptor: TGUID = '{FA4F1AAD-822C-4F58-B480-F9189E994018}';
  IID__UAPubSubGroupDescriptor: TGUID = '{8E321A5D-6680-46CC-8980-565AF063C7BB}';
  CLASS_UADataSetHeader: TGUID = '{39CBB05F-52B1-4130-8EE6-08CF3C3370BE}';
  CLASS_UADataSetData: TGUID = '{864F7486-7BA9-45DF-8904-413D0AB26EA4}';
  CLASS_UADataSetFieldDescriptor: TGUID = '{DF4C2F09-8466-4C04-8E01-2BACCC66FDF4}';
  CLASS_UAPubSubResolverDescriptor: TGUID = '{4643B35A-3CC9-44F3-9692-114C7D97B55C}';
  CLASS_UAStringDataSetFieldDataDictionary: TGUID = '{81F9F637-0BCA-4C66-B6F4-B57564F8C9CB}';
  CLASS_UASubscribeDataSetFilter: TGUID = '{17ACF923-42E1-4B85-80BC-D92B38900BC6}';
  CLASS_UASubscriberCommunicationParameters: TGUID = '{DC6EDA08-F378-4709-B4E9-E0743BB8E283}';
  CLASS_UAWriterGroupDescriptor: TGUID = '{F6D923CA-64D4-4B84-A47C-B4BAA6309A80}';
  IID__UAServerDtmpParameters: TGUID = '{715D8226-BC54-4900-A67A-BFCBEB125694}';
  IID__UAServerDtmpPluginParameters: TGUID = '{BEFA3307-B76D-49FA-A238-8C9095330799}';
  IID__UAOptimizerPluginParameters: TGUID = '{C7CD4419-5C6D-46F6-9A9E-200C24B6B142}';
  CLASS_UAOptimizerPluginParameters: TGUID = '{8C6F95B5-0430-409A-885E-C2885F597C93}';
  IID__EasyUAClientComplexData: TGUID = '{9BDDA562-192C-4394-ACF2-E2FE6B168DDB}';
  CLASS_UAClientServerTables: TGUID = '{EEE6F64F-325C-4EB4-ADF3-B492370941D5}';
  IID__UAComplexDataParameters: TGUID = '{A30C4F5C-981B-4705-BB41-79BDA441BE67}';
  IID__UAComplexDataSubscriberPluginParameters: TGUID = '{6CFF89F1-3517-4259-8EFE-73F2FFA41AC4}';
  CLASS_EasyUAClientComplexData: TGUID = '{0A7CFDCD-1168-4F28-BD88-48A270FDC4DD}';
  IID__UAComplexDataClientPluginParameters: TGUID = '{2CBDA1F2-B1D6-4D92-A9D0-DE86F91F868D}';
  CLASS_UAComplexDataSubscriberPluginParameters: TGUID = '{D7927DA5-C6B1-454B-84A6-65DBA736B18B}';
  IID__UAIndexRangeListFormatException: TGUID = '{D801DA24-F1EC-467C-A285-BB550B14595A}';
  IID__UAIndexRangeListParser: TGUID = '{2D049F8D-01D9-4D55-8311-1F9E4F5389CA}';
  CLASS_UAIndexRangeListFormatException: TGUID = '{4013FA23-29D0-41C3-A3D3-05791B7B2D18}';
  CLASS_UAIndexRangeListParser: TGUID = '{0AF3C950-EB6C-40BD-AE70-03A5BCF35264}';
  IID__UAException: TGUID = '{E19D2275-9541-41D0-8259-F2BEAA38E730}';
  IID__UALogicalException: TGUID = '{2D982E27-85C5-4A8E-8B99-9A00AC9E2D3C}';
  IID__UANodeArguments: TGUID = '{967B94A7-9081-4F7F-A66F-66C4C52BB55F}';
  IID__EasyUAMonitoredItemArgumentsDictionary: TGUID = '{C5A59EF9-A3FD-4153-9BA0-F8C73875FE3D}';
  IID__EasyUASubscriptionChangeArguments: TGUID = '{1B51E462-0760-4A19-8BDA-21AB5A5BA428}';
  IID__UAAttributeArguments: TGUID = '{7FCFB434-2C79-46BE-8B17-265CFAE8632B}';
  IID__UABrowseArguments: TGUID = '{CF31BF5E-0323-40C7-B17A-5CC08AB3F5BB}';
  IID__UACallArguments: TGUID = '{06EECC23-3211-48FB-B2AC-8C40396703B5}';
  IID__UAMonitoredItemArguments: TGUID = '{4851E2D1-C678-473C-81BE-8318555601B5}';
  CLASS_UANodeArguments: TGUID = '{4770A502-3F61-4EB1-8C28-312835DA08B0}';
  IID__UAReadArguments: TGUID = '{9E47FE1B-4806-425E-A57C-C58BA8310951}';
  IID__UAWriteArgumentsBase: TGUID = '{B0BBE300-E1B8-4742-9C7B-B0753BF50693}';
  IID__UAWriteValueArguments: TGUID = '{33DD7EC9-A915-496F-B707-4B64E51A27C8}';
  IID__EasyUADataChangeNotificationEventArgs: TGUID = '{D9986E34-5210-4D35-B972-3AB17C807361}';
  IID__EasyUAEventNotificationEventArgs: TGUID = '{7A12AC93-3C60-496F-959A-DD1732AB9740}';
  IID__EasyUAServerConditionChangedEventArgs: TGUID = '{EB380053-871B-4F51-932E-CB1E25C5154C}';
  IID__UAAttributeDataResult: TGUID = '{3CF81E46-6344-41F8-9DB2-59DB25E04959}';
  IID__UANodeElementCollectionResult: TGUID = '{803E75B3-48FC-4D25-A38A-72A7B6CA29DB}';
  IID__UAWriteResult: TGUID = '{262AFFB0-449E-4A62-8E35-000988C0487B}';
  CLASS_EasyUADataChangeNotificationEventArgs: TGUID = '{5C9CCACB-A2CF-45FE-BD50-D7F9620868A1}';
  CLASS_EasyUAEventNotificationEventArgs: TGUID = '{1E7ECB5E-16B7-4829-BAD4-7086E3173C75}';
  IID__EasyUAMonitoredItemArguments: TGUID = '{751F09D0-7C37-4E42-8719-26471E33010B}';
  CLASS_EasyUAMonitoredItemArgumentsDictionary: TGUID = '{06DB93B8-53BA-4921-8052-E7AE67154806}';
  IID__EasyUAMonitoredItemChangedEventArgs: TGUID = '{3AC3E6D1-E4F1-4196-A7C1-3BDDC3D2B94F}';
  CLASS_EasyUAServerConditionChangedEventArgs: TGUID = '{89C8C59F-322B-45D1-8188-12B94B8EBE4C}';
  CLASS_EasyUASubscriptionChangeArguments: TGUID = '{91D1A440-91E9-4776-8902-E36547A07083}';
  CLASS_UAAttributeArguments: TGUID = '{819A2FC9-7C79-4E24-983B-0542595C0E63}';
  CLASS_UAAttributeDataResult: TGUID = '{111C8C94-4928-4A45-8127-CC73667A2428}';
  CLASS_UABrowseArguments: TGUID = '{99224489-664B-4EEF-85DD-04E750F1AE01}';
  CLASS_UACallArguments: TGUID = '{F8BF32D9-A46C-4C9F-BAFB-45A19DB553BD}';
  CLASS_UAException: TGUID = '{7932FA12-C5A3-4DE6-826F-A9F57C99555E}';
  CLASS_UALogicalException: TGUID = '{FB18BDF1-4693-4607-B373-543EF69A56B4}';
  CLASS_UAMonitoredItemArguments: TGUID = '{2A0F366C-98F5-4651-AEB4-D9D57C6AD86A}';
  CLASS_EasyUAMonitoredItemArguments: TGUID = '{014F8522-306C-4E1B-9A8C-7E940AB94A3E}';
  CLASS_UANodeElementCollectionResult: TGUID = '{A71FB2A2-9ECA-4DA7-86E3-23DBB4C3F2AC}';
  CLASS_UAReadArguments: TGUID = '{CDE1B34F-23EB-4664-913F-01B504828D77}';
  IID__UAWriteArguments: TGUID = '{E76841C2-AE50-442A-9C5E-A95A03CDF6DE}';
  CLASS_UAWriteArguments: TGUID = '{EE40E760-E2BB-411D-9FA4-67588357354F}';
  CLASS_UAWriteResult: TGUID = '{97EE0719-ED42-485A-8008-C0A6EA9F10C0}';
  CLASS_UAWriteValueArguments: TGUID = '{17F223BC-DEE0-4657-9AC7-A94F56E6A29D}';
  IID__UABrowsePathElementCollection: TGUID = '{3EEAC651-8E16-46E2-A07B-ADE95F8EC36F}';
  IID__UABrowsePath: TGUID = '{36B8484E-1E5B-4D82-B542-787AC6FE74DA}';
  IID__UABrowsePathElement: TGUID = '{F78C4C94-2D2D-4DCC-BAFF-68A86AD33627}';
  IID__UABrowsePathFormatException: TGUID = '{80ED3B9B-F034-49B0-AEFD-039A632D1CEA}';
  IID__UABrowsePathParser: TGUID = '{7535B40D-25FC-4689-93FC-DA9D3C0654FB}';
  CLASS_UABrowsePathFormatException: TGUID = '{5859AD27-4F45-4717-A7F1-430A2BEE0018}';
  CLASS_UABrowsePathParser: TGUID = '{2866A8DE-4C0D-4CC6-955B-6705FAD69A38}';
  CLASS_UABrowsePath: TGUID = '{0FC7DFD3-0C59-46D2-BEDD-9514964943CF}';
  CLASS_UABrowsePathElement: TGUID = '{3CE3E988-805D-42AF-AC15-974D93E91240}';
  CLASS_UABrowsePathElementCollection: TGUID = '{C693BD29-7C2B-4A89-86FB-216EBFDDF14D}';
  IID__UAModelNodeDescriptor: TGUID = '{44FDAC9F-DE45-452B-BF72-AD1F9D5D6428}';
  CLASS_UAModelClientException: TGUID = '{6B87C067-8FB0-4C92-B28E-CB253135EBAB}';
  CLASS_UAModellingException: TGUID = '{3D3215C5-3253-4116-82C9-B4B2EA17A5C6}';
  CLASS_UAModelNodeDescriptor: TGUID = '{A5D29221-DD3E-4557-B253-1F5FE49E5441}';
  IID__EasyUAClientServerApplication: TGUID = '{B7F50F59-162D-4BAD-829F-3069BD5BB8C3}';
  IID__UACertificateGroupElementCollection: TGUID = '{73732AA9-0086-4073-8CE4-BE4A590D9F14}';
  IID__UAApplicationElement: TGUID = '{5D1D840D-60F0-481C-9DDD-1A9F2DF5CFDA}';
  IID__UACertificateGroupElement: TGUID = '{62DEFC9F-9E02-4C17-9790-3502A45ED5AE}';
  IID__EasyUACertificateManagementClient: TGUID = '{0BD47EE3-1436-4686-A88F-9E1577FBE764}';
  IID__EasyUAGlobalDiscoveryClient: TGUID = '{9832BE91-FBD4-40A5-99DF-7BE9222E9A80}';
  IID__UAApplicationRecordDataType: TGUID = '{DC2726E7-1704-45E3-885B-F8F414CD483F}';
  CLASS_UACertificateGroupElement: TGUID = '{39F5DE76-B10B-4CE9-96E4-FE15D8AA13B3}';
  CLASS_UACertificateGroupElementCollection: TGUID = '{F2B52270-D7E5-4AAC-A0F5-791809DABD6D}';
  IID__UAFilterOperand: TGUID = '{AB8DFD6E-2992-43A1-80A8-95D8A8CE77A3}';
  IID__UAFilterOperandCollection: TGUID = '{A95C464A-D2E7-4C2A-B018-49B110A31A47}';
  IID__UASimpleAttributeOperandCollection: TGUID = '{62A9E7AA-6107-482F-A884-122564599088}';
  IID__UAAttributeOperand: TGUID = '{4E62FCC7-D7FB-4459-8BDD-AAC147F07630}';
  IID__UAContentFilterElement: TGUID = '{21B7FB6A-3D73-466C-8E32-C6F0DC41B0B0}';
  IID__UALiteralOperand: TGUID = '{06E71EF6-10D6-4978-A8FA-89ABA53238A1}';
  IID__UASimpleAttributeOperand: TGUID = '{0191D5CB-B5F2-4954-BE0A-1E02EE7B10B2}';
  CLASS_UAAttributeOperand: TGUID = '{4C056B9E-A83C-4BBD-AC19-7B9B8722141E}';
  CLASS_UAContentFilterElement: TGUID = '{8338C5EA-B5A1-4941-B0CF-D7471B8FF80B}';
  CLASS_UAFilterOperand: TGUID = '{92DE68FE-D1B6-4B4C-B237-9ECA22CE7298}';
  CLASS_UAFilterOperandCollection: TGUID = '{0D655E18-5E53-4869-809C-35DFFC307F8A}';
  CLASS_UALiteralOperand: TGUID = '{00162DEF-2CDA-407D-86A9-95BC397CC99A}';
  CLASS_UASimpleAttributeOperand: TGUID = '{6759FEE2-9F5D-4B48-B0C8-B863BACDBFDF}';
  CLASS_UASimpleAttributeOperandCollection: TGUID = '{4798AB3C-0F5B-4E53-B731-BADD17D29C1A}';
  IID__UAEngineException: TGUID = '{FB6388F4-EDD4-42E4-9666-ED609791F194}';
  IID__UAClientAdaptableParameters: TGUID = '{D2A18F5C-6863-4B26-89ED-0D81F4A2B7C6}';
  IID__UAClientServerEngineParameters: TGUID = '{4C1C75BD-D564-402C-B399-9F000B297367}';
  IID__EasyUAClientInstanceParameters: TGUID = '{0B31304A-2B75-4F8E-B46E-321CE71879EC}';
  IID__EasyUAClientMode: TGUID = '{298B87ED-7C5B-4FA0-BD41-8B0A88F8BAD3}';
  IID__EasyUAClientSharedParameters: TGUID = '{E32CDBD7-D9B9-4A5C-BC91-86E45BC68F70}';
  CLASS_UAClientAdaptableParameters: TGUID = '{8708E22B-13A0-4D0C-B9FB-845BC0ABBBAE}';
  IID__UAClientEngineParameters: TGUID = '{B3EC5B1E-CC28-4617-A2F5-8FC0047A5189}';
  IID__UAClientMonitoredItemParameters: TGUID = '{4C8C8151-7251-4E12-AB3D-FE1FF653AB49}';
  IID__UAClientServerApplicationParameters: TGUID = '{4EBB9E50-E292-4D01-A182-8345BC293D21}';
  CLASS_UAClientServerEngineParameters: TGUID = '{CC6B49C1-A40F-42EE-AA83-097EA654D3EA}';
  IID__UAClientSessionParameters: TGUID = '{A09524BA-9DE2-4447-99FC-01C4985F7C4D}';
  IID__UAClientSubscriptionParameters: TGUID = '{0CCA8354-6931-4EDB-B85A-740F0FC6CC62}';
  IID__UADiscoveryParameters: TGUID = '{23D76E10-3379-4A29-B178-2452CBC404E0}';
  IID__UAEndpointDescriptionChecks: TGUID = '{DC62DE51-E00E-449B-879C-920F16E4B4A3}';
  IID__UAEnhancedClientSessionParameters: TGUID = '{2EAA2DB0-9563-4509-8E3B-42DD933A6B59}';
  IID__UAHostParameters: TGUID = '{A2020BCE-F738-4956-8021-2D603850BBB1}';
  IID__UASmartClientEngineParameters: TGUID = '{61307AAA-A0B0-400B-A24B-0BC60694B324}';
  IID__UASmartClientSessionParameters: TGUID = '{2056DFDF-FEF9-41D7-9A27-C580BAA7D5B1}';
  IID__UAUserInteractionParameters: TGUID = '{79DF1B0A-0098-4F86-A7E1-88A940480EE8}';
  IID__UACertificateAcceptancePolicy: TGUID = '{52BE490E-DFCD-42A4-BCEA-1B6CC025E604}';
  IID__UAEndpointSelectionPolicy: TGUID = '{79DE5541-62AA-4848-BE00-944B99745829}';
  IID__EasyUAClientAdaptableParameters: TGUID = '{6019F1FB-ED9A-409A-93D3-43C45EBA78A7}';
  IID__EasyUAClientEngineParameters: TGUID = '{CAD749B4-8F4B-49B9-9C25-CD45CA885C43}';
  CLASS_EasyUAClientInstanceParameters: TGUID = '{BC714148-D729-4F62-9D1E-BF4CF1950553}';
  CLASS_EasyUAClientMode: TGUID = '{CD5BB489-4E9A-49D9-9F07-8AA0385E93D0}';
  CLASS_EasyUAClientSharedParameters: TGUID = '{F77A673B-9C49-4511-BDA8-97CA0DD1F48F}';
  CLASS_UACertificateAcceptancePolicy: TGUID = '{2CBA7587-F230-4655-88A8-D14C05F3E470}';
  CLASS_EasyUAClientAdaptableParameters: TGUID = '{8BF0C2BC-4A7B-401E-9A3F-4D09F4000A43}';
  CLASS_UAClientEngineParameters: TGUID = '{2128889E-747F-44F3-807F-874BA51887DC}';
  CLASS_UAClientMonitoredItemParameters: TGUID = '{6D9181C8-BF8F-4010-A9E8-DB8AA56A3C8A}';
  CLASS_UAClientServerApplicationParameters: TGUID = '{D40C74F9-4901-41FC-ACC0-50704FFA0E21}';
  CLASS_EasyUAClientEngineParameters: TGUID = '{06C9F127-61C2-4959-97FB-2BB3520DAAA8}';
  CLASS_UAClientSessionParameters: TGUID = '{088E204B-29F9-4336-BB86-3270673DC5CD}';
  CLASS_UAClientSubscriptionParameters: TGUID = '{E35F93F4-7F3C-4787-95D5-AF8FE737531D}';
  CLASS_UADiscoveryParameters: TGUID = '{3234D872-0EBC-4A15-A54F-CA438898F7A3}';
  CLASS_UAEndpointDescriptionChecks: TGUID = '{3681B3FF-FF83-4886-8454-92A274C07191}';
  CLASS_UAEndpointSelectionPolicy: TGUID = '{ED7D4313-690E-4241-B95D-754FD7D283FF}';
  CLASS_UAEngineException: TGUID = '{D15CCEAA-601E-45E8-953A-23151869C66B}';
  CLASS_UAEnhancedClientSessionParameters: TGUID = '{3F2A5922-8393-486D-B8D2-FD82E006971F}';
  CLASS_UAHostParameters: TGUID = '{9576F630-4954-405E-AB19-58AE78EACEC4}';
  CLASS_UASmartClientEngineParameters: TGUID = '{5631FC51-ECD0-408A-B48B-BC3D34EAC4E3}';
  CLASS_UASmartClientSessionParameters: TGUID = '{C1B2536E-266B-49F2-81F4-7FB0613BAD2E}';
  CLASS_UAUserInteractionParameters: TGUID = '{61BBC839-F826-4A00-A6D3-8C1E86B28580}';
  IID__UAApplicationDescription: TGUID = '{682D26C9-D9B2-4E2E-8089-DE1F3B57D93C}';
  CLASS_UAApplicationElement: TGUID = '{3D846508-1E61-411E-A668-825905CB13CE}';
  IID__UADiscoveryElement: TGUID = '{50FBEB9F-3AB0-4C8F-850B-FE7DE3D9C1A4}';
  IID__UADiscoveryElementCollection: TGUID = '{77CE0F30-375B-4F26-A772-DB53BDEE0C60}';
  IID__UAQueryApplicationsFilter: TGUID = '{9C92CE87-FCB5-44C7-8AF2-6A0404806E2A}';
  IID__UAServerOnNetwork: TGUID = '{83972BED-14E7-42F7-83A4-E226960B73DF}';
  IID__UAApplicationDiscoveryQuery: TGUID = '{A75A9B68-EA3C-4DE5-BD2F-9C272B691E0B}';
  IID__UALdsDiscoveryQuery: TGUID = '{7654C2C4-D1C6-4E17-82E2-0AFFF078981C}';
  IID__UALocalEndpointDiscoveryQuery: TGUID = '{07E1C12C-DF98-4A54-820D-FF4A36C777FF}';
  IID__UANetworkServerDiscoveryQuery: TGUID = '{CD4B741D-9B6B-42AD-9274-0FDB53DA6CB7}';
  CLASS_UAApplicationDescription: TGUID = '{229EE672-539C-4B2B-9334-3FF005CC1F6F}';
  IID__UAGlobalApplicationDiscoveryQuery: TGUID = '{8455D571-9EE7-4315-A534-AECDEA511114}';
  CLASS_UAApplicationRecordDataType: TGUID = '{AB1CDCCB-61EF-4664-A46D-002CF9686DAE}';
  CLASS_UADiscoveryElement: TGUID = '{0CE96037-6560-4EF7-9879-66FE2F65A7C8}';
  CLASS_UADiscoveryElementCollection: TGUID = '{73413B41-5FC2-483D-8D07-432A14B169B9}';
  IID__UADiscoveryQuery: TGUID = '{EB136E88-AED0-4506-B447-FF6CFFDCF4AD}';
  CLASS_UAGlobalApplicationDiscoveryQuery: TGUID = '{8CC79C48-966A-431A-9FF8-A546E7BAB56B}';
  IID__UALocalApplicationDiscoveryQuery: TGUID = '{96493275-7EEE-4214-8BF8-3E410B306E4F}';
  CLASS_UALocalApplicationDiscoveryQuery: TGUID = '{54CC01A8-15CD-4BEA-8FD9-F7D950EC7A43}';
  CLASS_UALocalEndpointDiscoveryQuery: TGUID = '{592FCBC8-DA5C-4834-A514-9BD8E109E4C0}';
  CLASS_UANetworkServerDiscoveryQuery: TGUID = '{5F63AD5A-6C88-4B97-93CC-A4E630C9FB9A}';
  CLASS_UAQueryApplicationsFilter: TGUID = '{6A98CE77-1543-4AEA-B80C-AC4ECCFFBF7E}';
  CLASS_UAServerOnNetwork: TGUID = '{2746D7F4-BA66-4275-9213-07BD6C407876}';
  IID__UADataTypeSchema: TGUID = '{F8D9BBA1-5B21-48EB-BCCC-50A003C8F948}';
  IID__UADataTypeDefinition: TGUID = '{2D7CF054-797B-4B23-96F5-48B88962C797}';
  IID__UAEnumValue: TGUID = '{E7ECB7FC-45DB-4C78-B7A2-9BAF140482A4}';
  CLASS_UAEnumValue: TGUID = '{D0C17637-ED2E-40B0-853E-1DEA81EE7CAE}';
  IID__UAStructureDefinition: TGUID = '{557DABBD-11B6-40B5-84C0-FFB5BEDE7186}';
  IID__UAStructureField: TGUID = '{6300AC71-9922-48C6-990D-423BE54CA6F2}';
  IID__UADataTypeDescription: TGUID = '{2D2F3602-7A08-48E2-A83E-9EFE9C4A204B}';
  IID__UASimpleTypeDescription: TGUID = '{B37CFECE-AA5E-4D72-A763-A291394EA5B2}';
  IID__UAStructureDescription: TGUID = '{B6C6791C-0102-4701-AFA6-5C1048704680}';
  IID__UADataTypeInfo: TGUID = '{52E99547-2CA9-450E-B872-34A1BC032197}';
  IID__UAEnumFieldInfo: TGUID = '{1E2DC657-40B3-41E7-BA9F-38CCF8E8611A}';
  IID__UAEnumTypeInfo: TGUID = '{2C551603-5AA5-4166-B949-7E42E66B6163}';
  IID__UASimpleTypeInfo: TGUID = '{6AFC24DF-3CB1-4DA1-8D1C-4BD2D5B5ECCD}';
  IID__UAStructureFieldInfo: TGUID = '{A40C030B-5364-4289-98E8-B508D940C190}';
  IID__UAStructureTypeInfo: TGUID = '{384E7A1E-49D8-4A95-8673-5C0FD4EAD22B}';
  IID__UAEnumDefinition: TGUID = '{CAC978FF-365B-4D9F-BE01-C4E887A3E505}';
  IID__UAEnumDescription: TGUID = '{239D6A62-5CB7-483C-A9D9-03BBA45A782E}';
  CLASS_UADataTypeInfo: TGUID = '{2CABE3D3-D49D-4AD7-95F2-85C4A6C8837F}';
  IID__UAHeaderDataTypeSchema: TGUID = '{8EE117C9-D664-4C92-B028-9A1788D89CF7}';
  CLASS_UAEnumDefinition: TGUID = '{2B473216-74B9-44FD-85E4-F1E1625CE805}';
  CLASS_UAEnumDescription: TGUID = '{020C8AF8-1A78-45A4-A5BD-0E9ACE05323A}';
  IID__UAEnumField: TGUID = '{1FC3A7C6-63C5-4B44-A88D-7040A8FA9EC2}';
  CLASS_UAEnumFieldInfo: TGUID = '{A85F99E4-454E-4E55-97D9-92D2344FD9EF}';
  CLASS_UAEnumTypeInfo: TGUID = '{37776780-689B-44B8-A327-5988AB8A0923}';
  CLASS_UAEnumField: TGUID = '{A70C95DD-A5C4-4516-8F01-3CA835AC27F5}';
  CLASS_UAHeaderDataTypeSchema: TGUID = '{CCD070E5-B6CC-454E-9B7F-E30A336BFD9D}';
  CLASS_UADataSetMetaData: TGUID = '{4F957DCE-3C60-4251-9BEE-24535D42A302}';
  CLASS_UASimpleTypeDescription: TGUID = '{AF4FE3ED-A772-4C21-A31F-11F19BEFA1FE}';
  CLASS_UASimpleTypeInfo: TGUID = '{E0E0B6DE-D771-447F-820E-2D4F0B2CBE30}';
  CLASS_UAStructureDefinition: TGUID = '{634B953D-65D1-4116-8934-999C5F32831E}';
  CLASS_UAStructureDescription: TGUID = '{994A5FF5-3F9C-4744-904A-49A58000F173}';
  CLASS_UAStructureField: TGUID = '{974D8F38-34EC-4E3A-A966-FF8F7964B970}';
  CLASS_UAStructureFieldInfo: TGUID = '{ADB4B86E-77F6-43D3-961C-5AA6FAC45C7B}';
  CLASS_UAStructureTypeInfo: TGUID = '{0D3A166E-44C6-40C0-A942-AADA18542561}';
  IID__UADataTypeDescriptor: TGUID = '{81E0CC77-C55C-417D-AA82-13E4F654B5A0}';
  IID__UADataTypeSystemParameters: TGUID = '{81F5925A-933B-4B7C-917E-837689DAF84D}';
  IID__UAOpcBinaryDtsParameters: TGUID = '{3E3FED36-A742-4B82-9BA5-87F8E1BA0E6D}';
  CLASS_UAServerDtmpParameters: TGUID = '{98E7A0DC-D592-4CBE-AADF-20F7320ACF62}';
  IID__UAXmlSchemaDtsParameters: TGUID = '{62935881-3269-488A-AB88-ADC9C5AAFF8A}';
  IID__UADataTypeDefinitionProvider: TGUID = '{1B8314F6-96ED-4DFB-8C65-50BAF38EDA26}';
  CLASS_UADataTypeDescriptor: TGUID = '{AED76FCB-7835-4064-B80D-027EA36A2F2B}';
  IID__UADataTypeDictionaryProvider: TGUID = '{1FF6F3C4-1987-45D4-94AC-96DA40E4F99E}';
  IID__UADataTypeModelProvider: TGUID = '{0149DEAE-D4FA-4281-89B5-C0017A9BCA52}';
  IID__UADataTypeSystem: TGUID = '{627AD4C1-0408-401C-AE42-065CFA5A908F}';
  CLASS_UADataTypeSystemParameters: TGUID = '{63338BC5-9EEC-4DB4-BB18-42582087D36A}';
  CLASS_UAOpcBinaryDtsParameters: TGUID = '{B46A2E02-5D92-4A25-9112-A349FFED4B13}';
  CLASS_UAServerDtmpPluginParameters: TGUID = '{C3ACE5A6-0AAB-4608-816F-773746386D42}';
  CLASS_UAXmlSchemaDtsParameters: TGUID = '{A5E0072C-7702-49FC-B3FD-2016EE0C8CC8}';
  IID__UAEUInformation: TGUID = '{3D500236-2A8B-493A-9910-BC0797CF8542}';
  IID__UARange: TGUID = '{7AF3786A-C1B7-44E3-9DA2-7EC79A303B2E}';
  CLASS_UAEUInformation: TGUID = '{2C6C44D7-7437-4F60-BF1C-5F783F4BDDCD}';
  CLASS_UARange: TGUID = '{9BB59BA3-1743-4A0B-B6C5-3B3CA389B0E7}';
  CLASS_ComEasyUAClientConnectionMonitoring: TGUID = '{A4DFD966-06AA-4874-9E24-436E2C235652}';
  DIID_DEasyUAClientEvents: TGUID = '{C93C8EFE-A670-42BE-94B0-0D71D10B47C5}';
  DIID_DEasyUAClientManagementEvents: TGUID = '{06F4301F-D43B-414F-8E93-A8B96D64FA93}';
  IID__EasyUAClient: TGUID = '{910344C0-F2A0-42D2-A65E-F3800437F52A}';
  IID__EasyUAClientManagement: TGUID = '{A1C5264B-D40E-4AB2-8A12-3AC09A4E947D}';
  CLASS_EasyUAClientSelector: TGUID = '{F783E1C2-6674-4F69-AC4E-25C154A3C56C}';
  CLASS_EasyUAEngineException: TGUID = '{C787F79A-851E-4DFD-A75B-68FB4C86E303}';
  CLASS_EasyUASpecializedClient: TGUID = '{576AF9AD-AB01-45C4-89AF-102A1458CCF0}';
  CLASS_StringUANodeIdDictionary: TGUID = '{079256AC-458A-4310-B94E-7D9800372A05}';
  IID__UAAttributeData: TGUID = '{BD5F0FD1-2C0A-4735-9A4C-3321ED35C123}';
  CLASS_UAAttributeField: TGUID = '{EB40BE1D-2698-4376-872A-426F7AB7656E}';
  CLASS_UAAttributeFieldCollection: TGUID = '{CA8E768C-5EDF-451B-BDAB-BA01A61A96C4}';
  CLASS_UABrowseParameters: TGUID = '{A6B2314A-ECE4-42AF-8E5E-6A5222657242}';
  IID__UACallServiceException: TGUID = '{5318A0D0-CBFE-407F-9ED8-49814B480370}';
  CLASS_UADataChangeFilter: TGUID = '{69C23B34-9B8F-4999-A815-D873520581AE}';
  CLASS_UAAttributeData: TGUID = '{C6820823-AFDF-4368-A8E8-D85075ECF5CA}';
  CLASS_UAEndpointDescriptor: TGUID = '{F4773A26-7A58-4349-8326-873629FC483F}';
  CLASS_UAEndpointDescriptorCollection: TGUID = '{F6E3B776-0BFD-4116-9306-A7A8BC417000}';
  CLASS_UAEndpointDescriptorUANodeIdDictionary: TGUID = '{E42458F2-34A7-4A87-9F6C-8CB98A5C3859}';
  CLASS_UAEventData: TGUID = '{907185B4-264D-4838-AC2E-F68E36B01845}';
  CLASS_UAEventFilter: TGUID = '{BEF1C056-D153-4049-B3D5-2FD57E3049EC}';
  CLASS_UAExtensionObject: TGUID = '{3EB51E10-7A60-4BEF-ADD5-6DAFC053BBBD}';
  CLASS_UAFieldResultDictionary: TGUID = '{8BDA3D94-4ABB-445F-B7C2-D7E81CED4025}';
  CLASS_UAIndexRange: TGUID = '{761CC6CA-BE3D-4034-BD5E-17A63AA55BCF}';
  CLASS_UAIndexRangeList: TGUID = '{92147D88-FA19-4C0A-B63E-9DCD30CE6DC4}';
  CLASS_UAKeyValueDictionary: TGUID = '{6141B86E-6B7C-429B-9D48-009B99C36964}';
  CLASS_UAKeyValuePair: TGUID = '{3C740834-CD69-42E4-BA7F-482BA13712C0}';
  IID__UAMethodOutputException: TGUID = '{98B7AE16-7B8E-4868-934A-B5BB38AD0485}';
  CLASS_UAMonitoringParameters: TGUID = '{1517B3D6-C70D-462A-9C36-5A3C32C32A85}';
  CLASS_UANodeDescriptor: TGUID = '{90BFBFFE-2E2A-4B09-818F-2994AFBEBA63}';
  CLASS_UANodeIdUAApplicationElementDictionary: TGUID = '{CDA1D5BD-DB12-41D7-B769-0E954517CDD7}';
  CLASS_UAReadParameters: TGUID = '{8E8DD329-8822-46E5-89D8-79DF3F3B8C3C}';
  CLASS_UAMethodOutputException: TGUID = '{DDC51C56-2E81-40D6-AF65-9E28D3B11499}';
  CLASS_UACallServiceException: TGUID = '{E3DC60A3-FA7D-4901-B893-B714581DFBE4}';
  CLASS_UAServiceResult: TGUID = '{FD8498B2-E9F1-4636-98FB-8462190804D0}';
  CLASS_UAStatusCode: TGUID = '{7E377F45-8FD7-4193-A3BD-090E04864AE5}';
  CLASS_UAStatusCodeException: TGUID = '{084E2E96-4D23-464D-9BBC-C0EB3A666A7D}';
  CLASS_UASubscriptionParameters: TGUID = '{923C6BDE-C564-4544-85A6-5F5C7B3D0B0A}';
  CLASS_UATimeZoneData: TGUID = '{3F4224AD-6683-4067-9270-A3D241544A56}';
  CLASS_UAComplexDataParameters: TGUID = '{18D80FB0-78AE-4F75-AC79-B03F32F46D05}';
  IID__UAGenericObject: TGUID = '{51B9880D-7CA2-4532-9099-22AB2D463604}';
  CLASS_UAComplexDataClientPluginParameters: TGUID = '{830D6E6A-2BA1-4FB2-8EB1-83F9352C0E49}';
  CLASS_UAGenericObject: TGUID = '{4A00DA64-BA81-474A-B0AC-2014E469A0C8}';
  IID__UANodeBrowseFilter: TGUID = '{89938C70-AB6D-4E26-9208-83A1F5E8A4AB}';
  CLASS_UANodeBrowseFilter: TGUID = '{11E22E80-E639-4330-996D-8A80CB6F5A0F}';
  CLASS_AbstractEasyUAClientServerApplication: TGUID = '{0CABA38D-0D77-40FE-BCDE-FDD8981B96AA}';
  IID__UACertificateTypeElementCollection: TGUID = '{BAA54122-5071-4DF4-8CA5-1CF17857C24B}';
  IID__UACertificateRequestParameters: TGUID = '{2D9D29A3-02C1-4643-A9FE-9B665CCEF2E3}';
  IID__UACertificateTypeElement: TGUID = '{A229E427-67FC-4572-8F9A-8E3669275894}';
  IID__UACertificateArguments: TGUID = '{CB255BA0-8B5C-4BBE-9A86-98FF964C36A5}';
  CLASS_UACertificateArguments: TGUID = '{89389B00-51DC-4320-A5ED-856C41DFB7E6}';
  IID__UAValidateCertificateArguments: TGUID = '{52EA37D5-94AA-4EB9-9159-AF32E5D3C766}';
  IID__UAExportCertificateArguments: TGUID = '{256110C5-CB3E-4FE6-9C0D-BBE67C1FE56D}';
  IID__UAIngestCertificateArguments: TGUID = '{F863E242-D441-426F-89A1-E74949181DB0}';
  CLASS_UAIngestCertificateArguments: TGUID = '{6F6E6E03-C683-4AF7-8D80-9184DF30699F}';
  IID__UAObtainCertificateArguments: TGUID = '{DED308CF-6087-4FA9-ABE7-4884279C1576}';
  CLASS_UAValidateCertificateArguments: TGUID = '{A35EF227-E187-42CF-B3C9-A256132EE0B1}';
  DIID_DEasyUAClientServerApplicationEvents: TGUID = '{EC6416F4-BEEB-4DB9-A698-22626D5ACFF1}';
  IID__EasyUAApplication: TGUID = '{BACB537A-2156-4EC0-A9DB-495830D16CF7}';
  CLASS_NetSdkEasyUAClientServerApplication: TGUID = '{669E0C81-104E-44D7-A6FB-BCD5F1DDFF94}';
  IID__UAAssureCertificateArguments: TGUID = '{A43AD8D1-11BD-4F9B-AC57-0CF9A4984AFC}';
  CLASS_UAAssureCertificateArguments: TGUID = '{DCD438B5-C31F-416F-9F3F-B3ABAA316321}';
  CLASS_UACertificateRequestParameters: TGUID = '{CDCB6AD2-4BB3-467A-BE96-1FE1F53C680F}';
  CLASS_UACertificateTypeElement: TGUID = '{5D0E1B0E-4495-458F-A6E3-0A4168AE4B4E}';
  CLASS_UACertificateTypeElementCollection: TGUID = '{DA516A55-1CAC-4CD7-838C-80D3EA89FC45}';
  IID__UACreateCertificateArguments: TGUID = '{51F1EA7A-6F62-4756-A3CD-3183D0DE84B3}';
  CLASS_UAExportCertificateArguments: TGUID = '{DF9AA87F-5FC2-4AF4-82EC-5189209B1A80}';
  IID__UAImportCertificateArguments: TGUID = '{CBD68FFD-F371-4719-9C6B-52D280FFD8CC}';
  CLASS_UAImportCertificateArguments: TGUID = '{F5C4C103-18D6-4D1A-B179-CD33C99679BA}';
  CLASS_UAObtainCertificateArguments: TGUID = '{A560BF3C-4DC8-434E-9510-9100B9A24E94}';
  CLASS_UACreateCertificateArguments: TGUID = '{6734FCE5-BF4E-47D3-8A06-823DE9F1EDE0}';
  IID__UABaseEventObject: TGUID = '{58D1F42B-5E0F-43F9-9A4F-CDEE95DC922F}';
  IID__EasyUAAlarmsAndConditionsClient: TGUID = '{E1916D61-718B-41E2-9F77-D012769D29E6}';
  CLASS_UABaseEventObject: TGUID = '{ED33148F-DC26-4229-AF4C-41EA46A27831}';
  IID__UAApplicationManifest: TGUID = '{2C6D6170-BDF2-4932-BDBF-B82E8E8CC6B6}';
  CLASS_UAApplicationManifest: TGUID = '{BBCB996F-93D7-49BB-B595-7430D42B570B}';
  IID__UANodeElementCollection: TGUID = '{F0541F57-231E-4A80-83A2-23DA5BF73140}';
  IID__UANodeIdCollection: TGUID = '{6334ED0F-0CD9-4580-9716-41447B458F85}';
  IID__UANodeIdSet: TGUID = '{6AAF2015-1F72-43F4-A301-7590BF3FA4A1}';
  IID__UAQualifiedNameCollection: TGUID = '{41932E02-2889-404A-B769-6557B74B6B87}';
  IID__UAQualifiedNameSet: TGUID = '{D97A1F7A-7BA0-46E8-BE95-C685AE94F3C5}';
  IID__UANamespaceQualified: TGUID = '{3183FB7B-4A61-4AE6-99DA-5D458F9E4C8E}';
  IID__UAQualifiedName: TGUID = '{C33E897C-F0F5-4ADD-B836-1904602FF0CF}';
  IID__UANodeElement: TGUID = '{6D3A4DCC-A15C-43B6-9472-3BF8339144E9}';
  IID__UANodeIdFormatException: TGUID = '{44629368-6947-4DF4-A2AC-B6B4D1D69117}';
  IID__UAQualifiedNameFormatException: TGUID = '{1A3F1A78-2F42-4BD7-924F-55771EFB5E57}';
  IID__UANodeIdParser: TGUID = '{4A66442A-68A8-4FCD-BB63-F4DA1BC8CE2A}';
  IID__UAQualifiedNameParser: TGUID = '{17B3E4AF-76E9-440D-8B76-117E574F0574}';
  CLASS_UANodeIdFormatException: TGUID = '{7AFA22BC-070F-4266-B286-3D910F91F5FC}';
  CLASS_UANodeIdParser: TGUID = '{AB36C612-6FCE-4013-8F3F-59BE26DC387C}';
  CLASS_UAQualifiedNameFormatException: TGUID = '{C163F819-B1EC-4C88-AF6D-58CF89BD75CA}';
  CLASS_UAQualifiedNameParser: TGUID = '{5C8C6E25-2D58-41E2-9E05-C0D6568AB138}';
  IID__UANodeId: TGUID = '{888C25BD-F172-47AC-81C6-4451F084C995}';
  CLASS_UANodeElement: TGUID = '{EF28FB7A-CF19-4288-ACC3-5A87085D7ECC}';
  CLASS_UANodeElementCollection: TGUID = '{F10BE69C-6077-4A5C-A76E-EBD079098D6F}';
  CLASS_UANodeId: TGUID = '{6764BAF9-CA48-42E5-8485-09321CD6A01C}';
  CLASS_UANodeIdCollection: TGUID = '{A8FC28A7-BE89-474F-8476-1DC15C56D356}';
  CLASS_UANodeIdSet: TGUID = '{0A007C33-D273-44D2-8EEA-FB4A77B26ACB}';
  CLASS_UAQualifiedName: TGUID = '{2673FDA6-CDA0-41D4-9D2F-BFD1B99EAACA}';
  CLASS_UAQualifiedNameCollection: TGUID = '{3744F21C-7A5E-44D5-96FD-DA62E20CC2B9}';
  CLASS_UAQualifiedNameSet: TGUID = '{5E1FBBF6-EA18-408D-A4D4-F4458F7ED4CB}';

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
// Constants for enum UAAttributeId
type
  UAAttributeId = TOleEnum;
const
  UAAttributeId_None = $00000000;
  UAAttributeId_AccessLevel = $00000011;
  UAAttributeId_ArrayDimensions = $00000010;
  UAAttributeId_AccessLevelEx = $0000001B;
  UAAttributeId_AccessRestrictions = $0000001A;
  UAAttributeId_BrowseName = $00000003;
  UAAttributeId_ContainsNoLoops = $0000000B;
  UAAttributeId_DataType = $0000000E;
  UAAttributeId_DataTypeDefinition = $00000017;
  UAAttributeId_Description = $00000005;
  UAAttributeId_DisplayName = $00000004;
  UAAttributeId_EventNotifier = $0000000C;
  UAAttributeId_Executable = $00000015;
  UAAttributeId_Historizing = $00000014;
  UAAttributeId_InverseName = $0000000A;
  UAAttributeId_IsAbstract = $00000008;
  UAAttributeId_MinimumSamplingInterval = $00000013;
  UAAttributeId_NodeClass = $00000002;
  UAAttributeId_NodeId = $00000001;
  UAAttributeId_RolePermissions = $00000018;
  UAAttributeId_Symmetric = $00000009;
  UAAttributeId_UserAccessLevel = $00000012;
  UAAttributeId_UserExecutable = $00000016;
  UAAttributeId_UserRolePermissions = $00000019;
  UAAttributeId_UserWriteMask = $00000007;
  UAAttributeId_Value = $0000000D;
  UAAttributeId_ValueRank = $0000000F;
  UAAttributeId_WriteMask = $00000006;

// Constants for enum UABrowseDirections
type
  UABrowseDirections = TOleEnum;
const
  UABrowseDirections_None = $00000000;
  UABrowseDirections_Forward = $00000001;
  UABrowseDirections_Inverse = $00000002;
  UABrowseDirections_Both = $00000003;

// Constants for enum UABuiltInType
type
  UABuiltInType = TOleEnum;
const
  UABuiltInType_Null = $00000000;
  UABuiltInType_Boolean = $00000001;
  UABuiltInType_SByte = $00000002;
  UABuiltInType_Byte = $00000003;
  UABuiltInType_Int16 = $00000004;
  UABuiltInType_UInt16 = $00000005;
  UABuiltInType_Int32 = $00000006;
  UABuiltInType_UInt32 = $00000007;
  UABuiltInType_Int64 = $00000008;
  UABuiltInType_UInt64 = $00000009;
  UABuiltInType_Float = $0000000A;
  UABuiltInType_Double = $0000000B;
  UABuiltInType_String = $0000000C;
  UABuiltInType_DateTime = $0000000D;
  UABuiltInType_Guid = $0000000E;
  UABuiltInType_ByteString = $0000000F;
  UABuiltInType_XmlElement = $00000010;
  UABuiltInType_NodeId = $00000011;
  UABuiltInType_ExpandedNodeId = $00000012;
  UABuiltInType_StatusCode = $00000013;
  UABuiltInType_QualifiedName = $00000014;
  UABuiltInType_LocalizedText = $00000015;
  UABuiltInType_ExtensionObject = $00000016;
  UABuiltInType_DataValue = $00000017;
  UABuiltInType_Variant = $00000018;
  UABuiltInType_DiagnosticInfo = $00000019;
  UABuiltInType_Number = $0000001A;
  UABuiltInType_Integer = $0000001B;
  UABuiltInType_UInteger = $0000001C;
  UABuiltInType_Enumeration = $0000001D;

// Constants for enum UACodeBits
type
  UACodeBits = TOleEnum;
const
  UACodeBits_Good = $00000000;
  UACodeBits_Uncertain = $00004000;
  UACodeBits_Bad = $00008000;
  UACodeBits_BadUnexpectedError = $00008001;
  UACodeBits_BadInternalError = $00008002;
  UACodeBits_BadOutOfMemory = $00008003;
  UACodeBits_BadResourceUnavailable = $00008004;
  UACodeBits_BadCommunicationError = $00008005;
  UACodeBits_BadEncodingError = $00008006;
  UACodeBits_BadDecodingError = $00008007;
  UACodeBits_BadEncodingLimitsExceeded = $00008008;
  UACodeBits_BadRequestTooLarge = $000080B8;
  UACodeBits_BadResponseTooLarge = $000080B9;
  UACodeBits_BadUnknownResponse = $00008009;
  UACodeBits_BadTimeout = $0000800A;
  UACodeBits_BadServiceUnsupported = $0000800B;
  UACodeBits_BadShutdown = $0000800C;
  UACodeBits_BadServerNotConnected = $0000800D;
  UACodeBits_BadServerHalted = $0000800E;
  UACodeBits_BadNothingToDo = $0000800F;
  UACodeBits_BadTooManyOperations = $00008010;
  UACodeBits_BadTooManyMonitoredItems = $000080DB;
  UACodeBits_BadDataTypeIdUnknown = $00008011;
  UACodeBits_BadCertificateInvalid = $00008012;
  UACodeBits_BadSecurityChecksFailed = $00008013;
  UACodeBits_BadCertificatePolicyCheckFailed = $00008114;
  UACodeBits_BadCertificateTimeInvalid = $00008014;
  UACodeBits_BadCertificateIssuerTimeInvalid = $00008015;
  UACodeBits_BadCertificateHostNameInvalid = $00008016;
  UACodeBits_BadCertificateUriInvalid = $00008017;
  UACodeBits_BadCertificateUseNotAllowed = $00008018;
  UACodeBits_BadCertificateIssuerUseNotAllowed = $00008019;
  UACodeBits_BadCertificateUntrusted = $0000801A;
  UACodeBits_BadCertificateRevocationUnknown = $0000801B;
  UACodeBits_BadCertificateIssuerRevocationUnknown = $0000801C;
  UACodeBits_BadCertificateRevoked = $0000801D;
  UACodeBits_BadCertificateIssuerRevoked = $0000801E;
  UACodeBits_BadCertificateChainIncomplete = $0000810D;
  UACodeBits_BadUserAccessDenied = $0000801F;
  UACodeBits_BadIdentityTokenInvalid = $00008020;
  UACodeBits_BadIdentityTokenRejected = $00008021;
  UACodeBits_BadSecureChannelIdInvalid = $00008022;
  UACodeBits_BadInvalidTimestamp = $00008023;
  UACodeBits_BadNonceInvalid = $00008024;
  UACodeBits_BadSessionIdInvalid = $00008025;
  UACodeBits_BadSessionClosed = $00008026;
  UACodeBits_BadSessionNotActivated = $00008027;
  UACodeBits_BadSubscriptionIdInvalid = $00008028;
  UACodeBits_BadRequestHeaderInvalid = $0000802A;
  UACodeBits_BadTimestampsToReturnInvalid = $0000802B;
  UACodeBits_BadRequestCancelledByClient = $0000802C;
  UACodeBits_BadTooManyArguments = $000080E5;
  UACodeBits_BadLicenseExpired = $0000810E;
  UACodeBits_BadLicenseLimitsExceeded = $0000810F;
  UACodeBits_BadLicenseNotAvailable = $00008110;
  UACodeBits_GoodSubscriptionTransferred = $0000002D;
  UACodeBits_GoodCompletesAsynchronously = $0000002E;
  UACodeBits_GoodOverload = $0000002F;
  UACodeBits_GoodClamped = $00000030;
  UACodeBits_BadNoCommunication = $00008031;
  UACodeBits_BadWaitingForInitialData = $00008032;
  UACodeBits_BadNodeIdInvalid = $00008033;
  UACodeBits_BadNodeIdUnknown = $00008034;
  UACodeBits_BadAttributeIdInvalid = $00008035;
  UACodeBits_BadIndexRangeInvalid = $00008036;
  UACodeBits_BadIndexRangeNoData = $00008037;
  UACodeBits_BadDataEncodingInvalid = $00008038;
  UACodeBits_BadDataEncodingUnsupported = $00008039;
  UACodeBits_BadNotReadable = $0000803A;
  UACodeBits_BadNotWritable = $0000803B;
  UACodeBits_BadOutOfRange = $0000803C;
  UACodeBits_BadNotSupported = $0000803D;
  UACodeBits_BadNotFound = $0000803E;
  UACodeBits_BadObjectDeleted = $0000803F;
  UACodeBits_BadNotImplemented = $00008040;
  UACodeBits_BadMonitoringModeInvalid = $00008041;
  UACodeBits_BadMonitoredItemIdInvalid = $00008042;
  UACodeBits_BadMonitoredItemFilterInvalid = $00008043;
  UACodeBits_BadMonitoredItemFilterUnsupported = $00008044;
  UACodeBits_BadFilterNotAllowed = $00008045;
  UACodeBits_BadStructureMissing = $00008046;
  UACodeBits_BadEventFilterInvalid = $00008047;
  UACodeBits_BadContentFilterInvalid = $00008048;
  UACodeBits_BadFilterOperatorInvalid = $000080C1;
  UACodeBits_BadFilterOperatorUnsupported = $000080C2;
  UACodeBits_BadFilterOperandCountMismatch = $000080C3;
  UACodeBits_BadFilterOperandInvalid = $00008049;
  UACodeBits_BadFilterElementInvalid = $000080C4;
  UACodeBits_BadFilterLiteralInvalid = $000080C5;
  UACodeBits_BadContinuationPointInvalid = $0000804A;
  UACodeBits_BadNoContinuationPoints = $0000804B;
  UACodeBits_BadReferenceTypeIdInvalid = $0000804C;
  UACodeBits_BadBrowseDirectionInvalid = $0000804D;
  UACodeBits_BadNodeNotInView = $0000804E;
  UACodeBits_BadNumericOverflow = $00008112;
  UACodeBits_BadServerUriInvalid = $0000804F;
  UACodeBits_BadServerNameMissing = $00008050;
  UACodeBits_BadDiscoveryUrlMissing = $00008051;
  UACodeBits_BadSempahoreFileMissing = $00008052;
  UACodeBits_BadRequestTypeInvalid = $00008053;
  UACodeBits_BadSecurityModeRejected = $00008054;
  UACodeBits_BadSecurityPolicyRejected = $00008055;
  UACodeBits_BadTooManySessions = $00008056;
  UACodeBits_BadUserSignatureInvalid = $00008057;
  UACodeBits_BadApplicationSignatureInvalid = $00008058;
  UACodeBits_BadNoValidCertificates = $00008059;
  UACodeBits_BadIdentityChangeNotSupported = $000080C6;
  UACodeBits_BadRequestCancelledByRequest = $0000805A;
  UACodeBits_BadParentNodeIdInvalid = $0000805B;
  UACodeBits_BadReferenceNotAllowed = $0000805C;
  UACodeBits_BadNodeIdRejected = $0000805D;
  UACodeBits_BadNodeIdExists = $0000805E;
  UACodeBits_BadNodeClassInvalid = $0000805F;
  UACodeBits_BadBrowseNameInvalid = $00008060;
  UACodeBits_BadBrowseNameDuplicated = $00008061;
  UACodeBits_BadNodeAttributesInvalid = $00008062;
  UACodeBits_BadTypeDefinitionInvalid = $00008063;
  UACodeBits_BadSourceNodeIdInvalid = $00008064;
  UACodeBits_BadTargetNodeIdInvalid = $00008065;
  UACodeBits_BadDuplicateReferenceNotAllowed = $00008066;
  UACodeBits_BadInvalidSelfReference = $00008067;
  UACodeBits_BadReferenceLocalOnly = $00008068;
  UACodeBits_BadNoDeleteRights = $00008069;
  UACodeBits_UncertainReferenceNotDeleted = $000040BC;
  UACodeBits_BadServerIndexInvalid = $0000806A;
  UACodeBits_BadViewIdUnknown = $0000806B;
  UACodeBits_BadViewTimestampInvalid = $000080C9;
  UACodeBits_BadViewParameterMismatch = $000080CA;
  UACodeBits_BadViewVersionInvalid = $000080CB;
  UACodeBits_UncertainNotAllNodesAvailable = $000040C0;
  UACodeBits_GoodResultsMayBeIncomplete = $000000BA;
  UACodeBits_BadNotTypeDefinition = $000080C8;
  UACodeBits_UncertainReferenceOutOfServer = $0000406C;
  UACodeBits_BadTooManyMatches = $0000806D;
  UACodeBits_BadQueryTooComplex = $0000806E;
  UACodeBits_BadNoMatch = $0000806F;
  UACodeBits_BadMaxAgeInvalid = $00008070;
  UACodeBits_BadSecurityModeInsufficient = $000080E6;
  UACodeBits_BadHistoryOperationInvalid = $00008071;
  UACodeBits_BadHistoryOperationUnsupported = $00008072;
  UACodeBits_BadInvalidTimestampArgument = $000080BD;
  UACodeBits_BadWriteNotSupported = $00008073;
  UACodeBits_BadTypeMismatch = $00008074;
  UACodeBits_BadMethodInvalid = $00008075;
  UACodeBits_BadArgumentsMissing = $00008076;
  UACodeBits_BadNotExecutable = $00008111;
  UACodeBits_BadTooManySubscriptions = $00008077;
  UACodeBits_BadTooManyPublishRequests = $00008078;
  UACodeBits_BadNoSubscription = $00008079;
  UACodeBits_BadSequenceNumberUnknown = $0000807A;
  UACodeBits_GoodRetransmissionQueueNotSupported = $000000DF;
  UACodeBits_BadMessageNotAvailable = $0000807B;
  UACodeBits_BadInsufficientClientProfile = $0000807C;
  UACodeBits_BadStateNotActive = $000080BF;
  UACodeBits_BadAlreadyExists = $00008115;
  UACodeBits_BadTcpServerTooBusy = $0000807D;
  UACodeBits_BadTcpMessageTypeInvalid = $0000807E;
  UACodeBits_BadTcpSecureChannelUnknown = $0000807F;
  UACodeBits_BadTcpMessageTooLarge = $00008080;
  UACodeBits_BadTcpNotEnoughResources = $00008081;
  UACodeBits_BadTcpInternalError = $00008082;
  UACodeBits_BadTcpEndpointUrlInvalid = $00008083;
  UACodeBits_BadRequestInterrupted = $00008084;
  UACodeBits_BadRequestTimeout = $00008085;
  UACodeBits_BadSecureChannelClosed = $00008086;
  UACodeBits_BadSecureChannelTokenUnknown = $00008087;
  UACodeBits_BadSequenceNumberInvalid = $00008088;
  UACodeBits_BadProtocolVersionUnsupported = $000080BE;
  UACodeBits_BadConfigurationError = $00008089;
  UACodeBits_BadNotConnected = $0000808A;
  UACodeBits_BadDeviceFailure = $0000808B;
  UACodeBits_BadSensorFailure = $0000808C;
  UACodeBits_BadOutOfService = $0000808D;
  UACodeBits_BadDeadbandFilterInvalid = $0000808E;
  UACodeBits_UncertainNoCommunicationLastUsableValue = $0000408F;
  UACodeBits_UncertainLastUsableValue = $00004090;
  UACodeBits_UncertainSubstituteValue = $00004091;
  UACodeBits_UncertainInitialValue = $00004092;
  UACodeBits_UncertainSensorNotAccurate = $00004093;
  UACodeBits_UncertainEngineeringUnitsExceeded = $00004094;
  UACodeBits_UncertainSubNormal = $00004095;
  UACodeBits_GoodLocalOverride = $00000096;
  UACodeBits_BadRefreshInProgress = $00008097;
  UACodeBits_BadConditionAlreadyDisabled = $00008098;
  UACodeBits_BadConditionAlreadyEnabled = $000080CC;
  UACodeBits_BadConditionDisabled = $00008099;
  UACodeBits_BadEventIdUnknown = $0000809A;
  UACodeBits_BadEventNotAcknowledgeable = $000080BB;
  UACodeBits_BadDialogNotActive = $000080CD;
  UACodeBits_BadDialogResponseInvalid = $000080CE;
  UACodeBits_BadConditionBranchAlreadyAcked = $000080CF;
  UACodeBits_BadConditionBranchAlreadyConfirmed = $000080D0;
  UACodeBits_BadConditionAlreadyShelved = $000080D1;
  UACodeBits_BadConditionNotShelved = $000080D2;
  UACodeBits_BadShelvingTimeOutOfRange = $000080D3;
  UACodeBits_BadNoData = $0000809B;
  UACodeBits_BadBoundNotFound = $000080D7;
  UACodeBits_BadBoundNotSupported = $000080D8;
  UACodeBits_BadDataLost = $0000809D;
  UACodeBits_BadDataUnavailable = $0000809E;
  UACodeBits_BadEntryExists = $0000809F;
  UACodeBits_BadNoEntryExists = $000080A0;
  UACodeBits_BadTimestampNotSupported = $000080A1;
  UACodeBits_GoodEntryInserted = $000000A2;
  UACodeBits_GoodEntryReplaced = $000000A3;
  UACodeBits_UncertainDataSubNormal = $000040A4;
  UACodeBits_GoodNoData = $000000A5;
  UACodeBits_GoodMoreData = $000000A6;
  UACodeBits_BadAggregateListMismatch = $000080D4;
  UACodeBits_BadAggregateNotSupported = $000080D5;
  UACodeBits_BadAggregateInvalidInputs = $000080D6;
  UACodeBits_BadAggregateConfigurationRejected = $000080DA;
  UACodeBits_GoodDataIgnored = $000000D9;
  UACodeBits_BadRequestNotAllowed = $000080E4;
  UACodeBits_BadRequestNotComplete = $00008113;
  UACodeBits_BadTransactionPending = $000080E8;
  UACodeBits_BadTicketRequired = $0000811F;
  UACodeBits_BadTicketInvalid = $00008120;
  UACodeBits_BadLocked = $000080E9;
  UACodeBits_GoodEdited = $000000DC;
  UACodeBits_GoodPostActionFailed = $000000DD;
  UACodeBits_UncertainDominantValueChanged = $000040DE;
  UACodeBits_GoodDependentValueChanged = $000000E0;
  UACodeBits_BadDominantValueChanged = $000080E1;
  UACodeBits_UncertainDependentValueChanged = $000040E2;
  UACodeBits_BadDependentValueChanged = $000080E3;
  UACodeBits_GoodEdited_DependentValueChanged = $00000116;
  UACodeBits_GoodEdited_DominantValueChanged = $00000117;
  UACodeBits_GoodEdited_DominantValueChanged_DependentValueChanged = $00000118;
  UACodeBits_BadEdited_OutOfRange = $00008119;
  UACodeBits_BadInitialValue_OutOfRange = $0000811A;
  UACodeBits_BadOutOfRange_DominantValueChanged = $0000811B;
  UACodeBits_BadEdited_OutOfRange_DominantValueChanged = $0000811C;
  UACodeBits_BadOutOfRange_DominantValueChanged_DependentValueChanged = $0000811D;
  UACodeBits_BadEdited_OutOfRange_DominantValueChanged_DependentValueChanged = $0000811E;
  UACodeBits_GoodCommunicationEvent = $000000A7;
  UACodeBits_GoodShutdownEvent = $000000A8;
  UACodeBits_GoodCallAgain = $000000A9;
  UACodeBits_GoodNonCriticalTimeout = $000000AA;
  UACodeBits_BadInvalidArgument = $000080AB;
  UACodeBits_BadConnectionRejected = $000080AC;
  UACodeBits_BadDisconnect = $000080AD;
  UACodeBits_BadConnectionClosed = $000080AE;
  UACodeBits_BadInvalidState = $000080AF;
  UACodeBits_BadEndOfStream = $000080B0;
  UACodeBits_BadNoDataAvailable = $000080B1;
  UACodeBits_BadWaitingForResponse = $000080B2;
  UACodeBits_BadOperationAbandoned = $000080B3;
  UACodeBits_BadExpectedStreamToBlock = $000080B4;
  UACodeBits_BadWouldBlock = $000080B5;
  UACodeBits_BadSyntaxError = $000080B6;
  UACodeBits_BadMaxConnectionsReached = $000080B7;
  UACodeBits_UncertainTransducerInManual = $00004208;
  UACodeBits_UncertainSimulatedValue = $00004209;
  UACodeBits_UncertainSensorCalibration = $0000420A;
  UACodeBits_UncertainConfigurationError = $0000420F;
  UACodeBits_GoodCascadeInitializationAcknowledged = $00000401;
  UACodeBits_GoodCascadeInitializationRequest = $00000402;
  UACodeBits_GoodCascadeNotInvited = $00000403;
  UACodeBits_GoodCascadeNotSelected = $00000404;
  UACodeBits_GoodFaultStateActive = $00000407;
  UACodeBits_GoodInitiateFaultState = $00000408;
  UACodeBits_GoodCascade = $00000409;
  UACodeBits_BadDataSetIdInvalid = $000080E7;

// Constants for enum UADataChangeTrigger
type
  UADataChangeTrigger = TOleEnum;
const
  UADataChangeTrigger_Status = $00000000;
  UADataChangeTrigger_StatusValue = $00000001;
  UADataChangeTrigger_StatusValueTimestamp = $00000002;

// Constants for enum UADeadbandType
type
  UADeadbandType = TOleEnum;
const
  UADeadbandType_None = $00000000;
  UADeadbandType_Absolute = $00000001;
  UADeadbandType_Percent = $00000002;

// Constants for enum UAExtensionObjectType
type
  UAExtensionObjectType = TOleEnum;
const
  UAExtensionObjectType_None = $00000000;
  UAExtensionObjectType_Binary = $00000001;
  UAExtensionObjectType_Xml = $00000002;
  UAExtensionObjectType_Encodable = $00000003;

// Constants for enum UAInfoType
type
  UAInfoType = TOleEnum;
const
  UAInfoType_NotUsed = $00000000;
  UAInfoType_DataValue = $00000001;

// Constants for enum UALimitInfo
type
  UALimitInfo = TOleEnum;
const
  UALimitInfo_None = $00000000;
  UALimitInfo_Low = $00000001;
  UALimitInfo_High = $00000002;
  UALimitInfo_Constant = $00000003;

// Constants for enum UASeverity
type
  UASeverity = TOleEnum;
const
  UASeverity_GoodOrSuccess = $00000000;
  UASeverity_UncertainOrWarning = $00000001;
  UASeverity_BadOrFailure = $00000002;

// Constants for enum UAPublisherIdType
type
  UAPublisherIdType = TOleEnum;
const
  UAPublisherIdType_None = $00000000;
  UAPublisherIdType_Byte = $00000001;
  UAPublisherIdType_UInt16 = $00000002;
  UAPublisherIdType_UInt32 = $00000003;
  UAPublisherIdType_UInt64 = $00000004;
  UAPublisherIdType_String = $00000005;

// Constants for enum UAPubSubResolverKind
type
  UAPubSubResolverKind = TOleEnum;
const
  UAPubSubResolverKind_None = $00000000;
  UAPubSubResolverKind_PubSubDiscovery = $00000001;
  UAPubSubResolverKind_PublisherEndpoint = $00000002;
  UAPubSubResolverKind_PublisherFile = $00000003;

// Constants for enum UAPubSubConfigurationAccessMethod
type
  UAPubSubConfigurationAccessMethod = TOleEnum;
const
  UAPubSubConfigurationAccessMethod_ObjectAccessOnly = $00000000;
  UAPubSubConfigurationAccessMethod_LoadFromFileNodeOnly = $00000001;
  UAPubSubConfigurationAccessMethod_PreferLoadFromFileNode = $00000002;

// Constants for enum UABrokerTransportQualityOfService
type
  UABrokerTransportQualityOfService = TOleEnum;
const
  UABrokerTransportQualityOfService_NotSpecified = $00000000;
  UABrokerTransportQualityOfService_BestEffort = $00000001;
  UABrokerTransportQualityOfService_AtLeastOnce = $00000002;
  UABrokerTransportQualityOfService_AtMostOnce = $00000003;
  UABrokerTransportQualityOfService_ExactlyOnce = $00000004;

// Constants for enum UADataSetFieldContentMask
type
  UADataSetFieldContentMask = TOleEnum;
const
  UADataSetFieldContentMask_None = $00000000;
  UADataSetFieldContentMask_StatusCode = $00000001;
  UADataSetFieldContentMask_SourceTimestamp = $00000002;
  UADataSetFieldContentMask_ServerTimestamp = $00000004;
  UADataSetFieldContentMask_SourcePicoseconds = $00000008;
  UADataSetFieldContentMask_ServerPicoseconds = $00000010;
  UADataSetFieldContentMask_RawData = $00000020;

// Constants for enum UADataSetFieldFlags
type
  UADataSetFieldFlags = TOleEnum;
const
  UADataSetFieldFlags_None = $00000000;
  UADataSetFieldFlags_PromotedField = $00000001;

// Constants for enum UADataSetOrdering
type
  UADataSetOrdering = TOleEnum;
const
  UADataSetOrdering_Undefined = $00000000;
  UADataSetOrdering_AscendingWriterId = $00000001;
  UADataSetOrdering_AscendingWriterIdSingle = $00000002;

// Constants for enum UAJsonDataSetMessageContentMask
type
  UAJsonDataSetMessageContentMask = TOleEnum;
const
  UAJsonDataSetMessageContentMask_None = $00000000;
  UAJsonDataSetMessageContentMask_DataSetWriterId = $00000001;
  UAJsonDataSetMessageContentMask_MetaDataVersion = $00000002;
  UAJsonDataSetMessageContentMask_SequenceNumber = $00000004;
  UAJsonDataSetMessageContentMask_Timestamp = $00000008;
  UAJsonDataSetMessageContentMask_Status = $00000010;
  UAJsonDataSetMessageContentMask_MessageType = $00000020;
  UAJsonDataSetMessageContentMask_DataSetWriterName = $00000040;
  UAJsonDataSetMessageContentMask_ReversibleFieldEncoding = $00000080;
  UAJsonDataSetMessageContentMask_FieldEncoding1 = $00000080;
  UAJsonDataSetMessageContentMask_PublisherId = $00000100;
  UAJsonDataSetMessageContentMask_WriterGroupName = $00000200;
  UAJsonDataSetMessageContentMask_MinorVersion = $00000400;
  UAJsonDataSetMessageContentMask_FieldEncoding2 = $00000800;

// Constants for enum UAJsonNetworkMessageContentMask
type
  UAJsonNetworkMessageContentMask = TOleEnum;
const
  UAJsonNetworkMessageContentMask_None = $00000000;
  UAJsonNetworkMessageContentMask_NetworkMessageHeader = $00000001;
  UAJsonNetworkMessageContentMask_DataSetMessageHeader = $00000002;
  UAJsonNetworkMessageContentMask_SingleDataSetMessage = $00000004;
  UAJsonNetworkMessageContentMask_PublisherId = $00000008;
  UAJsonNetworkMessageContentMask_DataSetClassId = $00000010;
  UAJsonNetworkMessageContentMask_ReplyTo = $00000020;
  UAJsonNetworkMessageContentMask_WriterGroupName = $00000040;

// Constants for enum UAUadpDataSetMessageContentMask
type
  UAUadpDataSetMessageContentMask = TOleEnum;
const
  UAUadpDataSetMessageContentMask_None = $00000000;
  UAUadpDataSetMessageContentMask_Timestamp = $00000001;
  UAUadpDataSetMessageContentMask_Picoseconds = $00000002;
  UAUadpDataSetMessageContentMask_Status = $00000004;
  UAUadpDataSetMessageContentMask_MajorVersion = $00000008;
  UAUadpDataSetMessageContentMask_MinorVersion = $00000010;
  UAUadpDataSetMessageContentMask_SequenceNumber = $00000020;

// Constants for enum UAUadpNetworkMessageContentMask
type
  UAUadpNetworkMessageContentMask = TOleEnum;
const
  UAUadpNetworkMessageContentMask_None = $00000000;
  UAUadpNetworkMessageContentMask_PublisherId = $00000001;
  UAUadpNetworkMessageContentMask_GroupHeader = $00000002;
  UAUadpNetworkMessageContentMask_WriterGroupId = $00000004;
  UAUadpNetworkMessageContentMask_GroupVersion = $00000008;
  UAUadpNetworkMessageContentMask_NetworkMessageNumber = $00000010;
  UAUadpNetworkMessageContentMask_SequenceNumber = $00000020;
  UAUadpNetworkMessageContentMask_PayloadHeader = $00000040;
  UAUadpNetworkMessageContentMask_Timestamp = $00000080;
  UAUadpNetworkMessageContentMask_Picoseconds = $00000100;
  UAUadpNetworkMessageContentMask_DataSetClassId = $00000200;
  UAUadpNetworkMessageContentMask_PromotedFields = $00000400;

// Constants for enum UAIndexRangeListFormatErrorCode
type
  UAIndexRangeListFormatErrorCode = TOleEnum;
const
  UAIndexRangeListFormatErrorCode_None = $00000000;
  UAIndexRangeListFormatErrorCode_TwoEntriesMinimum = $00000001;
  UAIndexRangeListFormatErrorCode_BeginIndexFormat = $00000002;
  UAIndexRangeListFormatErrorCode_BeginIndexOverflow = $00000003;
  UAIndexRangeListFormatErrorCode_EndIndexFormat = $00000004;
  UAIndexRangeListFormatErrorCode_EndIndexOverflow = $00000005;
  UAIndexRangeListFormatErrorCode_InvalidStartIndex = $00000006;
  UAIndexRangeListFormatErrorCode_InvalidEndIndex = $00000007;
  UAIndexRangeListFormatErrorCode_StartIndexNotLess = $00000008;

// Constants for enum UABrowsePathElementType
type
  UABrowsePathElementType = TOleEnum;
const
  UABrowsePathElementType_AnyHierarchical = $00000000;
  UABrowsePathElementType_AnyComponent = $00000001;
  UABrowsePathElementType_ForwardReference = $00000002;
  UABrowsePathElementType_InverseReference = $00000003;

// Constants for enum UABrowsePathFormatErrorCode
type
  UABrowsePathFormatErrorCode = TOleEnum;
const
  UABrowsePathFormatErrorCode_None = $00000000;
  UABrowsePathFormatErrorCode_NotRelative = $00000001;
  UABrowsePathFormatErrorCode_RelativeWithNoBase = $00000002;
  UABrowsePathFormatErrorCode_UnknownReferenceNamespaceIndex = $00000009;
  UABrowsePathFormatErrorCode_UnknownReferenceTypeName = $0000000A;
  UABrowsePathFormatErrorCode_NoDefaultNamespace = $0000000B;
  UABrowsePathFormatErrorCode_EmptyRelativePath = $0000000C;
  UABrowsePathFormatErrorCode_InvalidReferenceTypeCharacter = $0000000D;
  UABrowsePathFormatErrorCode_ReferenceOrModifierExpected = $0000000E;
  UABrowsePathFormatErrorCode_StandardOrExtendedReferenceExpected = $0000000F;
  UABrowsePathFormatErrorCode_StandardOrExtendedTargetExpected = $00000010;
  UABrowsePathFormatErrorCode_ReferenceTypeEndCharacterExpected = $00000011;
  UABrowsePathFormatErrorCode_ArgumentEndCharacterExpected = $00000012;
  UABrowsePathFormatErrorCode_BrowseNameExpected = $00000013;
  UABrowsePathFormatErrorCode_InvalidNamespaceIndex = $00000014;
  UABrowsePathFormatErrorCode_NamespaceDelimiterExpected = $00000015;
  UABrowsePathFormatErrorCode_NameExpected = $00000016;
  UABrowsePathFormatErrorCode_IncompleteCharacterEscape = $00000017;
  UABrowsePathFormatErrorCode_NamespaceIndexFormat = $00000018;
  UABrowsePathFormatErrorCode_NamespaceIndexOverflow = $00000019;
  UABrowsePathFormatErrorCode_NameUnexpectedCharacter = $0000001A;
  UABrowsePathFormatErrorCode_ReferenceTypeNameFraming = $0000001B;
  UABrowsePathFormatErrorCode_NoReferenceTypeName = $0000001C;

// Constants for enum UABrowsePathParsingFlags
type
  UABrowsePathParsingFlags = TOleEnum;
const
  UABrowsePathParsingFlags_None = $00000000;
  UABrowsePathParsingFlags_ExtendedSyntax = $00000001;

// Constants for enum UATrustListMasks
type
  UATrustListMasks = TOleEnum;
const
  UATrustListMasks_None = $00000000;
  UATrustListMasks_TrustedCertificates = $00000001;
  UATrustListMasks_TrustedCrls = $00000002;
  UATrustListMasks_IssuerCertificates = $00000004;
  UATrustListMasks_IssuerCrls = $00000008;
  UATrustListMasks_All = $0000000F;

// Constants for enum UAFilterOperator
type
  UAFilterOperator = TOleEnum;
const
  UAFilterOperator_None = $00000000;
  UAFilterOperator_Equals = $00000001;
  UAFilterOperator_IsNull = $00000002;
  UAFilterOperator_GreaterThan = $00000003;
  UAFilterOperator_LessThan = $00000004;
  UAFilterOperator_GreaterThanOrEqual = $00000005;
  UAFilterOperator_LessThanOrEqual = $00000006;
  UAFilterOperator_Like = $00000007;
  UAFilterOperator_Not = $00000008;
  UAFilterOperator_Between = $00000009;
  UAFilterOperator_InList = $0000000A;
  UAFilterOperator_And = $0000000B;
  UAFilterOperator_Or = $0000000C;
  UAFilterOperator_Cast = $0000000D;
  UAFilterOperator_InView = $0000000E;
  UAFilterOperator_OfType = $0000000F;
  UAFilterOperator_RelatedTo = $00000010;
  UAFilterOperator_BitwiseAnd = $00000011;
  UAFilterOperator_BitwiseOr = $00000012;

// Constants for enum UAConfigurationSources
type
  UAConfigurationSources = TOleEnum;
const
  UAConfigurationSources_None = $00000000;
  UAConfigurationSources_Empty = $00000001;
  UAConfigurationSources_Internal = $00000002;
  UAConfigurationSources_AppConfig = $00000004;

// Constants for enum UADiagnosticsMasks
type
  UADiagnosticsMasks = TOleEnum;
const
  UADiagnosticsMasks_None = $00000000;
  UADiagnosticsMasks_ServiceSymbolicId = $00000001;
  UADiagnosticsMasks_ServiceLocalizedText = $00000002;
  UADiagnosticsMasks_ServiceAdditionalInfo = $00000004;
  UADiagnosticsMasks_ServiceInnerStatusCode = $00000008;
  UADiagnosticsMasks_ServiceInnerDiagnostics = $00000010;
  UADiagnosticsMasks_OperationSymbolicId = $00000020;
  UADiagnosticsMasks_OperationLocalizedText = $00000040;
  UADiagnosticsMasks_OperationAdditionalInfo = $00000080;
  UADiagnosticsMasks_OperationInnerStatusCode = $00000100;
  UADiagnosticsMasks_OperationInnerDiagnostics = $00000200;
  UADiagnosticsMasks_ServiceSymbolicIdAndText = $00000003;
  UADiagnosticsMasks_ServiceNoInnerStatus = $0000000F;
  UADiagnosticsMasks_ServiceAll = $0000001F;
  UADiagnosticsMasks_SymbolicId = $00000021;
  UADiagnosticsMasks_LocalizedText = $00000042;
  UADiagnosticsMasks_OperationSymbolicIdAndText = $00000060;
  UADiagnosticsMasks_SymbolicIdAndText = $00000063;
  UADiagnosticsMasks_AdditionalInfo = $00000084;
  UADiagnosticsMasks_OperationNoInnerStatus = $000000E0;
  UADiagnosticsMasks_InnerStatusCode = $00000108;
  UADiagnosticsMasks_InnerDiagnostics = $00000210;
  UADiagnosticsMasks_OperationAll = $000003E0;
  UADiagnosticsMasks_All = $000003FF;

// Constants for enum UAMessageSecurityModes
type
  UAMessageSecurityModes = TOleEnum;
const
  UAMessageSecurityModes_None = $00000000;
  UAMessageSecurityModes_SecurityNone = $00000001;
  UAMessageSecurityModes_SecuritySign = $00000002;
  UAMessageSecurityModes_SecuritySignAndEncrypt = $00000004;
  UAMessageSecurityModes_Secure = $00000006;
  UAMessageSecurityModes_All = $00000007;

// Constants for enum UAApplicationTypes
type
  UAApplicationTypes = TOleEnum;
const
  UAApplicationTypes_None = $00000000;
  UAApplicationTypes_Server = $00000001;
  UAApplicationTypes_Client = $00000002;
  UAApplicationTypes_ClientOrServer = $00000003;
  UAApplicationTypes_DiscoveryServer = $00000004;
  UAApplicationTypes_All = $00000007;

// Constants for enum UAStructureType
type
  UAStructureType = TOleEnum;
const
  UAStructureType_Structure = $00000000;
  UAStructureType_StructureWithOptionalFields = $00000001;
  UAStructureType_Union = $00000002;
  UAStructureType_StructureWithSubtypedValues = $00000003;
  UAStructureType_UnionWithSubtypedValues = $00000004;

// Constants for enum UANodeClass
type
  UANodeClass = TOleEnum;
const
  UANodeClass_None = $00000000;
  UANodeClass_Object = $00000001;
  UANodeClass_Variable = $00000002;
  UANodeClass_Method = $00000004;
  UANodeClass_ObjectType = $00000008;
  UANodeClass_VariableType = $00000010;
  UANodeClass_ReferenceType = $00000020;
  UANodeClass_DataType = $00000040;
  UANodeClass_View = $00000080;
  UANodeClass_All = $000000FF;

// Constants for enum UANodeIdType
type
  UANodeIdType = TOleEnum;
const
  UANodeIdType_None = $00000000;
  UANodeIdType_Numeric = $00000001;
  UANodeIdType_String = $00000002;
  UANodeIdType_Guid = $00000003;
  UANodeIdType_Opaque = $00000004;

// Constants for enum UANamespaceQualifiedFormatErrorCode
type
  UANamespaceQualifiedFormatErrorCode = TOleEnum;
const
  UANamespaceQualifiedFormatErrorCode_None = $00000000;
  UANamespaceQualifiedFormatErrorCode_InvalidServerIndex = $00000001;
  UANamespaceQualifiedFormatErrorCode_InvalidNamespaceUri = $00000002;
  UANamespaceQualifiedFormatErrorCode_EscapedCharacterTooShort = $00000003;
  UANamespaceQualifiedFormatErrorCode_EscapedCharacterHexadecimalDigit = $00000004;
  UANamespaceQualifiedFormatErrorCode_InvalidNamespaceIndex = $00000005;
  UANamespaceQualifiedFormatErrorCode_ServerIndexFormat = $00000006;
  UANamespaceQualifiedFormatErrorCode_ServerIndexOverflow = $00000007;
  UANamespaceQualifiedFormatErrorCode_NamespaceIndexFormat = $00000008;
  UANamespaceQualifiedFormatErrorCode_NamespaceIndexOverflow = $00000009;
  UANamespaceQualifiedFormatErrorCode_NumericIdentifierFormat = $0000000A;
  UANamespaceQualifiedFormatErrorCode_NumericIdentifierOverflow = $0000000B;
  UANamespaceQualifiedFormatErrorCode_GuidIdentifierFormat = $0000000C;
  UANamespaceQualifiedFormatErrorCode_GuidIdentifierOverflow = $0000000D;
  UANamespaceQualifiedFormatErrorCode_OpaqueIdentifierFormat = $0000000E;

// Constants for enum UANodeIdFormatErrorCode
type
  UANodeIdFormatErrorCode = TOleEnum;
const
  UANodeIdFormatErrorCode_None = $00000000;
  UANodeIdFormatErrorCode_NoNamespace = $00000001;
  UANodeIdFormatErrorCode_NoIdentifier = $00000002;

// Constants for enum UAQualifiedNameFormatErrorCode
type
  UAQualifiedNameFormatErrorCode = TOleEnum;
const
  UAQualifiedNameFormatErrorCode_None = $00000000;
  UAQualifiedNameFormatErrorCode_NotAStringId = $00000001;
  UAQualifiedNameFormatErrorCode_NoNamespace = $00000002;

type

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
  _EasyUAClientSelector = interface;
  _EasyUAClientSelectorDisp = dispinterface;
  _EasyUASpecializedClient = interface;
  _EasyUASpecializedClientDisp = dispinterface;
  _UAAttributeField = interface;
  _UAAttributeFieldDisp = dispinterface;
  _StringUANodeIdReadOnlyDictionary = interface;
  _StringUANodeIdReadOnlyDictionaryDisp = dispinterface;
  _UAAttributeFieldCollection = interface;
  _UAAttributeFieldCollectionDisp = dispinterface;
  _UAEndpointDescriptorCollection = interface;
  _UAEndpointDescriptorCollectionDisp = dispinterface;
  _UAEndpointDescriptorUANodeIdReadOnlyDictionary = interface;
  _UAEndpointDescriptorUANodeIdReadOnlyDictionaryDisp = dispinterface;
  _UAFieldResultDictionary = interface;
  _UAFieldResultDictionaryDisp = dispinterface;
  _UAKeyValueDictionary = interface;
  _UAKeyValueDictionaryDisp = dispinterface;
  _UANodeIdUAApplicationElementReadOnlyDictionary = interface;
  _UANodeIdUAApplicationElementReadOnlyDictionaryDisp = dispinterface;
  _UADataValue = interface;
  _UADataValueDisp = dispinterface;
  _UAEventData = interface;
  _UAEventDataDisp = dispinterface;
  _UAExtensionObject = interface;
  _UAExtensionObjectDisp = dispinterface;
  _UAIndexRange = interface;
  _UAIndexRangeDisp = dispinterface;
  _UAIndexRangeList = interface;
  _UAIndexRangeListDisp = dispinterface;
  _UAKeyValuePair = interface;
  _UAKeyValuePairDisp = dispinterface;
  _UAServiceResult = interface;
  _UAServiceResultDisp = dispinterface;
  _UAStatusCode = interface;
  _UAStatusCodeDisp = dispinterface;
  _UATimeZoneData = interface;
  _UATimeZoneDataDisp = dispinterface;
  _UAEndpointDescriptor = interface;
  _UAEndpointDescriptorDisp = dispinterface;
  _UANodeDescriptor = interface;
  _UANodeDescriptorDisp = dispinterface;
  _EasyUAEngineException = interface;
  _EasyUAEngineExceptionDisp = dispinterface;
  _UAServiceException = interface;
  _UAServiceExceptionDisp = dispinterface;
  _UAResultException = interface;
  _UAResultExceptionDisp = dispinterface;
  _UAStatusCodeException = interface;
  _UAStatusCodeExceptionDisp = dispinterface;
  _UADataChangeFilter = interface;
  _UADataChangeFilterDisp = dispinterface;
  _UAEventFilter = interface;
  _UAEventFilterDisp = dispinterface;
  _UABrowseParameters = interface;
  _UABrowseParametersDisp = dispinterface;
  _UAMonitoringParameters = interface;
  _UAMonitoringParametersDisp = dispinterface;
  _UAReadParameters = interface;
  _UAReadParametersDisp = dispinterface;
  _UASubscriptionParameters = interface;
  _UASubscriptionParametersDisp = dispinterface;
  _EasyUAClientConnectionControl = interface;
  _EasyUAClientConnectionControlDisp = dispinterface;
  _EasyUAClientConnectionMonitoring = interface;
  _EasyUAClientConnectionMonitoringDisp = dispinterface;
  _EasyUAClientNodeRegistration = interface;
  _EasyUAClientNodeRegistrationDisp = dispinterface;
  _UAServerTables = interface;
  _UAServerTablesDisp = dispinterface;
  DEasyUAClientConnectionMonitoringEvents = dispinterface;
  _EasyUASubscriberSelector = interface;
  _EasyUASubscriberSelectorDisp = dispinterface;
  _UASubscribeDataSetFilter = interface;
  _UASubscribeDataSetFilterDisp = dispinterface;
  _UAGuidDataSetFieldDataDictionary = interface;
  _UAGuidDataSetFieldDataDictionaryDisp = dispinterface;
  _UAStringDataSetFieldDataDictionary = interface;
  _UAStringDataSetFieldDataDictionaryDisp = dispinterface;
  _UAPubSubLocators = interface;
  _UAPubSubLocatorsDisp = dispinterface;
  _UADataSetFieldData = interface;
  _UADataSetFieldDataDisp = dispinterface;
  _UAPubSubHeader = interface;
  _UAPubSubHeaderDisp = dispinterface;
  _UAPublisherId = interface;
  _UAPublisherIdDisp = dispinterface;
  _UAPubSubObjectDescriptor = interface;
  _UAPubSubObjectDescriptorDisp = dispinterface;
  _UADataSetSubscriptionDescriptor = interface;
  _UADataSetSubscriptionDescriptorDisp = dispinterface;
  _UADataSetWriterDescriptor = interface;
  _UADataSetWriterDescriptorDisp = dispinterface;
  _UAPubSubConnectionDescriptor = interface;
  _UAPubSubConnectionDescriptorDisp = dispinterface;
  _UAPubSubResolverDescriptor = interface;
  _UAPubSubResolverDescriptorDisp = dispinterface;
  _UAWriterGroupDescriptor = interface;
  _UAWriterGroupDescriptorDisp = dispinterface;
  _UAPubSubCommunicationParameters = interface;
  _UAPubSubCommunicationParametersDisp = dispinterface;
  _UASubscriberCommunicationParameters = interface;
  _UASubscriberCommunicationParametersDisp = dispinterface;
  _UAPubSubSecurityKeyService = interface;
  _UAPubSubSecurityKeyServiceDisp = dispinterface;
  _UAReadOnlyPubSubSecurityKeyService = interface;
  _UAReadOnlyPubSubSecurityKeyServiceDisp = dispinterface;
  _EasyUADataSetSubscriptionChangeArguments = interface;
  _EasyUADataSetSubscriptionChangeArgumentsDisp = dispinterface;
  _UASubscribeDataSetArguments = interface;
  _UASubscribeDataSetArgumentsDisp = dispinterface;
  _EasyUASubscribeDataSetArgumentsDictionary = interface;
  _EasyUASubscribeDataSetArgumentsDictionaryDisp = dispinterface;
  _EasyUAPubSubMessageEventArgs = interface;
  _EasyUAPubSubMessageEventArgsDisp = dispinterface;
  _EasyUAResolverAccessEventArgs = interface;
  _EasyUAResolverAccessEventArgsDisp = dispinterface;
  _EasyUASubscriptionResolvedEventArgs = interface;
  _EasyUASubscriptionResolvedEventArgsDisp = dispinterface;
  _EasyUADataSetMessageEventArgs = interface;
  _EasyUADataSetMessageEventArgsDisp = dispinterface;
  _EasyUASubscribeDataSetArguments = interface;
  _EasyUASubscribeDataSetArgumentsDisp = dispinterface;
  _UAPublishSubscribeElement = interface;
  _UAPublishSubscribeElementDisp = dispinterface;
  _EasyUAPublishSubscribeClient = interface;
  _EasyUAPublishSubscribeClientDisp = dispinterface;
  _UAPubSubResolverParameters = interface;
  _UAPubSubResolverParametersDisp = dispinterface;
  _UAPublisherSubscriberAdaptableParameters = interface;
  _UAPublisherSubscriberAdaptableParametersDisp = dispinterface;
  _EasyUASubscriberInstanceParameters = interface;
  _EasyUASubscriberInstanceParametersDisp = dispinterface;
  _EasyUASubscriberSharedParameters = interface;
  _EasyUASubscriberSharedParametersDisp = dispinterface;
  _UAPublisherConfigurationResolutionParameters = interface;
  _UAPublisherConfigurationResolutionParametersDisp = dispinterface;
  _UAPublisherEndpointResolverParameters = interface;
  _UAPublisherEndpointResolverParametersDisp = dispinterface;
  _EasyUAPubSubResolverParameters = interface;
  _EasyUAPubSubResolverParametersDisp = dispinterface;
  _EasyUASubscriberAdaptableParameters = interface;
  _EasyUASubscriberAdaptableParametersDisp = dispinterface;
  _UADataSetFolderDataCollection = interface;
  _UADataSetFolderDataCollectionDisp = dispinterface;
  _UADataSetWriterDataCollection = interface;
  _UADataSetWriterDataCollectionDisp = dispinterface;
  _UAFieldMetaDataCollection = interface;
  _UAFieldMetaDataCollectionDisp = dispinterface;
  _UAPublishedDataSetDataCollection = interface;
  _UAPublishedDataSetDataCollectionDisp = dispinterface;
  _UAPublishedVariableDataCollection = interface;
  _UAPublishedVariableDataCollectionDisp = dispinterface;
  _UAPubSubConnectionDataCollection = interface;
  _UAPubSubConnectionDataCollectionDisp = dispinterface;
  _UAWriterGroupDataCollection = interface;
  _UAWriterGroupDataCollectionDisp = dispinterface;
  _UAConfigurationVersion = interface;
  _UAConfigurationVersionDisp = dispinterface;
  _UAReadOnlyDataTypeSchema = interface;
  _UAReadOnlyDataTypeSchemaDisp = dispinterface;
  _UADataSetWriterLocator = interface;
  _UADataSetWriterLocatorDisp = dispinterface;
  _UAPubSubObjectElement = interface;
  _UAPubSubObjectElementDisp = dispinterface;
  _UAPublishedVariableData = interface;
  _UAPublishedVariableDataDisp = dispinterface;
  _UADataSetFolderData = interface;
  _UADataSetFolderDataDisp = dispinterface;
  _UAPubSubComponentElement = interface;
  _UAPubSubComponentElementDisp = dispinterface;
  _UAPublishedDataSetElement = interface;
  _UAPublishedDataSetElementDisp = dispinterface;
  _UAPubSubConfigurationElement = interface;
  _UAPubSubConfigurationElementDisp = dispinterface;
  _UAPubSubConnectionElement = interface;
  _UAPubSubConnectionElementDisp = dispinterface;
  _UAPubSubGroupElement = interface;
  _UAPubSubGroupElementDisp = dispinterface;
  _UADataSetWriterElement = interface;
  _UADataSetWriterElementDisp = dispinterface;
  _UAPublishedDataSetSourceElement = interface;
  _UAPublishedDataSetSourceElementDisp = dispinterface;
  _UAPublishedEventsElement = interface;
  _UAPublishedEventsElementDisp = dispinterface;
  _UAWriterGroupElement = interface;
  _UAWriterGroupElementDisp = dispinterface;
  _UAConnectionTransportParameters = interface;
  _UAConnectionTransportParametersDisp = dispinterface;
  _UADataSetReaderTransportParameters = interface;
  _UADataSetReaderTransportParametersDisp = dispinterface;
  _UADataSetWriterTransportParameters = interface;
  _UADataSetWriterTransportParametersDisp = dispinterface;
  _UAWriterGroupTransportParameters = interface;
  _UAWriterGroupTransportParametersDisp = dispinterface;
  _UADatagramConnectionTransportParameters = interface;
  _UADatagramConnectionTransportParametersDisp = dispinterface;
  _UADatagramWriterGroupTransportParameters = interface;
  _UADatagramWriterGroupTransportParametersDisp = dispinterface;
  _UADataSetReaderMessageParameters = interface;
  _UADataSetReaderMessageParametersDisp = dispinterface;
  _UAJsonDataSetReaderMessageParameters = interface;
  _UAJsonDataSetReaderMessageParametersDisp = dispinterface;
  _UADataSetWriterMessageParameters = interface;
  _UADataSetWriterMessageParametersDisp = dispinterface;
  _UAWriterGroupMessageParameters = interface;
  _UAWriterGroupMessageParametersDisp = dispinterface;
  _UAUadpDataSetReaderMessageParameters = interface;
  _UAUadpDataSetReaderMessageParametersDisp = dispinterface;
  _UAUadpDataSetWriterMessageParameters = interface;
  _UAUadpDataSetWriterMessageParametersDisp = dispinterface;
  _UAUadpWriterGroupMessageParameters = interface;
  _UAUadpWriterGroupMessageParametersDisp = dispinterface;
  _UABrokerConnectionTransportParameters = interface;
  _UABrokerConnectionTransportParametersDisp = dispinterface;
  _UABrokerDataSetReaderTransportParameters = interface;
  _UABrokerDataSetReaderTransportParametersDisp = dispinterface;
  _UABrokerDataSetWriterTransportParameters = interface;
  _UABrokerDataSetWriterTransportParametersDisp = dispinterface;
  _UABrokerWriterGroupTransportParameters = interface;
  _UABrokerWriterGroupTransportParametersDisp = dispinterface;
  _UADataSetMetaData = interface;
  _UADataSetMetaDataDisp = dispinterface;
  _UADataSetWriterData = interface;
  _UADataSetWriterDataDisp = dispinterface;
  _UAJsonDataSetWriterMessageParameters = interface;
  _UAJsonDataSetWriterMessageParametersDisp = dispinterface;
  _UAFieldMetaData = interface;
  _UAFieldMetaDataDisp = dispinterface;
  _UAJsonWriterGroupMessageParameters = interface;
  _UAJsonWriterGroupMessageParametersDisp = dispinterface;
  _UAPublishedDataItemsElement = interface;
  _UAPublishedDataItemsElementDisp = dispinterface;
  _UAPublishedDataSetData = interface;
  _UAPublishedDataSetDataDisp = dispinterface;
  _UAPubSubConfigurationData = interface;
  _UAPubSubConfigurationDataDisp = dispinterface;
  _UAPubSubConnectionData = interface;
  _UAPubSubConnectionDataDisp = dispinterface;
  _UAWriterGroupData = interface;
  _UAWriterGroupDataDisp = dispinterface;
  _UAReaderGroupMessageParameters = interface;
  _UAReaderGroupMessageParametersDisp = dispinterface;
  _UAReaderGroupTransportParameters = interface;
  _UAReaderGroupTransportParametersDisp = dispinterface;
  _UAReadOnlyPubSubConfiguration = interface;
  _UAReadOnlyPubSubConfigurationDisp = dispinterface;
  DEasyUASubscriberEvents = dispinterface;
  DEasyUASubscriberManagementEvents = dispinterface;
  _EasyUASubscriber = interface;
  _EasyUASubscriberDisp = dispinterface;
  _EasyUASubscriberManagement = interface;
  _EasyUASubscriberManagementDisp = dispinterface;
  _UADataSetData = interface;
  _UADataSetDataDisp = dispinterface;
  _UADataSetFieldDescriptor = interface;
  _UADataSetFieldDescriptorDisp = dispinterface;
  _UADataSetHeader = interface;
  _UADataSetHeaderDisp = dispinterface;
  _UAPubSubGroupDescriptor = interface;
  _UAPubSubGroupDescriptorDisp = dispinterface;
  _UAServerDtmpParameters = interface;
  _UAServerDtmpParametersDisp = dispinterface;
  _UAServerDtmpPluginParameters = interface;
  _UAServerDtmpPluginParametersDisp = dispinterface;
  _UAOptimizerPluginParameters = interface;
  _UAOptimizerPluginParametersDisp = dispinterface;
  _EasyUAClientComplexData = interface;
  _EasyUAClientComplexDataDisp = dispinterface;
  _UAComplexDataParameters = interface;
  _UAComplexDataParametersDisp = dispinterface;
  _UAComplexDataSubscriberPluginParameters = interface;
  _UAComplexDataSubscriberPluginParametersDisp = dispinterface;
  _UAComplexDataClientPluginParameters = interface;
  _UAComplexDataClientPluginParametersDisp = dispinterface;
  _UAIndexRangeListFormatException = interface;
  _UAIndexRangeListFormatExceptionDisp = dispinterface;
  _UAIndexRangeListParser = interface;
  _UAIndexRangeListParserDisp = dispinterface;
  _UAException = interface;
  _UAExceptionDisp = dispinterface;
  _UALogicalException = interface;
  _UALogicalExceptionDisp = dispinterface;
  _UANodeArguments = interface;
  _UANodeArgumentsDisp = dispinterface;
  _EasyUAMonitoredItemArgumentsDictionary = interface;
  _EasyUAMonitoredItemArgumentsDictionaryDisp = dispinterface;
  _EasyUASubscriptionChangeArguments = interface;
  _EasyUASubscriptionChangeArgumentsDisp = dispinterface;
  _UAAttributeArguments = interface;
  _UAAttributeArgumentsDisp = dispinterface;
  _UABrowseArguments = interface;
  _UABrowseArgumentsDisp = dispinterface;
  _UACallArguments = interface;
  _UACallArgumentsDisp = dispinterface;
  _UAMonitoredItemArguments = interface;
  _UAMonitoredItemArgumentsDisp = dispinterface;
  _UAReadArguments = interface;
  _UAReadArgumentsDisp = dispinterface;
  _UAWriteArgumentsBase = interface;
  _UAWriteArgumentsBaseDisp = dispinterface;
  _UAWriteValueArguments = interface;
  _UAWriteValueArgumentsDisp = dispinterface;
  _EasyUADataChangeNotificationEventArgs = interface;
  _EasyUADataChangeNotificationEventArgsDisp = dispinterface;
  _EasyUAEventNotificationEventArgs = interface;
  _EasyUAEventNotificationEventArgsDisp = dispinterface;
  _EasyUAServerConditionChangedEventArgs = interface;
  _EasyUAServerConditionChangedEventArgsDisp = dispinterface;
  _UAAttributeDataResult = interface;
  _UAAttributeDataResultDisp = dispinterface;
  _UANodeElementCollectionResult = interface;
  _UANodeElementCollectionResultDisp = dispinterface;
  _UAWriteResult = interface;
  _UAWriteResultDisp = dispinterface;
  _EasyUAMonitoredItemArguments = interface;
  _EasyUAMonitoredItemArgumentsDisp = dispinterface;
  _EasyUAMonitoredItemChangedEventArgs = interface;
  _EasyUAMonitoredItemChangedEventArgsDisp = dispinterface;
  _UAWriteArguments = interface;
  _UAWriteArgumentsDisp = dispinterface;
  _UABrowsePathElementCollection = interface;
  _UABrowsePathElementCollectionDisp = dispinterface;
  _UABrowsePath = interface;
  _UABrowsePathDisp = dispinterface;
  _UABrowsePathElement = interface;
  _UABrowsePathElementDisp = dispinterface;
  _UABrowsePathFormatException = interface;
  _UABrowsePathFormatExceptionDisp = dispinterface;
  _UABrowsePathParser = interface;
  _UABrowsePathParserDisp = dispinterface;
  _UAModelNodeDescriptor = interface;
  _UAModelNodeDescriptorDisp = dispinterface;
  _EasyUAClientServerApplication = interface;
  _EasyUAClientServerApplicationDisp = dispinterface;
  _UACertificateGroupElementCollection = interface;
  _UACertificateGroupElementCollectionDisp = dispinterface;
  _UAApplicationElement = interface;
  _UAApplicationElementDisp = dispinterface;
  _UACertificateGroupElement = interface;
  _UACertificateGroupElementDisp = dispinterface;
  _EasyUACertificateManagementClient = interface;
  _EasyUACertificateManagementClientDisp = dispinterface;
  _EasyUAGlobalDiscoveryClient = interface;
  _EasyUAGlobalDiscoveryClientDisp = dispinterface;
  _UAApplicationRecordDataType = interface;
  _UAApplicationRecordDataTypeDisp = dispinterface;
  _UAFilterOperand = interface;
  _UAFilterOperandDisp = dispinterface;
  _UAFilterOperandCollection = interface;
  _UAFilterOperandCollectionDisp = dispinterface;
  _UASimpleAttributeOperandCollection = interface;
  _UASimpleAttributeOperandCollectionDisp = dispinterface;
  _UAAttributeOperand = interface;
  _UAAttributeOperandDisp = dispinterface;
  _UAContentFilterElement = interface;
  _UAContentFilterElementDisp = dispinterface;
  _UALiteralOperand = interface;
  _UALiteralOperandDisp = dispinterface;
  _UASimpleAttributeOperand = interface;
  _UASimpleAttributeOperandDisp = dispinterface;
  _UAEngineException = interface;
  _UAEngineExceptionDisp = dispinterface;
  _UAClientAdaptableParameters = interface;
  _UAClientAdaptableParametersDisp = dispinterface;
  _UAClientServerEngineParameters = interface;
  _UAClientServerEngineParametersDisp = dispinterface;
  _EasyUAClientInstanceParameters = interface;
  _EasyUAClientInstanceParametersDisp = dispinterface;
  _EasyUAClientMode = interface;
  _EasyUAClientModeDisp = dispinterface;
  _EasyUAClientSharedParameters = interface;
  _EasyUAClientSharedParametersDisp = dispinterface;
  _UAClientEngineParameters = interface;
  _UAClientEngineParametersDisp = dispinterface;
  _UAClientMonitoredItemParameters = interface;
  _UAClientMonitoredItemParametersDisp = dispinterface;
  _UAClientServerApplicationParameters = interface;
  _UAClientServerApplicationParametersDisp = dispinterface;
  _UAClientSessionParameters = interface;
  _UAClientSessionParametersDisp = dispinterface;
  _UAClientSubscriptionParameters = interface;
  _UAClientSubscriptionParametersDisp = dispinterface;
  _UADiscoveryParameters = interface;
  _UADiscoveryParametersDisp = dispinterface;
  _UAEndpointDescriptionChecks = interface;
  _UAEndpointDescriptionChecksDisp = dispinterface;
  _UAEnhancedClientSessionParameters = interface;
  _UAEnhancedClientSessionParametersDisp = dispinterface;
  _UAHostParameters = interface;
  _UAHostParametersDisp = dispinterface;
  _UASmartClientEngineParameters = interface;
  _UASmartClientEngineParametersDisp = dispinterface;
  _UASmartClientSessionParameters = interface;
  _UASmartClientSessionParametersDisp = dispinterface;
  _UAUserInteractionParameters = interface;
  _UAUserInteractionParametersDisp = dispinterface;
  _UACertificateAcceptancePolicy = interface;
  _UACertificateAcceptancePolicyDisp = dispinterface;
  _UAEndpointSelectionPolicy = interface;
  _UAEndpointSelectionPolicyDisp = dispinterface;
  _EasyUAClientAdaptableParameters = interface;
  _EasyUAClientAdaptableParametersDisp = dispinterface;
  _EasyUAClientEngineParameters = interface;
  _EasyUAClientEngineParametersDisp = dispinterface;
  _UAApplicationDescription = interface;
  _UAApplicationDescriptionDisp = dispinterface;
  _UADiscoveryElement = interface;
  _UADiscoveryElementDisp = dispinterface;
  _UADiscoveryElementCollection = interface;
  _UADiscoveryElementCollectionDisp = dispinterface;
  _UAQueryApplicationsFilter = interface;
  _UAQueryApplicationsFilterDisp = dispinterface;
  _UAServerOnNetwork = interface;
  _UAServerOnNetworkDisp = dispinterface;
  _UAApplicationDiscoveryQuery = interface;
  _UAApplicationDiscoveryQueryDisp = dispinterface;
  _UALdsDiscoveryQuery = interface;
  _UALdsDiscoveryQueryDisp = dispinterface;
  _UALocalEndpointDiscoveryQuery = interface;
  _UALocalEndpointDiscoveryQueryDisp = dispinterface;
  _UANetworkServerDiscoveryQuery = interface;
  _UANetworkServerDiscoveryQueryDisp = dispinterface;
  _UAGlobalApplicationDiscoveryQuery = interface;
  _UAGlobalApplicationDiscoveryQueryDisp = dispinterface;
  _UADiscoveryQuery = interface;
  _UADiscoveryQueryDisp = dispinterface;
  _UALocalApplicationDiscoveryQuery = interface;
  _UALocalApplicationDiscoveryQueryDisp = dispinterface;
  _UADataTypeSchema = interface;
  _UADataTypeSchemaDisp = dispinterface;
  _UADataTypeDefinition = interface;
  _UADataTypeDefinitionDisp = dispinterface;
  _UAEnumValue = interface;
  _UAEnumValueDisp = dispinterface;
  _UAStructureDefinition = interface;
  _UAStructureDefinitionDisp = dispinterface;
  _UAStructureField = interface;
  _UAStructureFieldDisp = dispinterface;
  _UADataTypeDescription = interface;
  _UADataTypeDescriptionDisp = dispinterface;
  _UASimpleTypeDescription = interface;
  _UASimpleTypeDescriptionDisp = dispinterface;
  _UAStructureDescription = interface;
  _UAStructureDescriptionDisp = dispinterface;
  _UADataTypeInfo = interface;
  _UADataTypeInfoDisp = dispinterface;
  _UAEnumFieldInfo = interface;
  _UAEnumFieldInfoDisp = dispinterface;
  _UAEnumTypeInfo = interface;
  _UAEnumTypeInfoDisp = dispinterface;
  _UASimpleTypeInfo = interface;
  _UASimpleTypeInfoDisp = dispinterface;
  _UAStructureFieldInfo = interface;
  _UAStructureFieldInfoDisp = dispinterface;
  _UAStructureTypeInfo = interface;
  _UAStructureTypeInfoDisp = dispinterface;
  _UAEnumDefinition = interface;
  _UAEnumDefinitionDisp = dispinterface;
  _UAEnumDescription = interface;
  _UAEnumDescriptionDisp = dispinterface;
  _UAHeaderDataTypeSchema = interface;
  _UAHeaderDataTypeSchemaDisp = dispinterface;
  _UAEnumField = interface;
  _UAEnumFieldDisp = dispinterface;
  _UADataTypeDescriptor = interface;
  _UADataTypeDescriptorDisp = dispinterface;
  _UADataTypeSystemParameters = interface;
  _UADataTypeSystemParametersDisp = dispinterface;
  _UAOpcBinaryDtsParameters = interface;
  _UAOpcBinaryDtsParametersDisp = dispinterface;
  _UAXmlSchemaDtsParameters = interface;
  _UAXmlSchemaDtsParametersDisp = dispinterface;
  _UADataTypeDefinitionProvider = interface;
  _UADataTypeDefinitionProviderDisp = dispinterface;
  _UADataTypeDictionaryProvider = interface;
  _UADataTypeDictionaryProviderDisp = dispinterface;
  _UADataTypeModelProvider = interface;
  _UADataTypeModelProviderDisp = dispinterface;
  _UADataTypeSystem = interface;
  _UADataTypeSystemDisp = dispinterface;
  _UAEUInformation = interface;
  _UAEUInformationDisp = dispinterface;
  _UARange = interface;
  _UARangeDisp = dispinterface;
  DEasyUAClientEvents = dispinterface;
  DEasyUAClientManagementEvents = dispinterface;
  _EasyUAClient = interface;
  _EasyUAClientDisp = dispinterface;
  _EasyUAClientManagement = interface;
  _EasyUAClientManagementDisp = dispinterface;
  _UAAttributeData = interface;
  _UAAttributeDataDisp = dispinterface;
  _UACallServiceException = interface;
  _UACallServiceExceptionDisp = dispinterface;
  _UAMethodOutputException = interface;
  _UAMethodOutputExceptionDisp = dispinterface;
  _UAGenericObject = interface;
  _UAGenericObjectDisp = dispinterface;
  _UANodeBrowseFilter = interface;
  _UANodeBrowseFilterDisp = dispinterface;
  _UACertificateTypeElementCollection = interface;
  _UACertificateTypeElementCollectionDisp = dispinterface;
  _UACertificateRequestParameters = interface;
  _UACertificateRequestParametersDisp = dispinterface;
  _UACertificateTypeElement = interface;
  _UACertificateTypeElementDisp = dispinterface;
  _UACertificateArguments = interface;
  _UACertificateArgumentsDisp = dispinterface;
  _UAValidateCertificateArguments = interface;
  _UAValidateCertificateArgumentsDisp = dispinterface;
  _UAExportCertificateArguments = interface;
  _UAExportCertificateArgumentsDisp = dispinterface;
  _UAIngestCertificateArguments = interface;
  _UAIngestCertificateArgumentsDisp = dispinterface;
  _UAObtainCertificateArguments = interface;
  _UAObtainCertificateArgumentsDisp = dispinterface;
  DEasyUAClientServerApplicationEvents = dispinterface;
  _EasyUAApplication = interface;
  _EasyUAApplicationDisp = dispinterface;
  _UAAssureCertificateArguments = interface;
  _UAAssureCertificateArgumentsDisp = dispinterface;
  _UACreateCertificateArguments = interface;
  _UACreateCertificateArgumentsDisp = dispinterface;
  _UAImportCertificateArguments = interface;
  _UAImportCertificateArgumentsDisp = dispinterface;
  _UABaseEventObject = interface;
  _UABaseEventObjectDisp = dispinterface;
  _EasyUAAlarmsAndConditionsClient = interface;
  _EasyUAAlarmsAndConditionsClientDisp = dispinterface;
  _UAApplicationManifest = interface;
  _UAApplicationManifestDisp = dispinterface;
  _UANodeElementCollection = interface;
  _UANodeElementCollectionDisp = dispinterface;
  _UANodeIdCollection = interface;
  _UANodeIdCollectionDisp = dispinterface;
  _UANodeIdSet = interface;
  _UANodeIdSetDisp = dispinterface;
  _UAQualifiedNameCollection = interface;
  _UAQualifiedNameCollectionDisp = dispinterface;
  _UAQualifiedNameSet = interface;
  _UAQualifiedNameSetDisp = dispinterface;
  _UANamespaceQualified = interface;
  _UANamespaceQualifiedDisp = dispinterface;
  _UAQualifiedName = interface;
  _UAQualifiedNameDisp = dispinterface;
  _UANodeElement = interface;
  _UANodeElementDisp = dispinterface;
  _UANodeIdFormatException = interface;
  _UANodeIdFormatExceptionDisp = dispinterface;
  _UAQualifiedNameFormatException = interface;
  _UAQualifiedNameFormatExceptionDisp = dispinterface;
  _UANodeIdParser = interface;
  _UANodeIdParserDisp = dispinterface;
  _UAQualifiedNameParser = interface;
  _UAQualifiedNameParserDisp = dispinterface;
  _UANodeId = interface;
  _UANodeIdDisp = dispinterface;

// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
// *********************************************************************//
  UADataValue = _UADataValue;
  UAResultException = _UAResultException;
  UAServiceException = _UAServiceException;
  ComEasyUAClientConnectionControl = _EasyUAClientConnectionControl;
  ComEasyUAClientNodeRegistration = _EasyUAClientNodeRegistration;
  UAPubSubHeader = _UAPubSubHeader;
  UAPubSubLocators = _UAPubSubLocators;
  UASubscribeDataSetArguments = _UASubscribeDataSetArguments;
  EasyUADataSetSubscriptionChangeArguments = _EasyUADataSetSubscriptionChangeArguments;
  EasyUADataSetMessageEventArgs = _EasyUADataSetMessageEventArgs;
  EasyUAResolverAccessEventArgs = _EasyUAResolverAccessEventArgs;
  EasyUASubscribeDataSetArgumentsDictionary = _EasyUASubscribeDataSetArgumentsDictionary;
  EasyUASubscriptionResolvedEventArgs = _EasyUASubscriptionResolvedEventArgs;
  EasyUASubscribeDataSetArguments = _EasyUASubscribeDataSetArguments;
  UAPublishSubscribeElement = _UAPublishSubscribeElement;
  UAPublisherSubscriberAdaptableParameters = _UAPublisherSubscriberAdaptableParameters;
  UAPubSubResolverParameters = _UAPubSubResolverParameters;
  EasyUASubscriberInstanceParameters = _EasyUASubscriberInstanceParameters;
  EasyUASubscriberSharedParameters = _EasyUASubscriberSharedParameters;
  UAPublisherConfigurationResolutionParameters = _UAPublisherConfigurationResolutionParameters;
  UAPublisherEndpointResolverParameters = _UAPublisherEndpointResolverParameters;
  EasyUASubscriberAdaptableParameters = _EasyUASubscriberAdaptableParameters;
  EasyUAPubSubResolverParameters = _EasyUAPubSubResolverParameters;
  UAPublishedDataSetElement = _UAPublishedDataSetElement;
  UAPubSubConfigurationElement = _UAPubSubConfigurationElement;
  UAPubSubConnectionElement = _UAPubSubConnectionElement;
  UAConnectionTransportParameters = _UAConnectionTransportParameters;
  UAConfigurationVersion = _UAConfigurationVersion;
  UABrokerConnectionTransportParameters = _UABrokerConnectionTransportParameters;
  UADatagramConnectionTransportParameters = _UADatagramConnectionTransportParameters;
  UADatagramWriterGroupTransportParameters = _UADatagramWriterGroupTransportParameters;
  UADataSetFolderData = _UADataSetFolderData;
  UADataSetFolderDataCollection = _UADataSetFolderDataCollection;
  UADataSetReaderMessageParameters = _UADataSetReaderMessageParameters;
  UABrokerDataSetReaderTransportParameters = _UABrokerDataSetReaderTransportParameters;
  UADataSetWriterDataCollection = _UADataSetWriterDataCollection;
  UADataSetWriterElement = _UADataSetWriterElement;
  UADataSetWriterLocator = _UADataSetWriterLocator;
  UABrokerDataSetWriterTransportParameters = _UABrokerDataSetWriterTransportParameters;
  UAFieldMetaDataCollection = _UAFieldMetaDataCollection;
  UAJsonDataSetReaderMessageParameters = _UAJsonDataSetReaderMessageParameters;
  UAJsonDataSetWriterMessageParameters = _UAJsonDataSetWriterMessageParameters;
  UAPublishedDataSetDataCollection = _UAPublishedDataSetDataCollection;
  UAPublishedDataSetData = _UAPublishedDataSetData;
  UAPublishedDataItemsElement = _UAPublishedDataItemsElement;
  UAPublishedEventsElement = _UAPublishedEventsElement;
  UAPublishedVariableData = _UAPublishedVariableData;
  UAPublishedVariableDataCollection = _UAPublishedVariableDataCollection;
  UADataSetWriterData = _UADataSetWriterData;
  UAPubSubConfigurationData = _UAPubSubConfigurationData;
  UAPubSubConnectionDataCollection = _UAPubSubConnectionDataCollection;
  UAPubSubConnectionData = _UAPubSubConnectionData;
  UAFieldMetaData = _UAFieldMetaData;
  UAUadpDataSetReaderMessageParameters = _UAUadpDataSetReaderMessageParameters;
  UAUadpDataSetWriterMessageParameters = _UAUadpDataSetWriterMessageParameters;
  UAUadpWriterGroupMessageParameters = _UAUadpWriterGroupMessageParameters;
  UAWriterGroupData = _UAWriterGroupData;
  UAWriterGroupDataCollection = _UAWriterGroupDataCollection;
  UAWriterGroupElement = _UAWriterGroupElement;
  UAJsonWriterGroupMessageParameters = _UAJsonWriterGroupMessageParameters;
  UABrokerWriterGroupTransportParameters = _UABrokerWriterGroupTransportParameters;
  EasyUASubscriberSelector = _EasyUASubscriberSelector;
  UADataSetFieldData = _UADataSetFieldData;
  UADataSetSubscriptionDescriptor = _UADataSetSubscriptionDescriptor;
  UADataSetWriterDescriptor = _UADataSetWriterDescriptor;
  UAGuidDataSetFieldDataDictionary = _UAGuidDataSetFieldDataDictionary;
  UAPublisherId = _UAPublisherId;
  UAPubSubCommunicationParameters = _UAPubSubCommunicationParameters;
  UAPubSubConnectionDescriptor = _UAPubSubConnectionDescriptor;
  UADataSetHeader = _UADataSetHeader;
  UADataSetData = _UADataSetData;
  UADataSetFieldDescriptor = _UADataSetFieldDescriptor;
  UAPubSubResolverDescriptor = _UAPubSubResolverDescriptor;
  UAStringDataSetFieldDataDictionary = _UAStringDataSetFieldDataDictionary;
  UASubscribeDataSetFilter = _UASubscribeDataSetFilter;
  UASubscriberCommunicationParameters = _UASubscriberCommunicationParameters;
  UAWriterGroupDescriptor = _UAWriterGroupDescriptor;
  UAOptimizerPluginParameters = _UAOptimizerPluginParameters;
  UAClientServerTables = _UAServerTables;
  EasyUAClientComplexData = _EasyUAClientComplexData;
  UAComplexDataSubscriberPluginParameters = _UAComplexDataSubscriberPluginParameters;
  UAIndexRangeListFormatException = _UAIndexRangeListFormatException;
  UAIndexRangeListParser = _UAIndexRangeListParser;
  UANodeArguments = _UANodeArguments;
  EasyUADataChangeNotificationEventArgs = _EasyUADataChangeNotificationEventArgs;
  EasyUAEventNotificationEventArgs = _EasyUAEventNotificationEventArgs;
  EasyUAMonitoredItemArgumentsDictionary = _EasyUAMonitoredItemArgumentsDictionary;
  EasyUAServerConditionChangedEventArgs = _EasyUAServerConditionChangedEventArgs;
  EasyUASubscriptionChangeArguments = _EasyUASubscriptionChangeArguments;
  UAAttributeArguments = _UAAttributeArguments;
  UAAttributeDataResult = _UAAttributeDataResult;
  UABrowseArguments = _UABrowseArguments;
  UACallArguments = _UACallArguments;
  UAException = _UAException;
  UALogicalException = _UALogicalException;
  UAMonitoredItemArguments = _UAMonitoredItemArguments;
  EasyUAMonitoredItemArguments = _EasyUAMonitoredItemArguments;
  UANodeElementCollectionResult = _UANodeElementCollectionResult;
  UAReadArguments = _UAReadArguments;
  UAWriteArguments = _UAWriteArguments;
  UAWriteResult = _UAWriteResult;
  UAWriteValueArguments = _UAWriteValueArguments;
  UABrowsePathFormatException = _UABrowsePathFormatException;
  UABrowsePathParser = _UABrowsePathParser;
  UABrowsePath = _UABrowsePath;
  UABrowsePathElement = _UABrowsePathElement;
  UABrowsePathElementCollection = _UABrowsePathElementCollection;
  UAModelClientException = _Exception2;
  UAModellingException = _Exception2;
  UAModelNodeDescriptor = _UAModelNodeDescriptor;
  UACertificateGroupElement = _UACertificateGroupElement;
  UACertificateGroupElementCollection = _UACertificateGroupElementCollection;
  UAAttributeOperand = _UAAttributeOperand;
  UAContentFilterElement = _UAContentFilterElement;
  UAFilterOperand = _UAFilterOperand;
  UAFilterOperandCollection = _UAFilterOperandCollection;
  UALiteralOperand = _UALiteralOperand;
  UASimpleAttributeOperand = _UASimpleAttributeOperand;
  UASimpleAttributeOperandCollection = _UASimpleAttributeOperandCollection;
  UAClientAdaptableParameters = _UAClientAdaptableParameters;
  UAClientServerEngineParameters = _UAClientServerEngineParameters;
  EasyUAClientInstanceParameters = _EasyUAClientInstanceParameters;
  EasyUAClientMode = _EasyUAClientMode;
  EasyUAClientSharedParameters = _EasyUAClientSharedParameters;
  UACertificateAcceptancePolicy = _UACertificateAcceptancePolicy;
  EasyUAClientAdaptableParameters = _EasyUAClientAdaptableParameters;
  UAClientEngineParameters = _UAClientEngineParameters;
  UAClientMonitoredItemParameters = _UAClientMonitoredItemParameters;
  UAClientServerApplicationParameters = _UAClientServerApplicationParameters;
  EasyUAClientEngineParameters = _EasyUAClientEngineParameters;
  UAClientSessionParameters = _UAClientSessionParameters;
  UAClientSubscriptionParameters = _UAClientSubscriptionParameters;
  UADiscoveryParameters = _UADiscoveryParameters;
  UAEndpointDescriptionChecks = _UAEndpointDescriptionChecks;
  UAEndpointSelectionPolicy = _UAEndpointSelectionPolicy;
  UAEngineException = _UAEngineException;
  UAEnhancedClientSessionParameters = _UAClientSessionParameters;
  UAHostParameters = _UAHostParameters;
  UASmartClientEngineParameters = _UASmartClientEngineParameters;
  UASmartClientSessionParameters = _UASmartClientSessionParameters;
  UAUserInteractionParameters = _UAUserInteractionParameters;
  UAApplicationElement = _UAApplicationElement;
  UAApplicationDescription = _UAApplicationDescription;
  UAApplicationRecordDataType = _UAApplicationRecordDataType;
  UADiscoveryElement = _UADiscoveryElement;
  UADiscoveryElementCollection = _UADiscoveryElementCollection;
  UAGlobalApplicationDiscoveryQuery = _UAGlobalApplicationDiscoveryQuery;
  UALocalApplicationDiscoveryQuery = _UALocalApplicationDiscoveryQuery;
  UALocalEndpointDiscoveryQuery = _UALocalEndpointDiscoveryQuery;
  UANetworkServerDiscoveryQuery = _UANetworkServerDiscoveryQuery;
  UAQueryApplicationsFilter = _UAQueryApplicationsFilter;
  UAServerOnNetwork = _UAServerOnNetwork;
  UAEnumValue = _UAEnumValue;
  UADataTypeInfo = _UADataTypeInfo;
  UAEnumDefinition = _UAEnumDefinition;
  UAEnumDescription = _UAEnumDescription;
  UAEnumFieldInfo = _UAEnumFieldInfo;
  UAEnumTypeInfo = _UAEnumTypeInfo;
  UAEnumField = _UAEnumField;
  UAHeaderDataTypeSchema = _UAHeaderDataTypeSchema;
  UADataSetMetaData = _UADataSetMetaData;
  UASimpleTypeDescription = _UASimpleTypeDescription;
  UASimpleTypeInfo = _UASimpleTypeInfo;
  UAStructureDefinition = _UAStructureDefinition;
  UAStructureDescription = _UAStructureDescription;
  UAStructureField = _UAStructureField;
  UAStructureFieldInfo = _UAStructureFieldInfo;
  UAStructureTypeInfo = _UAStructureTypeInfo;
  UAServerDtmpParameters = _UAServerDtmpParameters;
  UADataTypeDescriptor = _UADataTypeDescriptor;
  UADataTypeSystemParameters = _UADataTypeSystemParameters;
  UAOpcBinaryDtsParameters = _UAOpcBinaryDtsParameters;
  UAServerDtmpPluginParameters = _UAServerDtmpPluginParameters;
  UAXmlSchemaDtsParameters = _UAXmlSchemaDtsParameters;
  UAEUInformation = _UAEUInformation;
  UARange = _UARange;
  ComEasyUAClientConnectionMonitoring = _EasyUAClientConnectionMonitoring;
  EasyUAClientSelector = _EasyUAClientSelector;
  EasyUAEngineException = _EasyUAEngineException;
  EasyUASpecializedClient = _EasyUASpecializedClient;
  StringUANodeIdDictionary = _StringUANodeIdReadOnlyDictionary;
  UAAttributeField = _UAAttributeField;
  UAAttributeFieldCollection = _UAAttributeFieldCollection;
  UABrowseParameters = _UABrowseParameters;
  UADataChangeFilter = _UADataChangeFilter;
  UAAttributeData = _UAAttributeData;
  UAEndpointDescriptor = _UAEndpointDescriptor;
  UAEndpointDescriptorCollection = _UAEndpointDescriptorCollection;
  UAEndpointDescriptorUANodeIdDictionary = _UAEndpointDescriptorUANodeIdReadOnlyDictionary;
  UAEventData = _UAEventData;
  UAEventFilter = _UAEventFilter;
  UAExtensionObject = _UAExtensionObject;
  UAFieldResultDictionary = _UAFieldResultDictionary;
  UAIndexRange = _UAIndexRange;
  UAIndexRangeList = _UAIndexRangeList;
  UAKeyValueDictionary = _UAKeyValueDictionary;
  UAKeyValuePair = _UAKeyValuePair;
  UAMonitoringParameters = _UAMonitoringParameters;
  UANodeDescriptor = _UANodeDescriptor;
  UANodeIdUAApplicationElementDictionary = _UANodeIdUAApplicationElementReadOnlyDictionary;
  UAReadParameters = _UAReadParameters;
  UAMethodOutputException = _UAMethodOutputException;
  UACallServiceException = _UACallServiceException;
  UAServiceResult = _UAServiceResult;
  UAStatusCode = _UAStatusCode;
  UAStatusCodeException = _UAStatusCodeException;
  UASubscriptionParameters = _UASubscriptionParameters;
  UATimeZoneData = _UATimeZoneData;
  UAComplexDataParameters = _UAComplexDataParameters;
  UAComplexDataClientPluginParameters = _UAComplexDataClientPluginParameters;
  UAGenericObject = _UAGenericObject;
  UANodeBrowseFilter = _UANodeBrowseFilter;
  AbstractEasyUAClientServerApplication = _EasyUAClientServerApplication;
  UACertificateArguments = _UACertificateArguments;
  UAIngestCertificateArguments = _UAIngestCertificateArguments;
  UAValidateCertificateArguments = _UAValidateCertificateArguments;
  NetSdkEasyUAClientServerApplication = _EasyUAClientServerApplication;
  UAAssureCertificateArguments = _UAAssureCertificateArguments;
  UACertificateRequestParameters = _UACertificateRequestParameters;
  UACertificateTypeElement = _UACertificateTypeElement;
  UACertificateTypeElementCollection = _UACertificateTypeElementCollection;
  UAExportCertificateArguments = _UAExportCertificateArguments;
  UAImportCertificateArguments = _UAImportCertificateArguments;
  UAObtainCertificateArguments = _UAObtainCertificateArguments;
  UACreateCertificateArguments = _UACreateCertificateArguments;
  UABaseEventObject = _UABaseEventObject;
  UAApplicationManifest = _UAApplicationManifest;
  UANodeIdFormatException = _UANodeIdFormatException;
  UANodeIdParser = _UANodeIdParser;
  UAQualifiedNameFormatException = _UAQualifiedNameFormatException;
  UAQualifiedNameParser = _UAQualifiedNameParser;
  UANodeElement = _UANodeElement;
  UANodeElementCollection = _UANodeElementCollection;
  UANodeId = _UANodeId;
  UANodeIdCollection = _UANodeIdCollection;
  UANodeIdSet = _UANodeIdSet;
  UAQualifiedName = _UAQualifiedName;
  UAQualifiedNameCollection = _UAQualifiedNameCollection;
  UAQualifiedNameSet = _UAQualifiedNameSet;


// *********************************************************************//
// Interface: _EasyUAClientSelector
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {CAD63DE0-9783-4FD2-A4DD-4837C10F2850}
// *********************************************************************//
  _EasyUAClientSelector = interface(IDispatch)
    ['{CAD63DE0-9783-4FD2-A4DD-4837C10F2850}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_Differentiator: WideString; safecall;
    procedure Set_Differentiator(const pRetVal: WideString); safecall;
    function Get_InstanceParameters: _EasyUAClientInstanceParameters; safecall;
    procedure _Set_InstanceParameters(const pRetVal: _EasyUAClientInstanceParameters); safecall;
    function Get_Isolated: WordBool; safecall;
    procedure Set_Isolated(pRetVal: WordBool); safecall;
    function Get_IsolatedParameters: _EasyUAClientAdaptableParameters; safecall;
    procedure _Set_IsolatedParameters(const pRetVal: _EasyUAClientAdaptableParameters); safecall;
    procedure Reset; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property Differentiator: WideString read Get_Differentiator write Set_Differentiator;
    property InstanceParameters: _EasyUAClientInstanceParameters read Get_InstanceParameters write _Set_InstanceParameters;
    property Isolated: WordBool read Get_Isolated write Set_Isolated;
    property IsolatedParameters: _EasyUAClientAdaptableParameters read Get_IsolatedParameters write _Set_IsolatedParameters;
  end;

// *********************************************************************//
// DispIntf:  _EasyUAClientSelectorDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {CAD63DE0-9783-4FD2-A4DD-4837C10F2850}
// *********************************************************************//
  _EasyUAClientSelectorDisp = dispinterface
    ['{CAD63DE0-9783-4FD2-A4DD-4837C10F2850}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property Differentiator: WideString dispid 1610743816;
    property InstanceParameters: _EasyUAClientInstanceParameters dispid 1610743818;
    property Isolated: WordBool dispid 1610743820;
    property IsolatedParameters: _EasyUAClientAdaptableParameters dispid 1610743822;
    procedure Reset; dispid 1610743824;
  end;

// *********************************************************************//
// Interface: _EasyUASpecializedClient
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2C94D060-0A90-45CD-B693-701E9EFBFF36}
// *********************************************************************//
  _EasyUASpecializedClient = interface(IDispatch)
    ['{2C94D060-0A90-45CD-B693-701E9EFBFF36}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_CustomReference: WideString; safecall;
    procedure Set_CustomReference(const pRetVal: WideString); safecall;
    function Clone: OleVariant; safecall;
    function GetService(const serviceType: _Type): OleVariant; safecall;
    function GetServiceByName(const serviceTypeName: WideString): OleVariant; safecall;
    function ValueEquals(other: OleVariant): WordBool; safecall;
    function Get_ClientSelector: _EasyUAClientSelector; safecall;
    procedure _Set_ClientSelector(const pRetVal: _EasyUAClientSelector); safecall;
    function Get_IsDerived: WordBool; safecall;
    function AsClient: _EasyUAClient; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property CustomReference: WideString read Get_CustomReference write Set_CustomReference;
    property ClientSelector: _EasyUAClientSelector read Get_ClientSelector write _Set_ClientSelector;
    property IsDerived: WordBool read Get_IsDerived;
  end;

// *********************************************************************//
// DispIntf:  _EasyUASpecializedClientDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2C94D060-0A90-45CD-B693-701E9EFBFF36}
// *********************************************************************//
  _EasyUASpecializedClientDisp = dispinterface
    ['{2C94D060-0A90-45CD-B693-701E9EFBFF36}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    property CustomReference: WideString dispid 1610743813;
    function Clone: OleVariant; dispid 1610743815;
    function GetService(const serviceType: _Type): OleVariant; dispid 1610743816;
    function GetServiceByName(const serviceTypeName: WideString): OleVariant; dispid 1610743817;
    function ValueEquals(other: OleVariant): WordBool; dispid 1610743818;
    property ClientSelector: _EasyUAClientSelector dispid 1610743819;
    property IsDerived: WordBool readonly dispid 1610743821;
    function AsClient: _EasyUAClient; dispid 1610743822;
  end;

// *********************************************************************//
// Interface: _UAAttributeField
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B98ECAAE-4281-4BF3-B05B-946CDB30897F}
// *********************************************************************//
  _UAAttributeField = interface(IDispatch)
    ['{B98ECAAE-4281-4BF3-B05B-946CDB30897F}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_State: OleVariant; safecall;
    procedure _Set_State(pRetVal: OleVariant); safecall;
    function MemberwiseClone: _OperationArguments; safecall;
    procedure SetState(State: OleVariant); safecall;
    function Get_Operand: _UASimpleAttributeOperand; safecall;
    procedure _Set_Operand(const pRetVal: _UASimpleAttributeOperand); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property State: OleVariant read Get_State write _Set_State;
    property Operand: _UASimpleAttributeOperand read Get_Operand write _Set_Operand;
  end;

// *********************************************************************//
// DispIntf:  _UAAttributeFieldDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B98ECAAE-4281-4BF3-B05B-946CDB30897F}
// *********************************************************************//
  _UAAttributeFieldDisp = dispinterface
    ['{B98ECAAE-4281-4BF3-B05B-946CDB30897F}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property State: OleVariant dispid 1610743814;
    function MemberwiseClone: _OperationArguments; dispid 1610743816;
    procedure SetState(State: OleVariant); dispid 1610743817;
    property Operand: _UASimpleAttributeOperand dispid 1610743818;
  end;

// *********************************************************************//
// Interface: _StringUANodeIdReadOnlyDictionary
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5F478C83-7438-4815-8EB0-5CFD4E704F37}
// *********************************************************************//
  _StringUANodeIdReadOnlyDictionary = interface(IDispatch)
    ['{5F478C83-7438-4815-8EB0-5CFD4E704F37}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_Item(key: OleVariant): _UANodeId; safecall;
    function Get_Count: Integer; safecall;
    function GetEnumerator: IEnumVARIANT; safecall;
    function ContainsKey(key: OleVariant): WordBool; safecall;
    function TryGetValue(key: OleVariant; out value: OleVariant): WordBool; safecall;
    function ContainsValue(value: OleVariant): WordBool; safecall;
    property ToString: WideString read Get_ToString;
    property Item[key: OleVariant]: _UANodeId read Get_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  _StringUANodeIdReadOnlyDictionaryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5F478C83-7438-4815-8EB0-5CFD4E704F37}
// *********************************************************************//
  _StringUANodeIdReadOnlyDictionaryDisp = dispinterface
    ['{5F478C83-7438-4815-8EB0-5CFD4E704F37}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property Item[key: OleVariant]: _UANodeId readonly dispid 0; default;
    property Count: Integer readonly dispid 1610743813;
    function GetEnumerator: IEnumVARIANT; dispid -4;
    function ContainsKey(key: OleVariant): WordBool; dispid 1610743815;
    function TryGetValue(key: OleVariant; out value: OleVariant): WordBool; dispid 1610743816;
    function ContainsValue(value: OleVariant): WordBool; dispid 1610743817;
  end;

// *********************************************************************//
// Interface: _UAAttributeFieldCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DB3969A7-EFA7-4DBF-B9BB-917C4E098064}
// *********************************************************************//
  _UAAttributeFieldCollection = interface(IDispatch)
    ['{DB3969A7-EFA7-4DBF-B9BB-917C4E098064}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_Item(index: Integer): _UAAttributeField; safecall;
    procedure _Set_Item(index: Integer; const pRetVal: _UAAttributeField); safecall;
    function Get_Count: Integer; safecall;
    function GetEnumerator: IEnumVARIANT; safecall;
    procedure Add(Item: OleVariant); safecall;
    procedure Clear; safecall;
    function Contains(Item: OleVariant): WordBool; safecall;
    function IndexOf(Item: OleVariant): Integer; safecall;
    procedure Insert(index: Integer; Item: OleVariant); safecall;
    function Remove(Item: OleVariant): WordBool; safecall;
    procedure RemoveAt(index: Integer); safecall;
    property ToString: WideString read Get_ToString;
    property Item[index: Integer]: _UAAttributeField read Get_Item write _Set_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  _UAAttributeFieldCollectionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DB3969A7-EFA7-4DBF-B9BB-917C4E098064}
// *********************************************************************//
  _UAAttributeFieldCollectionDisp = dispinterface
    ['{DB3969A7-EFA7-4DBF-B9BB-917C4E098064}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property Item[index: Integer]: _UAAttributeField dispid 0; default;
    property Count: Integer readonly dispid 1610743814;
    function GetEnumerator: IEnumVARIANT; dispid -4;
    procedure Add(Item: OleVariant); dispid 1610743816;
    procedure Clear; dispid 1610743817;
    function Contains(Item: OleVariant): WordBool; dispid 1610743818;
    function IndexOf(Item: OleVariant): Integer; dispid 1610743819;
    procedure Insert(index: Integer; Item: OleVariant); dispid 1610743820;
    function Remove(Item: OleVariant): WordBool; dispid 1610743821;
    procedure RemoveAt(index: Integer); dispid 1610743822;
  end;

// *********************************************************************//
// Interface: _UAEndpointDescriptorCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B62C28B1-A42F-400C-8C82-D6BE8EEE6455}
// *********************************************************************//
  _UAEndpointDescriptorCollection = interface(IDispatch)
    ['{B62C28B1-A42F-400C-8C82-D6BE8EEE6455}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_Item(index: Integer): _UAEndpointDescriptor; safecall;
    procedure _Set_Item(index: Integer; const pRetVal: _UAEndpointDescriptor); safecall;
    function Get_Count: Integer; safecall;
    function GetEnumerator: IEnumVARIANT; safecall;
    procedure Add(Item: OleVariant); safecall;
    procedure Clear; safecall;
    function Contains(Item: OleVariant): WordBool; safecall;
    function IndexOf(Item: OleVariant): Integer; safecall;
    procedure Insert(index: Integer; Item: OleVariant); safecall;
    function Remove(Item: OleVariant): WordBool; safecall;
    procedure RemoveAt(index: Integer); safecall;
    function Clone: OleVariant; safecall;
    property ToString: WideString read Get_ToString;
    property Item[index: Integer]: _UAEndpointDescriptor read Get_Item write _Set_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  _UAEndpointDescriptorCollectionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B62C28B1-A42F-400C-8C82-D6BE8EEE6455}
// *********************************************************************//
  _UAEndpointDescriptorCollectionDisp = dispinterface
    ['{B62C28B1-A42F-400C-8C82-D6BE8EEE6455}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property Item[index: Integer]: _UAEndpointDescriptor dispid 0; default;
    property Count: Integer readonly dispid 1610743814;
    function GetEnumerator: IEnumVARIANT; dispid -4;
    procedure Add(Item: OleVariant); dispid 1610743816;
    procedure Clear; dispid 1610743817;
    function Contains(Item: OleVariant): WordBool; dispid 1610743818;
    function IndexOf(Item: OleVariant): Integer; dispid 1610743819;
    procedure Insert(index: Integer; Item: OleVariant); dispid 1610743820;
    function Remove(Item: OleVariant): WordBool; dispid 1610743821;
    procedure RemoveAt(index: Integer); dispid 1610743822;
    function Clone: OleVariant; dispid 1610743823;
  end;

// *********************************************************************//
// Interface: _UAEndpointDescriptorUANodeIdReadOnlyDictionary
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {49652E16-8921-4980-B090-A16B2B5AFD4F}
// *********************************************************************//
  _UAEndpointDescriptorUANodeIdReadOnlyDictionary = interface(IDispatch)
    ['{49652E16-8921-4980-B090-A16B2B5AFD4F}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_Item(key: OleVariant): _UANodeId; safecall;
    function Get_Count: Integer; safecall;
    function GetEnumerator: IEnumVARIANT; safecall;
    function ContainsKey(key: OleVariant): WordBool; safecall;
    function TryGetValue(key: OleVariant; out value: OleVariant): WordBool; safecall;
    function ContainsValue(value: OleVariant): WordBool; safecall;
    property ToString: WideString read Get_ToString;
    property Item[key: OleVariant]: _UANodeId read Get_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  _UAEndpointDescriptorUANodeIdReadOnlyDictionaryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {49652E16-8921-4980-B090-A16B2B5AFD4F}
// *********************************************************************//
  _UAEndpointDescriptorUANodeIdReadOnlyDictionaryDisp = dispinterface
    ['{49652E16-8921-4980-B090-A16B2B5AFD4F}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property Item[key: OleVariant]: _UANodeId readonly dispid 0; default;
    property Count: Integer readonly dispid 1610743813;
    function GetEnumerator: IEnumVARIANT; dispid -4;
    function ContainsKey(key: OleVariant): WordBool; dispid 1610743815;
    function TryGetValue(key: OleVariant; out value: OleVariant): WordBool; dispid 1610743816;
    function ContainsValue(value: OleVariant): WordBool; dispid 1610743817;
  end;

// *********************************************************************//
// Interface: _UAFieldResultDictionary
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {30ECB8F5-C32F-40F0-BD69-397417BC354A}
// *********************************************************************//
  _UAFieldResultDictionary = interface(IDispatch)
    ['{30ECB8F5-C32F-40F0-BD69-397417BC354A}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_Item(key: OleVariant): _ValueResult; safecall;
    procedure _Set_Item(key: OleVariant; const pRetVal: _ValueResult); safecall;
    function Get_Count: Integer; safecall;
    function GetEnumerator: IEnumVARIANT; safecall;
    procedure Add(key: OleVariant; Item: OleVariant); safecall;
    procedure Clear; safecall;
    function ContainsKey(key: OleVariant): WordBool; safecall;
    function Remove(key: OleVariant): WordBool; safecall;
    function TryGetValue(key: OleVariant; out value: OleVariant): WordBool; safecall;
    function ContainsValue(value: OleVariant): WordBool; safecall;
    property ToString: WideString read Get_ToString;
    property Item[key: OleVariant]: _ValueResult read Get_Item write _Set_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  _UAFieldResultDictionaryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {30ECB8F5-C32F-40F0-BD69-397417BC354A}
// *********************************************************************//
  _UAFieldResultDictionaryDisp = dispinterface
    ['{30ECB8F5-C32F-40F0-BD69-397417BC354A}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property Item[key: OleVariant]: _ValueResult dispid 0; default;
    property Count: Integer readonly dispid 1610743814;
    function GetEnumerator: IEnumVARIANT; dispid -4;
    procedure Add(key: OleVariant; Item: OleVariant); dispid 1610743816;
    procedure Clear; dispid 1610743817;
    function ContainsKey(key: OleVariant): WordBool; dispid 1610743818;
    function Remove(key: OleVariant): WordBool; dispid 1610743819;
    function TryGetValue(key: OleVariant; out value: OleVariant): WordBool; dispid 1610743820;
    function ContainsValue(value: OleVariant): WordBool; dispid 1610743821;
  end;

// *********************************************************************//
// Interface: _UAKeyValueDictionary
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DC5653A0-EC58-41F3-B719-73EB4A04A154}
// *********************************************************************//
  _UAKeyValueDictionary = interface(IDispatch)
    ['{DC5653A0-EC58-41F3-B719-73EB4A04A154}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_Item(key: OleVariant): OleVariant; safecall;
    procedure _Set_Item(key: OleVariant; pRetVal: OleVariant); safecall;
    function Get_Count: Integer; safecall;
    function GetEnumerator: IEnumVARIANT; safecall;
    procedure Add(key: OleVariant; Item: OleVariant); safecall;
    procedure Clear; safecall;
    function ContainsKey(key: OleVariant): WordBool; safecall;
    function Remove(key: OleVariant): WordBool; safecall;
    function TryGetValue(key: OleVariant; out value: OleVariant): WordBool; safecall;
    function Clone: OleVariant; safecall;
    function ContainsValue(value: OleVariant): WordBool; safecall;
    property ToString: WideString read Get_ToString;
    property Item[key: OleVariant]: OleVariant read Get_Item write _Set_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  _UAKeyValueDictionaryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DC5653A0-EC58-41F3-B719-73EB4A04A154}
// *********************************************************************//
  _UAKeyValueDictionaryDisp = dispinterface
    ['{DC5653A0-EC58-41F3-B719-73EB4A04A154}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property Item[key: OleVariant]: OleVariant dispid 0; default;
    property Count: Integer readonly dispid 1610743814;
    function GetEnumerator: IEnumVARIANT; dispid -4;
    procedure Add(key: OleVariant; Item: OleVariant); dispid 1610743816;
    procedure Clear; dispid 1610743817;
    function ContainsKey(key: OleVariant): WordBool; dispid 1610743818;
    function Remove(key: OleVariant): WordBool; dispid 1610743819;
    function TryGetValue(key: OleVariant; out value: OleVariant): WordBool; dispid 1610743820;
    function Clone: OleVariant; dispid 1610743821;
    function ContainsValue(value: OleVariant): WordBool; dispid 1610743822;
  end;

// *********************************************************************//
// Interface: _UANodeIdUAApplicationElementReadOnlyDictionary
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {ED1E8655-709D-4630-9617-E51EF097C384}
// *********************************************************************//
  _UANodeIdUAApplicationElementReadOnlyDictionary = interface(IDispatch)
    ['{ED1E8655-709D-4630-9617-E51EF097C384}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_Item(key: OleVariant): _UAApplicationElement; safecall;
    function Get_Count: Integer; safecall;
    function GetEnumerator: IEnumVARIANT; safecall;
    function ContainsKey(key: OleVariant): WordBool; safecall;
    function TryGetValue(key: OleVariant; out value: OleVariant): WordBool; safecall;
    function ContainsValue(value: OleVariant): WordBool; safecall;
    property ToString: WideString read Get_ToString;
    property Item[key: OleVariant]: _UAApplicationElement read Get_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  _UANodeIdUAApplicationElementReadOnlyDictionaryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {ED1E8655-709D-4630-9617-E51EF097C384}
// *********************************************************************//
  _UANodeIdUAApplicationElementReadOnlyDictionaryDisp = dispinterface
    ['{ED1E8655-709D-4630-9617-E51EF097C384}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property Item[key: OleVariant]: _UAApplicationElement readonly dispid 0; default;
    property Count: Integer readonly dispid 1610743813;
    function GetEnumerator: IEnumVARIANT; dispid -4;
    function ContainsKey(key: OleVariant): WordBool; dispid 1610743815;
    function TryGetValue(key: OleVariant; out value: OleVariant): WordBool; dispid 1610743816;
    function ContainsValue(value: OleVariant): WordBool; dispid 1610743817;
  end;

// *********************************************************************//
// Interface: _UADataValue
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8007E7F1-6A08-48B5-AD64-A11A0ABE3C3E}
// *********************************************************************//
  _UADataValue = interface(IDispatch)
    ['{8007E7F1-6A08-48B5-AD64-A11A0ABE3C3E}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_ToString_2(const format: WideString; const formatProvider: IFormatProvider): WideString; safecall;
    function Get_ToString_3(const format: WideString): WideString; safecall;
    function Get_HasBadStatus: WordBool; safecall;
    function Get_HasGoodStatus: WordBool; safecall;
    function Get_HasServerTimestamp: WordBool; safecall;
    function Get_HasSourceTimestamp: WordBool; safecall;
    function Get_HasUncertainStatus: WordBool; safecall;
    function Get_HasValue: WordBool; safecall;
    function Get_ServerPicoseconds: Integer; safecall;
    procedure Set_ServerPicoseconds(pRetVal: Integer); safecall;
    function Get_ServerTimestamp: TDateTime; safecall;
    procedure Set_ServerTimestamp(pRetVal: TDateTime); safecall;
    function Get_ServerTimestampDouble: Double; safecall;
    procedure Set_ServerTimestampDouble(pRetVal: Double); safecall;
    function Get_ServerTimestampLocal: TDateTime; safecall;
    procedure Set_ServerTimestampLocal(pRetVal: TDateTime); safecall;
    function Get_ServerTimestampLocalDouble: Double; safecall;
    procedure Set_ServerTimestampLocalDouble(pRetVal: Double); safecall;
    function Get_SourcePicoseconds: Integer; safecall;
    procedure Set_SourcePicoseconds(pRetVal: Integer); safecall;
    function Get_SourceTimestamp: TDateTime; safecall;
    procedure Set_SourceTimestamp(pRetVal: TDateTime); safecall;
    function Get_SourceTimestampDouble: Double; safecall;
    procedure Set_SourceTimestampDouble(pRetVal: Double); safecall;
    function Get_SourceTimestampLocal: TDateTime; safecall;
    procedure Set_SourceTimestampLocal(pRetVal: TDateTime); safecall;
    function Get_SourceTimestampLocalDouble: Double; safecall;
    procedure Set_SourceTimestampLocalDouble(pRetVal: Double); safecall;
    function Get_StatusCode: _UAStatusCode; safecall;
    procedure _Set_StatusCode(const pRetVal: _UAStatusCode); safecall;
    function Get_StatusInfo: StatusInfo; safecall;
    function Get_value: OleVariant; safecall;
    procedure _Set_value(pRetVal: OleVariant); safecall;
    function Get_ValueType: _Type; safecall;
    function Get_ValueTypeName: WideString; safecall;
    function DisplayValue: WideString; safecall;
    procedure SetValue(value: OleVariant); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property ToString_2[const format: WideString; const formatProvider: IFormatProvider]: WideString read Get_ToString_2;
    property ToString_3[const format: WideString]: WideString read Get_ToString_3;
    property HasBadStatus: WordBool read Get_HasBadStatus;
    property HasGoodStatus: WordBool read Get_HasGoodStatus;
    property HasServerTimestamp: WordBool read Get_HasServerTimestamp;
    property HasSourceTimestamp: WordBool read Get_HasSourceTimestamp;
    property HasUncertainStatus: WordBool read Get_HasUncertainStatus;
    property HasValue: WordBool read Get_HasValue;
    property ServerPicoseconds: Integer read Get_ServerPicoseconds write Set_ServerPicoseconds;
    property ServerTimestamp: TDateTime read Get_ServerTimestamp write Set_ServerTimestamp;
    property ServerTimestampDouble: Double read Get_ServerTimestampDouble write Set_ServerTimestampDouble;
    property ServerTimestampLocal: TDateTime read Get_ServerTimestampLocal write Set_ServerTimestampLocal;
    property ServerTimestampLocalDouble: Double read Get_ServerTimestampLocalDouble write Set_ServerTimestampLocalDouble;
    property SourcePicoseconds: Integer read Get_SourcePicoseconds write Set_SourcePicoseconds;
    property SourceTimestamp: TDateTime read Get_SourceTimestamp write Set_SourceTimestamp;
    property SourceTimestampDouble: Double read Get_SourceTimestampDouble write Set_SourceTimestampDouble;
    property SourceTimestampLocal: TDateTime read Get_SourceTimestampLocal write Set_SourceTimestampLocal;
    property SourceTimestampLocalDouble: Double read Get_SourceTimestampLocalDouble write Set_SourceTimestampLocalDouble;
    property StatusCode: _UAStatusCode read Get_StatusCode write _Set_StatusCode;
    property StatusInfo: StatusInfo read Get_StatusInfo;
    property value: OleVariant read Get_value write _Set_value;
    property ValueType: _Type read Get_ValueType;
    property ValueTypeName: WideString read Get_ValueTypeName;
  end;

// *********************************************************************//
// DispIntf:  _UADataValueDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8007E7F1-6A08-48B5-AD64-A11A0ABE3C3E}
// *********************************************************************//
  _UADataValueDisp = dispinterface
    ['{8007E7F1-6A08-48B5-AD64-A11A0ABE3C3E}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property ToString_2[const format: WideString; const formatProvider: IFormatProvider]: WideString readonly dispid 1610743814;
    property ToString_3[const format: WideString]: WideString readonly dispid 1610743815;
    property HasBadStatus: WordBool readonly dispid 1610743816;
    property HasGoodStatus: WordBool readonly dispid 1610743817;
    property HasServerTimestamp: WordBool readonly dispid 1610743818;
    property HasSourceTimestamp: WordBool readonly dispid 1610743819;
    property HasUncertainStatus: WordBool readonly dispid 1610743820;
    property HasValue: WordBool readonly dispid 1610743821;
    property ServerPicoseconds: Integer dispid 1610743822;
    property ServerTimestamp: TDateTime dispid 1610743824;
    property ServerTimestampDouble: Double dispid 1610743826;
    property ServerTimestampLocal: TDateTime dispid 1610743828;
    property ServerTimestampLocalDouble: Double dispid 1610743830;
    property SourcePicoseconds: Integer dispid 1610743832;
    property SourceTimestamp: TDateTime dispid 1610743834;
    property SourceTimestampDouble: Double dispid 1610743836;
    property SourceTimestampLocal: TDateTime dispid 1610743838;
    property SourceTimestampLocalDouble: Double dispid 1610743840;
    property StatusCode: _UAStatusCode dispid 1610743842;
    property StatusInfo: StatusInfo readonly dispid 1610743844;
    property value: OleVariant dispid 1610743845;
    property ValueType: _Type readonly dispid 1610743847;
    property ValueTypeName: WideString readonly dispid 1610743848;
    function DisplayValue: WideString; dispid 1610743849;
    procedure SetValue(value: OleVariant); dispid 1610743850;
  end;

// *********************************************************************//
// Interface: _UAEventData
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {865781B1-A39D-4513-A283-6234A3205CDB}
// *********************************************************************//
  _UAEventData = interface(IDispatch)
    ['{865781B1-A39D-4513-A283-6234A3205CDB}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_BaseEvent: _UABaseEventObject; safecall;
    function Get_FieldResults: _UAFieldResultDictionary; safecall;
    procedure _Set_FieldResults(const pRetVal: _UAFieldResultDictionary); safecall;
    procedure SetFieldValue(attributeField: OleVariant; value: OleVariant); safecall;
    function TryGetFieldValue(attributeField: OleVariant; out value: OleVariant): WordBool; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property BaseEvent: _UABaseEventObject read Get_BaseEvent;
    property FieldResults: _UAFieldResultDictionary read Get_FieldResults write _Set_FieldResults;
  end;

// *********************************************************************//
// DispIntf:  _UAEventDataDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {865781B1-A39D-4513-A283-6234A3205CDB}
// *********************************************************************//
  _UAEventDataDisp = dispinterface
    ['{865781B1-A39D-4513-A283-6234A3205CDB}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property BaseEvent: _UABaseEventObject readonly dispid 1610743814;
    property FieldResults: _UAFieldResultDictionary dispid 1610743815;
    procedure SetFieldValue(attributeField: OleVariant; value: OleVariant); dispid 1610743817;
    function TryGetFieldValue(attributeField: OleVariant; out value: OleVariant): WordBool; dispid 1610743818;
  end;

// *********************************************************************//
// Interface: _UAExtensionObject
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F01EF350-CBBA-46B2-96FA-8590C6568C21}
// *********************************************************************//
  _UAExtensionObject = interface(IDispatch)
    ['{F01EF350-CBBA-46B2-96FA-8590C6568C21}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_BinaryBody: OleVariant; safecall;
    procedure _Set_BinaryBody(pRetVal: OleVariant); safecall;
    function Get_Body: OleVariant; safecall;
    procedure _Set_Body(pRetVal: OleVariant); safecall;
    function Get_dataTypeEncodingId: _UANodeId; safecall;
    procedure _Set_dataTypeEncodingId(const pRetVal: _UANodeId); safecall;
    function Get_extensionObjectType: UAExtensionObjectType; safecall;
    function Get_XmlBodyText: WideString; safecall;
    procedure Set_XmlBodyText(const pRetVal: WideString); safecall;
    procedure SetBinaryBody(var BinaryBody: PSafeArray); safecall;
    procedure SetBody(Body: OleVariant); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property BinaryBody: OleVariant read Get_BinaryBody write _Set_BinaryBody;
    property Body: OleVariant read Get_Body write _Set_Body;
    property dataTypeEncodingId: _UANodeId read Get_dataTypeEncodingId write _Set_dataTypeEncodingId;
    property extensionObjectType: UAExtensionObjectType read Get_extensionObjectType;
    property XmlBodyText: WideString read Get_XmlBodyText write Set_XmlBodyText;
  end;

// *********************************************************************//
// DispIntf:  _UAExtensionObjectDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F01EF350-CBBA-46B2-96FA-8590C6568C21}
// *********************************************************************//
  _UAExtensionObjectDisp = dispinterface
    ['{F01EF350-CBBA-46B2-96FA-8590C6568C21}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property BinaryBody: OleVariant dispid 1610743814;
    property Body: OleVariant dispid 1610743816;
    property dataTypeEncodingId: _UANodeId dispid 1610743818;
    property extensionObjectType: UAExtensionObjectType readonly dispid 1610743820;
    property XmlBodyText: WideString dispid 1610743821;
    procedure SetBinaryBody(var BinaryBody: {NOT_OLEAUTO(PSafeArray)}OleVariant); dispid 1610743823;
    procedure SetBody(Body: OleVariant); dispid 1610743824;
  end;

// *********************************************************************//
// Interface: _UAIndexRange
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7EC9D06E-F36E-466E-9213-ADAFFC0B9789}
// *********************************************************************//
  _UAIndexRange = interface(IDispatch)
    ['{7EC9D06E-F36E-466E-9213-ADAFFC0B9789}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_IsSingle: WordBool; safecall;
    function Get_Maximum: Integer; safecall;
    procedure Set_Maximum(pRetVal: Integer); safecall;
    function Get_Minimum: Integer; safecall;
    procedure Set_Minimum(pRetVal: Integer); safecall;
    function Get_Span: Integer; safecall;
    procedure SetRange(Minimum: Integer; Maximum: Integer); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property IsSingle: WordBool read Get_IsSingle;
    property Maximum: Integer read Get_Maximum write Set_Maximum;
    property Minimum: Integer read Get_Minimum write Set_Minimum;
    property Span: Integer read Get_Span;
  end;

// *********************************************************************//
// DispIntf:  _UAIndexRangeDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7EC9D06E-F36E-466E-9213-ADAFFC0B9789}
// *********************************************************************//
  _UAIndexRangeDisp = dispinterface
    ['{7EC9D06E-F36E-466E-9213-ADAFFC0B9789}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property IsSingle: WordBool readonly dispid 1610743814;
    property Maximum: Integer dispid 1610743815;
    property Minimum: Integer dispid 1610743817;
    property Span: Integer readonly dispid 1610743819;
    procedure SetRange(Minimum: Integer; Maximum: Integer); dispid 1610743820;
  end;

// *********************************************************************//
// Interface: _UAIndexRangeList
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1C890D25-D1FA-49EF-A5DB-077F9176324F}
// *********************************************************************//
  _UAIndexRangeList = interface(IDispatch)
    ['{1C890D25-D1FA-49EF-A5DB-077F9176324F}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_Item(index: Integer): _UAIndexRange; safecall;
    procedure _Set_Item(index: Integer; const pRetVal: _UAIndexRange); safecall;
    function Get_Count: Integer; safecall;
    function GetEnumerator: IEnumVARIANT; safecall;
    procedure Add(Item: OleVariant); safecall;
    procedure Clear; safecall;
    function Contains(Item: OleVariant): WordBool; safecall;
    function IndexOf(Item: OleVariant): Integer; safecall;
    procedure Insert(index: Integer; Item: OleVariant); safecall;
    function Remove(Item: OleVariant): WordBool; safecall;
    procedure RemoveAt(index: Integer); safecall;
    function Get_ArrayLength: Integer; safecall;
    function Get_AsString: WideString; safecall;
    function Get_LongArrayLength: Int64; safecall;
    function Clone: OleVariant; safecall;
    property ToString: WideString read Get_ToString;
    property Item[index: Integer]: _UAIndexRange read Get_Item write _Set_Item; default;
    property Count: Integer read Get_Count;
    property ArrayLength: Integer read Get_ArrayLength;
    property AsString: WideString read Get_AsString;
    property LongArrayLength: Int64 read Get_LongArrayLength;
  end;

// *********************************************************************//
// DispIntf:  _UAIndexRangeListDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1C890D25-D1FA-49EF-A5DB-077F9176324F}
// *********************************************************************//
  _UAIndexRangeListDisp = dispinterface
    ['{1C890D25-D1FA-49EF-A5DB-077F9176324F}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property Item[index: Integer]: _UAIndexRange dispid 0; default;
    property Count: Integer readonly dispid 1610743814;
    function GetEnumerator: IEnumVARIANT; dispid -4;
    procedure Add(Item: OleVariant); dispid 1610743816;
    procedure Clear; dispid 1610743817;
    function Contains(Item: OleVariant): WordBool; dispid 1610743818;
    function IndexOf(Item: OleVariant): Integer; dispid 1610743819;
    procedure Insert(index: Integer; Item: OleVariant); dispid 1610743820;
    function Remove(Item: OleVariant): WordBool; dispid 1610743821;
    procedure RemoveAt(index: Integer); dispid 1610743822;
    property ArrayLength: Integer readonly dispid 1610743823;
    property AsString: WideString readonly dispid 1610743824;
    property LongArrayLength: Int64 readonly dispid 1610743825;
    function Clone: OleVariant; dispid 1610743826;
  end;

// *********************************************************************//
// Interface: _UAKeyValuePair
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AA44D00D-CA8A-4893-9046-ADAC86691C56}
// *********************************************************************//
  _UAKeyValuePair = interface(IDispatch)
    ['{AA44D00D-CA8A-4893-9046-ADAC86691C56}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_key: _UAQualifiedName; safecall;
    procedure _Set_key(const pRetVal: _UAQualifiedName); safecall;
    function Get_value: OleVariant; safecall;
    procedure _Set_value(pRetVal: OleVariant); safecall;
    procedure SetValue(value: OleVariant); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property key: _UAQualifiedName read Get_key write _Set_key;
    property value: OleVariant read Get_value write _Set_value;
  end;

// *********************************************************************//
// DispIntf:  _UAKeyValuePairDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AA44D00D-CA8A-4893-9046-ADAC86691C56}
// *********************************************************************//
  _UAKeyValuePairDisp = dispinterface
    ['{AA44D00D-CA8A-4893-9046-ADAC86691C56}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property key: _UAQualifiedName dispid 1610743814;
    property value: OleVariant dispid 1610743816;
    procedure SetValue(value: OleVariant); dispid 1610743818;
  end;

// *********************************************************************//
// Interface: _UAServiceResult
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4FC070CC-3154-410D-8C6C-102D49B9E192}
// *********************************************************************//
  _UAServiceResult = interface(IDispatch)
    ['{4FC070CC-3154-410D-8C6C-102D49B9E192}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_AdditionalInfo: WideString; safecall;
    procedure Set_AdditionalInfo(const pRetVal: WideString); safecall;
    function Get_Description: WideString; safecall;
    procedure Set_Description(const pRetVal: WideString); safecall;
    function Get_InnerResult: _UAServiceResult; safecall;
    procedure _Set_InnerResult(const pRetVal: _UAServiceResult); safecall;
    function Get_Message: WideString; safecall;
    function Get_QualifiedSymbolicId: _UAQualifiedName; safecall;
    procedure _Set_QualifiedSymbolicId(const pRetVal: _UAQualifiedName); safecall;
    function Get_Text: WideString; safecall;
    function Get_StatusCode: _UAStatusCode; safecall;
    procedure _Set_StatusCode(const pRetVal: _UAStatusCode); safecall;
    function ToUACodeBits: UACodeBits; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property AdditionalInfo: WideString read Get_AdditionalInfo write Set_AdditionalInfo;
    property Description: WideString read Get_Description write Set_Description;
    property InnerResult: _UAServiceResult read Get_InnerResult write _Set_InnerResult;
    property Message: WideString read Get_Message;
    property QualifiedSymbolicId: _UAQualifiedName read Get_QualifiedSymbolicId write _Set_QualifiedSymbolicId;
    property Text: WideString read Get_Text;
    property StatusCode: _UAStatusCode read Get_StatusCode write _Set_StatusCode;
  end;

// *********************************************************************//
// DispIntf:  _UAServiceResultDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4FC070CC-3154-410D-8C6C-102D49B9E192}
// *********************************************************************//
  _UAServiceResultDisp = dispinterface
    ['{4FC070CC-3154-410D-8C6C-102D49B9E192}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property AdditionalInfo: WideString dispid 1610743814;
    property Description: WideString dispid 1610743816;
    property InnerResult: _UAServiceResult dispid 1610743818;
    property Message: WideString readonly dispid 1610743820;
    property QualifiedSymbolicId: _UAQualifiedName dispid 1610743821;
    property Text: WideString readonly dispid 1610743823;
    property StatusCode: _UAStatusCode dispid 1610743824;
    function ToUACodeBits: UACodeBits; dispid 1610743826;
  end;

// *********************************************************************//
// Interface: _UAStatusCode
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4B00D336-5728-47D1-B3CE-585C09DBE8E5}
// *********************************************************************//
  _UAStatusCode = interface(IDispatch)
    ['{4B00D336-5728-47D1-B3CE-585C09DBE8E5}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_ToString_2(const format: WideString; const formatProvider: IFormatProvider): WideString; safecall;
    function Get_ToString_3(const format: WideString): WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_CodeBits: UACodeBits; safecall;
    procedure Set_CodeBits(pRetVal: UACodeBits); safecall;
    function Get_CodeBitsSymbol: WideString; safecall;
    procedure Set_CodeBitsSymbol(const pRetVal: WideString); safecall;
    function Get_Condition: Smallint; safecall;
    procedure Set_Condition(pRetVal: Smallint); safecall;
    function Get_Description: WideString; safecall;
    function Get_FlagBits: Integer; safecall;
    procedure Set_FlagBits(pRetVal: Integer); safecall;
    function Get_HasDataValueInfo: WordBool; safecall;
    function Get_InfoType: UAInfoType; safecall;
    procedure Set_InfoType(pRetVal: UAInfoType); safecall;
    function Get_InternalValue: Integer; safecall;
    procedure Set_InternalValue(pRetVal: Integer); safecall;
    function Get_IsBad: WordBool; safecall;
    function Get_IsGood: WordBool; safecall;
    function Get_IsUncertain: WordBool; safecall;
    function Get_LimitInfo: UALimitInfo; safecall;
    procedure Set_LimitInfo(pRetVal: UALimitInfo); safecall;
    function Get_Overflow: WordBool; safecall;
    procedure Set_Overflow(pRetVal: WordBool); safecall;
    function Get_Severity: UASeverity; safecall;
    procedure Set_Severity(pRetVal: UASeverity); safecall;
    function Get_SemanticsChanged: WordBool; safecall;
    procedure Set_SemanticsChanged(pRetVal: WordBool); safecall;
    function Get_StatusInfo: StatusInfo; safecall;
    function Get_StructureChanged: WordBool; safecall;
    procedure Set_StructureChanged(pRetVal: WordBool); safecall;
    function ToInt64: Int64; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property ToString_2[const format: WideString; const formatProvider: IFormatProvider]: WideString read Get_ToString_2;
    property ToString_3[const format: WideString]: WideString read Get_ToString_3;
    property CodeBits: UACodeBits read Get_CodeBits write Set_CodeBits;
    property CodeBitsSymbol: WideString read Get_CodeBitsSymbol write Set_CodeBitsSymbol;
    property Condition: Smallint read Get_Condition write Set_Condition;
    property Description: WideString read Get_Description;
    property FlagBits: Integer read Get_FlagBits write Set_FlagBits;
    property HasDataValueInfo: WordBool read Get_HasDataValueInfo;
    property InfoType: UAInfoType read Get_InfoType write Set_InfoType;
    property InternalValue: Integer read Get_InternalValue write Set_InternalValue;
    property IsBad: WordBool read Get_IsBad;
    property IsGood: WordBool read Get_IsGood;
    property IsUncertain: WordBool read Get_IsUncertain;
    property LimitInfo: UALimitInfo read Get_LimitInfo write Set_LimitInfo;
    property Overflow: WordBool read Get_Overflow write Set_Overflow;
    property Severity: UASeverity read Get_Severity write Set_Severity;
    property SemanticsChanged: WordBool read Get_SemanticsChanged write Set_SemanticsChanged;
    property StatusInfo: StatusInfo read Get_StatusInfo;
    property StructureChanged: WordBool read Get_StructureChanged write Set_StructureChanged;
  end;

// *********************************************************************//
// DispIntf:  _UAStatusCodeDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4B00D336-5728-47D1-B3CE-585C09DBE8E5}
// *********************************************************************//
  _UAStatusCodeDisp = dispinterface
    ['{4B00D336-5728-47D1-B3CE-585C09DBE8E5}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    property ToString_2[const format: WideString; const formatProvider: IFormatProvider]: WideString readonly dispid 1610743813;
    property ToString_3[const format: WideString]: WideString readonly dispid 1610743814;
    function Clone: OleVariant; dispid 1610743815;
    property CodeBits: UACodeBits dispid 1610743816;
    property CodeBitsSymbol: WideString dispid 1610743818;
    property Condition: Smallint dispid 1610743820;
    property Description: WideString readonly dispid 1610743822;
    property FlagBits: Integer dispid 1610743823;
    property HasDataValueInfo: WordBool readonly dispid 1610743825;
    property InfoType: UAInfoType dispid 1610743826;
    property InternalValue: Integer dispid 1610743828;
    property IsBad: WordBool readonly dispid 1610743830;
    property IsGood: WordBool readonly dispid 1610743831;
    property IsUncertain: WordBool readonly dispid 1610743832;
    property LimitInfo: UALimitInfo dispid 1610743833;
    property Overflow: WordBool dispid 1610743835;
    property Severity: UASeverity dispid 1610743837;
    property SemanticsChanged: WordBool dispid 1610743839;
    property StatusInfo: StatusInfo readonly dispid 1610743841;
    property StructureChanged: WordBool dispid 1610743842;
    function ToInt64: Int64; dispid 1610743844;
  end;

// *********************************************************************//
// Interface: _UATimeZoneData
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {00C84025-D680-4152-8E77-11F7C7807E06}
// *********************************************************************//
  _UATimeZoneData = interface(IDispatch)
    ['{00C84025-D680-4152-8E77-11F7C7807E06}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_DaylightSavingInOffset: WordBool; safecall;
    procedure Set_DaylightSavingInOffset(pRetVal: WordBool); safecall;
    function Get_Offset: Smallint; safecall;
    procedure Set_Offset(pRetVal: Smallint); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DaylightSavingInOffset: WordBool read Get_DaylightSavingInOffset write Set_DaylightSavingInOffset;
    property Offset: Smallint read Get_Offset write Set_Offset;
  end;

// *********************************************************************//
// DispIntf:  _UATimeZoneDataDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {00C84025-D680-4152-8E77-11F7C7807E06}
// *********************************************************************//
  _UATimeZoneDataDisp = dispinterface
    ['{00C84025-D680-4152-8E77-11F7C7807E06}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property DaylightSavingInOffset: WordBool dispid 1610743814;
    property Offset: Smallint dispid 1610743816;
  end;

// *********************************************************************//
// Interface: _UAEndpointDescriptor
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {39E66E2C-2192-414C-86D8-41022342C186}
// *********************************************************************//
  _UAEndpointDescriptor = interface(IDispatch)
    ['{39E66E2C-2192-414C-86D8-41022342C186}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_AliasName: WideString; safecall;
    procedure Set_AliasName(const pRetVal: WideString); safecall;
    function Get_IsAliased: WordBool; safecall;
    function Get_Authority: WideString; safecall;
    procedure Set_Authority(const pRetVal: WideString); safecall;
    function Get_DescriptorString: WideString; safecall;
    procedure Set_DescriptorString(const pRetVal: WideString); safecall;
    function Get_PathAndQuery: WideString; safecall;
    procedure Set_PathAndQuery(const pRetVal: WideString); safecall;
    function Get_SchemeAndAuthority: WideString; safecall;
    procedure Set_SchemeAndAuthority(const pRetVal: WideString); safecall;
    function Get_UserInfo: WideString; safecall;
    procedure Set_UserInfo(const pRetVal: WideString); safecall;
    function Get_UrlString: WideString; safecall;
    procedure Set_UrlString(const pRetVal: WideString); safecall;
    function Get_Fragment: WideString; safecall;
    procedure Set_Fragment(const pRetVal: WideString); safecall;
    function Get_Host: WideString; safecall;
    procedure Set_Host(const pRetVal: WideString); safecall;
    function Get_IsNull: WordBool; safecall;
    function Get_Password: WideString; safecall;
    procedure Set_Password(const pRetVal: WideString); safecall;
    function Get_Path: WideString; safecall;
    procedure Set_Path(const pRetVal: WideString); safecall;
    function Get_Port: Integer; safecall;
    procedure Set_Port(pRetVal: Integer); safecall;
    function Get_prefix: WideString; safecall;
    procedure Set_prefix(const pRetVal: WideString); safecall;
    function Get_Query: WideString; safecall;
    procedure Set_Query(const pRetVal: WideString); safecall;
    function Get_Scheme: WideString; safecall;
    procedure Set_Scheme(const pRetVal: WideString); safecall;
    function Get_UserName: WideString; safecall;
    procedure Set_UserName(const pRetVal: WideString); safecall;
    function Get_NetworkSecurity: _NetworkSecurity; safecall;
    procedure _Set_NetworkSecurity(const pRetVal: _NetworkSecurity); safecall;
    function Get_CertificateAcceptancePolicy: _UACertificateAcceptancePolicy; safecall;
    procedure _Set_CertificateAcceptancePolicy(const pRetVal: _UACertificateAcceptancePolicy); safecall;
    function Get_certificateSubId: WideString; safecall;
    procedure Set_certificateSubId(const pRetVal: WideString); safecall;
    function Get_EndpointSelectionPolicy: _UAEndpointSelectionPolicy; safecall;
    procedure _Set_EndpointSelectionPolicy(const pRetVal: _UAEndpointSelectionPolicy); safecall;
    function Get_HasServerCertificate: WordBool; safecall;
    function Get_ServerCertificate: _PkiCertificate; safecall;
    procedure _Set_ServerCertificate(const pRetVal: _PkiCertificate); safecall;
    function Get_ServerCertificateByteArray: OleVariant; safecall;
    procedure _Set_ServerCertificateByteArray(pRetVal: OleVariant); safecall;
    function Get_UserIdentity: _UserIdentity; safecall;
    procedure _Set_UserIdentity(const pRetVal: _UserIdentity); safecall;
    function Get_UserTokenPolicyId: WideString; safecall;
    procedure Set_UserTokenPolicyId(const pRetVal: WideString); safecall;
    procedure SetServerCertificateByteArray(value: OleVariant); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property AliasName: WideString read Get_AliasName write Set_AliasName;
    property IsAliased: WordBool read Get_IsAliased;
    property Authority: WideString read Get_Authority write Set_Authority;
    property DescriptorString: WideString read Get_DescriptorString write Set_DescriptorString;
    property PathAndQuery: WideString read Get_PathAndQuery write Set_PathAndQuery;
    property SchemeAndAuthority: WideString read Get_SchemeAndAuthority write Set_SchemeAndAuthority;
    property UserInfo: WideString read Get_UserInfo write Set_UserInfo;
    property UrlString: WideString read Get_UrlString write Set_UrlString;
    property Fragment: WideString read Get_Fragment write Set_Fragment;
    property Host: WideString read Get_Host write Set_Host;
    property IsNull: WordBool read Get_IsNull;
    property Password: WideString read Get_Password write Set_Password;
    property Path: WideString read Get_Path write Set_Path;
    property Port: Integer read Get_Port write Set_Port;
    property prefix: WideString read Get_prefix write Set_prefix;
    property Query: WideString read Get_Query write Set_Query;
    property Scheme: WideString read Get_Scheme write Set_Scheme;
    property UserName: WideString read Get_UserName write Set_UserName;
    property NetworkSecurity: _NetworkSecurity read Get_NetworkSecurity write _Set_NetworkSecurity;
    property CertificateAcceptancePolicy: _UACertificateAcceptancePolicy read Get_CertificateAcceptancePolicy write _Set_CertificateAcceptancePolicy;
    property certificateSubId: WideString read Get_certificateSubId write Set_certificateSubId;
    property EndpointSelectionPolicy: _UAEndpointSelectionPolicy read Get_EndpointSelectionPolicy write _Set_EndpointSelectionPolicy;
    property HasServerCertificate: WordBool read Get_HasServerCertificate;
    property ServerCertificate: _PkiCertificate read Get_ServerCertificate write _Set_ServerCertificate;
    property ServerCertificateByteArray: OleVariant read Get_ServerCertificateByteArray write _Set_ServerCertificateByteArray;
    property UserIdentity: _UserIdentity read Get_UserIdentity write _Set_UserIdentity;
    property UserTokenPolicyId: WideString read Get_UserTokenPolicyId write Set_UserTokenPolicyId;
  end;

// *********************************************************************//
// DispIntf:  _UAEndpointDescriptorDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {39E66E2C-2192-414C-86D8-41022342C186}
// *********************************************************************//
  _UAEndpointDescriptorDisp = dispinterface
    ['{39E66E2C-2192-414C-86D8-41022342C186}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property AliasName: WideString dispid 1610743814;
    property IsAliased: WordBool readonly dispid 1610743816;
    property Authority: WideString dispid 1610743817;
    property DescriptorString: WideString dispid 1610743819;
    property PathAndQuery: WideString dispid 1610743821;
    property SchemeAndAuthority: WideString dispid 1610743823;
    property UserInfo: WideString dispid 1610743825;
    property UrlString: WideString dispid 1610743827;
    property Fragment: WideString dispid 1610743829;
    property Host: WideString dispid 1610743831;
    property IsNull: WordBool readonly dispid 1610743833;
    property Password: WideString dispid 1610743834;
    property Path: WideString dispid 1610743836;
    property Port: Integer dispid 1610743838;
    property prefix: WideString dispid 1610743840;
    property Query: WideString dispid 1610743842;
    property Scheme: WideString dispid 1610743844;
    property UserName: WideString dispid 1610743846;
    property NetworkSecurity: _NetworkSecurity dispid 1610743848;
    property CertificateAcceptancePolicy: _UACertificateAcceptancePolicy dispid 1610743850;
    property certificateSubId: WideString dispid 1610743852;
    property EndpointSelectionPolicy: _UAEndpointSelectionPolicy dispid 1610743854;
    property HasServerCertificate: WordBool readonly dispid 1610743856;
    property ServerCertificate: _PkiCertificate dispid 1610743857;
    property ServerCertificateByteArray: OleVariant dispid 1610743859;
    property UserIdentity: _UserIdentity dispid 1610743861;
    property UserTokenPolicyId: WideString dispid 1610743863;
    procedure SetServerCertificateByteArray(value: OleVariant); dispid 1610743865;
  end;

// *********************************************************************//
// Interface: _UANodeDescriptor
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8687F067-3D6F-41DB-B149-33225CE13A48}
// *********************************************************************//
  _UANodeDescriptor = interface(IDispatch)
    ['{8687F067-3D6F-41DB-B149-33225CE13A48}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_AliasName: WideString; safecall;
    procedure Set_AliasName(const pRetVal: WideString); safecall;
    function Get_IsAliased: WordBool; safecall;
    function Get_ArgumentString: WideString; safecall;
    function Get_browsePath: _UABrowsePath; safecall;
    procedure _Set_browsePath(const pRetVal: _UABrowsePath); safecall;
    function Get_HasBrowsePath: WordBool; safecall;
    function Get_HasNodeId: WordBool; safecall;
    function Get_IsNull: WordBool; safecall;
    function Get_NodeId: _UANodeId; safecall;
    procedure _Set_NodeId(const pRetVal: _UANodeId); safecall;
    function Flatten: _UANodeDescriptor; safecall;
    function Match(other: OleVariant): WordBool; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property AliasName: WideString read Get_AliasName write Set_AliasName;
    property IsAliased: WordBool read Get_IsAliased;
    property ArgumentString: WideString read Get_ArgumentString;
    property browsePath: _UABrowsePath read Get_browsePath write _Set_browsePath;
    property HasBrowsePath: WordBool read Get_HasBrowsePath;
    property HasNodeId: WordBool read Get_HasNodeId;
    property IsNull: WordBool read Get_IsNull;
    property NodeId: _UANodeId read Get_NodeId write _Set_NodeId;
  end;

// *********************************************************************//
// DispIntf:  _UANodeDescriptorDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8687F067-3D6F-41DB-B149-33225CE13A48}
// *********************************************************************//
  _UANodeDescriptorDisp = dispinterface
    ['{8687F067-3D6F-41DB-B149-33225CE13A48}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property AliasName: WideString dispid 1610743814;
    property IsAliased: WordBool readonly dispid 1610743816;
    property ArgumentString: WideString readonly dispid 1610743817;
    property browsePath: _UABrowsePath dispid 1610743818;
    property HasBrowsePath: WordBool readonly dispid 1610743820;
    property HasNodeId: WordBool readonly dispid 1610743821;
    property IsNull: WordBool readonly dispid 1610743822;
    property NodeId: _UANodeId dispid 1610743823;
    function Flatten: _UANodeDescriptor; dispid 1610743825;
    function Match(other: OleVariant): WordBool; dispid 1610743826;
  end;

// *********************************************************************//
// Interface: _EasyUAEngineException
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {23309CA8-0649-414E-B116-C57CD515584D}
// *********************************************************************//
  _EasyUAEngineException = interface(IDispatch)
    ['{23309CA8-0649-414E-B116-C57CD515584D}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_Message: WideString; safecall;
    function Get_StackTrace: WideString; safecall;
    function Get_HelpLink: WideString; safecall;
    procedure Set_HelpLink(const pRetVal: WideString); safecall;
    function Get_Source: WideString; safecall;
    procedure Set_Source(const pRetVal: WideString); safecall;
    function Get_InnerException: _Exception; safecall;
    function Get_TargetSite: _MethodBase; safecall;
    function GetBaseException: _Exception; safecall;
    procedure GetObjectData(const info: _SerializationInfo; context: StreamingContext); safecall;
    function Get_Data: _Dictionary; safecall;
    function Get_HResult: Integer; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Message: WideString read Get_Message;
    property StackTrace: WideString read Get_StackTrace;
    property HelpLink: WideString read Get_HelpLink write Set_HelpLink;
    property Source: WideString read Get_Source write Set_Source;
    property InnerException: _Exception read Get_InnerException;
    property TargetSite: _MethodBase read Get_TargetSite;
    property Data: _Dictionary read Get_Data;
    property HResult: Integer read Get_HResult;
  end;

// *********************************************************************//
// DispIntf:  _EasyUAEngineExceptionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {23309CA8-0649-414E-B116-C57CD515584D}
// *********************************************************************//
  _EasyUAEngineExceptionDisp = dispinterface
    ['{23309CA8-0649-414E-B116-C57CD515584D}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    property Message: WideString readonly dispid 1610743813;
    property StackTrace: WideString readonly dispid 1610743814;
    property HelpLink: WideString dispid 1610743815;
    property Source: WideString dispid 1610743817;
    property InnerException: _Exception readonly dispid 1610743819;
    property TargetSite: _MethodBase readonly dispid 1610743820;
    function GetBaseException: _Exception; dispid 1610743821;
    procedure GetObjectData(const info: _SerializationInfo; 
                            context: {NOT_OLEAUTO(StreamingContext)}OleVariant); dispid 1610743822;
    property Data: _Dictionary readonly dispid 1610743823;
    property HResult: Integer readonly dispid 1610743824;
  end;

// *********************************************************************//
// Interface: _UAServiceException
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {24E865DB-0521-4A10-A995-42B21CB201FF}
// *********************************************************************//
  _UAServiceException = interface(IDispatch)
    ['{24E865DB-0521-4A10-A995-42B21CB201FF}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_Message: WideString; safecall;
    function Get_StackTrace: WideString; safecall;
    function Get_HelpLink: WideString; safecall;
    procedure Set_HelpLink(const pRetVal: WideString); safecall;
    function Get_Source: WideString; safecall;
    procedure Set_Source(const pRetVal: WideString); safecall;
    function Get_InnerException: _Exception; safecall;
    function Get_TargetSite: _MethodBase; safecall;
    function GetBaseException: _Exception; safecall;
    procedure GetObjectData(const info: _SerializationInfo; context: StreamingContext); safecall;
    function Get_Data: _Dictionary; safecall;
    function Get_HResult: Integer; safecall;
    function Get_ErrorId: WideString; safecall;
    function Get_InternalCode: Integer; safecall;
    function Get_ServiceResult: _UAServiceResult; safecall;
    function Get_ServiceTargetSite: _MethodBase; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Message: WideString read Get_Message;
    property StackTrace: WideString read Get_StackTrace;
    property HelpLink: WideString read Get_HelpLink write Set_HelpLink;
    property Source: WideString read Get_Source write Set_Source;
    property InnerException: _Exception read Get_InnerException;
    property TargetSite: _MethodBase read Get_TargetSite;
    property Data: _Dictionary read Get_Data;
    property HResult: Integer read Get_HResult;
    property ErrorId: WideString read Get_ErrorId;
    property InternalCode: Integer read Get_InternalCode;
    property ServiceResult: _UAServiceResult read Get_ServiceResult;
    property ServiceTargetSite: _MethodBase read Get_ServiceTargetSite;
  end;

// *********************************************************************//
// DispIntf:  _UAServiceExceptionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {24E865DB-0521-4A10-A995-42B21CB201FF}
// *********************************************************************//
  _UAServiceExceptionDisp = dispinterface
    ['{24E865DB-0521-4A10-A995-42B21CB201FF}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    property Message: WideString readonly dispid 1610743813;
    property StackTrace: WideString readonly dispid 1610743814;
    property HelpLink: WideString dispid 1610743815;
    property Source: WideString dispid 1610743817;
    property InnerException: _Exception readonly dispid 1610743819;
    property TargetSite: _MethodBase readonly dispid 1610743820;
    function GetBaseException: _Exception; dispid 1610743821;
    procedure GetObjectData(const info: _SerializationInfo; 
                            context: {NOT_OLEAUTO(StreamingContext)}OleVariant); dispid 1610743822;
    property Data: _Dictionary readonly dispid 1610743823;
    property HResult: Integer readonly dispid 1610743824;
    property ErrorId: WideString readonly dispid 1610743825;
    property InternalCode: Integer readonly dispid 1610743826;
    property ServiceResult: _UAServiceResult readonly dispid 1610743827;
    property ServiceTargetSite: _MethodBase readonly dispid 1610743828;
  end;

// *********************************************************************//
// Interface: _UAResultException
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DCB10B57-CD3F-46ED-8BB8-43D6F12F624B}
// *********************************************************************//
  _UAResultException = interface(IDispatch)
    ['{DCB10B57-CD3F-46ED-8BB8-43D6F12F624B}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_Message: WideString; safecall;
    function Get_StackTrace: WideString; safecall;
    function Get_HelpLink: WideString; safecall;
    procedure Set_HelpLink(const pRetVal: WideString); safecall;
    function Get_Source: WideString; safecall;
    procedure Set_Source(const pRetVal: WideString); safecall;
    function Get_InnerException: _Exception; safecall;
    function Get_TargetSite: _MethodBase; safecall;
    function GetBaseException: _Exception; safecall;
    procedure GetObjectData(const info: _SerializationInfo; context: StreamingContext); safecall;
    function Get_Data: _Dictionary; safecall;
    function Get_HResult: Integer; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Message: WideString read Get_Message;
    property StackTrace: WideString read Get_StackTrace;
    property HelpLink: WideString read Get_HelpLink write Set_HelpLink;
    property Source: WideString read Get_Source write Set_Source;
    property InnerException: _Exception read Get_InnerException;
    property TargetSite: _MethodBase read Get_TargetSite;
    property Data: _Dictionary read Get_Data;
    property HResult: Integer read Get_HResult;
  end;

// *********************************************************************//
// DispIntf:  _UAResultExceptionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DCB10B57-CD3F-46ED-8BB8-43D6F12F624B}
// *********************************************************************//
  _UAResultExceptionDisp = dispinterface
    ['{DCB10B57-CD3F-46ED-8BB8-43D6F12F624B}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    property Message: WideString readonly dispid 1610743813;
    property StackTrace: WideString readonly dispid 1610743814;
    property HelpLink: WideString dispid 1610743815;
    property Source: WideString dispid 1610743817;
    property InnerException: _Exception readonly dispid 1610743819;
    property TargetSite: _MethodBase readonly dispid 1610743820;
    function GetBaseException: _Exception; dispid 1610743821;
    procedure GetObjectData(const info: _SerializationInfo; 
                            context: {NOT_OLEAUTO(StreamingContext)}OleVariant); dispid 1610743822;
    property Data: _Dictionary readonly dispid 1610743823;
    property HResult: Integer readonly dispid 1610743824;
  end;

// *********************************************************************//
// Interface: _UAStatusCodeException
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3F285DEA-2A11-408B-9C9B-8304F9A675F5}
// *********************************************************************//
  _UAStatusCodeException = interface(IDispatch)
    ['{3F285DEA-2A11-408B-9C9B-8304F9A675F5}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_Message: WideString; safecall;
    function Get_StackTrace: WideString; safecall;
    function Get_HelpLink: WideString; safecall;
    procedure Set_HelpLink(const pRetVal: WideString); safecall;
    function Get_Source: WideString; safecall;
    procedure Set_Source(const pRetVal: WideString); safecall;
    function Get_InnerException: _Exception; safecall;
    function Get_TargetSite: _MethodBase; safecall;
    function GetBaseException: _Exception; safecall;
    procedure GetObjectData(const info: _SerializationInfo; context: StreamingContext); safecall;
    function Get_Data: _Dictionary; safecall;
    function Get_HResult: Integer; safecall;
    function Get_ErrorId: WideString; safecall;
    function Get_StatusCode: _UAStatusCode; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Message: WideString read Get_Message;
    property StackTrace: WideString read Get_StackTrace;
    property HelpLink: WideString read Get_HelpLink write Set_HelpLink;
    property Source: WideString read Get_Source write Set_Source;
    property InnerException: _Exception read Get_InnerException;
    property TargetSite: _MethodBase read Get_TargetSite;
    property Data: _Dictionary read Get_Data;
    property HResult: Integer read Get_HResult;
    property ErrorId: WideString read Get_ErrorId;
    property StatusCode: _UAStatusCode read Get_StatusCode;
  end;

// *********************************************************************//
// DispIntf:  _UAStatusCodeExceptionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3F285DEA-2A11-408B-9C9B-8304F9A675F5}
// *********************************************************************//
  _UAStatusCodeExceptionDisp = dispinterface
    ['{3F285DEA-2A11-408B-9C9B-8304F9A675F5}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    property Message: WideString readonly dispid 1610743813;
    property StackTrace: WideString readonly dispid 1610743814;
    property HelpLink: WideString dispid 1610743815;
    property Source: WideString dispid 1610743817;
    property InnerException: _Exception readonly dispid 1610743819;
    property TargetSite: _MethodBase readonly dispid 1610743820;
    function GetBaseException: _Exception; dispid 1610743821;
    procedure GetObjectData(const info: _SerializationInfo; 
                            context: {NOT_OLEAUTO(StreamingContext)}OleVariant); dispid 1610743822;
    property Data: _Dictionary readonly dispid 1610743823;
    property HResult: Integer readonly dispid 1610743824;
    property ErrorId: WideString readonly dispid 1610743825;
    property StatusCode: _UAStatusCode readonly dispid 1610743826;
  end;

// *********************************************************************//
// Interface: _UADataChangeFilter
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D0141446-A931-4514-A25E-2C9FF10B527E}
// *********************************************************************//
  _UADataChangeFilter = interface(IDispatch)
    ['{D0141446-A931-4514-A25E-2C9FF10B527E}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_DeadbandType: UADeadbandType; safecall;
    procedure Set_DeadbandType(pRetVal: UADeadbandType); safecall;
    function Get_DeadbandValue: Double; safecall;
    procedure Set_DeadbandValue(pRetVal: Double); safecall;
    function Get_Trigger: UADataChangeTrigger; safecall;
    procedure Set_Trigger(pRetVal: UADataChangeTrigger); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property DeadbandType: UADeadbandType read Get_DeadbandType write Set_DeadbandType;
    property DeadbandValue: Double read Get_DeadbandValue write Set_DeadbandValue;
    property Trigger: UADataChangeTrigger read Get_Trigger write Set_Trigger;
  end;

// *********************************************************************//
// DispIntf:  _UADataChangeFilterDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D0141446-A931-4514-A25E-2C9FF10B527E}
// *********************************************************************//
  _UADataChangeFilterDisp = dispinterface
    ['{D0141446-A931-4514-A25E-2C9FF10B527E}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property DeadbandType: UADeadbandType dispid 1610743816;
    property DeadbandValue: Double dispid 1610743818;
    property Trigger: UADataChangeTrigger dispid 1610743820;
  end;

// *********************************************************************//
// Interface: _UAEventFilter
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5E9D0A8F-D791-4FE8-856F-C4699F7C2A46}
// *********************************************************************//
  _UAEventFilter = interface(IDispatch)
    ['{5E9D0A8F-D791-4FE8-856F-C4699F7C2A46}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_SelectClauses: _UAAttributeFieldCollection; safecall;
    procedure _Set_SelectClauses(const pRetVal: _UAAttributeFieldCollection); safecall;
    function Get_WhereClause: _UAContentFilterElement; safecall;
    procedure _Set_WhereClause(const pRetVal: _UAContentFilterElement); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property SelectClauses: _UAAttributeFieldCollection read Get_SelectClauses write _Set_SelectClauses;
    property WhereClause: _UAContentFilterElement read Get_WhereClause write _Set_WhereClause;
  end;

// *********************************************************************//
// DispIntf:  _UAEventFilterDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5E9D0A8F-D791-4FE8-856F-C4699F7C2A46}
// *********************************************************************//
  _UAEventFilterDisp = dispinterface
    ['{5E9D0A8F-D791-4FE8-856F-C4699F7C2A46}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property SelectClauses: _UAAttributeFieldCollection dispid 1610743816;
    property WhereClause: _UAContentFilterElement dispid 1610743818;
  end;

// *********************************************************************//
// Interface: _UABrowseParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C1524019-718E-4D03-AA7B-A00D5A32D7BD}
// *********************************************************************//
  _UABrowseParameters = interface(IDispatch)
    ['{C1524019-718E-4D03-AA7B-A00D5A32D7BD}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_BrowseDirections: UABrowseDirections; safecall;
    procedure Set_BrowseDirections(pRetVal: UABrowseDirections); safecall;
    function Get_IncludeSubtypes: WordBool; safecall;
    procedure Set_IncludeSubtypes(pRetVal: WordBool); safecall;
    function Get_NodeClasses: UANodeClass; safecall;
    procedure Set_NodeClasses(pRetVal: UANodeClass); safecall;
    function Get_ReferenceTypeIds: _UANodeIdCollection; safecall;
    procedure _Set_ReferenceTypeIds(const pRetVal: _UANodeIdCollection); safecall;
    procedure CombineWith(other: OleVariant); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property BrowseDirections: UABrowseDirections read Get_BrowseDirections write Set_BrowseDirections;
    property IncludeSubtypes: WordBool read Get_IncludeSubtypes write Set_IncludeSubtypes;
    property NodeClasses: UANodeClass read Get_NodeClasses write Set_NodeClasses;
    property ReferenceTypeIds: _UANodeIdCollection read Get_ReferenceTypeIds write _Set_ReferenceTypeIds;
  end;

// *********************************************************************//
// DispIntf:  _UABrowseParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C1524019-718E-4D03-AA7B-A00D5A32D7BD}
// *********************************************************************//
  _UABrowseParametersDisp = dispinterface
    ['{C1524019-718E-4D03-AA7B-A00D5A32D7BD}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property BrowseDirections: UABrowseDirections dispid 1610743816;
    property IncludeSubtypes: WordBool dispid 1610743818;
    property NodeClasses: UANodeClass dispid 1610743820;
    property ReferenceTypeIds: _UANodeIdCollection dispid 1610743822;
    procedure CombineWith(other: OleVariant); dispid 1610743824;
  end;

// *********************************************************************//
// Interface: _UAMonitoringParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2037F99C-D57F-46B9-A7D1-6EFFCAA6A2C8}
// *********************************************************************//
  _UAMonitoringParameters = interface(IDispatch)
    ['{2037F99C-D57F-46B9-A7D1-6EFFCAA6A2C8}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_DataChangeFilter: _UADataChangeFilter; safecall;
    procedure _Set_DataChangeFilter(const pRetVal: _UADataChangeFilter); safecall;
    function Get_DiscardOldest: WordBool; safecall;
    procedure Set_DiscardOldest(pRetVal: WordBool); safecall;
    function Get_encodingName: _UAQualifiedName; safecall;
    procedure _Set_encodingName(const pRetVal: _UAQualifiedName); safecall;
    function Get_EventFilter: _UAEventFilter; safecall;
    procedure _Set_EventFilter(const pRetVal: _UAEventFilter); safecall;
    function Get_Filter: OleVariant; safecall;
    procedure _Set_Filter(pRetVal: OleVariant); safecall;
    function Get_QueueSize: Integer; safecall;
    procedure Set_QueueSize(pRetVal: Integer); safecall;
    function Get_samplingInterval: Integer; safecall;
    procedure Set_samplingInterval(pRetVal: Integer); safecall;
    procedure SetFilter(Filter: OleVariant); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property DataChangeFilter: _UADataChangeFilter read Get_DataChangeFilter write _Set_DataChangeFilter;
    property DiscardOldest: WordBool read Get_DiscardOldest write Set_DiscardOldest;
    property encodingName: _UAQualifiedName read Get_encodingName write _Set_encodingName;
    property EventFilter: _UAEventFilter read Get_EventFilter write _Set_EventFilter;
    property Filter: OleVariant read Get_Filter write _Set_Filter;
    property QueueSize: Integer read Get_QueueSize write Set_QueueSize;
    property samplingInterval: Integer read Get_samplingInterval write Set_samplingInterval;
  end;

// *********************************************************************//
// DispIntf:  _UAMonitoringParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2037F99C-D57F-46B9-A7D1-6EFFCAA6A2C8}
// *********************************************************************//
  _UAMonitoringParametersDisp = dispinterface
    ['{2037F99C-D57F-46B9-A7D1-6EFFCAA6A2C8}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property DataChangeFilter: _UADataChangeFilter dispid 1610743816;
    property DiscardOldest: WordBool dispid 1610743818;
    property encodingName: _UAQualifiedName dispid 1610743820;
    property EventFilter: _UAEventFilter dispid 1610743822;
    property Filter: OleVariant dispid 1610743824;
    property QueueSize: Integer dispid 1610743826;
    property samplingInterval: Integer dispid 1610743828;
    procedure SetFilter(Filter: OleVariant); dispid 1610743830;
  end;

// *********************************************************************//
// Interface: _UAReadParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F50E67FF-583F-4666-956F-79A6E8992B9D}
// *********************************************************************//
  _UAReadParameters = interface(IDispatch)
    ['{F50E67FF-583F-4666-956F-79A6E8992B9D}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_encodingName: _UAQualifiedName; safecall;
    procedure _Set_encodingName(const pRetVal: _UAQualifiedName); safecall;
    function Get_MaximumAge: Double; safecall;
    procedure Set_MaximumAge(pRetVal: Double); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property encodingName: _UAQualifiedName read Get_encodingName write _Set_encodingName;
    property MaximumAge: Double read Get_MaximumAge write Set_MaximumAge;
  end;

// *********************************************************************//
// DispIntf:  _UAReadParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F50E67FF-583F-4666-956F-79A6E8992B9D}
// *********************************************************************//
  _UAReadParametersDisp = dispinterface
    ['{F50E67FF-583F-4666-956F-79A6E8992B9D}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property encodingName: _UAQualifiedName dispid 1610743816;
    property MaximumAge: Double dispid 1610743818;
  end;

// *********************************************************************//
// Interface: _UASubscriptionParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5D75AE7B-22D0-4777-894A-B355351B8417}
// *********************************************************************//
  _UASubscriptionParameters = interface(IDispatch)
    ['{5D75AE7B-22D0-4777-894A-B355351B8417}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_Priority: Byte; safecall;
    procedure Set_Priority(pRetVal: Byte); safecall;
    function Get_PublishingInterval: Integer; safecall;
    procedure Set_PublishingInterval(pRetVal: Integer); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property Priority: Byte read Get_Priority write Set_Priority;
    property PublishingInterval: Integer read Get_PublishingInterval write Set_PublishingInterval;
  end;

// *********************************************************************//
// DispIntf:  _UASubscriptionParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5D75AE7B-22D0-4777-894A-B355351B8417}
// *********************************************************************//
  _UASubscriptionParametersDisp = dispinterface
    ['{5D75AE7B-22D0-4777-894A-B355351B8417}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property Priority: Byte dispid 1610743816;
    property PublishingInterval: Integer dispid 1610743818;
  end;

// *********************************************************************//
// Interface: _EasyUAClientConnectionControl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2D98A3F0-0050-46CC-B3BD-3E9D57DD0A3B}
// *********************************************************************//
  _EasyUAClientConnectionControl = interface(IDispatch)
    ['{2D98A3F0-0050-46CC-B3BD-3E9D57DD0A3B}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function LockConnection(endpointDescriptor: OleVariant): Integer; safecall;
    procedure UnlockConnection(lockHandle: Integer); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
  end;

// *********************************************************************//
// DispIntf:  _EasyUAClientConnectionControlDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2D98A3F0-0050-46CC-B3BD-3E9D57DD0A3B}
// *********************************************************************//
  _EasyUAClientConnectionControlDisp = dispinterface
    ['{2D98A3F0-0050-46CC-B3BD-3E9D57DD0A3B}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function LockConnection(endpointDescriptor: OleVariant): Integer; dispid 1610743813;
    procedure UnlockConnection(lockHandle: Integer); dispid 1610743814;
  end;

// *********************************************************************//
// Interface: _EasyUAClientConnectionMonitoring
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {44D352A4-542F-4881-9CA4-5E4D5F0D7802}
// *********************************************************************//
  _EasyUAClientConnectionMonitoring = interface(IDispatch)
    ['{44D352A4-542F-4881-9CA4-5E4D5F0D7802}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_PullServerConditionChangedQueueCapacity: Integer; safecall;
    procedure Set_PullServerConditionChangedQueueCapacity(pRetVal: Integer); safecall;
    function PullMultipleServerConditionChanges(maximumCount: Integer; millisecondsTimeout: Integer): PSafeArray; safecall;
    function PullServerConditionChanged(millisecondsTimeout: Integer): _EasyUAServerConditionChangedEventArgs; safecall;
    function PullServerConditionChangeList(maximumCount: Integer; millisecondsTimeout: Integer): _ElasticVector; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property PullServerConditionChangedQueueCapacity: Integer read Get_PullServerConditionChangedQueueCapacity write Set_PullServerConditionChangedQueueCapacity;
  end;

// *********************************************************************//
// DispIntf:  _EasyUAClientConnectionMonitoringDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {44D352A4-542F-4881-9CA4-5E4D5F0D7802}
// *********************************************************************//
  _EasyUAClientConnectionMonitoringDisp = dispinterface
    ['{44D352A4-542F-4881-9CA4-5E4D5F0D7802}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    property PullServerConditionChangedQueueCapacity: Integer dispid 1610743813;
    function PullMultipleServerConditionChanges(maximumCount: Integer; millisecondsTimeout: Integer): {NOT_OLEAUTO(PSafeArray)}OleVariant; dispid 1610743815;
    function PullServerConditionChanged(millisecondsTimeout: Integer): _EasyUAServerConditionChangedEventArgs; dispid 1610743816;
    function PullServerConditionChangeList(maximumCount: Integer; millisecondsTimeout: Integer): _ElasticVector; dispid 1610743817;
  end;

// *********************************************************************//
// Interface: _EasyUAClientNodeRegistration
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {630024EF-25C0-480C-A6D0-C37E8BD659E8}
// *********************************************************************//
  _EasyUAClientNodeRegistration = interface(IDispatch)
    ['{630024EF-25C0-480C-A6D0-C37E8BD659E8}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function RegisterMultipleNodes(nodeArgumentsArray: OleVariant): PSafeArray; safecall;
    function RegisterNode(const endpointDescriptorString: WideString; 
                          const nodeDescriptorString: WideString): Integer; safecall;
    procedure UnregisterMultipleNodes(handlesToUnregisterArray: OleVariant); safecall;
    procedure UnregisterNode(registrationHandle: Integer); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
  end;

// *********************************************************************//
// DispIntf:  _EasyUAClientNodeRegistrationDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {630024EF-25C0-480C-A6D0-C37E8BD659E8}
// *********************************************************************//
  _EasyUAClientNodeRegistrationDisp = dispinterface
    ['{630024EF-25C0-480C-A6D0-C37E8BD659E8}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function RegisterMultipleNodes(nodeArgumentsArray: OleVariant): {NOT_OLEAUTO(PSafeArray)}OleVariant; dispid 1610743813;
    function RegisterNode(const endpointDescriptorString: WideString; 
                          const nodeDescriptorString: WideString): Integer; dispid 1610743814;
    procedure UnregisterMultipleNodes(handlesToUnregisterArray: OleVariant); dispid 1610743815;
    procedure UnregisterNode(registrationHandle: Integer); dispid 1610743816;
  end;

// *********************************************************************//
// Interface: _UAServerTables
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EBC0E09E-8B2D-4629-99D2-2FAA6F937E96}
// *********************************************************************//
  _UAServerTables = interface(IDispatch)
    ['{EBC0E09E-8B2D-4629-99D2-2FAA6F937E96}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function GetNamespaceTable(endpointDescriptor: OleVariant): _ValueResult; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
  end;

// *********************************************************************//
// DispIntf:  _UAServerTablesDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EBC0E09E-8B2D-4629-99D2-2FAA6F937E96}
// *********************************************************************//
  _UAServerTablesDisp = dispinterface
    ['{EBC0E09E-8B2D-4629-99D2-2FAA6F937E96}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function GetNamespaceTable(endpointDescriptor: OleVariant): _ValueResult; dispid 1610743813;
  end;

// *********************************************************************//
// DispIntf:  DEasyUAClientConnectionMonitoringEvents
// Flags:     (4096) Dispatchable
// GUID:      {68427062-23DA-4E3E-82CF-74012D87B782}
// *********************************************************************//
  DEasyUAClientConnectionMonitoringEvents = dispinterface
    ['{68427062-23DA-4E3E-82CF-74012D87B782}']
    procedure ServerConditionChanged(sender0: OleVariant; 
                                     const eventArgs: _EasyUAServerConditionChangedEventArgs); dispid 1001;
  end;

// *********************************************************************//
// Interface: _EasyUASubscriberSelector
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1A47BBB1-9F4D-4CFE-A3E6-E17A38121CAA}
// *********************************************************************//
  _EasyUASubscriberSelector = interface(IDispatch)
    ['{1A47BBB1-9F4D-4CFE-A3E6-E17A38121CAA}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_Differentiator: WideString; safecall;
    procedure Set_Differentiator(const pRetVal: WideString); safecall;
    function Get_InstanceParameters: _EasyUASubscriberInstanceParameters; safecall;
    procedure _Set_InstanceParameters(const pRetVal: _EasyUASubscriberInstanceParameters); safecall;
    function Get_Isolated: WordBool; safecall;
    procedure Set_Isolated(pRetVal: WordBool); safecall;
    function Get_IsolatedParameters: _EasyUASubscriberAdaptableParameters; safecall;
    procedure _Set_IsolatedParameters(const pRetVal: _EasyUASubscriberAdaptableParameters); safecall;
    procedure Reset; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property Differentiator: WideString read Get_Differentiator write Set_Differentiator;
    property InstanceParameters: _EasyUASubscriberInstanceParameters read Get_InstanceParameters write _Set_InstanceParameters;
    property Isolated: WordBool read Get_Isolated write Set_Isolated;
    property IsolatedParameters: _EasyUASubscriberAdaptableParameters read Get_IsolatedParameters write _Set_IsolatedParameters;
  end;

// *********************************************************************//
// DispIntf:  _EasyUASubscriberSelectorDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1A47BBB1-9F4D-4CFE-A3E6-E17A38121CAA}
// *********************************************************************//
  _EasyUASubscriberSelectorDisp = dispinterface
    ['{1A47BBB1-9F4D-4CFE-A3E6-E17A38121CAA}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property Differentiator: WideString dispid 1610743816;
    property InstanceParameters: _EasyUASubscriberInstanceParameters dispid 1610743818;
    property Isolated: WordBool dispid 1610743820;
    property IsolatedParameters: _EasyUASubscriberAdaptableParameters dispid 1610743822;
    procedure Reset; dispid 1610743824;
  end;

// *********************************************************************//
// Interface: _UASubscribeDataSetFilter
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8D97D14B-6B1E-4251-88B3-7BEBCDE13175}
// *********************************************************************//
  _UASubscribeDataSetFilter = interface(IDispatch)
    ['{8D97D14B-6B1E-4251-88B3-7BEBCDE13175}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_AllowDataMessages: WordBool; safecall;
    procedure Set_AllowDataMessages(pRetVal: WordBool); safecall;
    function Get_AllowEventMessages: WordBool; safecall;
    procedure Set_AllowEventMessages(pRetVal: WordBool); safecall;
    function Get_DataSetWriterDescriptor: _UADataSetWriterDescriptor; safecall;
    procedure _Set_DataSetWriterDescriptor(const pRetVal: _UADataSetWriterDescriptor); safecall;
    function Get_HasDataSetWriterDescriptor: WordBool; safecall;
    function Get_HasOriginPattern: WordBool; safecall;
    function Get_HasPublisherId: WordBool; safecall;
    function Get_HasRequiredFieldValues: WordBool; safecall;
    function Get_HasWriterGroupDescriptor: WordBool; safecall;
    function Get_OriginPattern: WideString; safecall;
    procedure Set_OriginPattern(const pRetVal: WideString); safecall;
    function Get_PublisherId: _UAPublisherId; safecall;
    procedure _Set_PublisherId(const pRetVal: _UAPublisherId); safecall;
    function Get_RequiredFieldValueDictionary: _StringObjectDictionary; safecall;
    procedure _Set_RequiredFieldValueDictionary(const pRetVal: _StringObjectDictionary); safecall;
    function Get_WriterGroupDescriptor: _UAWriterGroupDescriptor; safecall;
    procedure _Set_WriterGroupDescriptor(const pRetVal: _UAWriterGroupDescriptor); safecall;
    function IsStrictlyPhysical(const TransportProfileUriString: WideString; 
                                assumeTopicTree: WordBool): WordBool; safecall;
    procedure Logicalize; safecall;
    procedure Physicalize(const TransportProfileUriString: WideString; assumeTopicTree: WordBool; 
                          force: WordBool); safecall;
    procedure PhysicalizeRequiredFieldValues(const TransportProfileUriString: WideString; 
                                             force: WordBool); safecall;
    function RequiredFieldValuesAreStrictlyPhysical(const TransportProfileUriString: WideString): WordBool; safecall;
    function RequiredFieldValuesRequireResolution(const TransportProfileUriString: WideString): WordBool; safecall;
    function RequiresResolution(const TransportProfileUriString: WideString; 
                                assumeTopicTree: WordBool): WordBool; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property AllowDataMessages: WordBool read Get_AllowDataMessages write Set_AllowDataMessages;
    property AllowEventMessages: WordBool read Get_AllowEventMessages write Set_AllowEventMessages;
    property DataSetWriterDescriptor: _UADataSetWriterDescriptor read Get_DataSetWriterDescriptor write _Set_DataSetWriterDescriptor;
    property HasDataSetWriterDescriptor: WordBool read Get_HasDataSetWriterDescriptor;
    property HasOriginPattern: WordBool read Get_HasOriginPattern;
    property HasPublisherId: WordBool read Get_HasPublisherId;
    property HasRequiredFieldValues: WordBool read Get_HasRequiredFieldValues;
    property HasWriterGroupDescriptor: WordBool read Get_HasWriterGroupDescriptor;
    property OriginPattern: WideString read Get_OriginPattern write Set_OriginPattern;
    property PublisherId: _UAPublisherId read Get_PublisherId write _Set_PublisherId;
    property RequiredFieldValueDictionary: _StringObjectDictionary read Get_RequiredFieldValueDictionary write _Set_RequiredFieldValueDictionary;
    property WriterGroupDescriptor: _UAWriterGroupDescriptor read Get_WriterGroupDescriptor write _Set_WriterGroupDescriptor;
  end;

// *********************************************************************//
// DispIntf:  _UASubscribeDataSetFilterDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8D97D14B-6B1E-4251-88B3-7BEBCDE13175}
// *********************************************************************//
  _UASubscribeDataSetFilterDisp = dispinterface
    ['{8D97D14B-6B1E-4251-88B3-7BEBCDE13175}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property AllowDataMessages: WordBool dispid 1610743816;
    property AllowEventMessages: WordBool dispid 1610743818;
    property DataSetWriterDescriptor: _UADataSetWriterDescriptor dispid 1610743820;
    property HasDataSetWriterDescriptor: WordBool readonly dispid 1610743822;
    property HasOriginPattern: WordBool readonly dispid 1610743823;
    property HasPublisherId: WordBool readonly dispid 1610743824;
    property HasRequiredFieldValues: WordBool readonly dispid 1610743825;
    property HasWriterGroupDescriptor: WordBool readonly dispid 1610743826;
    property OriginPattern: WideString dispid 1610743827;
    property PublisherId: _UAPublisherId dispid 1610743829;
    property RequiredFieldValueDictionary: _StringObjectDictionary dispid 1610743831;
    property WriterGroupDescriptor: _UAWriterGroupDescriptor dispid 1610743833;
    function IsStrictlyPhysical(const TransportProfileUriString: WideString; 
                                assumeTopicTree: WordBool): WordBool; dispid 1610743835;
    procedure Logicalize; dispid 1610743836;
    procedure Physicalize(const TransportProfileUriString: WideString; assumeTopicTree: WordBool; 
                          force: WordBool); dispid 1610743837;
    procedure PhysicalizeRequiredFieldValues(const TransportProfileUriString: WideString; 
                                             force: WordBool); dispid 1610743838;
    function RequiredFieldValuesAreStrictlyPhysical(const TransportProfileUriString: WideString): WordBool; dispid 1610743839;
    function RequiredFieldValuesRequireResolution(const TransportProfileUriString: WideString): WordBool; dispid 1610743840;
    function RequiresResolution(const TransportProfileUriString: WideString; 
                                assumeTopicTree: WordBool): WordBool; dispid 1610743841;
  end;

// *********************************************************************//
// Interface: _UAGuidDataSetFieldDataDictionary
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0BBD9BA4-2711-4BD7-B08A-1C15C092D3DA}
// *********************************************************************//
  _UAGuidDataSetFieldDataDictionary = interface(IDispatch)
    ['{0BBD9BA4-2711-4BD7-B08A-1C15C092D3DA}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_Item(key: OleVariant): _UADataSetFieldData; safecall;
    procedure _Set_Item(key: OleVariant; const pRetVal: _UADataSetFieldData); safecall;
    function Get_Count: Integer; safecall;
    function GetEnumerator: IEnumVARIANT; safecall;
    procedure Add(key: OleVariant; Item: OleVariant); safecall;
    procedure Clear; safecall;
    function ContainsKey(key: OleVariant): WordBool; safecall;
    function Remove(key: OleVariant): WordBool; safecall;
    function TryGetValue(key: OleVariant; out value: OleVariant): WordBool; safecall;
    function ContainsValue(value: OleVariant): WordBool; safecall;
    property ToString: WideString read Get_ToString;
    property Item[key: OleVariant]: _UADataSetFieldData read Get_Item write _Set_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  _UAGuidDataSetFieldDataDictionaryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0BBD9BA4-2711-4BD7-B08A-1C15C092D3DA}
// *********************************************************************//
  _UAGuidDataSetFieldDataDictionaryDisp = dispinterface
    ['{0BBD9BA4-2711-4BD7-B08A-1C15C092D3DA}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property Item[key: OleVariant]: _UADataSetFieldData dispid 0; default;
    property Count: Integer readonly dispid 1610743814;
    function GetEnumerator: IEnumVARIANT; dispid -4;
    procedure Add(key: OleVariant; Item: OleVariant); dispid 1610743816;
    procedure Clear; dispid 1610743817;
    function ContainsKey(key: OleVariant): WordBool; dispid 1610743818;
    function Remove(key: OleVariant): WordBool; dispid 1610743819;
    function TryGetValue(key: OleVariant; out value: OleVariant): WordBool; dispid 1610743820;
    function ContainsValue(value: OleVariant): WordBool; dispid 1610743821;
  end;

// *********************************************************************//
// Interface: _UAStringDataSetFieldDataDictionary
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {792FFFC4-2065-4D6B-B4DC-30ECDA74CC79}
// *********************************************************************//
  _UAStringDataSetFieldDataDictionary = interface(IDispatch)
    ['{792FFFC4-2065-4D6B-B4DC-30ECDA74CC79}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_Item(key: OleVariant): _UADataSetFieldData; safecall;
    procedure _Set_Item(key: OleVariant; const pRetVal: _UADataSetFieldData); safecall;
    function Get_Count: Integer; safecall;
    function GetEnumerator: IEnumVARIANT; safecall;
    procedure Add(key: OleVariant; Item: OleVariant); safecall;
    procedure Clear; safecall;
    function ContainsKey(key: OleVariant): WordBool; safecall;
    function Remove(key: OleVariant): WordBool; safecall;
    function TryGetValue(key: OleVariant; out value: OleVariant): WordBool; safecall;
    function ContainsValue(value: OleVariant): WordBool; safecall;
    property ToString: WideString read Get_ToString;
    property Item[key: OleVariant]: _UADataSetFieldData read Get_Item write _Set_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  _UAStringDataSetFieldDataDictionaryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {792FFFC4-2065-4D6B-B4DC-30ECDA74CC79}
// *********************************************************************//
  _UAStringDataSetFieldDataDictionaryDisp = dispinterface
    ['{792FFFC4-2065-4D6B-B4DC-30ECDA74CC79}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property Item[key: OleVariant]: _UADataSetFieldData dispid 0; default;
    property Count: Integer readonly dispid 1610743814;
    function GetEnumerator: IEnumVARIANT; dispid -4;
    procedure Add(key: OleVariant; Item: OleVariant); dispid 1610743816;
    procedure Clear; dispid 1610743817;
    function ContainsKey(key: OleVariant): WordBool; dispid 1610743818;
    function Remove(key: OleVariant): WordBool; dispid 1610743819;
    function TryGetValue(key: OleVariant; out value: OleVariant): WordBool; dispid 1610743820;
    function ContainsValue(value: OleVariant): WordBool; dispid 1610743821;
  end;

// *********************************************************************//
// Interface: _UAPubSubLocators
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0D4EB582-A52A-4951-B9CF-46B79B21AA6B}
// *********************************************************************//
  _UAPubSubLocators = interface(IDispatch)
    ['{0D4EB582-A52A-4951-B9CF-46B79B21AA6B}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_DataSetWriterId: Integer; safecall;
    procedure Set_DataSetWriterId(pRetVal: Integer); safecall;
    function Get_DataSetWriterName: WideString; safecall;
    procedure Set_DataSetWriterName(const pRetVal: WideString); safecall;
    function Get_HasDataSetWriterId: WordBool; safecall;
    function Get_HasDataSetWriterName: WordBool; safecall;
    function Get_HasPublisherId: WordBool; safecall;
    function Get_HasWriterGroupId: WordBool; safecall;
    function Get_HasWriterGroupName: WordBool; safecall;
    function Get_PublisherId: _UAPublisherId; safecall;
    procedure _Set_PublisherId(const pRetVal: _UAPublisherId); safecall;
    function Get_WriterGroupId: Integer; safecall;
    procedure Set_WriterGroupId(pRetVal: Integer); safecall;
    function Get_WriterGroupName: WideString; safecall;
    procedure Set_WriterGroupName(const pRetVal: WideString); safecall;
    function CompareTo(other: OleVariant): Integer; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DataSetWriterId: Integer read Get_DataSetWriterId write Set_DataSetWriterId;
    property DataSetWriterName: WideString read Get_DataSetWriterName write Set_DataSetWriterName;
    property HasDataSetWriterId: WordBool read Get_HasDataSetWriterId;
    property HasDataSetWriterName: WordBool read Get_HasDataSetWriterName;
    property HasPublisherId: WordBool read Get_HasPublisherId;
    property HasWriterGroupId: WordBool read Get_HasWriterGroupId;
    property HasWriterGroupName: WordBool read Get_HasWriterGroupName;
    property PublisherId: _UAPublisherId read Get_PublisherId write _Set_PublisherId;
    property WriterGroupId: Integer read Get_WriterGroupId write Set_WriterGroupId;
    property WriterGroupName: WideString read Get_WriterGroupName write Set_WriterGroupName;
  end;

// *********************************************************************//
// DispIntf:  _UAPubSubLocatorsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0D4EB582-A52A-4951-B9CF-46B79B21AA6B}
// *********************************************************************//
  _UAPubSubLocatorsDisp = dispinterface
    ['{0D4EB582-A52A-4951-B9CF-46B79B21AA6B}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property DataSetWriterId: Integer dispid 1610743814;
    property DataSetWriterName: WideString dispid 1610743816;
    property HasDataSetWriterId: WordBool readonly dispid 1610743818;
    property HasDataSetWriterName: WordBool readonly dispid 1610743819;
    property HasPublisherId: WordBool readonly dispid 1610743820;
    property HasWriterGroupId: WordBool readonly dispid 1610743821;
    property HasWriterGroupName: WordBool readonly dispid 1610743822;
    property PublisherId: _UAPublisherId dispid 1610743823;
    property WriterGroupId: Integer dispid 1610743825;
    property WriterGroupName: WideString dispid 1610743827;
    function CompareTo(other: OleVariant): Integer; dispid 1610743829;
  end;

// *********************************************************************//
// Interface: _UADataSetFieldData
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9E9EC982-3335-41D9-9A51-808C63C865EB}
// *********************************************************************//
  _UADataSetFieldData = interface(IDispatch)
    ['{9E9EC982-3335-41D9-9A51-808C63C865EB}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_ToString_2(const format: WideString; const formatProvider: IFormatProvider): WideString; safecall;
    function Get_ToString_3(const format: WideString): WideString; safecall;
    function Get_HasBadStatus: WordBool; safecall;
    function Get_HasGoodStatus: WordBool; safecall;
    function Get_HasServerTimestamp: WordBool; safecall;
    function Get_HasSourceTimestamp: WordBool; safecall;
    function Get_HasUncertainStatus: WordBool; safecall;
    function Get_HasValue: WordBool; safecall;
    function Get_ServerPicoseconds: Integer; safecall;
    procedure Set_ServerPicoseconds(pRetVal: Integer); safecall;
    function Get_ServerTimestamp: TDateTime; safecall;
    procedure Set_ServerTimestamp(pRetVal: TDateTime); safecall;
    function Get_ServerTimestampDouble: Double; safecall;
    procedure Set_ServerTimestampDouble(pRetVal: Double); safecall;
    function Get_ServerTimestampLocal: TDateTime; safecall;
    procedure Set_ServerTimestampLocal(pRetVal: TDateTime); safecall;
    function Get_ServerTimestampLocalDouble: Double; safecall;
    procedure Set_ServerTimestampLocalDouble(pRetVal: Double); safecall;
    function Get_SourcePicoseconds: Integer; safecall;
    procedure Set_SourcePicoseconds(pRetVal: Integer); safecall;
    function Get_SourceTimestamp: TDateTime; safecall;
    procedure Set_SourceTimestamp(pRetVal: TDateTime); safecall;
    function Get_SourceTimestampDouble: Double; safecall;
    procedure Set_SourceTimestampDouble(pRetVal: Double); safecall;
    function Get_SourceTimestampLocal: TDateTime; safecall;
    procedure Set_SourceTimestampLocal(pRetVal: TDateTime); safecall;
    function Get_SourceTimestampLocalDouble: Double; safecall;
    procedure Set_SourceTimestampLocalDouble(pRetVal: Double); safecall;
    function Get_StatusCode: _UAStatusCode; safecall;
    procedure _Set_StatusCode(const pRetVal: _UAStatusCode); safecall;
    function Get_StatusInfo: StatusInfo; safecall;
    function Get_value: OleVariant; safecall;
    procedure _Set_value(pRetVal: OleVariant); safecall;
    function Get_ValueType: _Type; safecall;
    function Get_ValueTypeName: WideString; safecall;
    function DisplayValue: WideString; safecall;
    procedure SetValue(value: OleVariant); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property ToString_2[const format: WideString; const formatProvider: IFormatProvider]: WideString read Get_ToString_2;
    property ToString_3[const format: WideString]: WideString read Get_ToString_3;
    property HasBadStatus: WordBool read Get_HasBadStatus;
    property HasGoodStatus: WordBool read Get_HasGoodStatus;
    property HasServerTimestamp: WordBool read Get_HasServerTimestamp;
    property HasSourceTimestamp: WordBool read Get_HasSourceTimestamp;
    property HasUncertainStatus: WordBool read Get_HasUncertainStatus;
    property HasValue: WordBool read Get_HasValue;
    property ServerPicoseconds: Integer read Get_ServerPicoseconds write Set_ServerPicoseconds;
    property ServerTimestamp: TDateTime read Get_ServerTimestamp write Set_ServerTimestamp;
    property ServerTimestampDouble: Double read Get_ServerTimestampDouble write Set_ServerTimestampDouble;
    property ServerTimestampLocal: TDateTime read Get_ServerTimestampLocal write Set_ServerTimestampLocal;
    property ServerTimestampLocalDouble: Double read Get_ServerTimestampLocalDouble write Set_ServerTimestampLocalDouble;
    property SourcePicoseconds: Integer read Get_SourcePicoseconds write Set_SourcePicoseconds;
    property SourceTimestamp: TDateTime read Get_SourceTimestamp write Set_SourceTimestamp;
    property SourceTimestampDouble: Double read Get_SourceTimestampDouble write Set_SourceTimestampDouble;
    property SourceTimestampLocal: TDateTime read Get_SourceTimestampLocal write Set_SourceTimestampLocal;
    property SourceTimestampLocalDouble: Double read Get_SourceTimestampLocalDouble write Set_SourceTimestampLocalDouble;
    property StatusCode: _UAStatusCode read Get_StatusCode write _Set_StatusCode;
    property StatusInfo: StatusInfo read Get_StatusInfo;
    property value: OleVariant read Get_value write _Set_value;
    property ValueType: _Type read Get_ValueType;
    property ValueTypeName: WideString read Get_ValueTypeName;
  end;

// *********************************************************************//
// DispIntf:  _UADataSetFieldDataDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9E9EC982-3335-41D9-9A51-808C63C865EB}
// *********************************************************************//
  _UADataSetFieldDataDisp = dispinterface
    ['{9E9EC982-3335-41D9-9A51-808C63C865EB}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property ToString_2[const format: WideString; const formatProvider: IFormatProvider]: WideString readonly dispid 1610743814;
    property ToString_3[const format: WideString]: WideString readonly dispid 1610743815;
    property HasBadStatus: WordBool readonly dispid 1610743816;
    property HasGoodStatus: WordBool readonly dispid 1610743817;
    property HasServerTimestamp: WordBool readonly dispid 1610743818;
    property HasSourceTimestamp: WordBool readonly dispid 1610743819;
    property HasUncertainStatus: WordBool readonly dispid 1610743820;
    property HasValue: WordBool readonly dispid 1610743821;
    property ServerPicoseconds: Integer dispid 1610743822;
    property ServerTimestamp: TDateTime dispid 1610743824;
    property ServerTimestampDouble: Double dispid 1610743826;
    property ServerTimestampLocal: TDateTime dispid 1610743828;
    property ServerTimestampLocalDouble: Double dispid 1610743830;
    property SourcePicoseconds: Integer dispid 1610743832;
    property SourceTimestamp: TDateTime dispid 1610743834;
    property SourceTimestampDouble: Double dispid 1610743836;
    property SourceTimestampLocal: TDateTime dispid 1610743838;
    property SourceTimestampLocalDouble: Double dispid 1610743840;
    property StatusCode: _UAStatusCode dispid 1610743842;
    property StatusInfo: StatusInfo readonly dispid 1610743844;
    property value: OleVariant dispid 1610743845;
    property ValueType: _Type readonly dispid 1610743847;
    property ValueTypeName: WideString readonly dispid 1610743848;
    function DisplayValue: WideString; dispid 1610743849;
    procedure SetValue(value: OleVariant); dispid 1610743850;
  end;

// *********************************************************************//
// Interface: _UAPubSubHeader
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {34C0B10D-C825-4302-9B07-F9FACEC9CB90}
// *********************************************************************//
  _UAPubSubHeader = interface(IDispatch)
    ['{34C0B10D-C825-4302-9B07-F9FACEC9CB90}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_DataSetWriterId: Integer; safecall;
    procedure Set_DataSetWriterId(pRetVal: Integer); safecall;
    function Get_DataSetWriterName: WideString; safecall;
    procedure Set_DataSetWriterName(const pRetVal: WideString); safecall;
    function Get_HasDataSetWriterId: WordBool; safecall;
    function Get_HasDataSetWriterName: WordBool; safecall;
    function Get_HasPublisherId: WordBool; safecall;
    function Get_HasWriterGroupId: WordBool; safecall;
    function Get_HasWriterGroupName: WordBool; safecall;
    function Get_PublisherId: _UAPublisherId; safecall;
    procedure _Set_PublisherId(const pRetVal: _UAPublisherId); safecall;
    function Get_WriterGroupId: Integer; safecall;
    procedure Set_WriterGroupId(pRetVal: Integer); safecall;
    function Get_WriterGroupName: WideString; safecall;
    procedure Set_WriterGroupName(const pRetVal: WideString); safecall;
    function CompareTo(other: OleVariant): Integer; safecall;
    function Get_Compressed: WordBool; safecall;
    procedure Set_Compressed(pRetVal: WordBool); safecall;
    function Get_ConfigurationVersion: _UAConfigurationVersion; safecall;
    procedure _Set_ConfigurationVersion(const pRetVal: _UAConfigurationVersion); safecall;
    function Get_DataSetClassId: TGUID; safecall;
    procedure Set_DataSetClassId(pRetVal: TGUID); safecall;
    function Get_DataSetClassIdString: WideString; safecall;
    procedure Set_DataSetClassIdString(const pRetVal: WideString); safecall;
    function Get_Encrypted: WordBool; safecall;
    procedure Set_Encrypted(pRetVal: WordBool); safecall;
    function Get_HasConfigurationVersion: WordBool; safecall;
    function Get_HasDataSetClassId: WordBool; safecall;
    function Get_HasOrigin: WordBool; safecall;
    function Get_MessageMappingName: WideString; safecall;
    procedure Set_MessageMappingName(const pRetVal: WideString); safecall;
    function Get_Origin: OleVariant; safecall;
    procedure _Set_Origin(pRetVal: OleVariant); safecall;
    function Get_Retain: WordBool; safecall;
    procedure Set_Retain(pRetVal: WordBool); safecall;
    function Get_Signed: WordBool; safecall;
    procedure Set_Signed(pRetVal: WordBool); safecall;
    function Get_TransportMappingName: WideString; safecall;
    procedure Set_TransportMappingName(const pRetVal: WideString); safecall;
    procedure SetOrigin(value: OleVariant); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DataSetWriterId: Integer read Get_DataSetWriterId write Set_DataSetWriterId;
    property DataSetWriterName: WideString read Get_DataSetWriterName write Set_DataSetWriterName;
    property HasDataSetWriterId: WordBool read Get_HasDataSetWriterId;
    property HasDataSetWriterName: WordBool read Get_HasDataSetWriterName;
    property HasPublisherId: WordBool read Get_HasPublisherId;
    property HasWriterGroupId: WordBool read Get_HasWriterGroupId;
    property HasWriterGroupName: WordBool read Get_HasWriterGroupName;
    property PublisherId: _UAPublisherId read Get_PublisherId write _Set_PublisherId;
    property WriterGroupId: Integer read Get_WriterGroupId write Set_WriterGroupId;
    property WriterGroupName: WideString read Get_WriterGroupName write Set_WriterGroupName;
    property Compressed: WordBool read Get_Compressed write Set_Compressed;
    property ConfigurationVersion: _UAConfigurationVersion read Get_ConfigurationVersion write _Set_ConfigurationVersion;
    property DataSetClassId: TGUID read Get_DataSetClassId write Set_DataSetClassId;
    property DataSetClassIdString: WideString read Get_DataSetClassIdString write Set_DataSetClassIdString;
    property Encrypted: WordBool read Get_Encrypted write Set_Encrypted;
    property HasConfigurationVersion: WordBool read Get_HasConfigurationVersion;
    property HasDataSetClassId: WordBool read Get_HasDataSetClassId;
    property HasOrigin: WordBool read Get_HasOrigin;
    property MessageMappingName: WideString read Get_MessageMappingName write Set_MessageMappingName;
    property Origin: OleVariant read Get_Origin write _Set_Origin;
    property Retain: WordBool read Get_Retain write Set_Retain;
    property Signed: WordBool read Get_Signed write Set_Signed;
    property TransportMappingName: WideString read Get_TransportMappingName write Set_TransportMappingName;
  end;

// *********************************************************************//
// DispIntf:  _UAPubSubHeaderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {34C0B10D-C825-4302-9B07-F9FACEC9CB90}
// *********************************************************************//
  _UAPubSubHeaderDisp = dispinterface
    ['{34C0B10D-C825-4302-9B07-F9FACEC9CB90}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property DataSetWriterId: Integer dispid 1610743814;
    property DataSetWriterName: WideString dispid 1610743816;
    property HasDataSetWriterId: WordBool readonly dispid 1610743818;
    property HasDataSetWriterName: WordBool readonly dispid 1610743819;
    property HasPublisherId: WordBool readonly dispid 1610743820;
    property HasWriterGroupId: WordBool readonly dispid 1610743821;
    property HasWriterGroupName: WordBool readonly dispid 1610743822;
    property PublisherId: _UAPublisherId dispid 1610743823;
    property WriterGroupId: Integer dispid 1610743825;
    property WriterGroupName: WideString dispid 1610743827;
    function CompareTo(other: OleVariant): Integer; dispid 1610743829;
    property Compressed: WordBool dispid 1610743830;
    property ConfigurationVersion: _UAConfigurationVersion dispid 1610743832;
    property DataSetClassId: {NOT_OLEAUTO(TGUID)}OleVariant dispid 1610743834;
    property DataSetClassIdString: WideString dispid 1610743836;
    property Encrypted: WordBool dispid 1610743838;
    property HasConfigurationVersion: WordBool readonly dispid 1610743840;
    property HasDataSetClassId: WordBool readonly dispid 1610743841;
    property HasOrigin: WordBool readonly dispid 1610743842;
    property MessageMappingName: WideString dispid 1610743843;
    property Origin: OleVariant dispid 1610743845;
    property Retain: WordBool dispid 1610743847;
    property Signed: WordBool dispid 1610743849;
    property TransportMappingName: WideString dispid 1610743851;
    procedure SetOrigin(value: OleVariant); dispid 1610743853;
  end;

// *********************************************************************//
// Interface: _UAPublisherId
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EE8D564D-05F4-4865-AB46-C255D8F9AE1F}
// *********************************************************************//
  _UAPublisherId = interface(IDispatch)
    ['{EE8D564D-05F4-4865-AB46-C255D8F9AE1F}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_ExternalValue: OleVariant; safecall;
    procedure _Set_ExternalValue(pRetVal: OleVariant); safecall;
    function Get_InternalValue: OleVariant; safecall;
    procedure _Set_InternalValue(pRetVal: OleVariant); safecall;
    function Get_IsNull: WordBool; safecall;
    function Get_IsNumericType: WordBool; safecall;
    function Get_NumericIdentifier: TDecimal; safecall;
    function Get_NumericIdentifierString: WideString; safecall;
    function Get_NumericIdentifierUInt64: Largeuint; safecall;
    function Get_PublisherIdType: UAPublisherIdType; safecall;
    procedure Set_PublisherIdType(pRetVal: UAPublisherIdType); safecall;
    function Get_StringIdentifier: WideString; safecall;
    function CompareTo(other: OleVariant): Integer; safecall;
    procedure Reset; safecall;
    procedure SetByteIdentifier(byteIdentifier: Byte); safecall;
    procedure SetExternalValue(ExternalValue: OleVariant); safecall;
    procedure SetIdentifier(PublisherIdType: UAPublisherIdType; identifier: OleVariant); safecall;
    procedure SetInternalValue(InternalValue: OleVariant); safecall;
    procedure SetStringIdentifier(const StringIdentifier: WideString); safecall;
    procedure SetUInt16Identifier(uint16Identifier: Integer); safecall;
    procedure SetUInt32Identifier(uint32Identifier: Int64); safecall;
    procedure SetUInt64Identifier(uint64Identifier: TDecimal); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property ExternalValue: OleVariant read Get_ExternalValue write _Set_ExternalValue;
    property InternalValue: OleVariant read Get_InternalValue write _Set_InternalValue;
    property IsNull: WordBool read Get_IsNull;
    property IsNumericType: WordBool read Get_IsNumericType;
    property NumericIdentifier: TDecimal read Get_NumericIdentifier;
    property NumericIdentifierString: WideString read Get_NumericIdentifierString;
    property NumericIdentifierUInt64: Largeuint read Get_NumericIdentifierUInt64;
    property PublisherIdType: UAPublisherIdType read Get_PublisherIdType write Set_PublisherIdType;
    property StringIdentifier: WideString read Get_StringIdentifier;
  end;

// *********************************************************************//
// DispIntf:  _UAPublisherIdDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EE8D564D-05F4-4865-AB46-C255D8F9AE1F}
// *********************************************************************//
  _UAPublisherIdDisp = dispinterface
    ['{EE8D564D-05F4-4865-AB46-C255D8F9AE1F}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property ExternalValue: OleVariant dispid 1610743814;
    property InternalValue: OleVariant dispid 1610743816;
    property IsNull: WordBool readonly dispid 1610743818;
    property IsNumericType: WordBool readonly dispid 1610743819;
    property NumericIdentifier: {NOT_OLEAUTO(TDecimal)}OleVariant readonly dispid 1610743820;
    property NumericIdentifierString: WideString readonly dispid 1610743821;
    property NumericIdentifierUInt64: Largeuint readonly dispid 1610743822;
    property PublisherIdType: UAPublisherIdType dispid 1610743823;
    property StringIdentifier: WideString readonly dispid 1610743825;
    function CompareTo(other: OleVariant): Integer; dispid 1610743826;
    procedure Reset; dispid 1610743827;
    procedure SetByteIdentifier(byteIdentifier: Byte); dispid 1610743828;
    procedure SetExternalValue(ExternalValue: OleVariant); dispid 1610743829;
    procedure SetIdentifier(PublisherIdType: UAPublisherIdType; identifier: OleVariant); dispid 1610743830;
    procedure SetInternalValue(InternalValue: OleVariant); dispid 1610743831;
    procedure SetStringIdentifier(const StringIdentifier: WideString); dispid 1610743832;
    procedure SetUInt16Identifier(uint16Identifier: Integer); dispid 1610743833;
    procedure SetUInt32Identifier(uint32Identifier: Int64); dispid 1610743834;
    procedure SetUInt64Identifier(uint64Identifier: {NOT_OLEAUTO(TDecimal)}OleVariant); dispid 1610743835;
  end;

// *********************************************************************//
// Interface: _UAPubSubObjectDescriptor
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DDE20692-3CF4-4282-9664-6F786C083AFD}
// *********************************************************************//
  _UAPubSubObjectDescriptor = interface(IDispatch)
    ['{DDE20692-3CF4-4282-9664-6F786C083AFD}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_CustomPropertyValueDictionary: _UAKeyValueDictionary; safecall;
    procedure _Set_CustomPropertyValueDictionary(const pRetVal: _UAKeyValueDictionary); safecall;
    function Get_HasName: WordBool; safecall;
    function Get_IsNull: WordBool; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function IsStrictlyPhysical(const TransportProfileUriString: WideString; 
                                assumeTopicTree: WordBool): WordBool; safecall;
    procedure Physicalize(const TransportProfileUriString: WideString; assumeTopicTree: WordBool; 
                          force: WordBool); safecall;
    function RequiresResolution(const TransportProfileUriString: WideString; 
                                assumeTopicTree: WordBool): WordBool; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property CustomPropertyValueDictionary: _UAKeyValueDictionary read Get_CustomPropertyValueDictionary write _Set_CustomPropertyValueDictionary;
    property HasName: WordBool read Get_HasName;
    property IsNull: WordBool read Get_IsNull;
    property Name: WideString read Get_Name write Set_Name;
  end;

// *********************************************************************//
// DispIntf:  _UAPubSubObjectDescriptorDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DDE20692-3CF4-4282-9664-6F786C083AFD}
// *********************************************************************//
  _UAPubSubObjectDescriptorDisp = dispinterface
    ['{DDE20692-3CF4-4282-9664-6F786C083AFD}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property CustomPropertyValueDictionary: _UAKeyValueDictionary dispid 1610743814;
    property HasName: WordBool readonly dispid 1610743816;
    property IsNull: WordBool readonly dispid 1610743817;
    property Name: WideString dispid 1610743818;
    function IsStrictlyPhysical(const TransportProfileUriString: WideString; 
                                assumeTopicTree: WordBool): WordBool; dispid 1610743820;
    procedure Physicalize(const TransportProfileUriString: WideString; assumeTopicTree: WordBool; 
                          force: WordBool); dispid 1610743821;
    function RequiresResolution(const TransportProfileUriString: WideString; 
                                assumeTopicTree: WordBool): WordBool; dispid 1610743822;
  end;

// *********************************************************************//
// Interface: _UADataSetSubscriptionDescriptor
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {88F53C60-CAFC-43EA-ACAB-BE89C9BBEB6D}
// *********************************************************************//
  _UADataSetSubscriptionDescriptor = interface(IDispatch)
    ['{88F53C60-CAFC-43EA-ACAB-BE89C9BBEB6D}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_AliasName: WideString; safecall;
    procedure Set_AliasName(const pRetVal: WideString); safecall;
    function Get_IsAliased: WordBool; safecall;
    function Get_AllowsResolution: WordBool; safecall;
    function Get_assumeTopicTree: WordBool; safecall;
    procedure Set_assumeTopicTree(pRetVal: WordBool); safecall;
    function Get_CommunicationParameters: _UASubscriberCommunicationParameters; safecall;
    procedure _Set_CommunicationParameters(const pRetVal: _UASubscriberCommunicationParameters); safecall;
    function Get_ConnectionDescriptor: _UAPubSubConnectionDescriptor; safecall;
    procedure _Set_ConnectionDescriptor(const pRetVal: _UAPubSubConnectionDescriptor); safecall;
    function Get_DataSetMetaData: _UADataSetMetaData; safecall;
    procedure _Set_DataSetMetaData(const pRetVal: _UADataSetMetaData); safecall;
    function Get_EffectiveAssumeTopicTree: WordBool; safecall;
    function Get_EffectiveMessageReceiveTimeout: Double; safecall;
    function Get_EffectiveSecurityMode: UAMessageSecurityModes; safecall;
    function Get_Filter: _UASubscribeDataSetFilter; safecall;
    procedure _Set_Filter(const pRetVal: _UASubscribeDataSetFilter); safecall;
    function Get_FilterIsStrictlyPhysical: WordBool; safecall;
    function Get_FilterRequiresResolution: WordBool; safecall;
    function Get_HasConnectionDescriptor: WordBool; safecall;
    function Get_HasDataSetMetaData: WordBool; safecall;
    function Get_HasPublishedDataSet: WordBool; safecall;
    function Get_InferredMessageReceiveTimeout: Double; safecall;
    function Get_InferredSecurityMode: UAMessageSecurityModes; safecall;
    function Get_IsNull: WordBool; safecall;
    function Get_IsStrictlyPhysical: WordBool; safecall;
    function Get_PublishedDataSetName: WideString; safecall;
    procedure Set_PublishedDataSetName(const pRetVal: WideString); safecall;
    function Get_RequiresResolution: WordBool; safecall;
    function Get_ResolverDescriptor: _UAPubSubResolverDescriptor; safecall;
    procedure _Set_ResolverDescriptor(const pRetVal: _UAPubSubResolverDescriptor); safecall;
    function Get_TopicPrefixHead: WideString; safecall;
    procedure Set_TopicPrefixHead(const pRetVal: WideString); safecall;
    procedure Logicalize(force: WordBool); safecall;
    procedure Physicalize(force: WordBool); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property AliasName: WideString read Get_AliasName write Set_AliasName;
    property IsAliased: WordBool read Get_IsAliased;
    property AllowsResolution: WordBool read Get_AllowsResolution;
    property assumeTopicTree: WordBool read Get_assumeTopicTree write Set_assumeTopicTree;
    property CommunicationParameters: _UASubscriberCommunicationParameters read Get_CommunicationParameters write _Set_CommunicationParameters;
    property ConnectionDescriptor: _UAPubSubConnectionDescriptor read Get_ConnectionDescriptor write _Set_ConnectionDescriptor;
    property DataSetMetaData: _UADataSetMetaData read Get_DataSetMetaData write _Set_DataSetMetaData;
    property EffectiveAssumeTopicTree: WordBool read Get_EffectiveAssumeTopicTree;
    property EffectiveMessageReceiveTimeout: Double read Get_EffectiveMessageReceiveTimeout;
    property EffectiveSecurityMode: UAMessageSecurityModes read Get_EffectiveSecurityMode;
    property Filter: _UASubscribeDataSetFilter read Get_Filter write _Set_Filter;
    property FilterIsStrictlyPhysical: WordBool read Get_FilterIsStrictlyPhysical;
    property FilterRequiresResolution: WordBool read Get_FilterRequiresResolution;
    property HasConnectionDescriptor: WordBool read Get_HasConnectionDescriptor;
    property HasDataSetMetaData: WordBool read Get_HasDataSetMetaData;
    property HasPublishedDataSet: WordBool read Get_HasPublishedDataSet;
    property InferredMessageReceiveTimeout: Double read Get_InferredMessageReceiveTimeout;
    property InferredSecurityMode: UAMessageSecurityModes read Get_InferredSecurityMode;
    property IsNull: WordBool read Get_IsNull;
    property IsStrictlyPhysical: WordBool read Get_IsStrictlyPhysical;
    property PublishedDataSetName: WideString read Get_PublishedDataSetName write Set_PublishedDataSetName;
    property RequiresResolution: WordBool read Get_RequiresResolution;
    property ResolverDescriptor: _UAPubSubResolverDescriptor read Get_ResolverDescriptor write _Set_ResolverDescriptor;
    property TopicPrefixHead: WideString read Get_TopicPrefixHead write Set_TopicPrefixHead;
  end;

// *********************************************************************//
// DispIntf:  _UADataSetSubscriptionDescriptorDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {88F53C60-CAFC-43EA-ACAB-BE89C9BBEB6D}
// *********************************************************************//
  _UADataSetSubscriptionDescriptorDisp = dispinterface
    ['{88F53C60-CAFC-43EA-ACAB-BE89C9BBEB6D}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property AliasName: WideString dispid 1610743814;
    property IsAliased: WordBool readonly dispid 1610743816;
    property AllowsResolution: WordBool readonly dispid 1610743817;
    property assumeTopicTree: WordBool dispid 1610743818;
    property CommunicationParameters: _UASubscriberCommunicationParameters dispid 1610743820;
    property ConnectionDescriptor: _UAPubSubConnectionDescriptor dispid 1610743822;
    property DataSetMetaData: _UADataSetMetaData dispid 1610743824;
    property EffectiveAssumeTopicTree: WordBool readonly dispid 1610743826;
    property EffectiveMessageReceiveTimeout: Double readonly dispid 1610743827;
    property EffectiveSecurityMode: UAMessageSecurityModes readonly dispid 1610743828;
    property Filter: _UASubscribeDataSetFilter dispid 1610743829;
    property FilterIsStrictlyPhysical: WordBool readonly dispid 1610743831;
    property FilterRequiresResolution: WordBool readonly dispid 1610743832;
    property HasConnectionDescriptor: WordBool readonly dispid 1610743833;
    property HasDataSetMetaData: WordBool readonly dispid 1610743834;
    property HasPublishedDataSet: WordBool readonly dispid 1610743835;
    property InferredMessageReceiveTimeout: Double readonly dispid 1610743836;
    property InferredSecurityMode: UAMessageSecurityModes readonly dispid 1610743837;
    property IsNull: WordBool readonly dispid 1610743838;
    property IsStrictlyPhysical: WordBool readonly dispid 1610743839;
    property PublishedDataSetName: WideString dispid 1610743840;
    property RequiresResolution: WordBool readonly dispid 1610743842;
    property ResolverDescriptor: _UAPubSubResolverDescriptor dispid 1610743843;
    property TopicPrefixHead: WideString dispid 1610743845;
    procedure Logicalize(force: WordBool); dispid 1610743847;
    procedure Physicalize(force: WordBool); dispid 1610743848;
  end;

// *********************************************************************//
// Interface: _UADataSetWriterDescriptor
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B371E7E9-AF62-4F24-A74E-1660C93151C5}
// *********************************************************************//
  _UADataSetWriterDescriptor = interface(IDispatch)
    ['{B371E7E9-AF62-4F24-A74E-1660C93151C5}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_CustomPropertyValueDictionary: _UAKeyValueDictionary; safecall;
    procedure _Set_CustomPropertyValueDictionary(const pRetVal: _UAKeyValueDictionary); safecall;
    function Get_HasName: WordBool; safecall;
    function Get_IsNull: WordBool; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function IsStrictlyPhysical(const TransportProfileUriString: WideString; 
                                assumeTopicTree: WordBool): WordBool; safecall;
    procedure Physicalize(const TransportProfileUriString: WideString; assumeTopicTree: WordBool; 
                          force: WordBool); safecall;
    function RequiresResolution(const TransportProfileUriString: WideString; 
                                assumeTopicTree: WordBool): WordBool; safecall;
    function Get_DataSetWriterId: Integer; safecall;
    procedure Set_DataSetWriterId(pRetVal: Integer); safecall;
    function Get_HasDataSetWriterId: WordBool; safecall;
    procedure Logicalize; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property CustomPropertyValueDictionary: _UAKeyValueDictionary read Get_CustomPropertyValueDictionary write _Set_CustomPropertyValueDictionary;
    property HasName: WordBool read Get_HasName;
    property IsNull: WordBool read Get_IsNull;
    property Name: WideString read Get_Name write Set_Name;
    property DataSetWriterId: Integer read Get_DataSetWriterId write Set_DataSetWriterId;
    property HasDataSetWriterId: WordBool read Get_HasDataSetWriterId;
  end;

// *********************************************************************//
// DispIntf:  _UADataSetWriterDescriptorDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B371E7E9-AF62-4F24-A74E-1660C93151C5}
// *********************************************************************//
  _UADataSetWriterDescriptorDisp = dispinterface
    ['{B371E7E9-AF62-4F24-A74E-1660C93151C5}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property CustomPropertyValueDictionary: _UAKeyValueDictionary dispid 1610743814;
    property HasName: WordBool readonly dispid 1610743816;
    property IsNull: WordBool readonly dispid 1610743817;
    property Name: WideString dispid 1610743818;
    function IsStrictlyPhysical(const TransportProfileUriString: WideString; 
                                assumeTopicTree: WordBool): WordBool; dispid 1610743820;
    procedure Physicalize(const TransportProfileUriString: WideString; assumeTopicTree: WordBool; 
                          force: WordBool); dispid 1610743821;
    function RequiresResolution(const TransportProfileUriString: WideString; 
                                assumeTopicTree: WordBool): WordBool; dispid 1610743822;
    property DataSetWriterId: Integer dispid 1610743823;
    property HasDataSetWriterId: WordBool readonly dispid 1610743825;
    procedure Logicalize; dispid 1610743826;
  end;

// *********************************************************************//
// Interface: _UAPubSubConnectionDescriptor
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4A0D460D-B71A-4009-9EB7-A081AC6AACEA}
// *********************************************************************//
  _UAPubSubConnectionDescriptor = interface(IDispatch)
    ['{4A0D460D-B71A-4009-9EB7-A081AC6AACEA}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_CustomPropertyValueDictionary: _UAKeyValueDictionary; safecall;
    procedure _Set_CustomPropertyValueDictionary(const pRetVal: _UAKeyValueDictionary); safecall;
    function Get_HasName: WordBool; safecall;
    function Get_IsNull: WordBool; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function IsStrictlyPhysical(const TransportProfileUriString: WideString; 
                                assumeTopicTree: WordBool): WordBool; safecall;
    procedure Physicalize(const TransportProfileUriString: WideString; assumeTopicTree: WordBool; 
                          force: WordBool); safecall;
    function RequiresResolution(const TransportProfileUriString: WideString; 
                                assumeTopicTree: WordBool): WordBool; safecall;
    function Get_BrokerConnectionTransportParameters: _UABrokerConnectionTransportParameters; safecall;
    procedure _Set_BrokerConnectionTransportParameters(const pRetVal: _UABrokerConnectionTransportParameters); safecall;
    function Get_ConnectionTransportParameters: _UAConnectionTransportParameters; safecall;
    procedure _Set_ConnectionTransportParameters(const pRetVal: _UAConnectionTransportParameters); safecall;
    function Get_DatagramConnectionTransportParameters: _UADatagramConnectionTransportParameters; safecall;
    procedure _Set_DatagramConnectionTransportParameters(const pRetVal: _UADatagramConnectionTransportParameters); safecall;
    function Get_EffectiveConnectionTransportParameters: _UAConnectionTransportParameters; safecall;
    function Get_EffectiveTransportProfileUriString: WideString; safecall;
    function Get_HasNetworkAddress: WordBool; safecall;
    function Get_ImpliedTransportProfileUriString: WideString; safecall;
    function Get_InferredTransportProfileUriString: WideString; safecall;
    function Get_NetworkAddress: _NetworkAddress; safecall;
    procedure _Set_NetworkAddress(const pRetVal: _NetworkAddress); safecall;
    function Get_ResourceAddress: _ResourceAddress; safecall;
    procedure _Set_ResourceAddress(const pRetVal: _ResourceAddress); safecall;
    function Get_TransportProfileName: WideString; safecall;
    procedure Set_TransportProfileName(const pRetVal: WideString); safecall;
    function Get_TransportProfileUriString: WideString; safecall;
    procedure Set_TransportProfileUriString(const pRetVal: WideString); safecall;
    procedure Logicalize; safecall;
    procedure UseEthernetCaptureFile(const captureFileName: WideString); safecall;
    procedure UseUdpCaptureFile(const captureFileName: WideString); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property CustomPropertyValueDictionary: _UAKeyValueDictionary read Get_CustomPropertyValueDictionary write _Set_CustomPropertyValueDictionary;
    property HasName: WordBool read Get_HasName;
    property IsNull: WordBool read Get_IsNull;
    property Name: WideString read Get_Name write Set_Name;
    property BrokerConnectionTransportParameters: _UABrokerConnectionTransportParameters read Get_BrokerConnectionTransportParameters write _Set_BrokerConnectionTransportParameters;
    property ConnectionTransportParameters: _UAConnectionTransportParameters read Get_ConnectionTransportParameters write _Set_ConnectionTransportParameters;
    property DatagramConnectionTransportParameters: _UADatagramConnectionTransportParameters read Get_DatagramConnectionTransportParameters write _Set_DatagramConnectionTransportParameters;
    property EffectiveConnectionTransportParameters: _UAConnectionTransportParameters read Get_EffectiveConnectionTransportParameters;
    property EffectiveTransportProfileUriString: WideString read Get_EffectiveTransportProfileUriString;
    property HasNetworkAddress: WordBool read Get_HasNetworkAddress;
    property ImpliedTransportProfileUriString: WideString read Get_ImpliedTransportProfileUriString;
    property InferredTransportProfileUriString: WideString read Get_InferredTransportProfileUriString;
    property NetworkAddress: _NetworkAddress read Get_NetworkAddress write _Set_NetworkAddress;
    property ResourceAddress: _ResourceAddress read Get_ResourceAddress write _Set_ResourceAddress;
    property TransportProfileName: WideString read Get_TransportProfileName write Set_TransportProfileName;
    property TransportProfileUriString: WideString read Get_TransportProfileUriString write Set_TransportProfileUriString;
  end;

// *********************************************************************//
// DispIntf:  _UAPubSubConnectionDescriptorDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4A0D460D-B71A-4009-9EB7-A081AC6AACEA}
// *********************************************************************//
  _UAPubSubConnectionDescriptorDisp = dispinterface
    ['{4A0D460D-B71A-4009-9EB7-A081AC6AACEA}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property CustomPropertyValueDictionary: _UAKeyValueDictionary dispid 1610743814;
    property HasName: WordBool readonly dispid 1610743816;
    property IsNull: WordBool readonly dispid 1610743817;
    property Name: WideString dispid 1610743818;
    function IsStrictlyPhysical(const TransportProfileUriString: WideString; 
                                assumeTopicTree: WordBool): WordBool; dispid 1610743820;
    procedure Physicalize(const TransportProfileUriString: WideString; assumeTopicTree: WordBool; 
                          force: WordBool); dispid 1610743821;
    function RequiresResolution(const TransportProfileUriString: WideString; 
                                assumeTopicTree: WordBool): WordBool; dispid 1610743822;
    property BrokerConnectionTransportParameters: _UABrokerConnectionTransportParameters dispid 1610743823;
    property ConnectionTransportParameters: _UAConnectionTransportParameters dispid 1610743825;
    property DatagramConnectionTransportParameters: _UADatagramConnectionTransportParameters dispid 1610743827;
    property EffectiveConnectionTransportParameters: _UAConnectionTransportParameters readonly dispid 1610743829;
    property EffectiveTransportProfileUriString: WideString readonly dispid 1610743830;
    property HasNetworkAddress: WordBool readonly dispid 1610743831;
    property ImpliedTransportProfileUriString: WideString readonly dispid 1610743832;
    property InferredTransportProfileUriString: WideString readonly dispid 1610743833;
    property NetworkAddress: _NetworkAddress dispid 1610743834;
    property ResourceAddress: _ResourceAddress dispid 1610743836;
    property TransportProfileName: WideString dispid 1610743838;
    property TransportProfileUriString: WideString dispid 1610743840;
    procedure Logicalize; dispid 1610743842;
    procedure UseEthernetCaptureFile(const captureFileName: WideString); dispid 1610743843;
    procedure UseUdpCaptureFile(const captureFileName: WideString); dispid 1610743844;
  end;

// *********************************************************************//
// Interface: _UAPubSubResolverDescriptor
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6160E016-5591-48AC-8BD1-499459DDE6A4}
// *********************************************************************//
  _UAPubSubResolverDescriptor = interface(IDispatch)
    ['{6160E016-5591-48AC-8BD1-499459DDE6A4}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_IsNull: WordBool; safecall;
    function Get_PublisherEndpointDescriptor: _UAEndpointDescriptor; safecall;
    procedure _Set_PublisherEndpointDescriptor(const pRetVal: _UAEndpointDescriptor); safecall;
    function Get_PublisherFileResourceDescriptor: _ResourceDescriptor; safecall;
    procedure _Set_PublisherFileResourceDescriptor(const pRetVal: _ResourceDescriptor); safecall;
    function Get_ResolverKind: UAPubSubResolverKind; safecall;
    procedure Set_ResolverKind(pRetVal: UAPubSubResolverKind); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property IsNull: WordBool read Get_IsNull;
    property PublisherEndpointDescriptor: _UAEndpointDescriptor read Get_PublisherEndpointDescriptor write _Set_PublisherEndpointDescriptor;
    property PublisherFileResourceDescriptor: _ResourceDescriptor read Get_PublisherFileResourceDescriptor write _Set_PublisherFileResourceDescriptor;
    property ResolverKind: UAPubSubResolverKind read Get_ResolverKind write Set_ResolverKind;
  end;

// *********************************************************************//
// DispIntf:  _UAPubSubResolverDescriptorDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6160E016-5591-48AC-8BD1-499459DDE6A4}
// *********************************************************************//
  _UAPubSubResolverDescriptorDisp = dispinterface
    ['{6160E016-5591-48AC-8BD1-499459DDE6A4}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property IsNull: WordBool readonly dispid 1610743814;
    property PublisherEndpointDescriptor: _UAEndpointDescriptor dispid 1610743815;
    property PublisherFileResourceDescriptor: _ResourceDescriptor dispid 1610743817;
    property ResolverKind: UAPubSubResolverKind dispid 1610743819;
  end;

// *********************************************************************//
// Interface: _UAWriterGroupDescriptor
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8C64A48B-E50A-492D-B094-21AB44F50A5A}
// *********************************************************************//
  _UAWriterGroupDescriptor = interface(IDispatch)
    ['{8C64A48B-E50A-492D-B094-21AB44F50A5A}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_CustomPropertyValueDictionary: _UAKeyValueDictionary; safecall;
    procedure _Set_CustomPropertyValueDictionary(const pRetVal: _UAKeyValueDictionary); safecall;
    function Get_HasName: WordBool; safecall;
    function Get_IsNull: WordBool; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function IsStrictlyPhysical(const TransportProfileUriString: WideString; 
                                assumeTopicTree: WordBool): WordBool; safecall;
    procedure Physicalize(const TransportProfileUriString: WideString; assumeTopicTree: WordBool; 
                          force: WordBool); safecall;
    function RequiresResolution(const TransportProfileUriString: WideString; 
                                assumeTopicTree: WordBool): WordBool; safecall;
    function Get_HasWriterGroupId: WordBool; safecall;
    function Get_WriterGroupId: Integer; safecall;
    procedure Set_WriterGroupId(pRetVal: Integer); safecall;
    procedure Logicalize; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property CustomPropertyValueDictionary: _UAKeyValueDictionary read Get_CustomPropertyValueDictionary write _Set_CustomPropertyValueDictionary;
    property HasName: WordBool read Get_HasName;
    property IsNull: WordBool read Get_IsNull;
    property Name: WideString read Get_Name write Set_Name;
    property HasWriterGroupId: WordBool read Get_HasWriterGroupId;
    property WriterGroupId: Integer read Get_WriterGroupId write Set_WriterGroupId;
  end;

// *********************************************************************//
// DispIntf:  _UAWriterGroupDescriptorDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8C64A48B-E50A-492D-B094-21AB44F50A5A}
// *********************************************************************//
  _UAWriterGroupDescriptorDisp = dispinterface
    ['{8C64A48B-E50A-492D-B094-21AB44F50A5A}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property CustomPropertyValueDictionary: _UAKeyValueDictionary dispid 1610743814;
    property HasName: WordBool readonly dispid 1610743816;
    property IsNull: WordBool readonly dispid 1610743817;
    property Name: WideString dispid 1610743818;
    function IsStrictlyPhysical(const TransportProfileUriString: WideString; 
                                assumeTopicTree: WordBool): WordBool; dispid 1610743820;
    procedure Physicalize(const TransportProfileUriString: WideString; assumeTopicTree: WordBool; 
                          force: WordBool); dispid 1610743821;
    function RequiresResolution(const TransportProfileUriString: WideString; 
                                assumeTopicTree: WordBool): WordBool; dispid 1610743822;
    property HasWriterGroupId: WordBool readonly dispid 1610743823;
    property WriterGroupId: Integer dispid 1610743824;
    procedure Logicalize; dispid 1610743826;
  end;

// *********************************************************************//
// Interface: _UAPubSubCommunicationParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D78C7E17-0E17-4081-A467-032E66AEC298}
// *********************************************************************//
  _UAPubSubCommunicationParameters = interface(IDispatch)
    ['{D78C7E17-0E17-4081-A467-032E66AEC298}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_DataSetFieldContentMask: UADataSetFieldContentMask; safecall;
    procedure Set_DataSetFieldContentMask(pRetVal: UADataSetFieldContentMask); safecall;
    function Get_ManagedSecurityGroupParameters: _ManagedSecurityGroupParameters; safecall;
    procedure _Set_ManagedSecurityGroupParameters(const pRetVal: _ManagedSecurityGroupParameters); safecall;
    function Get_MaximumNetworkMessageSize: Int64; safecall;
    procedure Set_MaximumNetworkMessageSize(pRetVal: Int64); safecall;
    function Get_MaximumNetworkMessageSizeInt32: Integer; safecall;
    procedure Set_MaximumNetworkMessageSizeInt32(pRetVal: Integer); safecall;
    function Get_securityGroupId: WideString; safecall;
    procedure Set_securityGroupId(const pRetVal: WideString); safecall;
    function Get_SecurityKeyServices: _UAEndpointDescriptorCollection; safecall;
    procedure _Set_SecurityKeyServices(const pRetVal: _UAEndpointDescriptorCollection); safecall;
    function Get_SecurityKeyServiceTemplate: _UAEndpointDescriptor; safecall;
    procedure _Set_SecurityKeyServiceTemplate(const pRetVal: _UAEndpointDescriptor); safecall;
    function Get_SecurityMode: UAMessageSecurityModes; safecall;
    procedure Set_SecurityMode(pRetVal: UAMessageSecurityModes); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property DataSetFieldContentMask: UADataSetFieldContentMask read Get_DataSetFieldContentMask write Set_DataSetFieldContentMask;
    property ManagedSecurityGroupParameters: _ManagedSecurityGroupParameters read Get_ManagedSecurityGroupParameters write _Set_ManagedSecurityGroupParameters;
    property MaximumNetworkMessageSize: Int64 read Get_MaximumNetworkMessageSize write Set_MaximumNetworkMessageSize;
    property MaximumNetworkMessageSizeInt32: Integer read Get_MaximumNetworkMessageSizeInt32 write Set_MaximumNetworkMessageSizeInt32;
    property securityGroupId: WideString read Get_securityGroupId write Set_securityGroupId;
    property SecurityKeyServices: _UAEndpointDescriptorCollection read Get_SecurityKeyServices write _Set_SecurityKeyServices;
    property SecurityKeyServiceTemplate: _UAEndpointDescriptor read Get_SecurityKeyServiceTemplate write _Set_SecurityKeyServiceTemplate;
    property SecurityMode: UAMessageSecurityModes read Get_SecurityMode write Set_SecurityMode;
  end;

// *********************************************************************//
// DispIntf:  _UAPubSubCommunicationParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D78C7E17-0E17-4081-A467-032E66AEC298}
// *********************************************************************//
  _UAPubSubCommunicationParametersDisp = dispinterface
    ['{D78C7E17-0E17-4081-A467-032E66AEC298}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property DataSetFieldContentMask: UADataSetFieldContentMask dispid 1610743816;
    property ManagedSecurityGroupParameters: _ManagedSecurityGroupParameters dispid 1610743818;
    property MaximumNetworkMessageSize: Int64 dispid 1610743820;
    property MaximumNetworkMessageSizeInt32: Integer dispid 1610743822;
    property securityGroupId: WideString dispid 1610743824;
    property SecurityKeyServices: _UAEndpointDescriptorCollection dispid 1610743826;
    property SecurityKeyServiceTemplate: _UAEndpointDescriptor dispid 1610743828;
    property SecurityMode: UAMessageSecurityModes dispid 1610743830;
  end;

// *********************************************************************//
// Interface: _UASubscriberCommunicationParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5D65321B-169C-4DFE-B039-2F25C3D0BDA4}
// *********************************************************************//
  _UASubscriberCommunicationParameters = interface(IDispatch)
    ['{5D65321B-169C-4DFE-B039-2F25C3D0BDA4}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_DataSetFieldContentMask: UADataSetFieldContentMask; safecall;
    procedure Set_DataSetFieldContentMask(pRetVal: UADataSetFieldContentMask); safecall;
    function Get_ManagedSecurityGroupParameters: _ManagedSecurityGroupParameters; safecall;
    procedure _Set_ManagedSecurityGroupParameters(const pRetVal: _ManagedSecurityGroupParameters); safecall;
    function Get_MaximumNetworkMessageSize: Int64; safecall;
    procedure Set_MaximumNetworkMessageSize(pRetVal: Int64); safecall;
    function Get_MaximumNetworkMessageSizeInt32: Integer; safecall;
    procedure Set_MaximumNetworkMessageSizeInt32(pRetVal: Integer); safecall;
    function Get_securityGroupId: WideString; safecall;
    procedure Set_securityGroupId(const pRetVal: WideString); safecall;
    function Get_SecurityKeyServices: _UAEndpointDescriptorCollection; safecall;
    procedure _Set_SecurityKeyServices(const pRetVal: _UAEndpointDescriptorCollection); safecall;
    function Get_SecurityKeyServiceTemplate: _UAEndpointDescriptor; safecall;
    procedure _Set_SecurityKeyServiceTemplate(const pRetVal: _UAEndpointDescriptor); safecall;
    function Get_SecurityMode: UAMessageSecurityModes; safecall;
    procedure Set_SecurityMode(pRetVal: UAMessageSecurityModes); safecall;
    function Get_BrokerDataSetReaderTransportParameters: _UABrokerDataSetReaderTransportParameters; safecall;
    procedure _Set_BrokerDataSetReaderTransportParameters(const pRetVal: _UABrokerDataSetReaderTransportParameters); safecall;
    function Get_JsonDataSetReaderMessageParameters: _UAJsonDataSetReaderMessageParameters; safecall;
    procedure _Set_JsonDataSetReaderMessageParameters(const pRetVal: _UAJsonDataSetReaderMessageParameters); safecall;
    function Get_MessageReceiveTimeout: Double; safecall;
    procedure Set_MessageReceiveTimeout(pRetVal: Double); safecall;
    function Get_UadpDataSetReaderMessageParameters: _UAUadpDataSetReaderMessageParameters; safecall;
    procedure _Set_UadpDataSetReaderMessageParameters(const pRetVal: _UAUadpDataSetReaderMessageParameters); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property DataSetFieldContentMask: UADataSetFieldContentMask read Get_DataSetFieldContentMask write Set_DataSetFieldContentMask;
    property ManagedSecurityGroupParameters: _ManagedSecurityGroupParameters read Get_ManagedSecurityGroupParameters write _Set_ManagedSecurityGroupParameters;
    property MaximumNetworkMessageSize: Int64 read Get_MaximumNetworkMessageSize write Set_MaximumNetworkMessageSize;
    property MaximumNetworkMessageSizeInt32: Integer read Get_MaximumNetworkMessageSizeInt32 write Set_MaximumNetworkMessageSizeInt32;
    property securityGroupId: WideString read Get_securityGroupId write Set_securityGroupId;
    property SecurityKeyServices: _UAEndpointDescriptorCollection read Get_SecurityKeyServices write _Set_SecurityKeyServices;
    property SecurityKeyServiceTemplate: _UAEndpointDescriptor read Get_SecurityKeyServiceTemplate write _Set_SecurityKeyServiceTemplate;
    property SecurityMode: UAMessageSecurityModes read Get_SecurityMode write Set_SecurityMode;
    property BrokerDataSetReaderTransportParameters: _UABrokerDataSetReaderTransportParameters read Get_BrokerDataSetReaderTransportParameters write _Set_BrokerDataSetReaderTransportParameters;
    property JsonDataSetReaderMessageParameters: _UAJsonDataSetReaderMessageParameters read Get_JsonDataSetReaderMessageParameters write _Set_JsonDataSetReaderMessageParameters;
    property MessageReceiveTimeout: Double read Get_MessageReceiveTimeout write Set_MessageReceiveTimeout;
    property UadpDataSetReaderMessageParameters: _UAUadpDataSetReaderMessageParameters read Get_UadpDataSetReaderMessageParameters write _Set_UadpDataSetReaderMessageParameters;
  end;

// *********************************************************************//
// DispIntf:  _UASubscriberCommunicationParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5D65321B-169C-4DFE-B039-2F25C3D0BDA4}
// *********************************************************************//
  _UASubscriberCommunicationParametersDisp = dispinterface
    ['{5D65321B-169C-4DFE-B039-2F25C3D0BDA4}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property DataSetFieldContentMask: UADataSetFieldContentMask dispid 1610743816;
    property ManagedSecurityGroupParameters: _ManagedSecurityGroupParameters dispid 1610743818;
    property MaximumNetworkMessageSize: Int64 dispid 1610743820;
    property MaximumNetworkMessageSizeInt32: Integer dispid 1610743822;
    property securityGroupId: WideString dispid 1610743824;
    property SecurityKeyServices: _UAEndpointDescriptorCollection dispid 1610743826;
    property SecurityKeyServiceTemplate: _UAEndpointDescriptor dispid 1610743828;
    property SecurityMode: UAMessageSecurityModes dispid 1610743830;
    property BrokerDataSetReaderTransportParameters: _UABrokerDataSetReaderTransportParameters dispid 1610743832;
    property JsonDataSetReaderMessageParameters: _UAJsonDataSetReaderMessageParameters dispid 1610743834;
    property MessageReceiveTimeout: Double dispid 1610743836;
    property UadpDataSetReaderMessageParameters: _UAUadpDataSetReaderMessageParameters dispid 1610743838;
  end;

// *********************************************************************//
// Interface: _UAPubSubSecurityKeyService
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {19406528-82E3-4F71-9755-9981A1ED9CD7}
// *********************************************************************//
  _UAPubSubSecurityKeyService = interface(IDispatch)
    ['{19406528-82E3-4F71-9755-9981A1ED9CD7}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function GetSecurityKeys(const securityGroupId: WideString; startingTokenId: OleVariant; 
                             requestedKeyCount: OleVariant): _SecurityKeysInfo; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
  end;

// *********************************************************************//
// DispIntf:  _UAPubSubSecurityKeyServiceDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {19406528-82E3-4F71-9755-9981A1ED9CD7}
// *********************************************************************//
  _UAPubSubSecurityKeyServiceDisp = dispinterface
    ['{19406528-82E3-4F71-9755-9981A1ED9CD7}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function GetSecurityKeys(const securityGroupId: WideString; startingTokenId: OleVariant; 
                             requestedKeyCount: OleVariant): _SecurityKeysInfo; dispid 1610743813;
  end;

// *********************************************************************//
// Interface: _UAReadOnlyPubSubSecurityKeyService
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {94E67087-2DA5-4BB1-9F2C-05824A1D06B5}
// *********************************************************************//
  _UAReadOnlyPubSubSecurityKeyService = interface(IDispatch)
    ['{94E67087-2DA5-4BB1-9F2C-05824A1D06B5}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function GetSecurityKeys(const securityGroupId: WideString; startingTokenId: OleVariant; 
                             requestedKeyCount: OleVariant): _SecurityKeysInfo; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
  end;

// *********************************************************************//
// DispIntf:  _UAReadOnlyPubSubSecurityKeyServiceDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {94E67087-2DA5-4BB1-9F2C-05824A1D06B5}
// *********************************************************************//
  _UAReadOnlyPubSubSecurityKeyServiceDisp = dispinterface
    ['{94E67087-2DA5-4BB1-9F2C-05824A1D06B5}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function GetSecurityKeys(const securityGroupId: WideString; startingTokenId: OleVariant; 
                             requestedKeyCount: OleVariant): _SecurityKeysInfo; dispid 1610743813;
  end;

// *********************************************************************//
// Interface: _EasyUADataSetSubscriptionChangeArguments
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {48E631D2-9858-4605-BF08-58AC05F0F9DA}
// *********************************************************************//
  _EasyUADataSetSubscriptionChangeArguments = interface(IDispatch)
    ['{48E631D2-9858-4605-BF08-58AC05F0F9DA}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_State: OleVariant; safecall;
    procedure _Set_State(pRetVal: OleVariant); safecall;
    function MemberwiseClone: _OperationArguments; safecall;
    procedure SetState(State: OleVariant); safecall;
    function Get_Handle: Integer; safecall;
    procedure Set_Handle(pRetVal: Integer); safecall;
    function Get_Filter: _UASubscribeDataSetFilter; safecall;
    procedure _Set_Filter(const pRetVal: _UASubscribeDataSetFilter); safecall;
    function Get_DataSetMetaData: _UADataSetMetaData; safecall;
    procedure _Set_DataSetMetaData(const pRetVal: _UADataSetMetaData); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property State: OleVariant read Get_State write _Set_State;
    property Handle: Integer read Get_Handle write Set_Handle;
    property Filter: _UASubscribeDataSetFilter read Get_Filter write _Set_Filter;
    property DataSetMetaData: _UADataSetMetaData read Get_DataSetMetaData write _Set_DataSetMetaData;
  end;

// *********************************************************************//
// DispIntf:  _EasyUADataSetSubscriptionChangeArgumentsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {48E631D2-9858-4605-BF08-58AC05F0F9DA}
// *********************************************************************//
  _EasyUADataSetSubscriptionChangeArgumentsDisp = dispinterface
    ['{48E631D2-9858-4605-BF08-58AC05F0F9DA}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property State: OleVariant dispid 1610743814;
    function MemberwiseClone: _OperationArguments; dispid 1610743816;
    procedure SetState(State: OleVariant); dispid 1610743817;
    property Handle: Integer dispid 1610743818;
    property Filter: _UASubscribeDataSetFilter dispid 1610743820;
    property DataSetMetaData: _UADataSetMetaData dispid 1610743822;
  end;

// *********************************************************************//
// Interface: _UASubscribeDataSetArguments
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B52904E1-6EE9-4AAE-868D-7C63DB6E5F7D}
// *********************************************************************//
  _UASubscribeDataSetArguments = interface(IDispatch)
    ['{B52904E1-6EE9-4AAE-868D-7C63DB6E5F7D}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_State: OleVariant; safecall;
    procedure _Set_State(pRetVal: OleVariant); safecall;
    function MemberwiseClone: _OperationArguments; safecall;
    procedure SetState(State: OleVariant); safecall;
    function Get_DataSetSubscriptionDescriptor: _UADataSetSubscriptionDescriptor; safecall;
    procedure _Set_DataSetSubscriptionDescriptor(const pRetVal: _UADataSetSubscriptionDescriptor); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property State: OleVariant read Get_State write _Set_State;
    property DataSetSubscriptionDescriptor: _UADataSetSubscriptionDescriptor read Get_DataSetSubscriptionDescriptor write _Set_DataSetSubscriptionDescriptor;
  end;

// *********************************************************************//
// DispIntf:  _UASubscribeDataSetArgumentsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B52904E1-6EE9-4AAE-868D-7C63DB6E5F7D}
// *********************************************************************//
  _UASubscribeDataSetArgumentsDisp = dispinterface
    ['{B52904E1-6EE9-4AAE-868D-7C63DB6E5F7D}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property State: OleVariant dispid 1610743814;
    function MemberwiseClone: _OperationArguments; dispid 1610743816;
    procedure SetState(State: OleVariant); dispid 1610743817;
    property DataSetSubscriptionDescriptor: _UADataSetSubscriptionDescriptor dispid 1610743818;
  end;

// *********************************************************************//
// Interface: _EasyUASubscribeDataSetArgumentsDictionary
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {14DE08AF-640B-46CE-A57C-FE2A4919E579}
// *********************************************************************//
  _EasyUASubscribeDataSetArgumentsDictionary = interface(IDispatch)
    ['{14DE08AF-640B-46CE-A57C-FE2A4919E579}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_Item(key: Integer): _EasyUASubscribeDataSetArguments; safecall;
    procedure _Set_Item(key: Integer; const pRetVal: _EasyUASubscribeDataSetArguments); safecall;
    function Get_Count: Integer; safecall;
    function GetEnumerator: IEnumVARIANT; safecall;
    procedure Add(key: Integer; Item: OleVariant); safecall;
    procedure Clear; safecall;
    function ContainsKey(key: Integer): WordBool; safecall;
    function Remove(key: Integer): WordBool; safecall;
    function TryGetValue(key: Integer; out value: OleVariant): WordBool; safecall;
    function ContainsValue(value: OleVariant): WordBool; safecall;
    property ToString: WideString read Get_ToString;
    property Item[key: Integer]: _EasyUASubscribeDataSetArguments read Get_Item write _Set_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  _EasyUASubscribeDataSetArgumentsDictionaryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {14DE08AF-640B-46CE-A57C-FE2A4919E579}
// *********************************************************************//
  _EasyUASubscribeDataSetArgumentsDictionaryDisp = dispinterface
    ['{14DE08AF-640B-46CE-A57C-FE2A4919E579}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property Item[key: Integer]: _EasyUASubscribeDataSetArguments dispid 0; default;
    property Count: Integer readonly dispid 1610743814;
    function GetEnumerator: IEnumVARIANT; dispid -4;
    procedure Add(key: Integer; Item: OleVariant); dispid 1610743816;
    procedure Clear; dispid 1610743817;
    function ContainsKey(key: Integer): WordBool; dispid 1610743818;
    function Remove(key: Integer): WordBool; dispid 1610743819;
    function TryGetValue(key: Integer; out value: OleVariant): WordBool; dispid 1610743820;
    function ContainsValue(value: OleVariant): WordBool; dispid 1610743821;
  end;

// *********************************************************************//
// Interface: _EasyUAPubSubMessageEventArgs
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {00D3D0EC-9F69-4475-A89C-0ECC58B13B21}
// *********************************************************************//
  _EasyUAPubSubMessageEventArgs = interface(IDispatch)
    ['{00D3D0EC-9F69-4475-A89C-0ECC58B13B21}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_Diagnostics: _ExceptionCollection; safecall;
    procedure _Set_Diagnostics(const pRetVal: _ExceptionCollection); safecall;
    function Get_DiagnosticsCount: Integer; safecall;
    function Get_DiagnosticsSummary: WideString; safecall;
    function Get_ErrorId: WideString; safecall;
    procedure Set_ErrorId(const pRetVal: WideString); safecall;
    function Get_ErrorMessage: WideString; safecall;
    procedure Set_ErrorMessage(const pRetVal: WideString); safecall;
    function Get_ErrorMessageBrief: WideString; safecall;
    function Get_Exception: _Exception; safecall;
    procedure _Set_Exception(const pRetVal: _Exception); safecall;
    function Get_NormalizedDiagnostics: _NormalizedExceptionCollection; safecall;
    function Get_NormalizedException: _NormalizedException; safecall;
    function Get_Succeeded: WordBool; safecall;
    function Clone: OleVariant; safecall;
    function MemberwiseClone: _OperationEventArgs; safecall;
    function ToLongString: WideString; safecall;
    function Get_PubSubLocators: _UAPubSubLocators; safecall;
    procedure _Set_PubSubLocators(const pRetVal: _UAPubSubLocators); safecall;
    function Get_ResolvedDataSetSubscriptionDescriptor: _UADataSetSubscriptionDescriptor; safecall;
    procedure _Set_ResolvedDataSetSubscriptionDescriptor(const pRetVal: _UADataSetSubscriptionDescriptor); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Diagnostics: _ExceptionCollection read Get_Diagnostics write _Set_Diagnostics;
    property DiagnosticsCount: Integer read Get_DiagnosticsCount;
    property DiagnosticsSummary: WideString read Get_DiagnosticsSummary;
    property ErrorId: WideString read Get_ErrorId write Set_ErrorId;
    property ErrorMessage: WideString read Get_ErrorMessage write Set_ErrorMessage;
    property ErrorMessageBrief: WideString read Get_ErrorMessageBrief;
    property Exception: _Exception read Get_Exception write _Set_Exception;
    property NormalizedDiagnostics: _NormalizedExceptionCollection read Get_NormalizedDiagnostics;
    property NormalizedException: _NormalizedException read Get_NormalizedException;
    property Succeeded: WordBool read Get_Succeeded;
    property PubSubLocators: _UAPubSubLocators read Get_PubSubLocators write _Set_PubSubLocators;
    property ResolvedDataSetSubscriptionDescriptor: _UADataSetSubscriptionDescriptor read Get_ResolvedDataSetSubscriptionDescriptor write _Set_ResolvedDataSetSubscriptionDescriptor;
  end;

// *********************************************************************//
// DispIntf:  _EasyUAPubSubMessageEventArgsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {00D3D0EC-9F69-4475-A89C-0ECC58B13B21}
// *********************************************************************//
  _EasyUAPubSubMessageEventArgsDisp = dispinterface
    ['{00D3D0EC-9F69-4475-A89C-0ECC58B13B21}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    property Diagnostics: _ExceptionCollection dispid 1610743813;
    property DiagnosticsCount: Integer readonly dispid 1610743815;
    property DiagnosticsSummary: WideString readonly dispid 1610743816;
    property ErrorId: WideString dispid 1610743817;
    property ErrorMessage: WideString dispid 1610743819;
    property ErrorMessageBrief: WideString readonly dispid 1610743821;
    property Exception: _Exception dispid 1610743822;
    property NormalizedDiagnostics: _NormalizedExceptionCollection readonly dispid 1610743824;
    property NormalizedException: _NormalizedException readonly dispid 1610743825;
    property Succeeded: WordBool readonly dispid 1610743826;
    function Clone: OleVariant; dispid 1610743827;
    function MemberwiseClone: _OperationEventArgs; dispid 1610743828;
    function ToLongString: WideString; dispid 1610743829;
    property PubSubLocators: _UAPubSubLocators dispid 1610743830;
    property ResolvedDataSetSubscriptionDescriptor: _UADataSetSubscriptionDescriptor dispid 1610743832;
  end;

// *********************************************************************//
// Interface: _EasyUAResolverAccessEventArgs
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C565BB9D-B8CE-4806-B73D-BEE883F32B81}
// *********************************************************************//
  _EasyUAResolverAccessEventArgs = interface(IDispatch)
    ['{C565BB9D-B8CE-4806-B73D-BEE883F32B81}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_Exception: _Exception; safecall;
    function Clone: OleVariant; safecall;
    function Get_ResolverDescriptor: _UAPubSubResolverDescriptor; safecall;
    procedure _Set_ResolverDescriptor(const pRetVal: _UAPubSubResolverDescriptor); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Exception: _Exception read Get_Exception;
    property ResolverDescriptor: _UAPubSubResolverDescriptor read Get_ResolverDescriptor write _Set_ResolverDescriptor;
  end;

// *********************************************************************//
// DispIntf:  _EasyUAResolverAccessEventArgsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C565BB9D-B8CE-4806-B73D-BEE883F32B81}
// *********************************************************************//
  _EasyUAResolverAccessEventArgsDisp = dispinterface
    ['{C565BB9D-B8CE-4806-B73D-BEE883F32B81}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    property Exception: _Exception readonly dispid 1610743813;
    function Clone: OleVariant; dispid 1610743814;
    property ResolverDescriptor: _UAPubSubResolverDescriptor dispid 1610743815;
  end;

// *********************************************************************//
// Interface: _EasyUASubscriptionResolvedEventArgs
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {948E4C59-9521-4D4F-8355-5A9A4869C39A}
// *********************************************************************//
  _EasyUASubscriptionResolvedEventArgs = interface(IDispatch)
    ['{948E4C59-9521-4D4F-8355-5A9A4869C39A}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_DataSetSubscriptionDescriptor: _UADataSetSubscriptionDescriptor; safecall;
    procedure _Set_DataSetSubscriptionDescriptor(const pRetVal: _UADataSetSubscriptionDescriptor); safecall;
    function Clone: OleVariant; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DataSetSubscriptionDescriptor: _UADataSetSubscriptionDescriptor read Get_DataSetSubscriptionDescriptor write _Set_DataSetSubscriptionDescriptor;
  end;

// *********************************************************************//
// DispIntf:  _EasyUASubscriptionResolvedEventArgsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {948E4C59-9521-4D4F-8355-5A9A4869C39A}
// *********************************************************************//
  _EasyUASubscriptionResolvedEventArgsDisp = dispinterface
    ['{948E4C59-9521-4D4F-8355-5A9A4869C39A}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    property DataSetSubscriptionDescriptor: _UADataSetSubscriptionDescriptor dispid 1610743813;
    function Clone: OleVariant; dispid 1610743815;
  end;

// *********************************************************************//
// Interface: _EasyUADataSetMessageEventArgs
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EB7AA408-2FD0-4331-B8A8-D0567E27C766}
// *********************************************************************//
  _EasyUADataSetMessageEventArgs = interface(IDispatch)
    ['{EB7AA408-2FD0-4331-B8A8-D0567E27C766}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_Diagnostics: _ExceptionCollection; safecall;
    procedure _Set_Diagnostics(const pRetVal: _ExceptionCollection); safecall;
    function Get_DiagnosticsCount: Integer; safecall;
    function Get_DiagnosticsSummary: WideString; safecall;
    function Get_ErrorId: WideString; safecall;
    procedure Set_ErrorId(const pRetVal: WideString); safecall;
    function Get_ErrorMessage: WideString; safecall;
    procedure Set_ErrorMessage(const pRetVal: WideString); safecall;
    function Get_ErrorMessageBrief: WideString; safecall;
    function Get_Exception: _Exception; safecall;
    procedure _Set_Exception(const pRetVal: _Exception); safecall;
    function Get_NormalizedDiagnostics: _NormalizedExceptionCollection; safecall;
    function Get_NormalizedException: _NormalizedException; safecall;
    function Get_Succeeded: WordBool; safecall;
    function Clone: OleVariant; safecall;
    function MemberwiseClone: _OperationEventArgs; safecall;
    function ToLongString: WideString; safecall;
    function Get_PubSubLocators: _UAPubSubLocators; safecall;
    procedure _Set_PubSubLocators(const pRetVal: _UAPubSubLocators); safecall;
    function Get_ResolvedDataSetSubscriptionDescriptor: _UADataSetSubscriptionDescriptor; safecall;
    procedure _Set_ResolvedDataSetSubscriptionDescriptor(const pRetVal: _UADataSetSubscriptionDescriptor); safecall;
    function Get_Arguments: _EasyUASubscribeDataSetArguments; safecall;
    procedure _Set_Arguments(const pRetVal: _EasyUASubscribeDataSetArguments); safecall;
    function Get_DataSetData: _UADataSetData; safecall;
    procedure _Set_DataSetData(const pRetVal: _UADataSetData); safecall;
    function Get_DataSetHeader: _UADataSetHeader; safecall;
    procedure _Set_DataSetHeader(const pRetVal: _UADataSetHeader); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Diagnostics: _ExceptionCollection read Get_Diagnostics write _Set_Diagnostics;
    property DiagnosticsCount: Integer read Get_DiagnosticsCount;
    property DiagnosticsSummary: WideString read Get_DiagnosticsSummary;
    property ErrorId: WideString read Get_ErrorId write Set_ErrorId;
    property ErrorMessage: WideString read Get_ErrorMessage write Set_ErrorMessage;
    property ErrorMessageBrief: WideString read Get_ErrorMessageBrief;
    property Exception: _Exception read Get_Exception write _Set_Exception;
    property NormalizedDiagnostics: _NormalizedExceptionCollection read Get_NormalizedDiagnostics;
    property NormalizedException: _NormalizedException read Get_NormalizedException;
    property Succeeded: WordBool read Get_Succeeded;
    property PubSubLocators: _UAPubSubLocators read Get_PubSubLocators write _Set_PubSubLocators;
    property ResolvedDataSetSubscriptionDescriptor: _UADataSetSubscriptionDescriptor read Get_ResolvedDataSetSubscriptionDescriptor write _Set_ResolvedDataSetSubscriptionDescriptor;
    property Arguments: _EasyUASubscribeDataSetArguments read Get_Arguments write _Set_Arguments;
    property DataSetData: _UADataSetData read Get_DataSetData write _Set_DataSetData;
    property DataSetHeader: _UADataSetHeader read Get_DataSetHeader write _Set_DataSetHeader;
  end;

// *********************************************************************//
// DispIntf:  _EasyUADataSetMessageEventArgsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EB7AA408-2FD0-4331-B8A8-D0567E27C766}
// *********************************************************************//
  _EasyUADataSetMessageEventArgsDisp = dispinterface
    ['{EB7AA408-2FD0-4331-B8A8-D0567E27C766}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    property Diagnostics: _ExceptionCollection dispid 1610743813;
    property DiagnosticsCount: Integer readonly dispid 1610743815;
    property DiagnosticsSummary: WideString readonly dispid 1610743816;
    property ErrorId: WideString dispid 1610743817;
    property ErrorMessage: WideString dispid 1610743819;
    property ErrorMessageBrief: WideString readonly dispid 1610743821;
    property Exception: _Exception dispid 1610743822;
    property NormalizedDiagnostics: _NormalizedExceptionCollection readonly dispid 1610743824;
    property NormalizedException: _NormalizedException readonly dispid 1610743825;
    property Succeeded: WordBool readonly dispid 1610743826;
    function Clone: OleVariant; dispid 1610743827;
    function MemberwiseClone: _OperationEventArgs; dispid 1610743828;
    function ToLongString: WideString; dispid 1610743829;
    property PubSubLocators: _UAPubSubLocators dispid 1610743830;
    property ResolvedDataSetSubscriptionDescriptor: _UADataSetSubscriptionDescriptor dispid 1610743832;
    property Arguments: _EasyUASubscribeDataSetArguments dispid 1610743834;
    property DataSetData: _UADataSetData dispid 1610743836;
    property DataSetHeader: _UADataSetHeader dispid 1610743838;
  end;

// *********************************************************************//
// Interface: _EasyUASubscribeDataSetArguments
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B1AA6506-00C4-481F-9839-771A56C3A70A}
// *********************************************************************//
  _EasyUASubscribeDataSetArguments = interface(IDispatch)
    ['{B1AA6506-00C4-481F-9839-771A56C3A70A}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_State: OleVariant; safecall;
    procedure _Set_State(pRetVal: OleVariant); safecall;
    function MemberwiseClone: _OperationArguments; safecall;
    procedure SetState(State: OleVariant); safecall;
    function Get_DataSetSubscriptionDescriptor: _UADataSetSubscriptionDescriptor; safecall;
    procedure _Set_DataSetSubscriptionDescriptor(const pRetVal: _UADataSetSubscriptionDescriptor); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property State: OleVariant read Get_State write _Set_State;
    property DataSetSubscriptionDescriptor: _UADataSetSubscriptionDescriptor read Get_DataSetSubscriptionDescriptor write _Set_DataSetSubscriptionDescriptor;
  end;

// *********************************************************************//
// DispIntf:  _EasyUASubscribeDataSetArgumentsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B1AA6506-00C4-481F-9839-771A56C3A70A}
// *********************************************************************//
  _EasyUASubscribeDataSetArgumentsDisp = dispinterface
    ['{B1AA6506-00C4-481F-9839-771A56C3A70A}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property State: OleVariant dispid 1610743814;
    function MemberwiseClone: _OperationArguments; dispid 1610743816;
    procedure SetState(State: OleVariant); dispid 1610743817;
    property DataSetSubscriptionDescriptor: _UADataSetSubscriptionDescriptor dispid 1610743818;
  end;

// *********************************************************************//
// Interface: _UAPublishSubscribeElement
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B4BF8E98-91A3-4002-A514-3C50987E1D9B}
// *********************************************************************//
  _UAPublishSubscribeElement = interface(IDispatch)
    ['{B4BF8E98-91A3-4002-A514-3C50987E1D9B}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_SupportedTransportProfileUriStringSet: _StringSet; safecall;
    procedure _Set_SupportedTransportProfileUriStringSet(const pRetVal: _StringSet); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property SupportedTransportProfileUriStringSet: _StringSet read Get_SupportedTransportProfileUriStringSet write _Set_SupportedTransportProfileUriStringSet;
  end;

// *********************************************************************//
// DispIntf:  _UAPublishSubscribeElementDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B4BF8E98-91A3-4002-A514-3C50987E1D9B}
// *********************************************************************//
  _UAPublishSubscribeElementDisp = dispinterface
    ['{B4BF8E98-91A3-4002-A514-3C50987E1D9B}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property SupportedTransportProfileUriStringSet: _StringSet dispid 1610743814;
  end;

// *********************************************************************//
// Interface: _EasyUAPublishSubscribeClient
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4CF8E5E7-2DFF-4BF7-B3E5-32767D5FCD0B}
// *********************************************************************//
  _EasyUAPublishSubscribeClient = interface(IDispatch)
    ['{4CF8E5E7-2DFF-4BF7-B3E5-32767D5FCD0B}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_CustomReference: WideString; safecall;
    procedure Set_CustomReference(const pRetVal: WideString); safecall;
    function Clone: OleVariant; safecall;
    function GetService(const serviceType: _Type): OleVariant; safecall;
    function GetServiceByName(const serviceTypeName: WideString): OleVariant; safecall;
    function ValueEquals(other: OleVariant): WordBool; safecall;
    function Get_ClientSelector: _EasyUAClientSelector; safecall;
    procedure _Set_ClientSelector(const pRetVal: _EasyUAClientSelector); safecall;
    function Get_IsDerived: WordBool; safecall;
    function AsClient: _EasyUAClient; safecall;
    function Get_UAEncodedReadOnlyConfigurationLoader: _StreamLoader; safecall;
    function AccessOrLoadReadOnlyConfiguration(endpointDescriptor: OleVariant; 
                                               pubSubConfigurationAccessMethod: UAPubSubConfigurationAccessMethod): _UAReadOnlyPubSubConfiguration; safecall;
    function AccessReadOnlyConfiguration(endpointDescriptor: OleVariant): _UAReadOnlyPubSubConfiguration; safecall;
    function AccessReadOnlySecurityKeyService(endpointDescriptor: OleVariant): _UAReadOnlyPubSubSecurityKeyService; safecall;
    function AccessSecurityKeyService(endpointDescriptor: OleVariant): _UAPubSubSecurityKeyService; safecall;
    function GetPublishSubscribeElement(endpointDescriptor: OleVariant): _UAPublishSubscribeElement; safecall;
    function HasConfigurationFileNode(endpointDescriptor: OleVariant): WordBool; safecall;
    function HasConfigurationModel(endpointDescriptor: OleVariant): WordBool; safecall;
    function HasSecurityKeyServiceModel(endpointDescriptor: OleVariant): WordBool; safecall;
    function LoadReadOnlyConfiguration(const filePathAndName: WideString): _UAReadOnlyPubSubConfiguration; safecall;
    function LoadReadOnlyConfigurationFromFileNode(endpointDescriptor: OleVariant): _UAReadOnlyPubSubConfiguration; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property CustomReference: WideString read Get_CustomReference write Set_CustomReference;
    property ClientSelector: _EasyUAClientSelector read Get_ClientSelector write _Set_ClientSelector;
    property IsDerived: WordBool read Get_IsDerived;
    property UAEncodedReadOnlyConfigurationLoader: _StreamLoader read Get_UAEncodedReadOnlyConfigurationLoader;
  end;

// *********************************************************************//
// DispIntf:  _EasyUAPublishSubscribeClientDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4CF8E5E7-2DFF-4BF7-B3E5-32767D5FCD0B}
// *********************************************************************//
  _EasyUAPublishSubscribeClientDisp = dispinterface
    ['{4CF8E5E7-2DFF-4BF7-B3E5-32767D5FCD0B}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    property CustomReference: WideString dispid 1610743813;
    function Clone: OleVariant; dispid 1610743815;
    function GetService(const serviceType: _Type): OleVariant; dispid 1610743816;
    function GetServiceByName(const serviceTypeName: WideString): OleVariant; dispid 1610743817;
    function ValueEquals(other: OleVariant): WordBool; dispid 1610743818;
    property ClientSelector: _EasyUAClientSelector dispid 1610743819;
    property IsDerived: WordBool readonly dispid 1610743821;
    function AsClient: _EasyUAClient; dispid 1610743822;
    property UAEncodedReadOnlyConfigurationLoader: _StreamLoader readonly dispid 1610743823;
    function AccessOrLoadReadOnlyConfiguration(endpointDescriptor: OleVariant; 
                                               pubSubConfigurationAccessMethod: UAPubSubConfigurationAccessMethod): _UAReadOnlyPubSubConfiguration; dispid 1610743824;
    function AccessReadOnlyConfiguration(endpointDescriptor: OleVariant): _UAReadOnlyPubSubConfiguration; dispid 1610743825;
    function AccessReadOnlySecurityKeyService(endpointDescriptor: OleVariant): _UAReadOnlyPubSubSecurityKeyService; dispid 1610743826;
    function AccessSecurityKeyService(endpointDescriptor: OleVariant): _UAPubSubSecurityKeyService; dispid 1610743827;
    function GetPublishSubscribeElement(endpointDescriptor: OleVariant): _UAPublishSubscribeElement; dispid 1610743828;
    function HasConfigurationFileNode(endpointDescriptor: OleVariant): WordBool; dispid 1610743829;
    function HasConfigurationModel(endpointDescriptor: OleVariant): WordBool; dispid 1610743830;
    function HasSecurityKeyServiceModel(endpointDescriptor: OleVariant): WordBool; dispid 1610743831;
    function LoadReadOnlyConfiguration(const filePathAndName: WideString): _UAReadOnlyPubSubConfiguration; dispid 1610743832;
    function LoadReadOnlyConfigurationFromFileNode(endpointDescriptor: OleVariant): _UAReadOnlyPubSubConfiguration; dispid 1610743833;
  end;

// *********************************************************************//
// Interface: _UAPubSubResolverParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {944E8BD0-A740-49F1-BCAE-6D190283E4F4}
// *********************************************************************//
  _UAPubSubResolverParameters = interface(IDispatch)
    ['{944E8BD0-A740-49F1-BCAE-6D190283E4F4}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_ConfigurationResolutionParameters: _UAPublisherConfigurationResolutionParameters; safecall;
    procedure _Set_ConfigurationResolutionParameters(const pRetVal: _UAPublisherConfigurationResolutionParameters); safecall;
    function Get_PublisherEndpointResolverParameters: _UAPublisherEndpointResolverParameters; safecall;
    procedure _Set_PublisherEndpointResolverParameters(const pRetVal: _UAPublisherEndpointResolverParameters); safecall;
    function Get_PublisherFileResourceResolverParameters: _PeriodicResolverParameters; safecall;
    procedure _Set_PublisherFileResourceResolverParameters(const pRetVal: _PeriodicResolverParameters); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property ConfigurationResolutionParameters: _UAPublisherConfigurationResolutionParameters read Get_ConfigurationResolutionParameters write _Set_ConfigurationResolutionParameters;
    property PublisherEndpointResolverParameters: _UAPublisherEndpointResolverParameters read Get_PublisherEndpointResolverParameters write _Set_PublisherEndpointResolverParameters;
    property PublisherFileResourceResolverParameters: _PeriodicResolverParameters read Get_PublisherFileResourceResolverParameters write _Set_PublisherFileResourceResolverParameters;
  end;

// *********************************************************************//
// DispIntf:  _UAPubSubResolverParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {944E8BD0-A740-49F1-BCAE-6D190283E4F4}
// *********************************************************************//
  _UAPubSubResolverParametersDisp = dispinterface
    ['{944E8BD0-A740-49F1-BCAE-6D190283E4F4}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property ConfigurationResolutionParameters: _UAPublisherConfigurationResolutionParameters dispid 1610743816;
    property PublisherEndpointResolverParameters: _UAPublisherEndpointResolverParameters dispid 1610743818;
    property PublisherFileResourceResolverParameters: _PeriodicResolverParameters dispid 1610743820;
  end;

// *********************************************************************//
// Interface: _UAPublisherSubscriberAdaptableParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B567F45D-4581-40FC-9555-FA826E3477AD}
// *********************************************************************//
  _UAPublisherSubscriberAdaptableParameters = interface(IDispatch)
    ['{B567F45D-4581-40FC-9555-FA826E3477AD}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_ManagedSecurityGroupParameters: _ManagedSecurityGroupParameters; safecall;
    procedure _Set_ManagedSecurityGroupParameters(const pRetVal: _ManagedSecurityGroupParameters); safecall;
    procedure Reset; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property ManagedSecurityGroupParameters: _ManagedSecurityGroupParameters read Get_ManagedSecurityGroupParameters write _Set_ManagedSecurityGroupParameters;
  end;

// *********************************************************************//
// DispIntf:  _UAPublisherSubscriberAdaptableParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B567F45D-4581-40FC-9555-FA826E3477AD}
// *********************************************************************//
  _UAPublisherSubscriberAdaptableParametersDisp = dispinterface
    ['{B567F45D-4581-40FC-9555-FA826E3477AD}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property ManagedSecurityGroupParameters: _ManagedSecurityGroupParameters dispid 1610743816;
    procedure Reset; dispid 1610743818;
  end;

// *********************************************************************//
// Interface: _EasyUASubscriberInstanceParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BA81311A-64D2-43E4-AAC2-57CB06815BFF}
// *********************************************************************//
  _EasyUASubscriberInstanceParameters = interface(IDispatch)
    ['{BA81311A-64D2-43E4-AAC2-57CB06815BFF}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_PluginConfigurations: _ConfigurationPartCollection; safecall;
    procedure _Set_PluginConfigurations(const pRetVal: _ConfigurationPartCollection); safecall;
    function Get_PluginSetups: _PluginSetupCollection; safecall;
    procedure _Set_PluginSetups(const pRetVal: _PluginSetupCollection); safecall;
    procedure Reset; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property PluginConfigurations: _ConfigurationPartCollection read Get_PluginConfigurations write _Set_PluginConfigurations;
    property PluginSetups: _PluginSetupCollection read Get_PluginSetups write _Set_PluginSetups;
  end;

// *********************************************************************//
// DispIntf:  _EasyUASubscriberInstanceParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BA81311A-64D2-43E4-AAC2-57CB06815BFF}
// *********************************************************************//
  _EasyUASubscriberInstanceParametersDisp = dispinterface
    ['{BA81311A-64D2-43E4-AAC2-57CB06815BFF}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property PluginConfigurations: _ConfigurationPartCollection dispid 1610743816;
    property PluginSetups: _PluginSetupCollection dispid 1610743818;
    procedure Reset; dispid 1610743820;
  end;

// *********************************************************************//
// Interface: _EasyUASubscriberSharedParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F9C726A7-D353-4FF5-AD98-FDC507E10B68}
// *********************************************************************//
  _EasyUASubscriberSharedParameters = interface(IDispatch)
    ['{F9C726A7-D353-4FF5-AD98-FDC507E10B68}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_PluginConfigurations: _ConfigurationPartCollection; safecall;
    procedure _Set_PluginConfigurations(const pRetVal: _ConfigurationPartCollection); safecall;
    function Get_PluginSetups: _PluginSetupCollection; safecall;
    procedure _Set_PluginSetups(const pRetVal: _PluginSetupCollection); safecall;
    procedure Reset; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property PluginConfigurations: _ConfigurationPartCollection read Get_PluginConfigurations write _Set_PluginConfigurations;
    property PluginSetups: _PluginSetupCollection read Get_PluginSetups write _Set_PluginSetups;
  end;

// *********************************************************************//
// DispIntf:  _EasyUASubscriberSharedParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F9C726A7-D353-4FF5-AD98-FDC507E10B68}
// *********************************************************************//
  _EasyUASubscriberSharedParametersDisp = dispinterface
    ['{F9C726A7-D353-4FF5-AD98-FDC507E10B68}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property PluginConfigurations: _ConfigurationPartCollection dispid 1610743816;
    property PluginSetups: _PluginSetupCollection dispid 1610743818;
    procedure Reset; dispid 1610743820;
  end;

// *********************************************************************//
// Interface: _UAPublisherConfigurationResolutionParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {64684BBB-2874-47A7-99D7-73EDD3E1E02F}
// *********************************************************************//
  _UAPublisherConfigurationResolutionParameters = interface(IDispatch)
    ['{64684BBB-2874-47A7-99D7-73EDD3E1E02F}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_MessageReceiveTimeoutFactor: Double; safecall;
    procedure Set_MessageReceiveTimeoutFactor(pRetVal: Double); safecall;
    function Get_MessageReceiveTimeoutIncrease: Double; safecall;
    procedure Set_MessageReceiveTimeoutIncrease(pRetVal: Double); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property MessageReceiveTimeoutFactor: Double read Get_MessageReceiveTimeoutFactor write Set_MessageReceiveTimeoutFactor;
    property MessageReceiveTimeoutIncrease: Double read Get_MessageReceiveTimeoutIncrease write Set_MessageReceiveTimeoutIncrease;
  end;

// *********************************************************************//
// DispIntf:  _UAPublisherConfigurationResolutionParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {64684BBB-2874-47A7-99D7-73EDD3E1E02F}
// *********************************************************************//
  _UAPublisherConfigurationResolutionParametersDisp = dispinterface
    ['{64684BBB-2874-47A7-99D7-73EDD3E1E02F}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property MessageReceiveTimeoutFactor: Double dispid 1610743816;
    property MessageReceiveTimeoutIncrease: Double dispid 1610743818;
  end;

// *********************************************************************//
// Interface: _UAPublisherEndpointResolverParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {369B6E35-3357-4E40-8E15-A1D6F9BE4CBD}
// *********************************************************************//
  _UAPublisherEndpointResolverParameters = interface(IDispatch)
    ['{369B6E35-3357-4E40-8E15-A1D6F9BE4CBD}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_FailureRetrialDelay: Integer; safecall;
    procedure Set_FailureRetrialDelay(pRetVal: Integer); safecall;
    function Get_MaximumWaitDelay: Integer; safecall;
    procedure Set_MaximumWaitDelay(pRetVal: Integer); safecall;
    function Get_SuccessRetrialDelay: Integer; safecall;
    procedure Set_SuccessRetrialDelay(pRetVal: Integer); safecall;
    function Get_pubSubConfigurationAccessMethod: UAPubSubConfigurationAccessMethod; safecall;
    procedure Set_pubSubConfigurationAccessMethod(pRetVal: UAPubSubConfigurationAccessMethod); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property FailureRetrialDelay: Integer read Get_FailureRetrialDelay write Set_FailureRetrialDelay;
    property MaximumWaitDelay: Integer read Get_MaximumWaitDelay write Set_MaximumWaitDelay;
    property SuccessRetrialDelay: Integer read Get_SuccessRetrialDelay write Set_SuccessRetrialDelay;
    property pubSubConfigurationAccessMethod: UAPubSubConfigurationAccessMethod read Get_pubSubConfigurationAccessMethod write Set_pubSubConfigurationAccessMethod;
  end;

// *********************************************************************//
// DispIntf:  _UAPublisherEndpointResolverParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {369B6E35-3357-4E40-8E15-A1D6F9BE4CBD}
// *********************************************************************//
  _UAPublisherEndpointResolverParametersDisp = dispinterface
    ['{369B6E35-3357-4E40-8E15-A1D6F9BE4CBD}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property FailureRetrialDelay: Integer dispid 1610743816;
    property MaximumWaitDelay: Integer dispid 1610743818;
    property SuccessRetrialDelay: Integer dispid 1610743820;
    property pubSubConfigurationAccessMethod: UAPubSubConfigurationAccessMethod dispid 1610743822;
  end;

// *********************************************************************//
// Interface: _EasyUAPubSubResolverParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {26FDDFB7-1197-4B0A-9951-53B1C2847970}
// *********************************************************************//
  _EasyUAPubSubResolverParameters = interface(IDispatch)
    ['{26FDDFB7-1197-4B0A-9951-53B1C2847970}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_ConfigurationResolutionParameters: _UAPublisherConfigurationResolutionParameters; safecall;
    procedure _Set_ConfigurationResolutionParameters(const pRetVal: _UAPublisherConfigurationResolutionParameters); safecall;
    function Get_PublisherEndpointResolverParameters: _UAPublisherEndpointResolverParameters; safecall;
    procedure _Set_PublisherEndpointResolverParameters(const pRetVal: _UAPublisherEndpointResolverParameters); safecall;
    function Get_PublisherFileResourceResolverParameters: _PeriodicResolverParameters; safecall;
    procedure _Set_PublisherFileResourceResolverParameters(const pRetVal: _PeriodicResolverParameters); safecall;
    function Get_ClientSelector: _EasyUAClientSelector; safecall;
    procedure _Set_ClientSelector(const pRetVal: _EasyUAClientSelector); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property ConfigurationResolutionParameters: _UAPublisherConfigurationResolutionParameters read Get_ConfigurationResolutionParameters write _Set_ConfigurationResolutionParameters;
    property PublisherEndpointResolverParameters: _UAPublisherEndpointResolverParameters read Get_PublisherEndpointResolverParameters write _Set_PublisherEndpointResolverParameters;
    property PublisherFileResourceResolverParameters: _PeriodicResolverParameters read Get_PublisherFileResourceResolverParameters write _Set_PublisherFileResourceResolverParameters;
    property ClientSelector: _EasyUAClientSelector read Get_ClientSelector write _Set_ClientSelector;
  end;

// *********************************************************************//
// DispIntf:  _EasyUAPubSubResolverParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {26FDDFB7-1197-4B0A-9951-53B1C2847970}
// *********************************************************************//
  _EasyUAPubSubResolverParametersDisp = dispinterface
    ['{26FDDFB7-1197-4B0A-9951-53B1C2847970}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property ConfigurationResolutionParameters: _UAPublisherConfigurationResolutionParameters dispid 1610743816;
    property PublisherEndpointResolverParameters: _UAPublisherEndpointResolverParameters dispid 1610743818;
    property PublisherFileResourceResolverParameters: _PeriodicResolverParameters dispid 1610743820;
    property ClientSelector: _EasyUAClientSelector dispid 1610743822;
  end;

// *********************************************************************//
// Interface: _EasyUASubscriberAdaptableParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {494CC092-F648-4A27-8910-7DB5E10E032A}
// *********************************************************************//
  _EasyUASubscriberAdaptableParameters = interface(IDispatch)
    ['{494CC092-F648-4A27-8910-7DB5E10E032A}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_ManagedSecurityGroupParameters: _ManagedSecurityGroupParameters; safecall;
    procedure _Set_ManagedSecurityGroupParameters(const pRetVal: _ManagedSecurityGroupParameters); safecall;
    procedure Reset; safecall;
    function Get_ResolverParameters: _EasyUAPubSubResolverParameters; safecall;
    procedure _Set_ResolverParameters(const pRetVal: _EasyUAPubSubResolverParameters); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property ManagedSecurityGroupParameters: _ManagedSecurityGroupParameters read Get_ManagedSecurityGroupParameters write _Set_ManagedSecurityGroupParameters;
    property ResolverParameters: _EasyUAPubSubResolverParameters read Get_ResolverParameters write _Set_ResolverParameters;
  end;

// *********************************************************************//
// DispIntf:  _EasyUASubscriberAdaptableParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {494CC092-F648-4A27-8910-7DB5E10E032A}
// *********************************************************************//
  _EasyUASubscriberAdaptableParametersDisp = dispinterface
    ['{494CC092-F648-4A27-8910-7DB5E10E032A}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property ManagedSecurityGroupParameters: _ManagedSecurityGroupParameters dispid 1610743816;
    procedure Reset; dispid 1610743818;
    property ResolverParameters: _EasyUAPubSubResolverParameters dispid 1610743819;
  end;

// *********************************************************************//
// Interface: _UADataSetFolderDataCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AF4D7B01-EEFD-4553-8079-8211B679F3DA}
// *********************************************************************//
  _UADataSetFolderDataCollection = interface(IDispatch)
    ['{AF4D7B01-EEFD-4553-8079-8211B679F3DA}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_Item(const key: WideString): _UADataSetFolderData; safecall;
    function Get_Count: Integer; safecall;
    function GetEnumerator: IEnumVARIANT; safecall;
    procedure Add(Item: OleVariant); safecall;
    procedure Clear; safecall;
    function Contains(Item: OleVariant): WordBool; safecall;
    function IndexOf(Item: OleVariant): Integer; safecall;
    function Remove(const key: WideString): WordBool; safecall;
    procedure RemoveAt(index: Integer); safecall;
    function ToList: _ElasticVector; safecall;
    function TryGetValue(const key: WideString; out Item: OleVariant): WordBool; safecall;
    function Clone: OleVariant; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Item[const key: WideString]: _UADataSetFolderData read Get_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  _UADataSetFolderDataCollectionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AF4D7B01-EEFD-4553-8079-8211B679F3DA}
// *********************************************************************//
  _UADataSetFolderDataCollectionDisp = dispinterface
    ['{AF4D7B01-EEFD-4553-8079-8211B679F3DA}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 1610743812;
    property Item[const key: WideString]: _UADataSetFolderData readonly dispid 0; default;
    property Count: Integer readonly dispid 1610743814;
    function GetEnumerator: IEnumVARIANT; dispid -4;
    procedure Add(Item: OleVariant); dispid 1610743816;
    procedure Clear; dispid 1610743817;
    function Contains(Item: OleVariant): WordBool; dispid 1610743818;
    function IndexOf(Item: OleVariant): Integer; dispid 1610743819;
    function Remove(const key: WideString): WordBool; dispid 1610743820;
    procedure RemoveAt(index: Integer); dispid 1610743821;
    function ToList: _ElasticVector; dispid 1610743822;
    function TryGetValue(const key: WideString; out Item: OleVariant): WordBool; dispid 1610743823;
    function Clone: OleVariant; dispid 1610743824;
  end;

// *********************************************************************//
// Interface: _UADataSetWriterDataCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E043D88F-49AF-45AB-B9D1-B67F27BC775B}
// *********************************************************************//
  _UADataSetWriterDataCollection = interface(IDispatch)
    ['{E043D88F-49AF-45AB-B9D1-B67F27BC775B}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_Item(const key: WideString): _UADataSetWriterData; safecall;
    function Get_Count: Integer; safecall;
    function GetEnumerator: IEnumVARIANT; safecall;
    procedure Add(Item: OleVariant); safecall;
    procedure Clear; safecall;
    function Contains(Item: OleVariant): WordBool; safecall;
    function IndexOf(Item: OleVariant): Integer; safecall;
    function Remove(const key: WideString): WordBool; safecall;
    procedure RemoveAt(index: Integer); safecall;
    function ToList: _ElasticVector; safecall;
    function TryGetValue(const key: WideString; out Item: OleVariant): WordBool; safecall;
    function Clone: OleVariant; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Item[const key: WideString]: _UADataSetWriterData read Get_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  _UADataSetWriterDataCollectionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E043D88F-49AF-45AB-B9D1-B67F27BC775B}
// *********************************************************************//
  _UADataSetWriterDataCollectionDisp = dispinterface
    ['{E043D88F-49AF-45AB-B9D1-B67F27BC775B}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 1610743812;
    property Item[const key: WideString]: _UADataSetWriterData readonly dispid 0; default;
    property Count: Integer readonly dispid 1610743814;
    function GetEnumerator: IEnumVARIANT; dispid -4;
    procedure Add(Item: OleVariant); dispid 1610743816;
    procedure Clear; dispid 1610743817;
    function Contains(Item: OleVariant): WordBool; dispid 1610743818;
    function IndexOf(Item: OleVariant): Integer; dispid 1610743819;
    function Remove(const key: WideString): WordBool; dispid 1610743820;
    procedure RemoveAt(index: Integer); dispid 1610743821;
    function ToList: _ElasticVector; dispid 1610743822;
    function TryGetValue(const key: WideString; out Item: OleVariant): WordBool; dispid 1610743823;
    function Clone: OleVariant; dispid 1610743824;
  end;

// *********************************************************************//
// Interface: _UAFieldMetaDataCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F87FCA00-9D53-4ABF-9D3F-03BD1CD9F46E}
// *********************************************************************//
  _UAFieldMetaDataCollection = interface(IDispatch)
    ['{F87FCA00-9D53-4ABF-9D3F-03BD1CD9F46E}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_Item(index: Integer): _UAFieldMetaData; safecall;
    procedure _Set_Item(index: Integer; const pRetVal: _UAFieldMetaData); safecall;
    function Get_Count: Integer; safecall;
    function GetEnumerator: IEnumVARIANT; safecall;
    procedure Add(Item: OleVariant); safecall;
    procedure Clear; safecall;
    function Contains(Item: OleVariant): WordBool; safecall;
    function IndexOf(Item: OleVariant): Integer; safecall;
    procedure Insert(index: Integer; Item: OleVariant); safecall;
    function Remove(Item: OleVariant): WordBool; safecall;
    procedure RemoveAt(index: Integer); safecall;
    function Clone: OleVariant; safecall;
    property ToString: WideString read Get_ToString;
    property Item[index: Integer]: _UAFieldMetaData read Get_Item write _Set_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  _UAFieldMetaDataCollectionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F87FCA00-9D53-4ABF-9D3F-03BD1CD9F46E}
// *********************************************************************//
  _UAFieldMetaDataCollectionDisp = dispinterface
    ['{F87FCA00-9D53-4ABF-9D3F-03BD1CD9F46E}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property Item[index: Integer]: _UAFieldMetaData dispid 0; default;
    property Count: Integer readonly dispid 1610743814;
    function GetEnumerator: IEnumVARIANT; dispid -4;
    procedure Add(Item: OleVariant); dispid 1610743816;
    procedure Clear; dispid 1610743817;
    function Contains(Item: OleVariant): WordBool; dispid 1610743818;
    function IndexOf(Item: OleVariant): Integer; dispid 1610743819;
    procedure Insert(index: Integer; Item: OleVariant); dispid 1610743820;
    function Remove(Item: OleVariant): WordBool; dispid 1610743821;
    procedure RemoveAt(index: Integer); dispid 1610743822;
    function Clone: OleVariant; dispid 1610743823;
  end;

// *********************************************************************//
// Interface: _UAPublishedDataSetDataCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AA28B62B-A8E5-4974-852C-F533DA8DD8DF}
// *********************************************************************//
  _UAPublishedDataSetDataCollection = interface(IDispatch)
    ['{AA28B62B-A8E5-4974-852C-F533DA8DD8DF}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_Item(const key: WideString): _UAPublishedDataSetData; safecall;
    function Get_Count: Integer; safecall;
    function GetEnumerator: IEnumVARIANT; safecall;
    procedure Add(Item: OleVariant); safecall;
    procedure Clear; safecall;
    function Contains(Item: OleVariant): WordBool; safecall;
    function IndexOf(Item: OleVariant): Integer; safecall;
    function Remove(const key: WideString): WordBool; safecall;
    procedure RemoveAt(index: Integer); safecall;
    function ToList: _ElasticVector; safecall;
    function TryGetValue(const key: WideString; out Item: OleVariant): WordBool; safecall;
    function Clone: OleVariant; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Item[const key: WideString]: _UAPublishedDataSetData read Get_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  _UAPublishedDataSetDataCollectionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AA28B62B-A8E5-4974-852C-F533DA8DD8DF}
// *********************************************************************//
  _UAPublishedDataSetDataCollectionDisp = dispinterface
    ['{AA28B62B-A8E5-4974-852C-F533DA8DD8DF}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 1610743812;
    property Item[const key: WideString]: _UAPublishedDataSetData readonly dispid 0; default;
    property Count: Integer readonly dispid 1610743814;
    function GetEnumerator: IEnumVARIANT; dispid -4;
    procedure Add(Item: OleVariant); dispid 1610743816;
    procedure Clear; dispid 1610743817;
    function Contains(Item: OleVariant): WordBool; dispid 1610743818;
    function IndexOf(Item: OleVariant): Integer; dispid 1610743819;
    function Remove(const key: WideString): WordBool; dispid 1610743820;
    procedure RemoveAt(index: Integer); dispid 1610743821;
    function ToList: _ElasticVector; dispid 1610743822;
    function TryGetValue(const key: WideString; out Item: OleVariant): WordBool; dispid 1610743823;
    function Clone: OleVariant; dispid 1610743824;
  end;

// *********************************************************************//
// Interface: _UAPublishedVariableDataCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DD86E744-C8F9-4074-A726-9790AC6B512B}
// *********************************************************************//
  _UAPublishedVariableDataCollection = interface(IDispatch)
    ['{DD86E744-C8F9-4074-A726-9790AC6B512B}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_Item(index: Integer): _UAPublishedVariableData; safecall;
    procedure _Set_Item(index: Integer; const pRetVal: _UAPublishedVariableData); safecall;
    function Get_Count: Integer; safecall;
    function GetEnumerator: IEnumVARIANT; safecall;
    procedure Add(Item: OleVariant); safecall;
    procedure Clear; safecall;
    function Contains(Item: OleVariant): WordBool; safecall;
    function IndexOf(Item: OleVariant): Integer; safecall;
    procedure Insert(index: Integer; Item: OleVariant); safecall;
    function Remove(Item: OleVariant): WordBool; safecall;
    procedure RemoveAt(index: Integer); safecall;
    function Clone: OleVariant; safecall;
    property ToString: WideString read Get_ToString;
    property Item[index: Integer]: _UAPublishedVariableData read Get_Item write _Set_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  _UAPublishedVariableDataCollectionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DD86E744-C8F9-4074-A726-9790AC6B512B}
// *********************************************************************//
  _UAPublishedVariableDataCollectionDisp = dispinterface
    ['{DD86E744-C8F9-4074-A726-9790AC6B512B}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property Item[index: Integer]: _UAPublishedVariableData dispid 0; default;
    property Count: Integer readonly dispid 1610743814;
    function GetEnumerator: IEnumVARIANT; dispid -4;
    procedure Add(Item: OleVariant); dispid 1610743816;
    procedure Clear; dispid 1610743817;
    function Contains(Item: OleVariant): WordBool; dispid 1610743818;
    function IndexOf(Item: OleVariant): Integer; dispid 1610743819;
    procedure Insert(index: Integer; Item: OleVariant); dispid 1610743820;
    function Remove(Item: OleVariant): WordBool; dispid 1610743821;
    procedure RemoveAt(index: Integer); dispid 1610743822;
    function Clone: OleVariant; dispid 1610743823;
  end;

// *********************************************************************//
// Interface: _UAPubSubConnectionDataCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {795F2CA1-CBE3-4BA7-BA12-889A012847DE}
// *********************************************************************//
  _UAPubSubConnectionDataCollection = interface(IDispatch)
    ['{795F2CA1-CBE3-4BA7-BA12-889A012847DE}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_Item(const key: WideString): _UAPubSubConnectionData; safecall;
    function Get_Count: Integer; safecall;
    function GetEnumerator: IEnumVARIANT; safecall;
    procedure Add(Item: OleVariant); safecall;
    procedure Clear; safecall;
    function Contains(Item: OleVariant): WordBool; safecall;
    function IndexOf(Item: OleVariant): Integer; safecall;
    function Remove(const key: WideString): WordBool; safecall;
    procedure RemoveAt(index: Integer); safecall;
    function ToList: _ElasticVector; safecall;
    function TryGetValue(const key: WideString; out Item: OleVariant): WordBool; safecall;
    function Clone: OleVariant; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Item[const key: WideString]: _UAPubSubConnectionData read Get_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  _UAPubSubConnectionDataCollectionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {795F2CA1-CBE3-4BA7-BA12-889A012847DE}
// *********************************************************************//
  _UAPubSubConnectionDataCollectionDisp = dispinterface
    ['{795F2CA1-CBE3-4BA7-BA12-889A012847DE}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 1610743812;
    property Item[const key: WideString]: _UAPubSubConnectionData readonly dispid 0; default;
    property Count: Integer readonly dispid 1610743814;
    function GetEnumerator: IEnumVARIANT; dispid -4;
    procedure Add(Item: OleVariant); dispid 1610743816;
    procedure Clear; dispid 1610743817;
    function Contains(Item: OleVariant): WordBool; dispid 1610743818;
    function IndexOf(Item: OleVariant): Integer; dispid 1610743819;
    function Remove(const key: WideString): WordBool; dispid 1610743820;
    procedure RemoveAt(index: Integer); dispid 1610743821;
    function ToList: _ElasticVector; dispid 1610743822;
    function TryGetValue(const key: WideString; out Item: OleVariant): WordBool; dispid 1610743823;
    function Clone: OleVariant; dispid 1610743824;
  end;

// *********************************************************************//
// Interface: _UAWriterGroupDataCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A1B16ABF-A926-4FFC-94F9-0DD757199E8A}
// *********************************************************************//
  _UAWriterGroupDataCollection = interface(IDispatch)
    ['{A1B16ABF-A926-4FFC-94F9-0DD757199E8A}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_Item(const key: WideString): _UAWriterGroupData; safecall;
    function Get_Count: Integer; safecall;
    function GetEnumerator: IEnumVARIANT; safecall;
    procedure Add(Item: OleVariant); safecall;
    procedure Clear; safecall;
    function Contains(Item: OleVariant): WordBool; safecall;
    function IndexOf(Item: OleVariant): Integer; safecall;
    function Remove(const key: WideString): WordBool; safecall;
    procedure RemoveAt(index: Integer); safecall;
    function ToList: _ElasticVector; safecall;
    function TryGetValue(const key: WideString; out Item: OleVariant): WordBool; safecall;
    function Clone: OleVariant; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Item[const key: WideString]: _UAWriterGroupData read Get_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  _UAWriterGroupDataCollectionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A1B16ABF-A926-4FFC-94F9-0DD757199E8A}
// *********************************************************************//
  _UAWriterGroupDataCollectionDisp = dispinterface
    ['{A1B16ABF-A926-4FFC-94F9-0DD757199E8A}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 1610743812;
    property Item[const key: WideString]: _UAWriterGroupData readonly dispid 0; default;
    property Count: Integer readonly dispid 1610743814;
    function GetEnumerator: IEnumVARIANT; dispid -4;
    procedure Add(Item: OleVariant); dispid 1610743816;
    procedure Clear; dispid 1610743817;
    function Contains(Item: OleVariant): WordBool; dispid 1610743818;
    function IndexOf(Item: OleVariant): Integer; dispid 1610743819;
    function Remove(const key: WideString): WordBool; dispid 1610743820;
    procedure RemoveAt(index: Integer); dispid 1610743821;
    function ToList: _ElasticVector; dispid 1610743822;
    function TryGetValue(const key: WideString; out Item: OleVariant): WordBool; dispid 1610743823;
    function Clone: OleVariant; dispid 1610743824;
  end;

// *********************************************************************//
// Interface: _UAConfigurationVersion
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0514BCB9-150D-4D3B-9498-E068EEA87043}
// *********************************************************************//
  _UAConfigurationVersion = interface(IDispatch)
    ['{0514BCB9-150D-4D3B-9498-E068EEA87043}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_IsNull: WordBool; safecall;
    function Get_MajorVersionDateTime: TDateTime; safecall;
    procedure Set_MajorVersionDateTime(pRetVal: TDateTime); safecall;
    function Get_MajorVersionDateTimeLocal: TDateTime; safecall;
    procedure Set_MajorVersionDateTimeLocal(pRetVal: TDateTime); safecall;
    function Get_MajorVersionTime: Int64; safecall;
    procedure Set_MajorVersionTime(pRetVal: Int64); safecall;
    function Get_MinorVersionDateTime: TDateTime; safecall;
    procedure Set_MinorVersionDateTime(pRetVal: TDateTime); safecall;
    function Get_MinorVersionDateTimeLocal: TDateTime; safecall;
    procedure Set_MinorVersionDateTimeLocal(pRetVal: TDateTime); safecall;
    function Get_MinorVersionTime: Int64; safecall;
    procedure Set_MinorVersionTime(pRetVal: Int64); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property IsNull: WordBool read Get_IsNull;
    property MajorVersionDateTime: TDateTime read Get_MajorVersionDateTime write Set_MajorVersionDateTime;
    property MajorVersionDateTimeLocal: TDateTime read Get_MajorVersionDateTimeLocal write Set_MajorVersionDateTimeLocal;
    property MajorVersionTime: Int64 read Get_MajorVersionTime write Set_MajorVersionTime;
    property MinorVersionDateTime: TDateTime read Get_MinorVersionDateTime write Set_MinorVersionDateTime;
    property MinorVersionDateTimeLocal: TDateTime read Get_MinorVersionDateTimeLocal write Set_MinorVersionDateTimeLocal;
    property MinorVersionTime: Int64 read Get_MinorVersionTime write Set_MinorVersionTime;
  end;

// *********************************************************************//
// DispIntf:  _UAConfigurationVersionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0514BCB9-150D-4D3B-9498-E068EEA87043}
// *********************************************************************//
  _UAConfigurationVersionDisp = dispinterface
    ['{0514BCB9-150D-4D3B-9498-E068EEA87043}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property IsNull: WordBool readonly dispid 1610743814;
    property MajorVersionDateTime: TDateTime dispid 1610743815;
    property MajorVersionDateTimeLocal: TDateTime dispid 1610743817;
    property MajorVersionTime: Int64 dispid 1610743819;
    property MinorVersionDateTime: TDateTime dispid 1610743821;
    property MinorVersionDateTimeLocal: TDateTime dispid 1610743823;
    property MinorVersionTime: Int64 dispid 1610743825;
  end;

// *********************************************************************//
// Interface: _UAReadOnlyDataTypeSchema
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B7CCA8FC-5F30-44CD-88EB-7AAB5B0C9F6F}
// *********************************************************************//
  _UAReadOnlyDataTypeSchema = interface(IDispatch)
    ['{B7CCA8FC-5F30-44CD-88EB-7AAB5B0C9F6F}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function FindDataTypeDescriptions(dataTypeIdList: OleVariant; searchSupertypes: WordBool): PSafeArray; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
  end;

// *********************************************************************//
// DispIntf:  _UAReadOnlyDataTypeSchemaDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B7CCA8FC-5F30-44CD-88EB-7AAB5B0C9F6F}
// *********************************************************************//
  _UAReadOnlyDataTypeSchemaDisp = dispinterface
    ['{B7CCA8FC-5F30-44CD-88EB-7AAB5B0C9F6F}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function FindDataTypeDescriptions(dataTypeIdList: OleVariant; searchSupertypes: WordBool): {NOT_OLEAUTO(PSafeArray)}OleVariant; dispid 1610743813;
  end;

// *********************************************************************//
// Interface: _UADataSetWriterLocator
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F926848D-B391-42A2-BB52-EAE387A5371B}
// *********************************************************************//
  _UADataSetWriterLocator = interface(IDispatch)
    ['{F926848D-B391-42A2-BB52-EAE387A5371B}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_DataSetWriterName: WideString; safecall;
    procedure Set_DataSetWriterName(const pRetVal: WideString); safecall;
    function Get_PubSubConnectionName: WideString; safecall;
    procedure Set_PubSubConnectionName(const pRetVal: WideString); safecall;
    function Get_WriterGroupName: WideString; safecall;
    procedure Set_WriterGroupName(const pRetVal: WideString); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DataSetWriterName: WideString read Get_DataSetWriterName write Set_DataSetWriterName;
    property PubSubConnectionName: WideString read Get_PubSubConnectionName write Set_PubSubConnectionName;
    property WriterGroupName: WideString read Get_WriterGroupName write Set_WriterGroupName;
  end;

// *********************************************************************//
// DispIntf:  _UADataSetWriterLocatorDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F926848D-B391-42A2-BB52-EAE387A5371B}
// *********************************************************************//
  _UADataSetWriterLocatorDisp = dispinterface
    ['{F926848D-B391-42A2-BB52-EAE387A5371B}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property DataSetWriterName: WideString dispid 1610743814;
    property PubSubConnectionName: WideString dispid 1610743816;
    property WriterGroupName: WideString dispid 1610743818;
  end;

// *********************************************************************//
// Interface: _UAPubSubObjectElement
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4614B76F-7224-424B-AA14-56E1B05F5464}
// *********************************************************************//
  _UAPubSubObjectElement = interface(IDispatch)
    ['{4614B76F-7224-424B-AA14-56E1B05F5464}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_CustomPropertyValueDictionary: _UAKeyValueDictionary; safecall;
    procedure _Set_CustomPropertyValueDictionary(const pRetVal: _UAKeyValueDictionary); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property CustomPropertyValueDictionary: _UAKeyValueDictionary read Get_CustomPropertyValueDictionary write _Set_CustomPropertyValueDictionary;
    property Name: WideString read Get_Name write Set_Name;
  end;

// *********************************************************************//
// DispIntf:  _UAPubSubObjectElementDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4614B76F-7224-424B-AA14-56E1B05F5464}
// *********************************************************************//
  _UAPubSubObjectElementDisp = dispinterface
    ['{4614B76F-7224-424B-AA14-56E1B05F5464}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property CustomPropertyValueDictionary: _UAKeyValueDictionary dispid 1610743814;
    property Name: WideString dispid 1610743816;
  end;

// *********************************************************************//
// Interface: _UAPublishedVariableData
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {43B8EC27-B084-432B-8272-1F43314A8B09}
// *********************************************************************//
  _UAPublishedVariableData = interface(IDispatch)
    ['{43B8EC27-B084-432B-8272-1F43314A8B09}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_AttributeId: UAAttributeId; safecall;
    procedure Set_AttributeId(pRetVal: UAAttributeId); safecall;
    function Get_DeadbandType: UADeadbandType; safecall;
    procedure Set_DeadbandType(pRetVal: UADeadbandType); safecall;
    function Get_DeadbandValue: Double; safecall;
    procedure Set_DeadbandValue(pRetVal: Double); safecall;
    function Get_IndexRangeList: _UAIndexRangeList; safecall;
    procedure _Set_IndexRangeList(const pRetVal: _UAIndexRangeList); safecall;
    function Get_MetaDataPropertyNameSet: _UAQualifiedNameSet; safecall;
    procedure _Set_MetaDataPropertyNameSet(const pRetVal: _UAQualifiedNameSet); safecall;
    function Get_PublishedVariable: _UANodeId; safecall;
    procedure _Set_PublishedVariable(const pRetVal: _UANodeId); safecall;
    function Get_SamplingIntervalHint: Double; safecall;
    procedure Set_SamplingIntervalHint(pRetVal: Double); safecall;
    function Get_SubstituteValue: OleVariant; safecall;
    procedure _Set_SubstituteValue(pRetVal: OleVariant); safecall;
    procedure SetSubstituteValue(SubstituteValue: OleVariant); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property AttributeId: UAAttributeId read Get_AttributeId write Set_AttributeId;
    property DeadbandType: UADeadbandType read Get_DeadbandType write Set_DeadbandType;
    property DeadbandValue: Double read Get_DeadbandValue write Set_DeadbandValue;
    property IndexRangeList: _UAIndexRangeList read Get_IndexRangeList write _Set_IndexRangeList;
    property MetaDataPropertyNameSet: _UAQualifiedNameSet read Get_MetaDataPropertyNameSet write _Set_MetaDataPropertyNameSet;
    property PublishedVariable: _UANodeId read Get_PublishedVariable write _Set_PublishedVariable;
    property SamplingIntervalHint: Double read Get_SamplingIntervalHint write Set_SamplingIntervalHint;
    property SubstituteValue: OleVariant read Get_SubstituteValue write _Set_SubstituteValue;
  end;

// *********************************************************************//
// DispIntf:  _UAPublishedVariableDataDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {43B8EC27-B084-432B-8272-1F43314A8B09}
// *********************************************************************//
  _UAPublishedVariableDataDisp = dispinterface
    ['{43B8EC27-B084-432B-8272-1F43314A8B09}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property AttributeId: UAAttributeId dispid 1610743814;
    property DeadbandType: UADeadbandType dispid 1610743816;
    property DeadbandValue: Double dispid 1610743818;
    property IndexRangeList: _UAIndexRangeList dispid 1610743820;
    property MetaDataPropertyNameSet: _UAQualifiedNameSet dispid 1610743822;
    property PublishedVariable: _UANodeId dispid 1610743824;
    property SamplingIntervalHint: Double dispid 1610743826;
    property SubstituteValue: OleVariant dispid 1610743828;
    procedure SetSubstituteValue(SubstituteValue: OleVariant); dispid 1610743830;
  end;

// *********************************************************************//
// Interface: _UADataSetFolderData
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B42A0B0E-BFD8-4689-ACF0-6E7DB1D549F2}
// *********************************************************************//
  _UADataSetFolderData = interface(IDispatch)
    ['{B42A0B0E-BFD8-4689-ACF0-6E7DB1D549F2}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_PublishedDataSets: _UAPublishedDataSetDataCollection; safecall;
    function Get_Subfolders: _UADataSetFolderDataCollection; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Name: WideString read Get_Name write Set_Name;
    property PublishedDataSets: _UAPublishedDataSetDataCollection read Get_PublishedDataSets;
    property Subfolders: _UADataSetFolderDataCollection read Get_Subfolders;
  end;

// *********************************************************************//
// DispIntf:  _UADataSetFolderDataDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B42A0B0E-BFD8-4689-ACF0-6E7DB1D549F2}
// *********************************************************************//
  _UADataSetFolderDataDisp = dispinterface
    ['{B42A0B0E-BFD8-4689-ACF0-6E7DB1D549F2}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property Name: WideString dispid 1610743814;
    property PublishedDataSets: _UAPublishedDataSetDataCollection readonly dispid 1610743816;
    property Subfolders: _UADataSetFolderDataCollection readonly dispid 1610743817;
  end;

// *********************************************************************//
// Interface: _UAPubSubComponentElement
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {23743679-F5CD-408E-8CCF-4E849341B7EB}
// *********************************************************************//
  _UAPubSubComponentElement = interface(IDispatch)
    ['{23743679-F5CD-408E-8CCF-4E849341B7EB}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_CustomPropertyValueDictionary: _UAKeyValueDictionary; safecall;
    procedure _Set_CustomPropertyValueDictionary(const pRetVal: _UAKeyValueDictionary); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_Enabled: WordBool; safecall;
    procedure Set_Enabled(pRetVal: WordBool); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property CustomPropertyValueDictionary: _UAKeyValueDictionary read Get_CustomPropertyValueDictionary write _Set_CustomPropertyValueDictionary;
    property Name: WideString read Get_Name write Set_Name;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
  end;

// *********************************************************************//
// DispIntf:  _UAPubSubComponentElementDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {23743679-F5CD-408E-8CCF-4E849341B7EB}
// *********************************************************************//
  _UAPubSubComponentElementDisp = dispinterface
    ['{23743679-F5CD-408E-8CCF-4E849341B7EB}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property CustomPropertyValueDictionary: _UAKeyValueDictionary dispid 1610743814;
    property Name: WideString dispid 1610743816;
    property Enabled: WordBool dispid 1610743818;
  end;

// *********************************************************************//
// Interface: _UAPublishedDataSetElement
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B5C6FE9E-40ED-45F5-8D2E-56C24DB99C95}
// *********************************************************************//
  _UAPublishedDataSetElement = interface(IDispatch)
    ['{B5C6FE9E-40ED-45F5-8D2E-56C24DB99C95}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_ConfigurationVersion: _UAConfigurationVersion; safecall;
    procedure _Set_ConfigurationVersion(const pRetVal: _UAConfigurationVersion); safecall;
    function Get_DataSetClassId: TGUID; safecall;
    procedure Set_DataSetClassId(pRetVal: TGUID); safecall;
    function Get_DataSetClassIdString: WideString; safecall;
    procedure Set_DataSetClassIdString(const pRetVal: WideString); safecall;
    function Get_DataSetMetaData: _UADataSetMetaData; safecall;
    procedure _Set_DataSetMetaData(const pRetVal: _UADataSetMetaData); safecall;
    function Get_ExtensionFieldValueDictionary: _UAKeyValueDictionary; safecall;
    procedure _Set_ExtensionFieldValueDictionary(const pRetVal: _UAKeyValueDictionary); safecall;
    function Get_HasDataSetClassId: WordBool; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property ConfigurationVersion: _UAConfigurationVersion read Get_ConfigurationVersion write _Set_ConfigurationVersion;
    property DataSetClassId: TGUID read Get_DataSetClassId write Set_DataSetClassId;
    property DataSetClassIdString: WideString read Get_DataSetClassIdString write Set_DataSetClassIdString;
    property DataSetMetaData: _UADataSetMetaData read Get_DataSetMetaData write _Set_DataSetMetaData;
    property ExtensionFieldValueDictionary: _UAKeyValueDictionary read Get_ExtensionFieldValueDictionary write _Set_ExtensionFieldValueDictionary;
    property HasDataSetClassId: WordBool read Get_HasDataSetClassId;
    property Name: WideString read Get_Name write Set_Name;
  end;

// *********************************************************************//
// DispIntf:  _UAPublishedDataSetElementDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B5C6FE9E-40ED-45F5-8D2E-56C24DB99C95}
// *********************************************************************//
  _UAPublishedDataSetElementDisp = dispinterface
    ['{B5C6FE9E-40ED-45F5-8D2E-56C24DB99C95}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property ConfigurationVersion: _UAConfigurationVersion dispid 1610743814;
    property DataSetClassId: {NOT_OLEAUTO(TGUID)}OleVariant dispid 1610743816;
    property DataSetClassIdString: WideString dispid 1610743818;
    property DataSetMetaData: _UADataSetMetaData dispid 1610743820;
    property ExtensionFieldValueDictionary: _UAKeyValueDictionary dispid 1610743822;
    property HasDataSetClassId: WordBool readonly dispid 1610743824;
    property Name: WideString dispid 1610743825;
  end;

// *********************************************************************//
// Interface: _UAPubSubConfigurationElement
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F0A172D0-986C-4A8A-9FF5-60EAC4409764}
// *********************************************************************//
  _UAPubSubConfigurationElement = interface(IDispatch)
    ['{F0A172D0-986C-4A8A-9FF5-60EAC4409764}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_Enabled: WordBool; safecall;
    procedure Set_Enabled(pRetVal: WordBool); safecall;
    function Get_SecurityKeyServices: _UADiscoveryElementCollection; safecall;
    procedure _Set_SecurityKeyServices(const pRetVal: _UADiscoveryElementCollection); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property SecurityKeyServices: _UADiscoveryElementCollection read Get_SecurityKeyServices write _Set_SecurityKeyServices;
  end;

// *********************************************************************//
// DispIntf:  _UAPubSubConfigurationElementDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F0A172D0-986C-4A8A-9FF5-60EAC4409764}
// *********************************************************************//
  _UAPubSubConfigurationElementDisp = dispinterface
    ['{F0A172D0-986C-4A8A-9FF5-60EAC4409764}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property Enabled: WordBool dispid 1610743814;
    property SecurityKeyServices: _UADiscoveryElementCollection dispid 1610743816;
  end;

// *********************************************************************//
// Interface: _UAPubSubConnectionElement
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {42C799D9-395C-468A-A968-DF81BEB32446}
// *********************************************************************//
  _UAPubSubConnectionElement = interface(IDispatch)
    ['{42C799D9-395C-468A-A968-DF81BEB32446}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_CustomPropertyValueDictionary: _UAKeyValueDictionary; safecall;
    procedure _Set_CustomPropertyValueDictionary(const pRetVal: _UAKeyValueDictionary); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_Enabled: WordBool; safecall;
    procedure Set_Enabled(pRetVal: WordBool); safecall;
    function Get_NetworkAddress: _NetworkAddress; safecall;
    procedure _Set_NetworkAddress(const pRetVal: _NetworkAddress); safecall;
    function Get_PublisherId: _UAPublisherId; safecall;
    procedure _Set_PublisherId(const pRetVal: _UAPublisherId); safecall;
    function Get_TransportParameters: _UAConnectionTransportParameters; safecall;
    procedure _Set_TransportParameters(const pRetVal: _UAConnectionTransportParameters); safecall;
    function Get_TransportProfileUriString: WideString; safecall;
    procedure Set_TransportProfileUriString(const pRetVal: WideString); safecall;
    function ToUAPubSubConnectionDescriptor: _UAPubSubConnectionDescriptor; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property CustomPropertyValueDictionary: _UAKeyValueDictionary read Get_CustomPropertyValueDictionary write _Set_CustomPropertyValueDictionary;
    property Name: WideString read Get_Name write Set_Name;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property NetworkAddress: _NetworkAddress read Get_NetworkAddress write _Set_NetworkAddress;
    property PublisherId: _UAPublisherId read Get_PublisherId write _Set_PublisherId;
    property TransportParameters: _UAConnectionTransportParameters read Get_TransportParameters write _Set_TransportParameters;
    property TransportProfileUriString: WideString read Get_TransportProfileUriString write Set_TransportProfileUriString;
  end;

// *********************************************************************//
// DispIntf:  _UAPubSubConnectionElementDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {42C799D9-395C-468A-A968-DF81BEB32446}
// *********************************************************************//
  _UAPubSubConnectionElementDisp = dispinterface
    ['{42C799D9-395C-468A-A968-DF81BEB32446}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property CustomPropertyValueDictionary: _UAKeyValueDictionary dispid 1610743814;
    property Name: WideString dispid 1610743816;
    property Enabled: WordBool dispid 1610743818;
    property NetworkAddress: _NetworkAddress dispid 1610743820;
    property PublisherId: _UAPublisherId dispid 1610743822;
    property TransportParameters: _UAConnectionTransportParameters dispid 1610743824;
    property TransportProfileUriString: WideString dispid 1610743826;
    function ToUAPubSubConnectionDescriptor: _UAPubSubConnectionDescriptor; dispid 1610743828;
  end;

// *********************************************************************//
// Interface: _UAPubSubGroupElement
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D2FBAB9F-C7F0-410A-A0BB-2422C681298C}
// *********************************************************************//
  _UAPubSubGroupElement = interface(IDispatch)
    ['{D2FBAB9F-C7F0-410A-A0BB-2422C681298C}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_CustomPropertyValueDictionary: _UAKeyValueDictionary; safecall;
    procedure _Set_CustomPropertyValueDictionary(const pRetVal: _UAKeyValueDictionary); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_Enabled: WordBool; safecall;
    procedure Set_Enabled(pRetVal: WordBool); safecall;
    function Get_MaximumNetworkMessageSize: Int64; safecall;
    procedure Set_MaximumNetworkMessageSize(pRetVal: Int64); safecall;
    function Get_MaximumNetworkMessageSizeInt32: Integer; safecall;
    procedure Set_MaximumNetworkMessageSizeInt32(pRetVal: Integer); safecall;
    function Get_securityGroupId: WideString; safecall;
    procedure Set_securityGroupId(const pRetVal: WideString); safecall;
    function Get_SecurityKeyServices: _UADiscoveryElementCollection; safecall;
    procedure _Set_SecurityKeyServices(const pRetVal: _UADiscoveryElementCollection); safecall;
    function Get_SecurityMode: UAMessageSecurityModes; safecall;
    procedure Set_SecurityMode(pRetVal: UAMessageSecurityModes); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property CustomPropertyValueDictionary: _UAKeyValueDictionary read Get_CustomPropertyValueDictionary write _Set_CustomPropertyValueDictionary;
    property Name: WideString read Get_Name write Set_Name;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property MaximumNetworkMessageSize: Int64 read Get_MaximumNetworkMessageSize write Set_MaximumNetworkMessageSize;
    property MaximumNetworkMessageSizeInt32: Integer read Get_MaximumNetworkMessageSizeInt32 write Set_MaximumNetworkMessageSizeInt32;
    property securityGroupId: WideString read Get_securityGroupId write Set_securityGroupId;
    property SecurityKeyServices: _UADiscoveryElementCollection read Get_SecurityKeyServices write _Set_SecurityKeyServices;
    property SecurityMode: UAMessageSecurityModes read Get_SecurityMode write Set_SecurityMode;
  end;

// *********************************************************************//
// DispIntf:  _UAPubSubGroupElementDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D2FBAB9F-C7F0-410A-A0BB-2422C681298C}
// *********************************************************************//
  _UAPubSubGroupElementDisp = dispinterface
    ['{D2FBAB9F-C7F0-410A-A0BB-2422C681298C}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property CustomPropertyValueDictionary: _UAKeyValueDictionary dispid 1610743814;
    property Name: WideString dispid 1610743816;
    property Enabled: WordBool dispid 1610743818;
    property MaximumNetworkMessageSize: Int64 dispid 1610743820;
    property MaximumNetworkMessageSizeInt32: Integer dispid 1610743822;
    property securityGroupId: WideString dispid 1610743824;
    property SecurityKeyServices: _UADiscoveryElementCollection dispid 1610743826;
    property SecurityMode: UAMessageSecurityModes dispid 1610743828;
  end;

// *********************************************************************//
// Interface: _UADataSetWriterElement
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {62E37EEA-59BE-4E48-B423-4D5598B347B2}
// *********************************************************************//
  _UADataSetWriterElement = interface(IDispatch)
    ['{62E37EEA-59BE-4E48-B423-4D5598B347B2}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_CustomPropertyValueDictionary: _UAKeyValueDictionary; safecall;
    procedure _Set_CustomPropertyValueDictionary(const pRetVal: _UAKeyValueDictionary); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_Enabled: WordBool; safecall;
    procedure Set_Enabled(pRetVal: WordBool); safecall;
    function Get_DataSetFieldContentMask: UADataSetFieldContentMask; safecall;
    procedure Set_DataSetFieldContentMask(pRetVal: UADataSetFieldContentMask); safecall;
    function Get_DataSetWriterId: Integer; safecall;
    procedure Set_DataSetWriterId(pRetVal: Integer); safecall;
    function Get_KeyFrameCount: Int64; safecall;
    procedure Set_KeyFrameCount(pRetVal: Int64); safecall;
    function Get_KeyFrameCountInt32: Integer; safecall;
    procedure Set_KeyFrameCountInt32(pRetVal: Integer); safecall;
    function Get_MessageParameters: _UADataSetWriterMessageParameters; safecall;
    procedure _Set_MessageParameters(const pRetVal: _UADataSetWriterMessageParameters); safecall;
    function Get_PublishedDataSetName: WideString; safecall;
    procedure Set_PublishedDataSetName(const pRetVal: WideString); safecall;
    function Get_TransportParameters: _UADataSetWriterTransportParameters; safecall;
    procedure _Set_TransportParameters(const pRetVal: _UADataSetWriterTransportParameters); safecall;
    function ToUADataSetWriterDescriptor: _UADataSetWriterDescriptor; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property CustomPropertyValueDictionary: _UAKeyValueDictionary read Get_CustomPropertyValueDictionary write _Set_CustomPropertyValueDictionary;
    property Name: WideString read Get_Name write Set_Name;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property DataSetFieldContentMask: UADataSetFieldContentMask read Get_DataSetFieldContentMask write Set_DataSetFieldContentMask;
    property DataSetWriterId: Integer read Get_DataSetWriterId write Set_DataSetWriterId;
    property KeyFrameCount: Int64 read Get_KeyFrameCount write Set_KeyFrameCount;
    property KeyFrameCountInt32: Integer read Get_KeyFrameCountInt32 write Set_KeyFrameCountInt32;
    property MessageParameters: _UADataSetWriterMessageParameters read Get_MessageParameters write _Set_MessageParameters;
    property PublishedDataSetName: WideString read Get_PublishedDataSetName write Set_PublishedDataSetName;
    property TransportParameters: _UADataSetWriterTransportParameters read Get_TransportParameters write _Set_TransportParameters;
  end;

// *********************************************************************//
// DispIntf:  _UADataSetWriterElementDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {62E37EEA-59BE-4E48-B423-4D5598B347B2}
// *********************************************************************//
  _UADataSetWriterElementDisp = dispinterface
    ['{62E37EEA-59BE-4E48-B423-4D5598B347B2}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property CustomPropertyValueDictionary: _UAKeyValueDictionary dispid 1610743814;
    property Name: WideString dispid 1610743816;
    property Enabled: WordBool dispid 1610743818;
    property DataSetFieldContentMask: UADataSetFieldContentMask dispid 1610743820;
    property DataSetWriterId: Integer dispid 1610743822;
    property KeyFrameCount: Int64 dispid 1610743824;
    property KeyFrameCountInt32: Integer dispid 1610743826;
    property MessageParameters: _UADataSetWriterMessageParameters dispid 1610743828;
    property PublishedDataSetName: WideString dispid 1610743830;
    property TransportParameters: _UADataSetWriterTransportParameters dispid 1610743832;
    function ToUADataSetWriterDescriptor: _UADataSetWriterDescriptor; dispid 1610743834;
  end;

// *********************************************************************//
// Interface: _UAPublishedDataSetSourceElement
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {510A31A6-100E-4929-B870-DF7DB35BA13C}
// *********************************************************************//
  _UAPublishedDataSetSourceElement = interface(IDispatch)
    ['{510A31A6-100E-4929-B870-DF7DB35BA13C}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function AsPublishedDataItemsElement: _UAPublishedDataItemsElement; safecall;
    function AsPublishedEventsElement: _UAPublishedEventsElement; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
  end;

// *********************************************************************//
// DispIntf:  _UAPublishedDataSetSourceElementDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {510A31A6-100E-4929-B870-DF7DB35BA13C}
// *********************************************************************//
  _UAPublishedDataSetSourceElementDisp = dispinterface
    ['{510A31A6-100E-4929-B870-DF7DB35BA13C}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    function AsPublishedDataItemsElement: _UAPublishedDataItemsElement; dispid 1610743814;
    function AsPublishedEventsElement: _UAPublishedEventsElement; dispid 1610743815;
  end;

// *********************************************************************//
// Interface: _UAPublishedEventsElement
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8E0FC48E-841B-4C19-9D08-DD6718CC628A}
// *********************************************************************//
  _UAPublishedEventsElement = interface(IDispatch)
    ['{8E0FC48E-841B-4C19-9D08-DD6718CC628A}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function AsPublishedDataItemsElement: _UAPublishedDataItemsElement; safecall;
    function AsPublishedEventsElement: _UAPublishedEventsElement; safecall;
    function Get_ContentFilter: _UAContentFilterElement; safecall;
    procedure _Set_ContentFilter(const pRetVal: _UAContentFilterElement); safecall;
    function Get_EventNotifier: _UANodeDescriptor; safecall;
    procedure _Set_EventNotifier(const pRetVal: _UANodeDescriptor); safecall;
    function Get_SelectedFields: _UASimpleAttributeOperandCollection; safecall;
    procedure _Set_SelectedFields(const pRetVal: _UASimpleAttributeOperandCollection); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property ContentFilter: _UAContentFilterElement read Get_ContentFilter write _Set_ContentFilter;
    property EventNotifier: _UANodeDescriptor read Get_EventNotifier write _Set_EventNotifier;
    property SelectedFields: _UASimpleAttributeOperandCollection read Get_SelectedFields write _Set_SelectedFields;
  end;

// *********************************************************************//
// DispIntf:  _UAPublishedEventsElementDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8E0FC48E-841B-4C19-9D08-DD6718CC628A}
// *********************************************************************//
  _UAPublishedEventsElementDisp = dispinterface
    ['{8E0FC48E-841B-4C19-9D08-DD6718CC628A}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    function AsPublishedDataItemsElement: _UAPublishedDataItemsElement; dispid 1610743814;
    function AsPublishedEventsElement: _UAPublishedEventsElement; dispid 1610743815;
    property ContentFilter: _UAContentFilterElement dispid 1610743816;
    property EventNotifier: _UANodeDescriptor dispid 1610743818;
    property SelectedFields: _UASimpleAttributeOperandCollection dispid 1610743820;
  end;

// *********************************************************************//
// Interface: _UAWriterGroupElement
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {79FAE3C0-5B78-4A99-963C-6148E2583C97}
// *********************************************************************//
  _UAWriterGroupElement = interface(IDispatch)
    ['{79FAE3C0-5B78-4A99-963C-6148E2583C97}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_CustomPropertyValueDictionary: _UAKeyValueDictionary; safecall;
    procedure _Set_CustomPropertyValueDictionary(const pRetVal: _UAKeyValueDictionary); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_Enabled: WordBool; safecall;
    procedure Set_Enabled(pRetVal: WordBool); safecall;
    function Get_MaximumNetworkMessageSize: Int64; safecall;
    procedure Set_MaximumNetworkMessageSize(pRetVal: Int64); safecall;
    function Get_MaximumNetworkMessageSizeInt32: Integer; safecall;
    procedure Set_MaximumNetworkMessageSizeInt32(pRetVal: Integer); safecall;
    function Get_securityGroupId: WideString; safecall;
    procedure Set_securityGroupId(const pRetVal: WideString); safecall;
    function Get_SecurityKeyServices: _UADiscoveryElementCollection; safecall;
    procedure _Set_SecurityKeyServices(const pRetVal: _UADiscoveryElementCollection); safecall;
    function Get_SecurityMode: UAMessageSecurityModes; safecall;
    procedure Set_SecurityMode(pRetVal: UAMessageSecurityModes); safecall;
    function Get_HeaderLayoutUriString: WideString; safecall;
    procedure Set_HeaderLayoutUriString(const pRetVal: WideString); safecall;
    function Get_KeepAliveTime: Double; safecall;
    procedure Set_KeepAliveTime(pRetVal: Double); safecall;
    function Get_LocaleIds: _StringCollection; safecall;
    procedure _Set_LocaleIds(const pRetVal: _StringCollection); safecall;
    function Get_MessageParameters: _UAWriterGroupMessageParameters; safecall;
    procedure _Set_MessageParameters(const pRetVal: _UAWriterGroupMessageParameters); safecall;
    function Get_Priority: Byte; safecall;
    procedure Set_Priority(pRetVal: Byte); safecall;
    function Get_PublishingInterval: Double; safecall;
    procedure Set_PublishingInterval(pRetVal: Double); safecall;
    function Get_TransportParameters: _UAWriterGroupTransportParameters; safecall;
    procedure _Set_TransportParameters(const pRetVal: _UAWriterGroupTransportParameters); safecall;
    function Get_WriterGroupId: Integer; safecall;
    procedure Set_WriterGroupId(pRetVal: Integer); safecall;
    function ToUAWriterGroupDescriptor: _UAWriterGroupDescriptor; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property CustomPropertyValueDictionary: _UAKeyValueDictionary read Get_CustomPropertyValueDictionary write _Set_CustomPropertyValueDictionary;
    property Name: WideString read Get_Name write Set_Name;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property MaximumNetworkMessageSize: Int64 read Get_MaximumNetworkMessageSize write Set_MaximumNetworkMessageSize;
    property MaximumNetworkMessageSizeInt32: Integer read Get_MaximumNetworkMessageSizeInt32 write Set_MaximumNetworkMessageSizeInt32;
    property securityGroupId: WideString read Get_securityGroupId write Set_securityGroupId;
    property SecurityKeyServices: _UADiscoveryElementCollection read Get_SecurityKeyServices write _Set_SecurityKeyServices;
    property SecurityMode: UAMessageSecurityModes read Get_SecurityMode write Set_SecurityMode;
    property HeaderLayoutUriString: WideString read Get_HeaderLayoutUriString write Set_HeaderLayoutUriString;
    property KeepAliveTime: Double read Get_KeepAliveTime write Set_KeepAliveTime;
    property LocaleIds: _StringCollection read Get_LocaleIds write _Set_LocaleIds;
    property MessageParameters: _UAWriterGroupMessageParameters read Get_MessageParameters write _Set_MessageParameters;
    property Priority: Byte read Get_Priority write Set_Priority;
    property PublishingInterval: Double read Get_PublishingInterval write Set_PublishingInterval;
    property TransportParameters: _UAWriterGroupTransportParameters read Get_TransportParameters write _Set_TransportParameters;
    property WriterGroupId: Integer read Get_WriterGroupId write Set_WriterGroupId;
  end;

// *********************************************************************//
// DispIntf:  _UAWriterGroupElementDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {79FAE3C0-5B78-4A99-963C-6148E2583C97}
// *********************************************************************//
  _UAWriterGroupElementDisp = dispinterface
    ['{79FAE3C0-5B78-4A99-963C-6148E2583C97}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property CustomPropertyValueDictionary: _UAKeyValueDictionary dispid 1610743814;
    property Name: WideString dispid 1610743816;
    property Enabled: WordBool dispid 1610743818;
    property MaximumNetworkMessageSize: Int64 dispid 1610743820;
    property MaximumNetworkMessageSizeInt32: Integer dispid 1610743822;
    property securityGroupId: WideString dispid 1610743824;
    property SecurityKeyServices: _UADiscoveryElementCollection dispid 1610743826;
    property SecurityMode: UAMessageSecurityModes dispid 1610743828;
    property HeaderLayoutUriString: WideString dispid 1610743830;
    property KeepAliveTime: Double dispid 1610743832;
    property LocaleIds: _StringCollection dispid 1610743834;
    property MessageParameters: _UAWriterGroupMessageParameters dispid 1610743836;
    property Priority: Byte dispid 1610743838;
    property PublishingInterval: Double dispid 1610743840;
    property TransportParameters: _UAWriterGroupTransportParameters dispid 1610743842;
    property WriterGroupId: Integer dispid 1610743844;
    function ToUAWriterGroupDescriptor: _UAWriterGroupDescriptor; dispid 1610743846;
  end;

// *********************************************************************//
// Interface: _UAConnectionTransportParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E650C346-85FB-49C5-8051-29FEF4A71682}
// *********************************************************************//
  _UAConnectionTransportParameters = interface(IDispatch)
    ['{E650C346-85FB-49C5-8051-29FEF4A71682}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
  end;

// *********************************************************************//
// DispIntf:  _UAConnectionTransportParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E650C346-85FB-49C5-8051-29FEF4A71682}
// *********************************************************************//
  _UAConnectionTransportParametersDisp = dispinterface
    ['{E650C346-85FB-49C5-8051-29FEF4A71682}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
  end;

// *********************************************************************//
// Interface: _UADataSetReaderTransportParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D6179040-6D8A-4449-91C1-4BE258E23CA2}
// *********************************************************************//
  _UADataSetReaderTransportParameters = interface(IDispatch)
    ['{D6179040-6D8A-4449-91C1-4BE258E23CA2}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
  end;

// *********************************************************************//
// DispIntf:  _UADataSetReaderTransportParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D6179040-6D8A-4449-91C1-4BE258E23CA2}
// *********************************************************************//
  _UADataSetReaderTransportParametersDisp = dispinterface
    ['{D6179040-6D8A-4449-91C1-4BE258E23CA2}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
  end;

// *********************************************************************//
// Interface: _UADataSetWriterTransportParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4304B7A6-3350-4B8D-95C1-7E67BF2B9093}
// *********************************************************************//
  _UADataSetWriterTransportParameters = interface(IDispatch)
    ['{4304B7A6-3350-4B8D-95C1-7E67BF2B9093}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
  end;

// *********************************************************************//
// DispIntf:  _UADataSetWriterTransportParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4304B7A6-3350-4B8D-95C1-7E67BF2B9093}
// *********************************************************************//
  _UADataSetWriterTransportParametersDisp = dispinterface
    ['{4304B7A6-3350-4B8D-95C1-7E67BF2B9093}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
  end;

// *********************************************************************//
// Interface: _UAWriterGroupTransportParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {97808850-B8D5-4750-A986-C44E7DFED7DA}
// *********************************************************************//
  _UAWriterGroupTransportParameters = interface(IDispatch)
    ['{97808850-B8D5-4750-A986-C44E7DFED7DA}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
  end;

// *********************************************************************//
// DispIntf:  _UAWriterGroupTransportParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {97808850-B8D5-4750-A986-C44E7DFED7DA}
// *********************************************************************//
  _UAWriterGroupTransportParametersDisp = dispinterface
    ['{97808850-B8D5-4750-A986-C44E7DFED7DA}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
  end;

// *********************************************************************//
// Interface: _UADatagramConnectionTransportParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1119B094-5007-45B6-95E2-FB4AAE0B058D}
// *********************************************************************//
  _UADatagramConnectionTransportParameters = interface(IDispatch)
    ['{1119B094-5007-45B6-95E2-FB4AAE0B058D}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_DiscoveryNetworkAddress: _NetworkAddress; safecall;
    procedure _Set_DiscoveryNetworkAddress(const pRetVal: _NetworkAddress); safecall;
    function Get_DiscoveryResourceAddress: _ResourceAddress; safecall;
    procedure _Set_DiscoveryResourceAddress(const pRetVal: _ResourceAddress); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property DiscoveryNetworkAddress: _NetworkAddress read Get_DiscoveryNetworkAddress write _Set_DiscoveryNetworkAddress;
    property DiscoveryResourceAddress: _ResourceAddress read Get_DiscoveryResourceAddress write _Set_DiscoveryResourceAddress;
  end;

// *********************************************************************//
// DispIntf:  _UADatagramConnectionTransportParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1119B094-5007-45B6-95E2-FB4AAE0B058D}
// *********************************************************************//
  _UADatagramConnectionTransportParametersDisp = dispinterface
    ['{1119B094-5007-45B6-95E2-FB4AAE0B058D}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property DiscoveryNetworkAddress: _NetworkAddress dispid 1610743816;
    property DiscoveryResourceAddress: _ResourceAddress dispid 1610743818;
  end;

// *********************************************************************//
// Interface: _UADatagramWriterGroupTransportParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {26724D20-A513-4066-83BA-6E498C83DBDD}
// *********************************************************************//
  _UADatagramWriterGroupTransportParameters = interface(IDispatch)
    ['{26724D20-A513-4066-83BA-6E498C83DBDD}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_Address: _NetworkAddress; safecall;
    procedure _Set_Address(const pRetVal: _NetworkAddress); safecall;
    function Get_MessageRepeatCount: Byte; safecall;
    procedure Set_MessageRepeatCount(pRetVal: Byte); safecall;
    function Get_MessageRepeatDelay: Double; safecall;
    procedure Set_MessageRepeatDelay(pRetVal: Double); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property Address: _NetworkAddress read Get_Address write _Set_Address;
    property MessageRepeatCount: Byte read Get_MessageRepeatCount write Set_MessageRepeatCount;
    property MessageRepeatDelay: Double read Get_MessageRepeatDelay write Set_MessageRepeatDelay;
  end;

// *********************************************************************//
// DispIntf:  _UADatagramWriterGroupTransportParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {26724D20-A513-4066-83BA-6E498C83DBDD}
// *********************************************************************//
  _UADatagramWriterGroupTransportParametersDisp = dispinterface
    ['{26724D20-A513-4066-83BA-6E498C83DBDD}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property Address: _NetworkAddress dispid 1610743816;
    property MessageRepeatCount: Byte dispid 1610743818;
    property MessageRepeatDelay: Double dispid 1610743820;
  end;

// *********************************************************************//
// Interface: _UADataSetReaderMessageParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C31CF355-AAB9-4CFB-B9DC-D79266DF4D37}
// *********************************************************************//
  _UADataSetReaderMessageParameters = interface(IDispatch)
    ['{C31CF355-AAB9-4CFB-B9DC-D79266DF4D37}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
  end;

// *********************************************************************//
// DispIntf:  _UADataSetReaderMessageParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C31CF355-AAB9-4CFB-B9DC-D79266DF4D37}
// *********************************************************************//
  _UADataSetReaderMessageParametersDisp = dispinterface
    ['{C31CF355-AAB9-4CFB-B9DC-D79266DF4D37}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
  end;

// *********************************************************************//
// Interface: _UAJsonDataSetReaderMessageParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1AFA8307-A142-4A4A-91E3-FEB7D2ED9270}
// *********************************************************************//
  _UAJsonDataSetReaderMessageParameters = interface(IDispatch)
    ['{1AFA8307-A142-4A4A-91E3-FEB7D2ED9270}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_DataSetMessageContentMask: UAJsonDataSetMessageContentMask; safecall;
    procedure Set_DataSetMessageContentMask(pRetVal: UAJsonDataSetMessageContentMask); safecall;
    function Get_NetworkMessageContentMask: UAJsonNetworkMessageContentMask; safecall;
    procedure Set_NetworkMessageContentMask(pRetVal: UAJsonNetworkMessageContentMask); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property DataSetMessageContentMask: UAJsonDataSetMessageContentMask read Get_DataSetMessageContentMask write Set_DataSetMessageContentMask;
    property NetworkMessageContentMask: UAJsonNetworkMessageContentMask read Get_NetworkMessageContentMask write Set_NetworkMessageContentMask;
  end;

// *********************************************************************//
// DispIntf:  _UAJsonDataSetReaderMessageParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1AFA8307-A142-4A4A-91E3-FEB7D2ED9270}
// *********************************************************************//
  _UAJsonDataSetReaderMessageParametersDisp = dispinterface
    ['{1AFA8307-A142-4A4A-91E3-FEB7D2ED9270}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property DataSetMessageContentMask: UAJsonDataSetMessageContentMask dispid 1610743816;
    property NetworkMessageContentMask: UAJsonNetworkMessageContentMask dispid 1610743818;
  end;

// *********************************************************************//
// Interface: _UADataSetWriterMessageParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {316714C9-9CD7-456F-B368-8DC48E2F3394}
// *********************************************************************//
  _UADataSetWriterMessageParameters = interface(IDispatch)
    ['{316714C9-9CD7-456F-B368-8DC48E2F3394}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
  end;

// *********************************************************************//
// DispIntf:  _UADataSetWriterMessageParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {316714C9-9CD7-456F-B368-8DC48E2F3394}
// *********************************************************************//
  _UADataSetWriterMessageParametersDisp = dispinterface
    ['{316714C9-9CD7-456F-B368-8DC48E2F3394}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
  end;

// *********************************************************************//
// Interface: _UAWriterGroupMessageParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D0DABF28-BD3D-4595-B4EC-04303BFB8CA2}
// *********************************************************************//
  _UAWriterGroupMessageParameters = interface(IDispatch)
    ['{D0DABF28-BD3D-4595-B4EC-04303BFB8CA2}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
  end;

// *********************************************************************//
// DispIntf:  _UAWriterGroupMessageParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D0DABF28-BD3D-4595-B4EC-04303BFB8CA2}
// *********************************************************************//
  _UAWriterGroupMessageParametersDisp = dispinterface
    ['{D0DABF28-BD3D-4595-B4EC-04303BFB8CA2}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
  end;

// *********************************************************************//
// Interface: _UAUadpDataSetReaderMessageParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {94568946-BD82-4EEF-96D2-A90046059B44}
// *********************************************************************//
  _UAUadpDataSetReaderMessageParameters = interface(IDispatch)
    ['{94568946-BD82-4EEF-96D2-A90046059B44}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_DataSetClassId: TGUID; safecall;
    procedure Set_DataSetClassId(pRetVal: TGUID); safecall;
    function Get_DataSetClassIdString: WideString; safecall;
    procedure Set_DataSetClassIdString(const pRetVal: WideString); safecall;
    function Get_DataSetMessageContentMask: UAUadpDataSetMessageContentMask; safecall;
    procedure Set_DataSetMessageContentMask(pRetVal: UAUadpDataSetMessageContentMask); safecall;
    function Get_DataSetOffset: Integer; safecall;
    procedure Set_DataSetOffset(pRetVal: Integer); safecall;
    function Get_GroupVersion: Int64; safecall;
    procedure Set_GroupVersion(pRetVal: Int64); safecall;
    function Get_GroupVersionDateTime: TDateTime; safecall;
    procedure Set_GroupVersionDateTime(pRetVal: TDateTime); safecall;
    function Get_GroupVersionInt32: Integer; safecall;
    procedure Set_GroupVersionInt32(pRetVal: Integer); safecall;
    function Get_NetworkMessageContentMask: UAUadpNetworkMessageContentMask; safecall;
    procedure Set_NetworkMessageContentMask(pRetVal: UAUadpNetworkMessageContentMask); safecall;
    function Get_NetworkMessageNumber: Integer; safecall;
    procedure Set_NetworkMessageNumber(pRetVal: Integer); safecall;
    function Get_ProcessingOffset: Double; safecall;
    procedure Set_ProcessingOffset(pRetVal: Double); safecall;
    function Get_PublishingInterval: Double; safecall;
    procedure Set_PublishingInterval(pRetVal: Double); safecall;
    function Get_ReceiveOffset: Double; safecall;
    procedure Set_ReceiveOffset(pRetVal: Double); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property DataSetClassId: TGUID read Get_DataSetClassId write Set_DataSetClassId;
    property DataSetClassIdString: WideString read Get_DataSetClassIdString write Set_DataSetClassIdString;
    property DataSetMessageContentMask: UAUadpDataSetMessageContentMask read Get_DataSetMessageContentMask write Set_DataSetMessageContentMask;
    property DataSetOffset: Integer read Get_DataSetOffset write Set_DataSetOffset;
    property GroupVersion: Int64 read Get_GroupVersion write Set_GroupVersion;
    property GroupVersionDateTime: TDateTime read Get_GroupVersionDateTime write Set_GroupVersionDateTime;
    property GroupVersionInt32: Integer read Get_GroupVersionInt32 write Set_GroupVersionInt32;
    property NetworkMessageContentMask: UAUadpNetworkMessageContentMask read Get_NetworkMessageContentMask write Set_NetworkMessageContentMask;
    property NetworkMessageNumber: Integer read Get_NetworkMessageNumber write Set_NetworkMessageNumber;
    property ProcessingOffset: Double read Get_ProcessingOffset write Set_ProcessingOffset;
    property PublishingInterval: Double read Get_PublishingInterval write Set_PublishingInterval;
    property ReceiveOffset: Double read Get_ReceiveOffset write Set_ReceiveOffset;
  end;

// *********************************************************************//
// DispIntf:  _UAUadpDataSetReaderMessageParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {94568946-BD82-4EEF-96D2-A90046059B44}
// *********************************************************************//
  _UAUadpDataSetReaderMessageParametersDisp = dispinterface
    ['{94568946-BD82-4EEF-96D2-A90046059B44}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property DataSetClassId: {NOT_OLEAUTO(TGUID)}OleVariant dispid 1610743816;
    property DataSetClassIdString: WideString dispid 1610743818;
    property DataSetMessageContentMask: UAUadpDataSetMessageContentMask dispid 1610743820;
    property DataSetOffset: Integer dispid 1610743822;
    property GroupVersion: Int64 dispid 1610743824;
    property GroupVersionDateTime: TDateTime dispid 1610743826;
    property GroupVersionInt32: Integer dispid 1610743828;
    property NetworkMessageContentMask: UAUadpNetworkMessageContentMask dispid 1610743830;
    property NetworkMessageNumber: Integer dispid 1610743832;
    property ProcessingOffset: Double dispid 1610743834;
    property PublishingInterval: Double dispid 1610743836;
    property ReceiveOffset: Double dispid 1610743838;
  end;

// *********************************************************************//
// Interface: _UAUadpDataSetWriterMessageParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FE711423-3518-4B4F-B2E0-FB14BF6E5927}
// *********************************************************************//
  _UAUadpDataSetWriterMessageParameters = interface(IDispatch)
    ['{FE711423-3518-4B4F-B2E0-FB14BF6E5927}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_ConfiguredSize: Integer; safecall;
    procedure Set_ConfiguredSize(pRetVal: Integer); safecall;
    function Get_DataSetMessageContentMask: UAUadpDataSetMessageContentMask; safecall;
    procedure Set_DataSetMessageContentMask(pRetVal: UAUadpDataSetMessageContentMask); safecall;
    function Get_DataSetOffset: Integer; safecall;
    procedure Set_DataSetOffset(pRetVal: Integer); safecall;
    function Get_NetworkMessageNumber: Integer; safecall;
    procedure Set_NetworkMessageNumber(pRetVal: Integer); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property ConfiguredSize: Integer read Get_ConfiguredSize write Set_ConfiguredSize;
    property DataSetMessageContentMask: UAUadpDataSetMessageContentMask read Get_DataSetMessageContentMask write Set_DataSetMessageContentMask;
    property DataSetOffset: Integer read Get_DataSetOffset write Set_DataSetOffset;
    property NetworkMessageNumber: Integer read Get_NetworkMessageNumber write Set_NetworkMessageNumber;
  end;

// *********************************************************************//
// DispIntf:  _UAUadpDataSetWriterMessageParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FE711423-3518-4B4F-B2E0-FB14BF6E5927}
// *********************************************************************//
  _UAUadpDataSetWriterMessageParametersDisp = dispinterface
    ['{FE711423-3518-4B4F-B2E0-FB14BF6E5927}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property ConfiguredSize: Integer dispid 1610743816;
    property DataSetMessageContentMask: UAUadpDataSetMessageContentMask dispid 1610743818;
    property DataSetOffset: Integer dispid 1610743820;
    property NetworkMessageNumber: Integer dispid 1610743822;
  end;

// *********************************************************************//
// Interface: _UAUadpWriterGroupMessageParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {868E2586-8FE3-447D-89F8-5B6787B75775}
// *********************************************************************//
  _UAUadpWriterGroupMessageParameters = interface(IDispatch)
    ['{868E2586-8FE3-447D-89F8-5B6787B75775}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_DataSetOrdering: UADataSetOrdering; safecall;
    procedure Set_DataSetOrdering(pRetVal: UADataSetOrdering); safecall;
    function Get_GroupVersion: Int64; safecall;
    procedure Set_GroupVersion(pRetVal: Int64); safecall;
    function Get_GroupVersionDateTime: TDateTime; safecall;
    procedure Set_GroupVersionDateTime(pRetVal: TDateTime); safecall;
    function Get_GroupVersionInt32: Integer; safecall;
    procedure Set_GroupVersionInt32(pRetVal: Integer); safecall;
    function Get_NetworkMessageContentMask: UAUadpNetworkMessageContentMask; safecall;
    procedure Set_NetworkMessageContentMask(pRetVal: UAUadpNetworkMessageContentMask); safecall;
    function Get_PublishingOffset: Double; safecall;
    procedure Set_PublishingOffset(pRetVal: Double); safecall;
    function Get_PublishingOffsets: PSafeArray; safecall;
    procedure Set_PublishingOffsets(pRetVal: PSafeArray); safecall;
    function Get_SamplingOffset: Double; safecall;
    procedure Set_SamplingOffset(pRetVal: Double); safecall;
    procedure SetPublishingOffsets(var value: PSafeArray); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property DataSetOrdering: UADataSetOrdering read Get_DataSetOrdering write Set_DataSetOrdering;
    property GroupVersion: Int64 read Get_GroupVersion write Set_GroupVersion;
    property GroupVersionDateTime: TDateTime read Get_GroupVersionDateTime write Set_GroupVersionDateTime;
    property GroupVersionInt32: Integer read Get_GroupVersionInt32 write Set_GroupVersionInt32;
    property NetworkMessageContentMask: UAUadpNetworkMessageContentMask read Get_NetworkMessageContentMask write Set_NetworkMessageContentMask;
    property PublishingOffset: Double read Get_PublishingOffset write Set_PublishingOffset;
    property PublishingOffsets: PSafeArray read Get_PublishingOffsets write Set_PublishingOffsets;
    property SamplingOffset: Double read Get_SamplingOffset write Set_SamplingOffset;
  end;

// *********************************************************************//
// DispIntf:  _UAUadpWriterGroupMessageParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {868E2586-8FE3-447D-89F8-5B6787B75775}
// *********************************************************************//
  _UAUadpWriterGroupMessageParametersDisp = dispinterface
    ['{868E2586-8FE3-447D-89F8-5B6787B75775}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property DataSetOrdering: UADataSetOrdering dispid 1610743816;
    property GroupVersion: Int64 dispid 1610743818;
    property GroupVersionDateTime: TDateTime dispid 1610743820;
    property GroupVersionInt32: Integer dispid 1610743822;
    property NetworkMessageContentMask: UAUadpNetworkMessageContentMask dispid 1610743824;
    property PublishingOffset: Double dispid 1610743826;
    property PublishingOffsets: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 1610743828;
    property SamplingOffset: Double dispid 1610743830;
    procedure SetPublishingOffsets(var value: {NOT_OLEAUTO(PSafeArray)}OleVariant); dispid 1610743832;
  end;

// *********************************************************************//
// Interface: _UABrokerConnectionTransportParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {03974A3E-6CF1-4C4C-A6EF-6E14D75A4E24}
// *********************************************************************//
  _UABrokerConnectionTransportParameters = interface(IDispatch)
    ['{03974A3E-6CF1-4C4C-A6EF-6E14D75A4E24}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_AuthenticationProfileUriString: WideString; safecall;
    procedure Set_AuthenticationProfileUriString(const pRetVal: WideString); safecall;
    function Get_ResourceUriString: WideString; safecall;
    procedure Set_ResourceUriString(const pRetVal: WideString); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property AuthenticationProfileUriString: WideString read Get_AuthenticationProfileUriString write Set_AuthenticationProfileUriString;
    property ResourceUriString: WideString read Get_ResourceUriString write Set_ResourceUriString;
  end;

// *********************************************************************//
// DispIntf:  _UABrokerConnectionTransportParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {03974A3E-6CF1-4C4C-A6EF-6E14D75A4E24}
// *********************************************************************//
  _UABrokerConnectionTransportParametersDisp = dispinterface
    ['{03974A3E-6CF1-4C4C-A6EF-6E14D75A4E24}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property AuthenticationProfileUriString: WideString dispid 1610743816;
    property ResourceUriString: WideString dispid 1610743818;
  end;

// *********************************************************************//
// Interface: _UABrokerDataSetReaderTransportParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8811FE82-2CA0-41B5-A98B-7C5B57EC9605}
// *********************************************************************//
  _UABrokerDataSetReaderTransportParameters = interface(IDispatch)
    ['{8811FE82-2CA0-41B5-A98B-7C5B57EC9605}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_AuthenticationProfileUriString: WideString; safecall;
    procedure Set_AuthenticationProfileUriString(const pRetVal: WideString); safecall;
    function Get_MetaDataQueueName: WideString; safecall;
    procedure Set_MetaDataQueueName(const pRetVal: WideString); safecall;
    function Get_QueueName: WideString; safecall;
    procedure Set_QueueName(const pRetVal: WideString); safecall;
    function Get_RequestedDeliveryGuarantee: UABrokerTransportQualityOfService; safecall;
    procedure Set_RequestedDeliveryGuarantee(pRetVal: UABrokerTransportQualityOfService); safecall;
    function Get_ResourceUriString: WideString; safecall;
    procedure Set_ResourceUriString(const pRetVal: WideString); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property AuthenticationProfileUriString: WideString read Get_AuthenticationProfileUriString write Set_AuthenticationProfileUriString;
    property MetaDataQueueName: WideString read Get_MetaDataQueueName write Set_MetaDataQueueName;
    property QueueName: WideString read Get_QueueName write Set_QueueName;
    property RequestedDeliveryGuarantee: UABrokerTransportQualityOfService read Get_RequestedDeliveryGuarantee write Set_RequestedDeliveryGuarantee;
    property ResourceUriString: WideString read Get_ResourceUriString write Set_ResourceUriString;
  end;

// *********************************************************************//
// DispIntf:  _UABrokerDataSetReaderTransportParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8811FE82-2CA0-41B5-A98B-7C5B57EC9605}
// *********************************************************************//
  _UABrokerDataSetReaderTransportParametersDisp = dispinterface
    ['{8811FE82-2CA0-41B5-A98B-7C5B57EC9605}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property AuthenticationProfileUriString: WideString dispid 1610743816;
    property MetaDataQueueName: WideString dispid 1610743818;
    property QueueName: WideString dispid 1610743820;
    property RequestedDeliveryGuarantee: UABrokerTransportQualityOfService dispid 1610743822;
    property ResourceUriString: WideString dispid 1610743824;
  end;

// *********************************************************************//
// Interface: _UABrokerDataSetWriterTransportParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {CB810C59-3CA9-4D5C-B5DE-B5A3A31DA2F5}
// *********************************************************************//
  _UABrokerDataSetWriterTransportParameters = interface(IDispatch)
    ['{CB810C59-3CA9-4D5C-B5DE-B5A3A31DA2F5}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_AuthenticationProfileUriString: WideString; safecall;
    procedure Set_AuthenticationProfileUriString(const pRetVal: WideString); safecall;
    function Get_MetaDataQueueName: WideString; safecall;
    procedure Set_MetaDataQueueName(const pRetVal: WideString); safecall;
    function Get_MetaDataUpdateTime: Double; safecall;
    procedure Set_MetaDataUpdateTime(pRetVal: Double); safecall;
    function Get_QueueName: WideString; safecall;
    procedure Set_QueueName(const pRetVal: WideString); safecall;
    function Get_RequestedDeliveryGuarantee: UABrokerTransportQualityOfService; safecall;
    procedure Set_RequestedDeliveryGuarantee(pRetVal: UABrokerTransportQualityOfService); safecall;
    function Get_ResourceUriString: WideString; safecall;
    procedure Set_ResourceUriString(const pRetVal: WideString); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property AuthenticationProfileUriString: WideString read Get_AuthenticationProfileUriString write Set_AuthenticationProfileUriString;
    property MetaDataQueueName: WideString read Get_MetaDataQueueName write Set_MetaDataQueueName;
    property MetaDataUpdateTime: Double read Get_MetaDataUpdateTime write Set_MetaDataUpdateTime;
    property QueueName: WideString read Get_QueueName write Set_QueueName;
    property RequestedDeliveryGuarantee: UABrokerTransportQualityOfService read Get_RequestedDeliveryGuarantee write Set_RequestedDeliveryGuarantee;
    property ResourceUriString: WideString read Get_ResourceUriString write Set_ResourceUriString;
  end;

// *********************************************************************//
// DispIntf:  _UABrokerDataSetWriterTransportParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {CB810C59-3CA9-4D5C-B5DE-B5A3A31DA2F5}
// *********************************************************************//
  _UABrokerDataSetWriterTransportParametersDisp = dispinterface
    ['{CB810C59-3CA9-4D5C-B5DE-B5A3A31DA2F5}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property AuthenticationProfileUriString: WideString dispid 1610743816;
    property MetaDataQueueName: WideString dispid 1610743818;
    property MetaDataUpdateTime: Double dispid 1610743820;
    property QueueName: WideString dispid 1610743822;
    property RequestedDeliveryGuarantee: UABrokerTransportQualityOfService dispid 1610743824;
    property ResourceUriString: WideString dispid 1610743826;
  end;

// *********************************************************************//
// Interface: _UABrokerWriterGroupTransportParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7EFE6A1D-9A41-4CC1-8530-035665BE13AF}
// *********************************************************************//
  _UABrokerWriterGroupTransportParameters = interface(IDispatch)
    ['{7EFE6A1D-9A41-4CC1-8530-035665BE13AF}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_AuthenticationProfileUriString: WideString; safecall;
    procedure Set_AuthenticationProfileUriString(const pRetVal: WideString); safecall;
    function Get_QueueName: WideString; safecall;
    procedure Set_QueueName(const pRetVal: WideString); safecall;
    function Get_RequestedDeliveryGuarantee: UABrokerTransportQualityOfService; safecall;
    procedure Set_RequestedDeliveryGuarantee(pRetVal: UABrokerTransportQualityOfService); safecall;
    function Get_ResourceUriString: WideString; safecall;
    procedure Set_ResourceUriString(const pRetVal: WideString); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property AuthenticationProfileUriString: WideString read Get_AuthenticationProfileUriString write Set_AuthenticationProfileUriString;
    property QueueName: WideString read Get_QueueName write Set_QueueName;
    property RequestedDeliveryGuarantee: UABrokerTransportQualityOfService read Get_RequestedDeliveryGuarantee write Set_RequestedDeliveryGuarantee;
    property ResourceUriString: WideString read Get_ResourceUriString write Set_ResourceUriString;
  end;

// *********************************************************************//
// DispIntf:  _UABrokerWriterGroupTransportParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7EFE6A1D-9A41-4CC1-8530-035665BE13AF}
// *********************************************************************//
  _UABrokerWriterGroupTransportParametersDisp = dispinterface
    ['{7EFE6A1D-9A41-4CC1-8530-035665BE13AF}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property AuthenticationProfileUriString: WideString dispid 1610743816;
    property QueueName: WideString dispid 1610743818;
    property RequestedDeliveryGuarantee: UABrokerTransportQualityOfService dispid 1610743820;
    property ResourceUriString: WideString dispid 1610743822;
  end;

// *********************************************************************//
// Interface: _UADataSetMetaData
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FF5E42E9-C19F-4404-9F7E-440A30B77989}
// *********************************************************************//
  _UADataSetMetaData = interface(IDispatch)
    ['{FF5E42E9-C19F-4404-9F7E-440A30B77989}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function FindDataTypeDescriptions(dataTypeIdList: OleVariant; searchSupertypes: WordBool): PSafeArray; safecall;
    function Get_EnumDescriptions: ICollection; safecall;
    function Get_NamespaceArray: PSafeArray; safecall;
    procedure Set_NamespaceArray(pRetVal: PSafeArray); safecall;
    function Get_SimpleTypeDescriptions: ICollection; safecall;
    function Get_StructureDescriptions: ICollection; safecall;
    function Clone: OleVariant; safecall;
    procedure SetNamespaceArray(var value: PSafeArray); safecall;
    function Get_ConfigurationVersion: _UAConfigurationVersion; safecall;
    procedure _Set_ConfigurationVersion(const pRetVal: _UAConfigurationVersion); safecall;
    function Get_DataSetClassId: TGUID; safecall;
    procedure Set_DataSetClassId(pRetVal: TGUID); safecall;
    function Get_DataSetClassIdString: WideString; safecall;
    procedure Set_DataSetClassIdString(const pRetVal: WideString); safecall;
    function Get_Description: WideString; safecall;
    procedure Set_Description(const pRetVal: WideString); safecall;
    function Get_FieldCount: Integer; safecall;
    function Get_Fields: _UAFieldMetaDataCollection; safecall;
    function Get_HasDataSetClassId: WordBool; safecall;
    function Get_HasPromotedFields: WordBool; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_PromotedFieldCount: Integer; safecall;
    procedure Add(fieldMetaData: OleVariant); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property EnumDescriptions: ICollection read Get_EnumDescriptions;
    property NamespaceArray: PSafeArray read Get_NamespaceArray write Set_NamespaceArray;
    property SimpleTypeDescriptions: ICollection read Get_SimpleTypeDescriptions;
    property StructureDescriptions: ICollection read Get_StructureDescriptions;
    property ConfigurationVersion: _UAConfigurationVersion read Get_ConfigurationVersion write _Set_ConfigurationVersion;
    property DataSetClassId: TGUID read Get_DataSetClassId write Set_DataSetClassId;
    property DataSetClassIdString: WideString read Get_DataSetClassIdString write Set_DataSetClassIdString;
    property Description: WideString read Get_Description write Set_Description;
    property FieldCount: Integer read Get_FieldCount;
    property Fields: _UAFieldMetaDataCollection read Get_Fields;
    property HasDataSetClassId: WordBool read Get_HasDataSetClassId;
    property HasPromotedFields: WordBool read Get_HasPromotedFields;
    property Name: WideString read Get_Name write Set_Name;
    property PromotedFieldCount: Integer read Get_PromotedFieldCount;
  end;

// *********************************************************************//
// DispIntf:  _UADataSetMetaDataDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FF5E42E9-C19F-4404-9F7E-440A30B77989}
// *********************************************************************//
  _UADataSetMetaDataDisp = dispinterface
    ['{FF5E42E9-C19F-4404-9F7E-440A30B77989}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function FindDataTypeDescriptions(dataTypeIdList: OleVariant; searchSupertypes: WordBool): {NOT_OLEAUTO(PSafeArray)}OleVariant; dispid 1610743813;
    property EnumDescriptions: ICollection readonly dispid 1610743814;
    property NamespaceArray: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 1610743815;
    property SimpleTypeDescriptions: ICollection readonly dispid 1610743817;
    property StructureDescriptions: ICollection readonly dispid 1610743818;
    function Clone: OleVariant; dispid 1610743819;
    procedure SetNamespaceArray(var value: {NOT_OLEAUTO(PSafeArray)}OleVariant); dispid 1610743820;
    property ConfigurationVersion: _UAConfigurationVersion dispid 1610743821;
    property DataSetClassId: {NOT_OLEAUTO(TGUID)}OleVariant dispid 1610743823;
    property DataSetClassIdString: WideString dispid 1610743825;
    property Description: WideString dispid 1610743827;
    property FieldCount: Integer readonly dispid 1610743829;
    property Fields: _UAFieldMetaDataCollection readonly dispid 1610743830;
    property HasDataSetClassId: WordBool readonly dispid 1610743831;
    property HasPromotedFields: WordBool readonly dispid 1610743832;
    property Name: WideString dispid 1610743833;
    property PromotedFieldCount: Integer readonly dispid 1610743835;
    procedure Add(fieldMetaData: OleVariant); dispid 1610743836;
  end;

// *********************************************************************//
// Interface: _UADataSetWriterData
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4BBFC129-C3EF-4684-8947-84EB6F97D54D}
// *********************************************************************//
  _UADataSetWriterData = interface(IDispatch)
    ['{4BBFC129-C3EF-4684-8947-84EB6F97D54D}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_CustomPropertyValueDictionary: _UAKeyValueDictionary; safecall;
    procedure _Set_CustomPropertyValueDictionary(const pRetVal: _UAKeyValueDictionary); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_Enabled: WordBool; safecall;
    procedure Set_Enabled(pRetVal: WordBool); safecall;
    function Get_DataSetFieldContentMask: UADataSetFieldContentMask; safecall;
    procedure Set_DataSetFieldContentMask(pRetVal: UADataSetFieldContentMask); safecall;
    function Get_DataSetWriterId: Integer; safecall;
    procedure Set_DataSetWriterId(pRetVal: Integer); safecall;
    function Get_KeyFrameCount: Int64; safecall;
    procedure Set_KeyFrameCount(pRetVal: Int64); safecall;
    function Get_KeyFrameCountInt32: Integer; safecall;
    procedure Set_KeyFrameCountInt32(pRetVal: Integer); safecall;
    function Get_MessageParameters: _UADataSetWriterMessageParameters; safecall;
    procedure _Set_MessageParameters(const pRetVal: _UADataSetWriterMessageParameters); safecall;
    function Get_PublishedDataSetName: WideString; safecall;
    procedure Set_PublishedDataSetName(const pRetVal: WideString); safecall;
    function Get_TransportParameters: _UADataSetWriterTransportParameters; safecall;
    procedure _Set_TransportParameters(const pRetVal: _UADataSetWriterTransportParameters); safecall;
    function ToUADataSetWriterDescriptor: _UADataSetWriterDescriptor; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property CustomPropertyValueDictionary: _UAKeyValueDictionary read Get_CustomPropertyValueDictionary write _Set_CustomPropertyValueDictionary;
    property Name: WideString read Get_Name write Set_Name;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property DataSetFieldContentMask: UADataSetFieldContentMask read Get_DataSetFieldContentMask write Set_DataSetFieldContentMask;
    property DataSetWriterId: Integer read Get_DataSetWriterId write Set_DataSetWriterId;
    property KeyFrameCount: Int64 read Get_KeyFrameCount write Set_KeyFrameCount;
    property KeyFrameCountInt32: Integer read Get_KeyFrameCountInt32 write Set_KeyFrameCountInt32;
    property MessageParameters: _UADataSetWriterMessageParameters read Get_MessageParameters write _Set_MessageParameters;
    property PublishedDataSetName: WideString read Get_PublishedDataSetName write Set_PublishedDataSetName;
    property TransportParameters: _UADataSetWriterTransportParameters read Get_TransportParameters write _Set_TransportParameters;
  end;

// *********************************************************************//
// DispIntf:  _UADataSetWriterDataDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4BBFC129-C3EF-4684-8947-84EB6F97D54D}
// *********************************************************************//
  _UADataSetWriterDataDisp = dispinterface
    ['{4BBFC129-C3EF-4684-8947-84EB6F97D54D}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property CustomPropertyValueDictionary: _UAKeyValueDictionary dispid 1610743814;
    property Name: WideString dispid 1610743816;
    property Enabled: WordBool dispid 1610743818;
    property DataSetFieldContentMask: UADataSetFieldContentMask dispid 1610743820;
    property DataSetWriterId: Integer dispid 1610743822;
    property KeyFrameCount: Int64 dispid 1610743824;
    property KeyFrameCountInt32: Integer dispid 1610743826;
    property MessageParameters: _UADataSetWriterMessageParameters dispid 1610743828;
    property PublishedDataSetName: WideString dispid 1610743830;
    property TransportParameters: _UADataSetWriterTransportParameters dispid 1610743832;
    function ToUADataSetWriterDescriptor: _UADataSetWriterDescriptor; dispid 1610743834;
  end;

// *********************************************************************//
// Interface: _UAJsonDataSetWriterMessageParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {001D188D-67A3-4BE3-82FC-9EE06DF4E527}
// *********************************************************************//
  _UAJsonDataSetWriterMessageParameters = interface(IDispatch)
    ['{001D188D-67A3-4BE3-82FC-9EE06DF4E527}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_DataSetMessageContentMask: UAJsonDataSetMessageContentMask; safecall;
    procedure Set_DataSetMessageContentMask(pRetVal: UAJsonDataSetMessageContentMask); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property DataSetMessageContentMask: UAJsonDataSetMessageContentMask read Get_DataSetMessageContentMask write Set_DataSetMessageContentMask;
  end;

// *********************************************************************//
// DispIntf:  _UAJsonDataSetWriterMessageParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {001D188D-67A3-4BE3-82FC-9EE06DF4E527}
// *********************************************************************//
  _UAJsonDataSetWriterMessageParametersDisp = dispinterface
    ['{001D188D-67A3-4BE3-82FC-9EE06DF4E527}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property DataSetMessageContentMask: UAJsonDataSetMessageContentMask dispid 1610743816;
  end;

// *********************************************************************//
// Interface: _UAFieldMetaData
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {05A7FEF5-81F6-457D-B04D-883BBF8BC312}
// *********************************************************************//
  _UAFieldMetaData = interface(IDispatch)
    ['{05A7FEF5-81F6-457D-B04D-883BBF8BC312}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_CustomPropertyValueDictionary: _UAKeyValueDictionary; safecall;
    procedure _Set_CustomPropertyValueDictionary(const pRetVal: _UAKeyValueDictionary); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_ArrayDimensions: PSafeArray; safecall;
    procedure Set_ArrayDimensions(pRetVal: PSafeArray); safecall;
    function Get_BuiltInType: UABuiltInType; safecall;
    procedure Set_BuiltInType(pRetVal: UABuiltInType); safecall;
    function Get_DataSetFieldFlags: UADataSetFieldFlags; safecall;
    procedure Set_DataSetFieldFlags(pRetVal: UADataSetFieldFlags); safecall;
    function Get_DataSetFieldId: TGUID; safecall;
    procedure Set_DataSetFieldId(pRetVal: TGUID); safecall;
    function Get_DataSetFieldIdString: WideString; safecall;
    procedure Set_DataSetFieldIdString(const pRetVal: WideString); safecall;
    function Get_DataTypeId: _UANodeId; safecall;
    procedure _Set_DataTypeId(const pRetVal: _UANodeId); safecall;
    function Get_Description: WideString; safecall;
    procedure Set_Description(const pRetVal: WideString); safecall;
    function Get_MaximumStringLength: Int64; safecall;
    procedure Set_MaximumStringLength(pRetVal: Int64); safecall;
    function Get_MaximumStringLengthInt32: Integer; safecall;
    procedure Set_MaximumStringLengthInt32(pRetVal: Integer); safecall;
    function Get_ValueRank: Integer; safecall;
    procedure Set_ValueRank(pRetVal: Integer); safecall;
    procedure SetArrayDimensions(var value: PSafeArray); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property CustomPropertyValueDictionary: _UAKeyValueDictionary read Get_CustomPropertyValueDictionary write _Set_CustomPropertyValueDictionary;
    property Name: WideString read Get_Name write Set_Name;
    property ArrayDimensions: PSafeArray read Get_ArrayDimensions write Set_ArrayDimensions;
    property BuiltInType: UABuiltInType read Get_BuiltInType write Set_BuiltInType;
    property DataSetFieldFlags: UADataSetFieldFlags read Get_DataSetFieldFlags write Set_DataSetFieldFlags;
    property DataSetFieldId: TGUID read Get_DataSetFieldId write Set_DataSetFieldId;
    property DataSetFieldIdString: WideString read Get_DataSetFieldIdString write Set_DataSetFieldIdString;
    property DataTypeId: _UANodeId read Get_DataTypeId write _Set_DataTypeId;
    property Description: WideString read Get_Description write Set_Description;
    property MaximumStringLength: Int64 read Get_MaximumStringLength write Set_MaximumStringLength;
    property MaximumStringLengthInt32: Integer read Get_MaximumStringLengthInt32 write Set_MaximumStringLengthInt32;
    property ValueRank: Integer read Get_ValueRank write Set_ValueRank;
  end;

// *********************************************************************//
// DispIntf:  _UAFieldMetaDataDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {05A7FEF5-81F6-457D-B04D-883BBF8BC312}
// *********************************************************************//
  _UAFieldMetaDataDisp = dispinterface
    ['{05A7FEF5-81F6-457D-B04D-883BBF8BC312}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property CustomPropertyValueDictionary: _UAKeyValueDictionary dispid 1610743814;
    property Name: WideString dispid 1610743816;
    property ArrayDimensions: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 1610743818;
    property BuiltInType: UABuiltInType dispid 1610743820;
    property DataSetFieldFlags: UADataSetFieldFlags dispid 1610743822;
    property DataSetFieldId: {NOT_OLEAUTO(TGUID)}OleVariant dispid 1610743824;
    property DataSetFieldIdString: WideString dispid 1610743826;
    property DataTypeId: _UANodeId dispid 1610743828;
    property Description: WideString dispid 1610743830;
    property MaximumStringLength: Int64 dispid 1610743832;
    property MaximumStringLengthInt32: Integer dispid 1610743834;
    property ValueRank: Integer dispid 1610743836;
    procedure SetArrayDimensions(var value: {NOT_OLEAUTO(PSafeArray)}OleVariant); dispid 1610743838;
  end;

// *********************************************************************//
// Interface: _UAJsonWriterGroupMessageParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2688FC99-7DB9-4D3D-88E5-3DD6C7B1FC93}
// *********************************************************************//
  _UAJsonWriterGroupMessageParameters = interface(IDispatch)
    ['{2688FC99-7DB9-4D3D-88E5-3DD6C7B1FC93}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_NetworkMessageContentMask: UAJsonNetworkMessageContentMask; safecall;
    procedure Set_NetworkMessageContentMask(pRetVal: UAJsonNetworkMessageContentMask); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property NetworkMessageContentMask: UAJsonNetworkMessageContentMask read Get_NetworkMessageContentMask write Set_NetworkMessageContentMask;
  end;

// *********************************************************************//
// DispIntf:  _UAJsonWriterGroupMessageParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2688FC99-7DB9-4D3D-88E5-3DD6C7B1FC93}
// *********************************************************************//
  _UAJsonWriterGroupMessageParametersDisp = dispinterface
    ['{2688FC99-7DB9-4D3D-88E5-3DD6C7B1FC93}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property NetworkMessageContentMask: UAJsonNetworkMessageContentMask dispid 1610743816;
  end;

// *********************************************************************//
// Interface: _UAPublishedDataItemsElement
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1D65B0A6-261F-4DA2-9878-8CFB173FDE6B}
// *********************************************************************//
  _UAPublishedDataItemsElement = interface(IDispatch)
    ['{1D65B0A6-261F-4DA2-9878-8CFB173FDE6B}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function AsPublishedDataItemsElement: _UAPublishedDataItemsElement; safecall;
    function AsPublishedEventsElement: _UAPublishedEventsElement; safecall;
    function Get_PublishedVariables: _UAPublishedVariableDataCollection; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property PublishedVariables: _UAPublishedVariableDataCollection read Get_PublishedVariables;
  end;

// *********************************************************************//
// DispIntf:  _UAPublishedDataItemsElementDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1D65B0A6-261F-4DA2-9878-8CFB173FDE6B}
// *********************************************************************//
  _UAPublishedDataItemsElementDisp = dispinterface
    ['{1D65B0A6-261F-4DA2-9878-8CFB173FDE6B}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    function AsPublishedDataItemsElement: _UAPublishedDataItemsElement; dispid 1610743814;
    function AsPublishedEventsElement: _UAPublishedEventsElement; dispid 1610743815;
    property PublishedVariables: _UAPublishedVariableDataCollection readonly dispid 1610743816;
  end;

// *********************************************************************//
// Interface: _UAPublishedDataSetData
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {453E8464-E93B-413F-B99D-C95F34F8CCA6}
// *********************************************************************//
  _UAPublishedDataSetData = interface(IDispatch)
    ['{453E8464-E93B-413F-B99D-C95F34F8CCA6}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_ConfigurationVersion: _UAConfigurationVersion; safecall;
    procedure _Set_ConfigurationVersion(const pRetVal: _UAConfigurationVersion); safecall;
    function Get_DataSetClassId: TGUID; safecall;
    procedure Set_DataSetClassId(pRetVal: TGUID); safecall;
    function Get_DataSetClassIdString: WideString; safecall;
    procedure Set_DataSetClassIdString(const pRetVal: WideString); safecall;
    function Get_ExtensionFieldValueDictionary: _UAKeyValueDictionary; safecall;
    procedure _Set_ExtensionFieldValueDictionary(const pRetVal: _UAKeyValueDictionary); safecall;
    function Get_HasDataSetClassId: WordBool; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_DataSetMetaData: _UADataSetMetaData; safecall;
    procedure _Set_DataSetMetaData(const pRetVal: _UADataSetMetaData); safecall;
    function Get_DataSetSourceElement: _UAPublishedDataSetSourceElement; safecall;
    procedure _Set_DataSetSourceElement(const pRetVal: _UAPublishedDataSetSourceElement); safecall;
    function Get_DataSetFolderPath: _StringCollection; safecall;
    procedure _Set_DataSetFolderPath(const pRetVal: _StringCollection); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property ConfigurationVersion: _UAConfigurationVersion read Get_ConfigurationVersion write _Set_ConfigurationVersion;
    property DataSetClassId: TGUID read Get_DataSetClassId write Set_DataSetClassId;
    property DataSetClassIdString: WideString read Get_DataSetClassIdString write Set_DataSetClassIdString;
    property ExtensionFieldValueDictionary: _UAKeyValueDictionary read Get_ExtensionFieldValueDictionary write _Set_ExtensionFieldValueDictionary;
    property HasDataSetClassId: WordBool read Get_HasDataSetClassId;
    property Name: WideString read Get_Name write Set_Name;
    property DataSetMetaData: _UADataSetMetaData read Get_DataSetMetaData write _Set_DataSetMetaData;
    property DataSetSourceElement: _UAPublishedDataSetSourceElement read Get_DataSetSourceElement write _Set_DataSetSourceElement;
    property DataSetFolderPath: _StringCollection read Get_DataSetFolderPath write _Set_DataSetFolderPath;
  end;

// *********************************************************************//
// DispIntf:  _UAPublishedDataSetDataDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {453E8464-E93B-413F-B99D-C95F34F8CCA6}
// *********************************************************************//
  _UAPublishedDataSetDataDisp = dispinterface
    ['{453E8464-E93B-413F-B99D-C95F34F8CCA6}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property ConfigurationVersion: _UAConfigurationVersion dispid 1610743814;
    property DataSetClassId: {NOT_OLEAUTO(TGUID)}OleVariant dispid 1610743816;
    property DataSetClassIdString: WideString dispid 1610743818;
    property ExtensionFieldValueDictionary: _UAKeyValueDictionary dispid 1610743820;
    property HasDataSetClassId: WordBool readonly dispid 1610743822;
    property Name: WideString dispid 1610743823;
    property DataSetMetaData: _UADataSetMetaData dispid 1610743825;
    property DataSetSourceElement: _UAPublishedDataSetSourceElement dispid 1610743827;
    property DataSetFolderPath: _StringCollection dispid 1610743829;
  end;

// *********************************************************************//
// Interface: _UAPubSubConfigurationData
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {00889884-908B-4644-A325-01ED63D49D78}
// *********************************************************************//
  _UAPubSubConfigurationData = interface(IDispatch)
    ['{00889884-908B-4644-A325-01ED63D49D78}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_Enabled: WordBool; safecall;
    procedure Set_Enabled(pRetVal: WordBool); safecall;
    function Get_SecurityKeyServices: _UADiscoveryElementCollection; safecall;
    procedure _Set_SecurityKeyServices(const pRetVal: _UADiscoveryElementCollection); safecall;
    function Get_Connections: _UAPubSubConnectionDataCollection; safecall;
    function Get_PublishedDataSets: _UADataSetFolderData; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property SecurityKeyServices: _UADiscoveryElementCollection read Get_SecurityKeyServices write _Set_SecurityKeyServices;
    property Connections: _UAPubSubConnectionDataCollection read Get_Connections;
    property PublishedDataSets: _UADataSetFolderData read Get_PublishedDataSets;
  end;

// *********************************************************************//
// DispIntf:  _UAPubSubConfigurationDataDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {00889884-908B-4644-A325-01ED63D49D78}
// *********************************************************************//
  _UAPubSubConfigurationDataDisp = dispinterface
    ['{00889884-908B-4644-A325-01ED63D49D78}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property Enabled: WordBool dispid 1610743814;
    property SecurityKeyServices: _UADiscoveryElementCollection dispid 1610743816;
    property Connections: _UAPubSubConnectionDataCollection readonly dispid 1610743818;
    property PublishedDataSets: _UADataSetFolderData readonly dispid 1610743819;
  end;

// *********************************************************************//
// Interface: _UAPubSubConnectionData
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {57492A54-EC53-40BB-BFCE-E34EF63E366C}
// *********************************************************************//
  _UAPubSubConnectionData = interface(IDispatch)
    ['{57492A54-EC53-40BB-BFCE-E34EF63E366C}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_CustomPropertyValueDictionary: _UAKeyValueDictionary; safecall;
    procedure _Set_CustomPropertyValueDictionary(const pRetVal: _UAKeyValueDictionary); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_Enabled: WordBool; safecall;
    procedure Set_Enabled(pRetVal: WordBool); safecall;
    function Get_NetworkAddress: _NetworkAddress; safecall;
    procedure _Set_NetworkAddress(const pRetVal: _NetworkAddress); safecall;
    function Get_PublisherId: _UAPublisherId; safecall;
    procedure _Set_PublisherId(const pRetVal: _UAPublisherId); safecall;
    function Get_TransportParameters: _UAConnectionTransportParameters; safecall;
    procedure _Set_TransportParameters(const pRetVal: _UAConnectionTransportParameters); safecall;
    function Get_TransportProfileUriString: WideString; safecall;
    procedure Set_TransportProfileUriString(const pRetVal: WideString); safecall;
    function ToUAPubSubConnectionDescriptor: _UAPubSubConnectionDescriptor; safecall;
    function Get_WriterGroups: _UAWriterGroupDataCollection; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property CustomPropertyValueDictionary: _UAKeyValueDictionary read Get_CustomPropertyValueDictionary write _Set_CustomPropertyValueDictionary;
    property Name: WideString read Get_Name write Set_Name;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property NetworkAddress: _NetworkAddress read Get_NetworkAddress write _Set_NetworkAddress;
    property PublisherId: _UAPublisherId read Get_PublisherId write _Set_PublisherId;
    property TransportParameters: _UAConnectionTransportParameters read Get_TransportParameters write _Set_TransportParameters;
    property TransportProfileUriString: WideString read Get_TransportProfileUriString write Set_TransportProfileUriString;
    property WriterGroups: _UAWriterGroupDataCollection read Get_WriterGroups;
  end;

// *********************************************************************//
// DispIntf:  _UAPubSubConnectionDataDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {57492A54-EC53-40BB-BFCE-E34EF63E366C}
// *********************************************************************//
  _UAPubSubConnectionDataDisp = dispinterface
    ['{57492A54-EC53-40BB-BFCE-E34EF63E366C}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property CustomPropertyValueDictionary: _UAKeyValueDictionary dispid 1610743814;
    property Name: WideString dispid 1610743816;
    property Enabled: WordBool dispid 1610743818;
    property NetworkAddress: _NetworkAddress dispid 1610743820;
    property PublisherId: _UAPublisherId dispid 1610743822;
    property TransportParameters: _UAConnectionTransportParameters dispid 1610743824;
    property TransportProfileUriString: WideString dispid 1610743826;
    function ToUAPubSubConnectionDescriptor: _UAPubSubConnectionDescriptor; dispid 1610743828;
    property WriterGroups: _UAWriterGroupDataCollection readonly dispid 1610743829;
  end;

// *********************************************************************//
// Interface: _UAWriterGroupData
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5DA5F2AF-FFBD-4403-8563-477BD4198356}
// *********************************************************************//
  _UAWriterGroupData = interface(IDispatch)
    ['{5DA5F2AF-FFBD-4403-8563-477BD4198356}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_CustomPropertyValueDictionary: _UAKeyValueDictionary; safecall;
    procedure _Set_CustomPropertyValueDictionary(const pRetVal: _UAKeyValueDictionary); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_Enabled: WordBool; safecall;
    procedure Set_Enabled(pRetVal: WordBool); safecall;
    function Get_MaximumNetworkMessageSize: Int64; safecall;
    procedure Set_MaximumNetworkMessageSize(pRetVal: Int64); safecall;
    function Get_MaximumNetworkMessageSizeInt32: Integer; safecall;
    procedure Set_MaximumNetworkMessageSizeInt32(pRetVal: Integer); safecall;
    function Get_securityGroupId: WideString; safecall;
    procedure Set_securityGroupId(const pRetVal: WideString); safecall;
    function Get_SecurityKeyServices: _UADiscoveryElementCollection; safecall;
    procedure _Set_SecurityKeyServices(const pRetVal: _UADiscoveryElementCollection); safecall;
    function Get_SecurityMode: UAMessageSecurityModes; safecall;
    procedure Set_SecurityMode(pRetVal: UAMessageSecurityModes); safecall;
    function Get_HeaderLayoutUriString: WideString; safecall;
    procedure Set_HeaderLayoutUriString(const pRetVal: WideString); safecall;
    function Get_KeepAliveTime: Double; safecall;
    procedure Set_KeepAliveTime(pRetVal: Double); safecall;
    function Get_LocaleIds: _StringCollection; safecall;
    procedure _Set_LocaleIds(const pRetVal: _StringCollection); safecall;
    function Get_MessageParameters: _UAWriterGroupMessageParameters; safecall;
    procedure _Set_MessageParameters(const pRetVal: _UAWriterGroupMessageParameters); safecall;
    function Get_Priority: Byte; safecall;
    procedure Set_Priority(pRetVal: Byte); safecall;
    function Get_PublishingInterval: Double; safecall;
    procedure Set_PublishingInterval(pRetVal: Double); safecall;
    function Get_TransportParameters: _UAWriterGroupTransportParameters; safecall;
    procedure _Set_TransportParameters(const pRetVal: _UAWriterGroupTransportParameters); safecall;
    function Get_WriterGroupId: Integer; safecall;
    procedure Set_WriterGroupId(pRetVal: Integer); safecall;
    function ToUAWriterGroupDescriptor: _UAWriterGroupDescriptor; safecall;
    function Get_DataSetWriters: _UADataSetWriterDataCollection; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property CustomPropertyValueDictionary: _UAKeyValueDictionary read Get_CustomPropertyValueDictionary write _Set_CustomPropertyValueDictionary;
    property Name: WideString read Get_Name write Set_Name;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property MaximumNetworkMessageSize: Int64 read Get_MaximumNetworkMessageSize write Set_MaximumNetworkMessageSize;
    property MaximumNetworkMessageSizeInt32: Integer read Get_MaximumNetworkMessageSizeInt32 write Set_MaximumNetworkMessageSizeInt32;
    property securityGroupId: WideString read Get_securityGroupId write Set_securityGroupId;
    property SecurityKeyServices: _UADiscoveryElementCollection read Get_SecurityKeyServices write _Set_SecurityKeyServices;
    property SecurityMode: UAMessageSecurityModes read Get_SecurityMode write Set_SecurityMode;
    property HeaderLayoutUriString: WideString read Get_HeaderLayoutUriString write Set_HeaderLayoutUriString;
    property KeepAliveTime: Double read Get_KeepAliveTime write Set_KeepAliveTime;
    property LocaleIds: _StringCollection read Get_LocaleIds write _Set_LocaleIds;
    property MessageParameters: _UAWriterGroupMessageParameters read Get_MessageParameters write _Set_MessageParameters;
    property Priority: Byte read Get_Priority write Set_Priority;
    property PublishingInterval: Double read Get_PublishingInterval write Set_PublishingInterval;
    property TransportParameters: _UAWriterGroupTransportParameters read Get_TransportParameters write _Set_TransportParameters;
    property WriterGroupId: Integer read Get_WriterGroupId write Set_WriterGroupId;
    property DataSetWriters: _UADataSetWriterDataCollection read Get_DataSetWriters;
  end;

// *********************************************************************//
// DispIntf:  _UAWriterGroupDataDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5DA5F2AF-FFBD-4403-8563-477BD4198356}
// *********************************************************************//
  _UAWriterGroupDataDisp = dispinterface
    ['{5DA5F2AF-FFBD-4403-8563-477BD4198356}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property CustomPropertyValueDictionary: _UAKeyValueDictionary dispid 1610743814;
    property Name: WideString dispid 1610743816;
    property Enabled: WordBool dispid 1610743818;
    property MaximumNetworkMessageSize: Int64 dispid 1610743820;
    property MaximumNetworkMessageSizeInt32: Integer dispid 1610743822;
    property securityGroupId: WideString dispid 1610743824;
    property SecurityKeyServices: _UADiscoveryElementCollection dispid 1610743826;
    property SecurityMode: UAMessageSecurityModes dispid 1610743828;
    property HeaderLayoutUriString: WideString dispid 1610743830;
    property KeepAliveTime: Double dispid 1610743832;
    property LocaleIds: _StringCollection dispid 1610743834;
    property MessageParameters: _UAWriterGroupMessageParameters dispid 1610743836;
    property Priority: Byte dispid 1610743838;
    property PublishingInterval: Double dispid 1610743840;
    property TransportParameters: _UAWriterGroupTransportParameters dispid 1610743842;
    property WriterGroupId: Integer dispid 1610743844;
    function ToUAWriterGroupDescriptor: _UAWriterGroupDescriptor; dispid 1610743846;
    property DataSetWriters: _UADataSetWriterDataCollection readonly dispid 1610743847;
  end;

// *********************************************************************//
// Interface: _UAReaderGroupMessageParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {762B8220-DACB-46F2-A4E1-3C1F6BB95C19}
// *********************************************************************//
  _UAReaderGroupMessageParameters = interface(IDispatch)
    ['{762B8220-DACB-46F2-A4E1-3C1F6BB95C19}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
  end;

// *********************************************************************//
// DispIntf:  _UAReaderGroupMessageParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {762B8220-DACB-46F2-A4E1-3C1F6BB95C19}
// *********************************************************************//
  _UAReaderGroupMessageParametersDisp = dispinterface
    ['{762B8220-DACB-46F2-A4E1-3C1F6BB95C19}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
  end;

// *********************************************************************//
// Interface: _UAReaderGroupTransportParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C673BF39-897B-4A47-8552-F2464A9DE90C}
// *********************************************************************//
  _UAReaderGroupTransportParameters = interface(IDispatch)
    ['{C673BF39-897B-4A47-8552-F2464A9DE90C}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
  end;

// *********************************************************************//
// DispIntf:  _UAReaderGroupTransportParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C673BF39-897B-4A47-8552-F2464A9DE90C}
// *********************************************************************//
  _UAReaderGroupTransportParametersDisp = dispinterface
    ['{C673BF39-897B-4A47-8552-F2464A9DE90C}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
  end;

// *********************************************************************//
// Interface: _UAReadOnlyPubSubConfiguration
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FB78014B-B3E9-49D8-9D69-B235BB4A168E}
// *********************************************************************//
  _UAReadOnlyPubSubConfiguration = interface(IDispatch)
    ['{FB78014B-B3E9-49D8-9D69-B235BB4A168E}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function FindConnectionElement(const PubSubConnectionName: WideString): _UAPubSubConnectionElement; safecall;
    function FindDataSetWriterElement(const PubSubConnectionName: WideString; 
                                      const WriterGroupName: WideString; 
                                      const DataSetWriterName: WideString): _UADataSetWriterElement; safecall;
    function FindPublishedDataSetElement(const PublishedDataSetName: WideString; 
                                         DataSetFolderPath: OleVariant): _UAPublishedDataSetElement; safecall;
    function FindWriterGroupElement(const PubSubConnectionName: WideString; 
                                    const WriterGroupName: WideString): _UAWriterGroupElement; safecall;
    function ListAllDataSetWriterLocators: PSafeArray; safecall;
    function GetConnectionElement(const PubSubConnectionName: WideString): _UAPubSubConnectionElement; safecall;
    function GetDataSetWriterElement(const PubSubConnectionName: WideString; 
                                     const WriterGroupName: WideString; 
                                     const DataSetWriterName: WideString): _UADataSetWriterElement; safecall;
    function GetExtensionFieldValue(const PublishedDataSetName: WideString; 
                                    DataSetFolderPath: OleVariant; 
                                    extensionFieldQualifiedName: OleVariant): OleVariant; safecall;
    function GetMultipleExtensionFieldValues(const PublishedDataSetName: WideString; 
                                             DataSetFolderPath: OleVariant; 
                                             extensionFieldQualifiedNameList: OleVariant): PSafeArray; safecall;
    function GetPublishedDataItemsElement(const PublishedDataSetName: WideString; 
                                          DataSetFolderPath: OleVariant): _UAPublishedDataItemsElement; safecall;
    function GetPublishedDataSetElement(DataSetFolderPath: OleVariant; 
                                        const PublishedDataSetName: WideString): _UAPublishedDataSetElement; safecall;
    function GetPublishedDataSetSourceElement(const PublishedDataSetName: WideString; 
                                              DataSetFolderPath: OleVariant): _UAPublishedDataSetSourceElement; safecall;
    function GetPublishedEventsElement(const PublishedDataSetName: WideString; 
                                       DataSetFolderPath: OleVariant): _UAPublishedEventsElement; safecall;
    function GetPubSubConfigurationElement: _UAPubSubConfigurationElement; safecall;
    function GetWriterGroupElement(const PubSubConnectionName: WideString; 
                                   const WriterGroupName: WideString): _UAWriterGroupElement; safecall;
    function HasDataSetFolder(DataSetFolderPath: OleVariant; const dataSetFolderName: WideString): WordBool; safecall;
    function HasExtensionField(const PublishedDataSetName: WideString; 
                               DataSetFolderPath: OleVariant; 
                               extensionFieldQualifiedName: OleVariant): WordBool; safecall;
    function ListAllConnectionDataSetWriterLocators(const PubSubConnectionName: WideString): PSafeArray; safecall;
    function ListAllPublishedDataSetNames: _StringCollection; safecall;
    function ListDataSetFolderNames(DataSetFolderPath: OleVariant): _StringCollection; safecall;
    function ListDataSetWriterNames(const PubSubConnectionName: WideString; 
                                    const WriterGroupName: WideString): _StringCollection; safecall;
    function ListDataSetWriterLocators(const PublishedDataSetName: WideString; 
                                       DataSetFolderPath: OleVariant): PSafeArray; safecall;
    function ListExtensionFieldQualifiedNames(const PublishedDataSetName: WideString; 
                                              DataSetFolderPath: OleVariant): _UAQualifiedNameSet; safecall;
    function ListPublishedDataSetNames(DataSetFolderPath: OleVariant; recursive: WordBool): _StringCollection; safecall;
    function ListConnectionNames: _StringCollection; safecall;
    function ListWriterGroupNames(const PubSubConnectionName: WideString): _StringCollection; safecall;
    function SearchPublishedDataSet(DataSetFolderPath: OleVariant; 
                                    const PublishedDataSetName: WideString): PSafeArray; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
  end;

// *********************************************************************//
// DispIntf:  _UAReadOnlyPubSubConfigurationDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FB78014B-B3E9-49D8-9D69-B235BB4A168E}
// *********************************************************************//
  _UAReadOnlyPubSubConfigurationDisp = dispinterface
    ['{FB78014B-B3E9-49D8-9D69-B235BB4A168E}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function FindConnectionElement(const PubSubConnectionName: WideString): _UAPubSubConnectionElement; dispid 1610743813;
    function FindDataSetWriterElement(const PubSubConnectionName: WideString; 
                                      const WriterGroupName: WideString; 
                                      const DataSetWriterName: WideString): _UADataSetWriterElement; dispid 1610743814;
    function FindPublishedDataSetElement(const PublishedDataSetName: WideString; 
                                         DataSetFolderPath: OleVariant): _UAPublishedDataSetElement; dispid 1610743815;
    function FindWriterGroupElement(const PubSubConnectionName: WideString; 
                                    const WriterGroupName: WideString): _UAWriterGroupElement; dispid 1610743816;
    function ListAllDataSetWriterLocators: {NOT_OLEAUTO(PSafeArray)}OleVariant; dispid 1610743817;
    function GetConnectionElement(const PubSubConnectionName: WideString): _UAPubSubConnectionElement; dispid 1610743818;
    function GetDataSetWriterElement(const PubSubConnectionName: WideString; 
                                     const WriterGroupName: WideString; 
                                     const DataSetWriterName: WideString): _UADataSetWriterElement; dispid 1610743819;
    function GetExtensionFieldValue(const PublishedDataSetName: WideString; 
                                    DataSetFolderPath: OleVariant; 
                                    extensionFieldQualifiedName: OleVariant): OleVariant; dispid 1610743820;
    function GetMultipleExtensionFieldValues(const PublishedDataSetName: WideString; 
                                             DataSetFolderPath: OleVariant; 
                                             extensionFieldQualifiedNameList: OleVariant): {NOT_OLEAUTO(PSafeArray)}OleVariant; dispid 1610743821;
    function GetPublishedDataItemsElement(const PublishedDataSetName: WideString; 
                                          DataSetFolderPath: OleVariant): _UAPublishedDataItemsElement; dispid 1610743822;
    function GetPublishedDataSetElement(DataSetFolderPath: OleVariant; 
                                        const PublishedDataSetName: WideString): _UAPublishedDataSetElement; dispid 1610743823;
    function GetPublishedDataSetSourceElement(const PublishedDataSetName: WideString; 
                                              DataSetFolderPath: OleVariant): _UAPublishedDataSetSourceElement; dispid 1610743824;
    function GetPublishedEventsElement(const PublishedDataSetName: WideString; 
                                       DataSetFolderPath: OleVariant): _UAPublishedEventsElement; dispid 1610743825;
    function GetPubSubConfigurationElement: _UAPubSubConfigurationElement; dispid 1610743826;
    function GetWriterGroupElement(const PubSubConnectionName: WideString; 
                                   const WriterGroupName: WideString): _UAWriterGroupElement; dispid 1610743827;
    function HasDataSetFolder(DataSetFolderPath: OleVariant; const dataSetFolderName: WideString): WordBool; dispid 1610743828;
    function HasExtensionField(const PublishedDataSetName: WideString; 
                               DataSetFolderPath: OleVariant; 
                               extensionFieldQualifiedName: OleVariant): WordBool; dispid 1610743829;
    function ListAllConnectionDataSetWriterLocators(const PubSubConnectionName: WideString): {NOT_OLEAUTO(PSafeArray)}OleVariant; dispid 1610743830;
    function ListAllPublishedDataSetNames: _StringCollection; dispid 1610743831;
    function ListDataSetFolderNames(DataSetFolderPath: OleVariant): _StringCollection; dispid 1610743832;
    function ListDataSetWriterNames(const PubSubConnectionName: WideString; 
                                    const WriterGroupName: WideString): _StringCollection; dispid 1610743833;
    function ListDataSetWriterLocators(const PublishedDataSetName: WideString; 
                                       DataSetFolderPath: OleVariant): {NOT_OLEAUTO(PSafeArray)}OleVariant; dispid 1610743834;
    function ListExtensionFieldQualifiedNames(const PublishedDataSetName: WideString; 
                                              DataSetFolderPath: OleVariant): _UAQualifiedNameSet; dispid 1610743835;
    function ListPublishedDataSetNames(DataSetFolderPath: OleVariant; recursive: WordBool): _StringCollection; dispid 1610743836;
    function ListConnectionNames: _StringCollection; dispid 1610743837;
    function ListWriterGroupNames(const PubSubConnectionName: WideString): _StringCollection; dispid 1610743838;
    function SearchPublishedDataSet(DataSetFolderPath: OleVariant; 
                                    const PublishedDataSetName: WideString): {NOT_OLEAUTO(PSafeArray)}OleVariant; dispid 1610743839;
  end;

// *********************************************************************//
// DispIntf:  DEasyUASubscriberEvents
// Flags:     (4096) Dispatchable
// GUID:      {AB25F585-7859-40FC-9181-E255E8AFD7B6}
// *********************************************************************//
  DEasyUASubscriberEvents = dispinterface
    ['{AB25F585-7859-40FC-9181-E255E8AFD7B6}']
    procedure DataSetMessage(sender0: OleVariant; const eventArgs: _EasyUADataSetMessageEventArgs); dispid 1001;
    procedure EventingFailure(sender0: OleVariant; const eventArgs: _FailureEventArgs); dispid 1002;
    procedure ResolverAccess(sender0: OleVariant; const eventArgs: _EasyUAResolverAccessEventArgs); dispid 1003;
    procedure SubscriptionResolved(sender0: OleVariant; 
                                   const eventArgs: _EasyUASubscriptionResolvedEventArgs); dispid 1004;
  end;

// *********************************************************************//
// DispIntf:  DEasyUASubscriberManagementEvents
// Flags:     (4096) Dispatchable
// GUID:      {78AEB4F6-5242-429A-BCFD-09C055C06CFB}
// *********************************************************************//
  DEasyUASubscriberManagementEvents = dispinterface
    ['{78AEB4F6-5242-429A-BCFD-09C055C06CFB}']
    procedure LogEntry(sender0: OleVariant; const eventArgs: _LogEntryEventArgs); dispid 1001;
  end;

// *********************************************************************//
// Interface: _EasyUASubscriber
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {30C649D2-ED07-40CC-9BC0-3C629B0CFF5B}
// *********************************************************************//
  _EasyUASubscriber = interface(IDispatch)
    ['{30C649D2-ED07-40CC-9BC0-3C629B0CFF5B}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_CustomReference: WideString; safecall;
    procedure Set_CustomReference(const pRetVal: WideString); safecall;
    function Clone: OleVariant; safecall;
    function GetService(const serviceType: _Type): OleVariant; safecall;
    function GetServiceByName(const serviceTypeName: WideString): OleVariant; safecall;
    function ValueEquals(other: OleVariant): WordBool; safecall;
    function Get_NotificationQueueCapacity: Integer; safecall;
    procedure Set_NotificationQueueCapacity(pRetVal: Integer); safecall;
    function Get_NotificationQueueIdleTimeToSleep: Integer; safecall;
    procedure Set_NotificationQueueIdleTimeToSleep(pRetVal: Integer); safecall;
    function Get_QueueNotifications: WordBool; safecall;
    procedure Set_QueueNotifications(pRetVal: WordBool); safecall;
    function Get_AliasProvider: _AliasProvider; safecall;
    procedure _Set_AliasProvider(const pRetVal: _AliasProvider); safecall;
    function Get_InstanceParameters: _EasyUASubscriberInstanceParameters; safecall;
    procedure _Set_InstanceParameters(const pRetVal: _EasyUASubscriberInstanceParameters); safecall;
    function Get_Isolated: WordBool; safecall;
    procedure Set_Isolated(pRetVal: WordBool); safecall;
    function Get_IsolatedParameters: _EasyUASubscriberAdaptableParameters; safecall;
    procedure _Set_IsolatedParameters(const pRetVal: _EasyUASubscriberAdaptableParameters); safecall;
    function Get_LicenseInfo: _StringObjectDictionary; safecall;
    function Get_PullDataSetMessageQueueCapacity: Integer; safecall;
    procedure Set_PullDataSetMessageQueueCapacity(pRetVal: Integer); safecall;
    function Get_PullResolverAccessQueueCapacity: Integer; safecall;
    procedure Set_PullResolverAccessQueueCapacity(pRetVal: Integer); safecall;
    function Get_PullSubscriptionResolvedQueueCapacity: Integer; safecall;
    procedure Set_PullSubscriptionResolvedQueueCapacity(pRetVal: Integer); safecall;
    procedure ChangeDataSetSubscription(dataSetSubscriptionChangeArguments: OleVariant); safecall;
    function GetSubscribeDataSetArguments(dataSetHandle: Integer): _EasyUASubscribeDataSetArguments; safecall;
    function GetSubscribeDataSetArgumentsDictionary: _EasyUASubscribeDataSetArgumentsDictionary; safecall;
    function IsKnownDataSetSubscriptionHandle(dataSetHandle: Integer): WordBool; safecall;
    function PullDataSetMessage(millisecondsTimeout: Integer): _EasyUADataSetMessageEventArgs; safecall;
    function PullDataSetMessageList(maximumCount: Integer; millisecondsTimeout: Integer): _ElasticVector; safecall;
    function PullMultipleDataSetMessages(maximumCount: Integer; millisecondsTimeout: Integer): PSafeArray; safecall;
    function PullMultipleResolverAccesses(maximumCount: Integer; millisecondsTimeout: Integer): PSafeArray; safecall;
    function PullMultipleSubscriptionResolvedNotifications(maximumCount: Integer; 
                                                           millisecondsTimeout: Integer): PSafeArray; safecall;
    function PullResolverAccess(millisecondsTimeout: Integer): _EasyUAResolverAccessEventArgs; safecall;
    function PullResolverAccessList(maximumCount: Integer; millisecondsTimeout: Integer): _ElasticVector; safecall;
    function PullSubscriptionResolved(millisecondsTimeout: Integer): _EasyUASubscriptionResolvedEventArgs; safecall;
    function PullSubscriptionResolvedList(maximumCount: Integer; millisecondsTimeout: Integer): _ElasticVector; safecall;
    procedure Reset; safecall;
    function SubscribeDataSet(subscribeDataSetArguments: OleVariant): Integer; safecall;
    procedure UnsubscribeAllDataSets; safecall;
    procedure UnsubscribeDataSet(dataSetHandle: Integer); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property CustomReference: WideString read Get_CustomReference write Set_CustomReference;
    property NotificationQueueCapacity: Integer read Get_NotificationQueueCapacity write Set_NotificationQueueCapacity;
    property NotificationQueueIdleTimeToSleep: Integer read Get_NotificationQueueIdleTimeToSleep write Set_NotificationQueueIdleTimeToSleep;
    property QueueNotifications: WordBool read Get_QueueNotifications write Set_QueueNotifications;
    property AliasProvider: _AliasProvider read Get_AliasProvider write _Set_AliasProvider;
    property InstanceParameters: _EasyUASubscriberInstanceParameters read Get_InstanceParameters write _Set_InstanceParameters;
    property Isolated: WordBool read Get_Isolated write Set_Isolated;
    property IsolatedParameters: _EasyUASubscriberAdaptableParameters read Get_IsolatedParameters write _Set_IsolatedParameters;
    property LicenseInfo: _StringObjectDictionary read Get_LicenseInfo;
    property PullDataSetMessageQueueCapacity: Integer read Get_PullDataSetMessageQueueCapacity write Set_PullDataSetMessageQueueCapacity;
    property PullResolverAccessQueueCapacity: Integer read Get_PullResolverAccessQueueCapacity write Set_PullResolverAccessQueueCapacity;
    property PullSubscriptionResolvedQueueCapacity: Integer read Get_PullSubscriptionResolvedQueueCapacity write Set_PullSubscriptionResolvedQueueCapacity;
  end;

// *********************************************************************//
// DispIntf:  _EasyUASubscriberDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {30C649D2-ED07-40CC-9BC0-3C629B0CFF5B}
// *********************************************************************//
  _EasyUASubscriberDisp = dispinterface
    ['{30C649D2-ED07-40CC-9BC0-3C629B0CFF5B}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    property CustomReference: WideString dispid 1610743813;
    function Clone: OleVariant; dispid 1610743815;
    function GetService(const serviceType: _Type): OleVariant; dispid 1610743816;
    function GetServiceByName(const serviceTypeName: WideString): OleVariant; dispid 1610743817;
    function ValueEquals(other: OleVariant): WordBool; dispid 1610743818;
    property NotificationQueueCapacity: Integer dispid 1610743819;
    property NotificationQueueIdleTimeToSleep: Integer dispid 1610743821;
    property QueueNotifications: WordBool dispid 1610743823;
    property AliasProvider: _AliasProvider dispid 1610743825;
    property InstanceParameters: _EasyUASubscriberInstanceParameters dispid 1610743827;
    property Isolated: WordBool dispid 1610743829;
    property IsolatedParameters: _EasyUASubscriberAdaptableParameters dispid 1610743831;
    property LicenseInfo: _StringObjectDictionary readonly dispid 1610743833;
    property PullDataSetMessageQueueCapacity: Integer dispid 1610743834;
    property PullResolverAccessQueueCapacity: Integer dispid 1610743836;
    property PullSubscriptionResolvedQueueCapacity: Integer dispid 1610743838;
    procedure ChangeDataSetSubscription(dataSetSubscriptionChangeArguments: OleVariant); dispid 1610743840;
    function GetSubscribeDataSetArguments(dataSetHandle: Integer): _EasyUASubscribeDataSetArguments; dispid 1610743841;
    function GetSubscribeDataSetArgumentsDictionary: _EasyUASubscribeDataSetArgumentsDictionary; dispid 1610743842;
    function IsKnownDataSetSubscriptionHandle(dataSetHandle: Integer): WordBool; dispid 1610743843;
    function PullDataSetMessage(millisecondsTimeout: Integer): _EasyUADataSetMessageEventArgs; dispid 1610743844;
    function PullDataSetMessageList(maximumCount: Integer; millisecondsTimeout: Integer): _ElasticVector; dispid 1610743845;
    function PullMultipleDataSetMessages(maximumCount: Integer; millisecondsTimeout: Integer): {NOT_OLEAUTO(PSafeArray)}OleVariant; dispid 1610743846;
    function PullMultipleResolverAccesses(maximumCount: Integer; millisecondsTimeout: Integer): {NOT_OLEAUTO(PSafeArray)}OleVariant; dispid 1610743847;
    function PullMultipleSubscriptionResolvedNotifications(maximumCount: Integer; 
                                                           millisecondsTimeout: Integer): {NOT_OLEAUTO(PSafeArray)}OleVariant; dispid 1610743848;
    function PullResolverAccess(millisecondsTimeout: Integer): _EasyUAResolverAccessEventArgs; dispid 1610743849;
    function PullResolverAccessList(maximumCount: Integer; millisecondsTimeout: Integer): _ElasticVector; dispid 1610743850;
    function PullSubscriptionResolved(millisecondsTimeout: Integer): _EasyUASubscriptionResolvedEventArgs; dispid 1610743851;
    function PullSubscriptionResolvedList(maximumCount: Integer; millisecondsTimeout: Integer): _ElasticVector; dispid 1610743852;
    procedure Reset; dispid 1610743853;
    function SubscribeDataSet(subscribeDataSetArguments: OleVariant): Integer; dispid 1610743854;
    procedure UnsubscribeAllDataSets; dispid 1610743855;
    procedure UnsubscribeDataSet(dataSetHandle: Integer); dispid 1610743856;
  end;

// *********************************************************************//
// Interface: _EasyUASubscriberManagement
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B40CCFD3-C5B2-4E9A-ADCB-075C89FFB45C}
// *********************************************************************//
  _EasyUASubscriberManagement = interface(IDispatch)
    ['{B40CCFD3-C5B2-4E9A-ADCB-075C89FFB45C}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_CustomReference: WideString; safecall;
    procedure Set_CustomReference(const pRetVal: WideString); safecall;
    function Clone: OleVariant; safecall;
    function GetService(const serviceType: _Type): OleVariant; safecall;
    function GetServiceByName(const serviceTypeName: WideString): OleVariant; safecall;
    function ValueEquals(other: OleVariant): WordBool; safecall;
    function Get_AdaptableParameters: _EasyUASubscriberAdaptableParameters; safecall;
    procedure _Set_AdaptableParameters(const pRetVal: _EasyUASubscriberAdaptableParameters); safecall;
    function Get_SharedInstance: _EasyUASubscriber; safecall;
    function Get_SharedParameters: _EasyUASubscriberSharedParameters; safecall;
    procedure _Set_SharedParameters(const pRetVal: _EasyUASubscriberSharedParameters); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property CustomReference: WideString read Get_CustomReference write Set_CustomReference;
    property AdaptableParameters: _EasyUASubscriberAdaptableParameters read Get_AdaptableParameters write _Set_AdaptableParameters;
    property SharedInstance: _EasyUASubscriber read Get_SharedInstance;
    property SharedParameters: _EasyUASubscriberSharedParameters read Get_SharedParameters write _Set_SharedParameters;
  end;

// *********************************************************************//
// DispIntf:  _EasyUASubscriberManagementDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B40CCFD3-C5B2-4E9A-ADCB-075C89FFB45C}
// *********************************************************************//
  _EasyUASubscriberManagementDisp = dispinterface
    ['{B40CCFD3-C5B2-4E9A-ADCB-075C89FFB45C}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    property CustomReference: WideString dispid 1610743813;
    function Clone: OleVariant; dispid 1610743815;
    function GetService(const serviceType: _Type): OleVariant; dispid 1610743816;
    function GetServiceByName(const serviceTypeName: WideString): OleVariant; dispid 1610743817;
    function ValueEquals(other: OleVariant): WordBool; dispid 1610743818;
    property AdaptableParameters: _EasyUASubscriberAdaptableParameters dispid 1610743819;
    property SharedInstance: _EasyUASubscriber readonly dispid 1610743821;
    property SharedParameters: _EasyUASubscriberSharedParameters dispid 1610743822;
  end;

// *********************************************************************//
// Interface: _UADataSetData
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C6BA7AC5-78F1-4C81-AD6E-0D0D53D4F352}
// *********************************************************************//
  _UADataSetData = interface(IDispatch)
    ['{C6BA7AC5-78F1-4C81-AD6E-0D0D53D4F352}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_DataSetWriterId: Integer; safecall;
    procedure Set_DataSetWriterId(pRetVal: Integer); safecall;
    function Get_DataSetWriterName: WideString; safecall;
    procedure Set_DataSetWriterName(const pRetVal: WideString); safecall;
    function Get_HasDataSetWriterId: WordBool; safecall;
    function Get_HasDataSetWriterName: WordBool; safecall;
    function Get_HasPublisherId: WordBool; safecall;
    function Get_HasWriterGroupId: WordBool; safecall;
    function Get_HasWriterGroupName: WordBool; safecall;
    function Get_PublisherId: _UAPublisherId; safecall;
    procedure _Set_PublisherId(const pRetVal: _UAPublisherId); safecall;
    function Get_WriterGroupId: Integer; safecall;
    procedure Set_WriterGroupId(pRetVal: Integer); safecall;
    function Get_WriterGroupName: WideString; safecall;
    procedure Set_WriterGroupName(const pRetVal: WideString); safecall;
    function CompareTo(other: OleVariant): Integer; safecall;
    function Get_Compressed: WordBool; safecall;
    procedure Set_Compressed(pRetVal: WordBool); safecall;
    function Get_ConfigurationVersion: _UAConfigurationVersion; safecall;
    procedure _Set_ConfigurationVersion(const pRetVal: _UAConfigurationVersion); safecall;
    function Get_DataSetClassId: TGUID; safecall;
    procedure Set_DataSetClassId(pRetVal: TGUID); safecall;
    function Get_DataSetClassIdString: WideString; safecall;
    procedure Set_DataSetClassIdString(const pRetVal: WideString); safecall;
    function Get_Encrypted: WordBool; safecall;
    procedure Set_Encrypted(pRetVal: WordBool); safecall;
    function Get_HasConfigurationVersion: WordBool; safecall;
    function Get_HasDataSetClassId: WordBool; safecall;
    function Get_HasOrigin: WordBool; safecall;
    function Get_MessageMappingName: WideString; safecall;
    procedure Set_MessageMappingName(const pRetVal: WideString); safecall;
    function Get_Origin: OleVariant; safecall;
    procedure _Set_Origin(pRetVal: OleVariant); safecall;
    function Get_Retain: WordBool; safecall;
    procedure Set_Retain(pRetVal: WordBool); safecall;
    function Get_Signed: WordBool; safecall;
    procedure Set_Signed(pRetVal: WordBool); safecall;
    function Get_TransportMappingName: WideString; safecall;
    procedure Set_TransportMappingName(const pRetVal: WideString); safecall;
    procedure SetOrigin(value: OleVariant); safecall;
    function Get_DataSetMetaData: _UADataSetMetaData; safecall;
    procedure _Set_DataSetMetaData(const pRetVal: _UADataSetMetaData); safecall;
    function Get_FieldDataDictionary: _UAStringDataSetFieldDataDictionary; safecall;
    procedure _Set_FieldDataDictionary(const pRetVal: _UAStringDataSetFieldDataDictionary); safecall;
    function Get_FieldDataDictionaryById: _UAGuidDataSetFieldDataDictionary; safecall;
    procedure _Set_FieldDataDictionaryById(const pRetVal: _UAGuidDataSetFieldDataDictionary); safecall;
    function Get_HasDataSetMetaData: WordBool; safecall;
    function Get_HasTimestamp: WordBool; safecall;
    function Get_IsData: WordBool; safecall;
    procedure Set_IsData(pRetVal: WordBool); safecall;
    function Get_IsEvent: WordBool; safecall;
    procedure Set_IsEvent(pRetVal: WordBool); safecall;
    function Get_Picoseconds: Integer; safecall;
    procedure Set_Picoseconds(pRetVal: Integer); safecall;
    function Get_StatusCode: _UAStatusCode; safecall;
    procedure _Set_StatusCode(const pRetVal: _UAStatusCode); safecall;
    function Get_Timestamp: TDateTime; safecall;
    procedure Set_Timestamp(pRetVal: TDateTime); safecall;
    function Get_TimestampDouble: Double; safecall;
    procedure Set_TimestampDouble(pRetVal: Double); safecall;
    function Get_TimestampLocal: TDateTime; safecall;
    procedure Set_TimestampLocal(pRetVal: TDateTime); safecall;
    function Get_TimestampLocalDouble: Double; safecall;
    procedure Set_TimestampLocalDouble(pRetVal: Double); safecall;
    function GetDataSetTypeString: WideString; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DataSetWriterId: Integer read Get_DataSetWriterId write Set_DataSetWriterId;
    property DataSetWriterName: WideString read Get_DataSetWriterName write Set_DataSetWriterName;
    property HasDataSetWriterId: WordBool read Get_HasDataSetWriterId;
    property HasDataSetWriterName: WordBool read Get_HasDataSetWriterName;
    property HasPublisherId: WordBool read Get_HasPublisherId;
    property HasWriterGroupId: WordBool read Get_HasWriterGroupId;
    property HasWriterGroupName: WordBool read Get_HasWriterGroupName;
    property PublisherId: _UAPublisherId read Get_PublisherId write _Set_PublisherId;
    property WriterGroupId: Integer read Get_WriterGroupId write Set_WriterGroupId;
    property WriterGroupName: WideString read Get_WriterGroupName write Set_WriterGroupName;
    property Compressed: WordBool read Get_Compressed write Set_Compressed;
    property ConfigurationVersion: _UAConfigurationVersion read Get_ConfigurationVersion write _Set_ConfigurationVersion;
    property DataSetClassId: TGUID read Get_DataSetClassId write Set_DataSetClassId;
    property DataSetClassIdString: WideString read Get_DataSetClassIdString write Set_DataSetClassIdString;
    property Encrypted: WordBool read Get_Encrypted write Set_Encrypted;
    property HasConfigurationVersion: WordBool read Get_HasConfigurationVersion;
    property HasDataSetClassId: WordBool read Get_HasDataSetClassId;
    property HasOrigin: WordBool read Get_HasOrigin;
    property MessageMappingName: WideString read Get_MessageMappingName write Set_MessageMappingName;
    property Origin: OleVariant read Get_Origin write _Set_Origin;
    property Retain: WordBool read Get_Retain write Set_Retain;
    property Signed: WordBool read Get_Signed write Set_Signed;
    property TransportMappingName: WideString read Get_TransportMappingName write Set_TransportMappingName;
    property DataSetMetaData: _UADataSetMetaData read Get_DataSetMetaData write _Set_DataSetMetaData;
    property FieldDataDictionary: _UAStringDataSetFieldDataDictionary read Get_FieldDataDictionary write _Set_FieldDataDictionary;
    property FieldDataDictionaryById: _UAGuidDataSetFieldDataDictionary read Get_FieldDataDictionaryById write _Set_FieldDataDictionaryById;
    property HasDataSetMetaData: WordBool read Get_HasDataSetMetaData;
    property HasTimestamp: WordBool read Get_HasTimestamp;
    property IsData: WordBool read Get_IsData write Set_IsData;
    property IsEvent: WordBool read Get_IsEvent write Set_IsEvent;
    property Picoseconds: Integer read Get_Picoseconds write Set_Picoseconds;
    property StatusCode: _UAStatusCode read Get_StatusCode write _Set_StatusCode;
    property Timestamp: TDateTime read Get_Timestamp write Set_Timestamp;
    property TimestampDouble: Double read Get_TimestampDouble write Set_TimestampDouble;
    property TimestampLocal: TDateTime read Get_TimestampLocal write Set_TimestampLocal;
    property TimestampLocalDouble: Double read Get_TimestampLocalDouble write Set_TimestampLocalDouble;
  end;

// *********************************************************************//
// DispIntf:  _UADataSetDataDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C6BA7AC5-78F1-4C81-AD6E-0D0D53D4F352}
// *********************************************************************//
  _UADataSetDataDisp = dispinterface
    ['{C6BA7AC5-78F1-4C81-AD6E-0D0D53D4F352}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property DataSetWriterId: Integer dispid 1610743814;
    property DataSetWriterName: WideString dispid 1610743816;
    property HasDataSetWriterId: WordBool readonly dispid 1610743818;
    property HasDataSetWriterName: WordBool readonly dispid 1610743819;
    property HasPublisherId: WordBool readonly dispid 1610743820;
    property HasWriterGroupId: WordBool readonly dispid 1610743821;
    property HasWriterGroupName: WordBool readonly dispid 1610743822;
    property PublisherId: _UAPublisherId dispid 1610743823;
    property WriterGroupId: Integer dispid 1610743825;
    property WriterGroupName: WideString dispid 1610743827;
    function CompareTo(other: OleVariant): Integer; dispid 1610743829;
    property Compressed: WordBool dispid 1610743830;
    property ConfigurationVersion: _UAConfigurationVersion dispid 1610743832;
    property DataSetClassId: {NOT_OLEAUTO(TGUID)}OleVariant dispid 1610743834;
    property DataSetClassIdString: WideString dispid 1610743836;
    property Encrypted: WordBool dispid 1610743838;
    property HasConfigurationVersion: WordBool readonly dispid 1610743840;
    property HasDataSetClassId: WordBool readonly dispid 1610743841;
    property HasOrigin: WordBool readonly dispid 1610743842;
    property MessageMappingName: WideString dispid 1610743843;
    property Origin: OleVariant dispid 1610743845;
    property Retain: WordBool dispid 1610743847;
    property Signed: WordBool dispid 1610743849;
    property TransportMappingName: WideString dispid 1610743851;
    procedure SetOrigin(value: OleVariant); dispid 1610743853;
    property DataSetMetaData: _UADataSetMetaData dispid 1610743854;
    property FieldDataDictionary: _UAStringDataSetFieldDataDictionary dispid 1610743856;
    property FieldDataDictionaryById: _UAGuidDataSetFieldDataDictionary dispid 1610743858;
    property HasDataSetMetaData: WordBool readonly dispid 1610743860;
    property HasTimestamp: WordBool readonly dispid 1610743861;
    property IsData: WordBool dispid 1610743862;
    property IsEvent: WordBool dispid 1610743864;
    property Picoseconds: Integer dispid 1610743866;
    property StatusCode: _UAStatusCode dispid 1610743868;
    property Timestamp: TDateTime dispid 1610743870;
    property TimestampDouble: Double dispid 1610743872;
    property TimestampLocal: TDateTime dispid 1610743874;
    property TimestampLocalDouble: Double dispid 1610743876;
    function GetDataSetTypeString: WideString; dispid 1610743878;
  end;

// *********************************************************************//
// Interface: _UADataSetFieldDescriptor
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2ECD7F80-C6A5-4EFE-BE12-75B351A230E8}
// *********************************************************************//
  _UADataSetFieldDescriptor = interface(IDispatch)
    ['{2ECD7F80-C6A5-4EFE-BE12-75B351A230E8}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_CustomPropertyValueDictionary: _UAKeyValueDictionary; safecall;
    procedure _Set_CustomPropertyValueDictionary(const pRetVal: _UAKeyValueDictionary); safecall;
    function Get_HasName: WordBool; safecall;
    function Get_IsNull: WordBool; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function IsStrictlyPhysical(const TransportProfileUriString: WideString; 
                                assumeTopicTree: WordBool): WordBool; safecall;
    procedure Physicalize(const TransportProfileUriString: WideString; assumeTopicTree: WordBool; 
                          force: WordBool); safecall;
    function RequiresResolution(const TransportProfileUriString: WideString; 
                                assumeTopicTree: WordBool): WordBool; safecall;
    function Get_DataSetFieldId: TGUID; safecall;
    procedure Set_DataSetFieldId(pRetVal: TGUID); safecall;
    function Get_DataSetFieldIdString: WideString; safecall;
    procedure Set_DataSetFieldIdString(const pRetVal: WideString); safecall;
    function Get_HasDataSetFieldId: WordBool; safecall;
    procedure Logicalize; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property CustomPropertyValueDictionary: _UAKeyValueDictionary read Get_CustomPropertyValueDictionary write _Set_CustomPropertyValueDictionary;
    property HasName: WordBool read Get_HasName;
    property IsNull: WordBool read Get_IsNull;
    property Name: WideString read Get_Name write Set_Name;
    property DataSetFieldId: TGUID read Get_DataSetFieldId write Set_DataSetFieldId;
    property DataSetFieldIdString: WideString read Get_DataSetFieldIdString write Set_DataSetFieldIdString;
    property HasDataSetFieldId: WordBool read Get_HasDataSetFieldId;
  end;

// *********************************************************************//
// DispIntf:  _UADataSetFieldDescriptorDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2ECD7F80-C6A5-4EFE-BE12-75B351A230E8}
// *********************************************************************//
  _UADataSetFieldDescriptorDisp = dispinterface
    ['{2ECD7F80-C6A5-4EFE-BE12-75B351A230E8}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property CustomPropertyValueDictionary: _UAKeyValueDictionary dispid 1610743814;
    property HasName: WordBool readonly dispid 1610743816;
    property IsNull: WordBool readonly dispid 1610743817;
    property Name: WideString dispid 1610743818;
    function IsStrictlyPhysical(const TransportProfileUriString: WideString; 
                                assumeTopicTree: WordBool): WordBool; dispid 1610743820;
    procedure Physicalize(const TransportProfileUriString: WideString; assumeTopicTree: WordBool; 
                          force: WordBool); dispid 1610743821;
    function RequiresResolution(const TransportProfileUriString: WideString; 
                                assumeTopicTree: WordBool): WordBool; dispid 1610743822;
    property DataSetFieldId: {NOT_OLEAUTO(TGUID)}OleVariant dispid 1610743823;
    property DataSetFieldIdString: WideString dispid 1610743825;
    property HasDataSetFieldId: WordBool readonly dispid 1610743827;
    procedure Logicalize; dispid 1610743828;
  end;

// *********************************************************************//
// Interface: _UADataSetHeader
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4FA1A49E-CC33-40A1-8CF2-8DBE6E7F2E50}
// *********************************************************************//
  _UADataSetHeader = interface(IDispatch)
    ['{4FA1A49E-CC33-40A1-8CF2-8DBE6E7F2E50}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_DataSetWriterId: Integer; safecall;
    procedure Set_DataSetWriterId(pRetVal: Integer); safecall;
    function Get_DataSetWriterName: WideString; safecall;
    procedure Set_DataSetWriterName(const pRetVal: WideString); safecall;
    function Get_HasDataSetWriterId: WordBool; safecall;
    function Get_HasDataSetWriterName: WordBool; safecall;
    function Get_HasPublisherId: WordBool; safecall;
    function Get_HasWriterGroupId: WordBool; safecall;
    function Get_HasWriterGroupName: WordBool; safecall;
    function Get_PublisherId: _UAPublisherId; safecall;
    procedure _Set_PublisherId(const pRetVal: _UAPublisherId); safecall;
    function Get_WriterGroupId: Integer; safecall;
    procedure Set_WriterGroupId(pRetVal: Integer); safecall;
    function Get_WriterGroupName: WideString; safecall;
    procedure Set_WriterGroupName(const pRetVal: WideString); safecall;
    function CompareTo(other: OleVariant): Integer; safecall;
    function Get_Compressed: WordBool; safecall;
    procedure Set_Compressed(pRetVal: WordBool); safecall;
    function Get_ConfigurationVersion: _UAConfigurationVersion; safecall;
    procedure _Set_ConfigurationVersion(const pRetVal: _UAConfigurationVersion); safecall;
    function Get_DataSetClassId: TGUID; safecall;
    procedure Set_DataSetClassId(pRetVal: TGUID); safecall;
    function Get_DataSetClassIdString: WideString; safecall;
    procedure Set_DataSetClassIdString(const pRetVal: WideString); safecall;
    function Get_Encrypted: WordBool; safecall;
    procedure Set_Encrypted(pRetVal: WordBool); safecall;
    function Get_HasConfigurationVersion: WordBool; safecall;
    function Get_HasDataSetClassId: WordBool; safecall;
    function Get_HasOrigin: WordBool; safecall;
    function Get_MessageMappingName: WideString; safecall;
    procedure Set_MessageMappingName(const pRetVal: WideString); safecall;
    function Get_Origin: OleVariant; safecall;
    procedure _Set_Origin(pRetVal: OleVariant); safecall;
    function Get_Retain: WordBool; safecall;
    procedure Set_Retain(pRetVal: WordBool); safecall;
    function Get_Signed: WordBool; safecall;
    procedure Set_Signed(pRetVal: WordBool); safecall;
    function Get_TransportMappingName: WideString; safecall;
    procedure Set_TransportMappingName(const pRetVal: WideString); safecall;
    procedure SetOrigin(value: OleVariant); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DataSetWriterId: Integer read Get_DataSetWriterId write Set_DataSetWriterId;
    property DataSetWriterName: WideString read Get_DataSetWriterName write Set_DataSetWriterName;
    property HasDataSetWriterId: WordBool read Get_HasDataSetWriterId;
    property HasDataSetWriterName: WordBool read Get_HasDataSetWriterName;
    property HasPublisherId: WordBool read Get_HasPublisherId;
    property HasWriterGroupId: WordBool read Get_HasWriterGroupId;
    property HasWriterGroupName: WordBool read Get_HasWriterGroupName;
    property PublisherId: _UAPublisherId read Get_PublisherId write _Set_PublisherId;
    property WriterGroupId: Integer read Get_WriterGroupId write Set_WriterGroupId;
    property WriterGroupName: WideString read Get_WriterGroupName write Set_WriterGroupName;
    property Compressed: WordBool read Get_Compressed write Set_Compressed;
    property ConfigurationVersion: _UAConfigurationVersion read Get_ConfigurationVersion write _Set_ConfigurationVersion;
    property DataSetClassId: TGUID read Get_DataSetClassId write Set_DataSetClassId;
    property DataSetClassIdString: WideString read Get_DataSetClassIdString write Set_DataSetClassIdString;
    property Encrypted: WordBool read Get_Encrypted write Set_Encrypted;
    property HasConfigurationVersion: WordBool read Get_HasConfigurationVersion;
    property HasDataSetClassId: WordBool read Get_HasDataSetClassId;
    property HasOrigin: WordBool read Get_HasOrigin;
    property MessageMappingName: WideString read Get_MessageMappingName write Set_MessageMappingName;
    property Origin: OleVariant read Get_Origin write _Set_Origin;
    property Retain: WordBool read Get_Retain write Set_Retain;
    property Signed: WordBool read Get_Signed write Set_Signed;
    property TransportMappingName: WideString read Get_TransportMappingName write Set_TransportMappingName;
  end;

// *********************************************************************//
// DispIntf:  _UADataSetHeaderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4FA1A49E-CC33-40A1-8CF2-8DBE6E7F2E50}
// *********************************************************************//
  _UADataSetHeaderDisp = dispinterface
    ['{4FA1A49E-CC33-40A1-8CF2-8DBE6E7F2E50}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property DataSetWriterId: Integer dispid 1610743814;
    property DataSetWriterName: WideString dispid 1610743816;
    property HasDataSetWriterId: WordBool readonly dispid 1610743818;
    property HasDataSetWriterName: WordBool readonly dispid 1610743819;
    property HasPublisherId: WordBool readonly dispid 1610743820;
    property HasWriterGroupId: WordBool readonly dispid 1610743821;
    property HasWriterGroupName: WordBool readonly dispid 1610743822;
    property PublisherId: _UAPublisherId dispid 1610743823;
    property WriterGroupId: Integer dispid 1610743825;
    property WriterGroupName: WideString dispid 1610743827;
    function CompareTo(other: OleVariant): Integer; dispid 1610743829;
    property Compressed: WordBool dispid 1610743830;
    property ConfigurationVersion: _UAConfigurationVersion dispid 1610743832;
    property DataSetClassId: {NOT_OLEAUTO(TGUID)}OleVariant dispid 1610743834;
    property DataSetClassIdString: WideString dispid 1610743836;
    property Encrypted: WordBool dispid 1610743838;
    property HasConfigurationVersion: WordBool readonly dispid 1610743840;
    property HasDataSetClassId: WordBool readonly dispid 1610743841;
    property HasOrigin: WordBool readonly dispid 1610743842;
    property MessageMappingName: WideString dispid 1610743843;
    property Origin: OleVariant dispid 1610743845;
    property Retain: WordBool dispid 1610743847;
    property Signed: WordBool dispid 1610743849;
    property TransportMappingName: WideString dispid 1610743851;
    procedure SetOrigin(value: OleVariant); dispid 1610743853;
  end;

// *********************************************************************//
// Interface: _UAPubSubGroupDescriptor
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8E321A5D-6680-46CC-8980-565AF063C7BB}
// *********************************************************************//
  _UAPubSubGroupDescriptor = interface(IDispatch)
    ['{8E321A5D-6680-46CC-8980-565AF063C7BB}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_CustomPropertyValueDictionary: _UAKeyValueDictionary; safecall;
    procedure _Set_CustomPropertyValueDictionary(const pRetVal: _UAKeyValueDictionary); safecall;
    function Get_HasName: WordBool; safecall;
    function Get_IsNull: WordBool; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function IsStrictlyPhysical(const TransportProfileUriString: WideString; 
                                assumeTopicTree: WordBool): WordBool; safecall;
    procedure Physicalize(const TransportProfileUriString: WideString; assumeTopicTree: WordBool; 
                          force: WordBool); safecall;
    function RequiresResolution(const TransportProfileUriString: WideString; 
                                assumeTopicTree: WordBool): WordBool; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property CustomPropertyValueDictionary: _UAKeyValueDictionary read Get_CustomPropertyValueDictionary write _Set_CustomPropertyValueDictionary;
    property HasName: WordBool read Get_HasName;
    property IsNull: WordBool read Get_IsNull;
    property Name: WideString read Get_Name write Set_Name;
  end;

// *********************************************************************//
// DispIntf:  _UAPubSubGroupDescriptorDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8E321A5D-6680-46CC-8980-565AF063C7BB}
// *********************************************************************//
  _UAPubSubGroupDescriptorDisp = dispinterface
    ['{8E321A5D-6680-46CC-8980-565AF063C7BB}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property CustomPropertyValueDictionary: _UAKeyValueDictionary dispid 1610743814;
    property HasName: WordBool readonly dispid 1610743816;
    property IsNull: WordBool readonly dispid 1610743817;
    property Name: WideString dispid 1610743818;
    function IsStrictlyPhysical(const TransportProfileUriString: WideString; 
                                assumeTopicTree: WordBool): WordBool; dispid 1610743820;
    procedure Physicalize(const TransportProfileUriString: WideString; assumeTopicTree: WordBool; 
                          force: WordBool); dispid 1610743821;
    function RequiresResolution(const TransportProfileUriString: WideString; 
                                assumeTopicTree: WordBool): WordBool; dispid 1610743822;
  end;

// *********************************************************************//
// Interface: _UAServerDtmpParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {715D8226-BC54-4900-A67A-BFCBEB125694}
// *********************************************************************//
  _UAServerDtmpParameters = interface(IDispatch)
    ['{715D8226-BC54-4900-A67A-BFCBEB125694}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
  end;

// *********************************************************************//
// DispIntf:  _UAServerDtmpParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {715D8226-BC54-4900-A67A-BFCBEB125694}
// *********************************************************************//
  _UAServerDtmpParametersDisp = dispinterface
    ['{715D8226-BC54-4900-A67A-BFCBEB125694}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
  end;

// *********************************************************************//
// Interface: _UAServerDtmpPluginParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BEFA3307-B76D-49FA-A238-8C9095330799}
// *********************************************************************//
  _UAServerDtmpPluginParameters = interface(IDispatch)
    ['{BEFA3307-B76D-49FA-A238-8C9095330799}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_ClientSelector: _EasyUAClientSelector; safecall;
    procedure _Set_ClientSelector(const pRetVal: _EasyUAClientSelector); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property ClientSelector: _EasyUAClientSelector read Get_ClientSelector write _Set_ClientSelector;
  end;

// *********************************************************************//
// DispIntf:  _UAServerDtmpPluginParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BEFA3307-B76D-49FA-A238-8C9095330799}
// *********************************************************************//
  _UAServerDtmpPluginParametersDisp = dispinterface
    ['{BEFA3307-B76D-49FA-A238-8C9095330799}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property ClientSelector: _EasyUAClientSelector dispid 1610743816;
  end;

// *********************************************************************//
// Interface: _UAOptimizerPluginParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C7CD4419-5C6D-46F6-9A9E-200C24B6B142}
// *********************************************************************//
  _UAOptimizerPluginParameters = interface(IDispatch)
    ['{C7CD4419-5C6D-46F6-9A9E-200C24B6B142}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_EnableRequestMerging: WordBool; safecall;
    procedure Set_EnableRequestMerging(pRetVal: WordBool); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property EnableRequestMerging: WordBool read Get_EnableRequestMerging write Set_EnableRequestMerging;
  end;

// *********************************************************************//
// DispIntf:  _UAOptimizerPluginParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C7CD4419-5C6D-46F6-9A9E-200C24B6B142}
// *********************************************************************//
  _UAOptimizerPluginParametersDisp = dispinterface
    ['{C7CD4419-5C6D-46F6-9A9E-200C24B6B142}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property EnableRequestMerging: WordBool dispid 1610743816;
  end;

// *********************************************************************//
// Interface: _EasyUAClientComplexData
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9BDDA562-192C-4394-ACF2-E2FE6B168DDB}
// *********************************************************************//
  _EasyUAClientComplexData = interface(IDispatch)
    ['{9BDDA562-192C-4394-ACF2-E2FE6B168DDB}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_DataTypeDefinitionProvider: _UADataTypeDefinitionProvider; safecall;
    function Get_DataTypeDictionaryProvider: _UADataTypeDictionaryProvider; safecall;
    function Get_DataTypeModelProvider: _UADataTypeModelProvider; safecall;
    function Get_ServerTables: _UAServerTables; safecall;
    function FindDataTypeEncodingId(encodingNodeElementCollection: OleVariant; 
                                    extensionObjectType: UAExtensionObjectType): _ValueResult; safecall;
    function FindDataTypeSystem(encodingName: OleVariant): _UADataTypeSystem; safecall;
    function ResolveDataType(DataTypeId: OleVariant; encodingName: OleVariant): _ValueResult; safecall;
    function ResolveDataTypes(dataTypeIdList: OleVariant; encodingName: OleVariant): PSafeArray; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DataTypeDefinitionProvider: _UADataTypeDefinitionProvider read Get_DataTypeDefinitionProvider;
    property DataTypeDictionaryProvider: _UADataTypeDictionaryProvider read Get_DataTypeDictionaryProvider;
    property DataTypeModelProvider: _UADataTypeModelProvider read Get_DataTypeModelProvider;
    property ServerTables: _UAServerTables read Get_ServerTables;
  end;

// *********************************************************************//
// DispIntf:  _EasyUAClientComplexDataDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9BDDA562-192C-4394-ACF2-E2FE6B168DDB}
// *********************************************************************//
  _EasyUAClientComplexDataDisp = dispinterface
    ['{9BDDA562-192C-4394-ACF2-E2FE6B168DDB}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    property DataTypeDefinitionProvider: _UADataTypeDefinitionProvider readonly dispid 1610743813;
    property DataTypeDictionaryProvider: _UADataTypeDictionaryProvider readonly dispid 1610743814;
    property DataTypeModelProvider: _UADataTypeModelProvider readonly dispid 1610743815;
    property ServerTables: _UAServerTables readonly dispid 1610743816;
    function FindDataTypeEncodingId(encodingNodeElementCollection: OleVariant; 
                                    extensionObjectType: UAExtensionObjectType): _ValueResult; dispid 1610743817;
    function FindDataTypeSystem(encodingName: OleVariant): _UADataTypeSystem; dispid 1610743818;
    function ResolveDataType(DataTypeId: OleVariant; encodingName: OleVariant): _ValueResult; dispid 1610743819;
    function ResolveDataTypes(dataTypeIdList: OleVariant; encodingName: OleVariant): {NOT_OLEAUTO(PSafeArray)}OleVariant; dispid 1610743820;
  end;

// *********************************************************************//
// Interface: _UAComplexDataParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A30C4F5C-981B-4705-BB41-79BDA441BE67}
// *********************************************************************//
  _UAComplexDataParameters = interface(IDispatch)
    ['{A30C4F5C-981B-4705-BB41-79BDA441BE67}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_TryResolveMissingDataTypeEncodingIds: WordBool; safecall;
    procedure Set_TryResolveMissingDataTypeEncodingIds(pRetVal: WordBool); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property TryResolveMissingDataTypeEncodingIds: WordBool read Get_TryResolveMissingDataTypeEncodingIds write Set_TryResolveMissingDataTypeEncodingIds;
  end;

// *********************************************************************//
// DispIntf:  _UAComplexDataParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A30C4F5C-981B-4705-BB41-79BDA441BE67}
// *********************************************************************//
  _UAComplexDataParametersDisp = dispinterface
    ['{A30C4F5C-981B-4705-BB41-79BDA441BE67}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property TryResolveMissingDataTypeEncodingIds: WordBool dispid 1610743816;
  end;

// *********************************************************************//
// Interface: _UAComplexDataSubscriberPluginParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6CFF89F1-3517-4259-8EFE-73F2FFA41AC4}
// *********************************************************************//
  _UAComplexDataSubscriberPluginParameters = interface(IDispatch)
    ['{6CFF89F1-3517-4259-8EFE-73F2FFA41AC4}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_TryResolveMissingDataTypeEncodingIds: WordBool; safecall;
    procedure Set_TryResolveMissingDataTypeEncodingIds(pRetVal: WordBool); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property TryResolveMissingDataTypeEncodingIds: WordBool read Get_TryResolveMissingDataTypeEncodingIds write Set_TryResolveMissingDataTypeEncodingIds;
  end;

// *********************************************************************//
// DispIntf:  _UAComplexDataSubscriberPluginParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6CFF89F1-3517-4259-8EFE-73F2FFA41AC4}
// *********************************************************************//
  _UAComplexDataSubscriberPluginParametersDisp = dispinterface
    ['{6CFF89F1-3517-4259-8EFE-73F2FFA41AC4}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property TryResolveMissingDataTypeEncodingIds: WordBool dispid 1610743816;
  end;

// *********************************************************************//
// Interface: _UAComplexDataClientPluginParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2CBDA1F2-B1D6-4D92-A9D0-DE86F91F868D}
// *********************************************************************//
  _UAComplexDataClientPluginParameters = interface(IDispatch)
    ['{2CBDA1F2-B1D6-4D92-A9D0-DE86F91F868D}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_TryResolveMissingDataTypeEncodingIds: WordBool; safecall;
    procedure Set_TryResolveMissingDataTypeEncodingIds(pRetVal: WordBool); safecall;
    function Get_IsolatedDataTypeModelProvider: WordBool; safecall;
    procedure Set_IsolatedDataTypeModelProvider(pRetVal: WordBool); safecall;
    function Get_ThisClientForProviderOperations: WordBool; safecall;
    procedure Set_ThisClientForProviderOperations(pRetVal: WordBool); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property TryResolveMissingDataTypeEncodingIds: WordBool read Get_TryResolveMissingDataTypeEncodingIds write Set_TryResolveMissingDataTypeEncodingIds;
    property IsolatedDataTypeModelProvider: WordBool read Get_IsolatedDataTypeModelProvider write Set_IsolatedDataTypeModelProvider;
    property ThisClientForProviderOperations: WordBool read Get_ThisClientForProviderOperations write Set_ThisClientForProviderOperations;
  end;

// *********************************************************************//
// DispIntf:  _UAComplexDataClientPluginParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2CBDA1F2-B1D6-4D92-A9D0-DE86F91F868D}
// *********************************************************************//
  _UAComplexDataClientPluginParametersDisp = dispinterface
    ['{2CBDA1F2-B1D6-4D92-A9D0-DE86F91F868D}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property TryResolveMissingDataTypeEncodingIds: WordBool dispid 1610743816;
    property IsolatedDataTypeModelProvider: WordBool dispid 1610743818;
    property ThisClientForProviderOperations: WordBool dispid 1610743820;
  end;

// *********************************************************************//
// Interface: _UAIndexRangeListFormatException
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D801DA24-F1EC-467C-A285-BB550B14595A}
// *********************************************************************//
  _UAIndexRangeListFormatException = interface(IDispatch)
    ['{D801DA24-F1EC-467C-A285-BB550B14595A}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_Message: WideString; safecall;
    function Get_StackTrace: WideString; safecall;
    function Get_HelpLink: WideString; safecall;
    procedure Set_HelpLink(const pRetVal: WideString); safecall;
    function Get_Source: WideString; safecall;
    procedure Set_Source(const pRetVal: WideString); safecall;
    function Get_InnerException: _Exception; safecall;
    function Get_TargetSite: _MethodBase; safecall;
    function GetBaseException: _Exception; safecall;
    procedure GetObjectData(const info: _SerializationInfo; context: StreamingContext); safecall;
    function Get_Data: _Dictionary; safecall;
    function Get_HResult: Integer; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Message: WideString read Get_Message;
    property StackTrace: WideString read Get_StackTrace;
    property HelpLink: WideString read Get_HelpLink write Set_HelpLink;
    property Source: WideString read Get_Source write Set_Source;
    property InnerException: _Exception read Get_InnerException;
    property TargetSite: _MethodBase read Get_TargetSite;
    property Data: _Dictionary read Get_Data;
    property HResult: Integer read Get_HResult;
  end;

// *********************************************************************//
// DispIntf:  _UAIndexRangeListFormatExceptionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D801DA24-F1EC-467C-A285-BB550B14595A}
// *********************************************************************//
  _UAIndexRangeListFormatExceptionDisp = dispinterface
    ['{D801DA24-F1EC-467C-A285-BB550B14595A}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    property Message: WideString readonly dispid 1610743813;
    property StackTrace: WideString readonly dispid 1610743814;
    property HelpLink: WideString dispid 1610743815;
    property Source: WideString dispid 1610743817;
    property InnerException: _Exception readonly dispid 1610743819;
    property TargetSite: _MethodBase readonly dispid 1610743820;
    function GetBaseException: _Exception; dispid 1610743821;
    procedure GetObjectData(const info: _SerializationInfo; 
                            context: {NOT_OLEAUTO(StreamingContext)}OleVariant); dispid 1610743822;
    property Data: _Dictionary readonly dispid 1610743823;
    property HResult: Integer readonly dispid 1610743824;
  end;

// *********************************************************************//
// Interface: _UAIndexRangeListParser
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2D049F8D-01D9-4D55-8311-1F9E4F5389CA}
// *********************************************************************//
  _UAIndexRangeListParser = interface(IDispatch)
    ['{2D049F8D-01D9-4D55-8311-1F9E4F5389CA}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Parse(const formattedText: WideString): _UAIndexRangeList; safecall;
    function TryParse(const s: WideString; out IndexRangeList: OleVariant): _StringParsingError; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
  end;

// *********************************************************************//
// DispIntf:  _UAIndexRangeListParserDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2D049F8D-01D9-4D55-8311-1F9E4F5389CA}
// *********************************************************************//
  _UAIndexRangeListParserDisp = dispinterface
    ['{2D049F8D-01D9-4D55-8311-1F9E4F5389CA}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Parse(const formattedText: WideString): _UAIndexRangeList; dispid 1610743813;
    function TryParse(const s: WideString; out IndexRangeList: OleVariant): _StringParsingError; dispid 1610743814;
  end;

// *********************************************************************//
// Interface: _UAException
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E19D2275-9541-41D0-8259-F2BEAA38E730}
// *********************************************************************//
  _UAException = interface(IDispatch)
    ['{E19D2275-9541-41D0-8259-F2BEAA38E730}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_Message: WideString; safecall;
    function Get_StackTrace: WideString; safecall;
    function Get_HelpLink: WideString; safecall;
    procedure Set_HelpLink(const pRetVal: WideString); safecall;
    function Get_Source: WideString; safecall;
    procedure Set_Source(const pRetVal: WideString); safecall;
    function Get_InnerException: _Exception; safecall;
    function Get_TargetSite: _MethodBase; safecall;
    function GetBaseException: _Exception; safecall;
    procedure GetObjectData(const info: _SerializationInfo; context: StreamingContext); safecall;
    function Get_Data: _Dictionary; safecall;
    function Get_HResult: Integer; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Message: WideString read Get_Message;
    property StackTrace: WideString read Get_StackTrace;
    property HelpLink: WideString read Get_HelpLink write Set_HelpLink;
    property Source: WideString read Get_Source write Set_Source;
    property InnerException: _Exception read Get_InnerException;
    property TargetSite: _MethodBase read Get_TargetSite;
    property Data: _Dictionary read Get_Data;
    property HResult: Integer read Get_HResult;
  end;

// *********************************************************************//
// DispIntf:  _UAExceptionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E19D2275-9541-41D0-8259-F2BEAA38E730}
// *********************************************************************//
  _UAExceptionDisp = dispinterface
    ['{E19D2275-9541-41D0-8259-F2BEAA38E730}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    property Message: WideString readonly dispid 1610743813;
    property StackTrace: WideString readonly dispid 1610743814;
    property HelpLink: WideString dispid 1610743815;
    property Source: WideString dispid 1610743817;
    property InnerException: _Exception readonly dispid 1610743819;
    property TargetSite: _MethodBase readonly dispid 1610743820;
    function GetBaseException: _Exception; dispid 1610743821;
    procedure GetObjectData(const info: _SerializationInfo; 
                            context: {NOT_OLEAUTO(StreamingContext)}OleVariant); dispid 1610743822;
    property Data: _Dictionary readonly dispid 1610743823;
    property HResult: Integer readonly dispid 1610743824;
  end;

// *********************************************************************//
// Interface: _UALogicalException
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2D982E27-85C5-4A8E-8B99-9A00AC9E2D3C}
// *********************************************************************//
  _UALogicalException = interface(IDispatch)
    ['{2D982E27-85C5-4A8E-8B99-9A00AC9E2D3C}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_Message: WideString; safecall;
    function Get_StackTrace: WideString; safecall;
    function Get_HelpLink: WideString; safecall;
    procedure Set_HelpLink(const pRetVal: WideString); safecall;
    function Get_Source: WideString; safecall;
    procedure Set_Source(const pRetVal: WideString); safecall;
    function Get_InnerException: _Exception; safecall;
    function Get_TargetSite: _MethodBase; safecall;
    function GetBaseException: _Exception; safecall;
    procedure GetObjectData(const info: _SerializationInfo; context: StreamingContext); safecall;
    function Get_Data: _Dictionary; safecall;
    function Get_HResult: Integer; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Message: WideString read Get_Message;
    property StackTrace: WideString read Get_StackTrace;
    property HelpLink: WideString read Get_HelpLink write Set_HelpLink;
    property Source: WideString read Get_Source write Set_Source;
    property InnerException: _Exception read Get_InnerException;
    property TargetSite: _MethodBase read Get_TargetSite;
    property Data: _Dictionary read Get_Data;
    property HResult: Integer read Get_HResult;
  end;

// *********************************************************************//
// DispIntf:  _UALogicalExceptionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2D982E27-85C5-4A8E-8B99-9A00AC9E2D3C}
// *********************************************************************//
  _UALogicalExceptionDisp = dispinterface
    ['{2D982E27-85C5-4A8E-8B99-9A00AC9E2D3C}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    property Message: WideString readonly dispid 1610743813;
    property StackTrace: WideString readonly dispid 1610743814;
    property HelpLink: WideString dispid 1610743815;
    property Source: WideString dispid 1610743817;
    property InnerException: _Exception readonly dispid 1610743819;
    property TargetSite: _MethodBase readonly dispid 1610743820;
    function GetBaseException: _Exception; dispid 1610743821;
    procedure GetObjectData(const info: _SerializationInfo; 
                            context: {NOT_OLEAUTO(StreamingContext)}OleVariant); dispid 1610743822;
    property Data: _Dictionary readonly dispid 1610743823;
    property HResult: Integer readonly dispid 1610743824;
  end;

// *********************************************************************//
// Interface: _UANodeArguments
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {967B94A7-9081-4F7F-A66F-66C4C52BB55F}
// *********************************************************************//
  _UANodeArguments = interface(IDispatch)
    ['{967B94A7-9081-4F7F-A66F-66C4C52BB55F}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_State: OleVariant; safecall;
    procedure _Set_State(pRetVal: OleVariant); safecall;
    function MemberwiseClone: _OperationArguments; safecall;
    procedure SetState(State: OleVariant); safecall;
    function Get_endpointDescriptor: _UAEndpointDescriptor; safecall;
    procedure _Set_endpointDescriptor(const pRetVal: _UAEndpointDescriptor); safecall;
    function Get_NodeDescriptor: _UANodeDescriptor; safecall;
    procedure _Set_NodeDescriptor(const pRetVal: _UANodeDescriptor); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property State: OleVariant read Get_State write _Set_State;
    property endpointDescriptor: _UAEndpointDescriptor read Get_endpointDescriptor write _Set_endpointDescriptor;
    property NodeDescriptor: _UANodeDescriptor read Get_NodeDescriptor write _Set_NodeDescriptor;
  end;

// *********************************************************************//
// DispIntf:  _UANodeArgumentsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {967B94A7-9081-4F7F-A66F-66C4C52BB55F}
// *********************************************************************//
  _UANodeArgumentsDisp = dispinterface
    ['{967B94A7-9081-4F7F-A66F-66C4C52BB55F}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property State: OleVariant dispid 1610743814;
    function MemberwiseClone: _OperationArguments; dispid 1610743816;
    procedure SetState(State: OleVariant); dispid 1610743817;
    property endpointDescriptor: _UAEndpointDescriptor dispid 1610743818;
    property NodeDescriptor: _UANodeDescriptor dispid 1610743820;
  end;

// *********************************************************************//
// Interface: _EasyUAMonitoredItemArgumentsDictionary
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C5A59EF9-A3FD-4153-9BA0-F8C73875FE3D}
// *********************************************************************//
  _EasyUAMonitoredItemArgumentsDictionary = interface(IDispatch)
    ['{C5A59EF9-A3FD-4153-9BA0-F8C73875FE3D}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_Item(key: Integer): _EasyUAMonitoredItemArguments; safecall;
    procedure _Set_Item(key: Integer; const pRetVal: _EasyUAMonitoredItemArguments); safecall;
    function Get_Count: Integer; safecall;
    function GetEnumerator: IEnumVARIANT; safecall;
    procedure Add(key: Integer; Item: OleVariant); safecall;
    procedure Clear; safecall;
    function ContainsKey(key: Integer): WordBool; safecall;
    function Remove(key: Integer): WordBool; safecall;
    function TryGetValue(key: Integer; out value: OleVariant): WordBool; safecall;
    function ContainsValue(value: OleVariant): WordBool; safecall;
    property ToString: WideString read Get_ToString;
    property Item[key: Integer]: _EasyUAMonitoredItemArguments read Get_Item write _Set_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  _EasyUAMonitoredItemArgumentsDictionaryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C5A59EF9-A3FD-4153-9BA0-F8C73875FE3D}
// *********************************************************************//
  _EasyUAMonitoredItemArgumentsDictionaryDisp = dispinterface
    ['{C5A59EF9-A3FD-4153-9BA0-F8C73875FE3D}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property Item[key: Integer]: _EasyUAMonitoredItemArguments dispid 0; default;
    property Count: Integer readonly dispid 1610743814;
    function GetEnumerator: IEnumVARIANT; dispid -4;
    procedure Add(key: Integer; Item: OleVariant); dispid 1610743816;
    procedure Clear; dispid 1610743817;
    function ContainsKey(key: Integer): WordBool; dispid 1610743818;
    function Remove(key: Integer): WordBool; dispid 1610743819;
    function TryGetValue(key: Integer; out value: OleVariant): WordBool; dispid 1610743820;
    function ContainsValue(value: OleVariant): WordBool; dispid 1610743821;
  end;

// *********************************************************************//
// Interface: _EasyUASubscriptionChangeArguments
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1B51E462-0760-4A19-8BDA-21AB5A5BA428}
// *********************************************************************//
  _EasyUASubscriptionChangeArguments = interface(IDispatch)
    ['{1B51E462-0760-4A19-8BDA-21AB5A5BA428}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_State: OleVariant; safecall;
    procedure _Set_State(pRetVal: OleVariant); safecall;
    function MemberwiseClone: _OperationArguments; safecall;
    procedure SetState(State: OleVariant); safecall;
    function Get_Handle: Integer; safecall;
    procedure Set_Handle(pRetVal: Integer); safecall;
    function Get_AutoConditionRefresh: WordBool; safecall;
    procedure Set_AutoConditionRefresh(pRetVal: WordBool); safecall;
    function Get_MonitoringParameters: _UAMonitoringParameters; safecall;
    procedure _Set_MonitoringParameters(const pRetVal: _UAMonitoringParameters); safecall;
    function Get_SubscriptionParameters: _UASubscriptionParameters; safecall;
    procedure _Set_SubscriptionParameters(const pRetVal: _UASubscriptionParameters); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property State: OleVariant read Get_State write _Set_State;
    property Handle: Integer read Get_Handle write Set_Handle;
    property AutoConditionRefresh: WordBool read Get_AutoConditionRefresh write Set_AutoConditionRefresh;
    property MonitoringParameters: _UAMonitoringParameters read Get_MonitoringParameters write _Set_MonitoringParameters;
    property SubscriptionParameters: _UASubscriptionParameters read Get_SubscriptionParameters write _Set_SubscriptionParameters;
  end;

// *********************************************************************//
// DispIntf:  _EasyUASubscriptionChangeArgumentsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1B51E462-0760-4A19-8BDA-21AB5A5BA428}
// *********************************************************************//
  _EasyUASubscriptionChangeArgumentsDisp = dispinterface
    ['{1B51E462-0760-4A19-8BDA-21AB5A5BA428}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property State: OleVariant dispid 1610743814;
    function MemberwiseClone: _OperationArguments; dispid 1610743816;
    procedure SetState(State: OleVariant); dispid 1610743817;
    property Handle: Integer dispid 1610743818;
    property AutoConditionRefresh: WordBool dispid 1610743820;
    property MonitoringParameters: _UAMonitoringParameters dispid 1610743822;
    property SubscriptionParameters: _UASubscriptionParameters dispid 1610743824;
  end;

// *********************************************************************//
// Interface: _UAAttributeArguments
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7FCFB434-2C79-46BE-8B17-265CFAE8632B}
// *********************************************************************//
  _UAAttributeArguments = interface(IDispatch)
    ['{7FCFB434-2C79-46BE-8B17-265CFAE8632B}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_State: OleVariant; safecall;
    procedure _Set_State(pRetVal: OleVariant); safecall;
    function MemberwiseClone: _OperationArguments; safecall;
    procedure SetState(State: OleVariant); safecall;
    function Get_endpointDescriptor: _UAEndpointDescriptor; safecall;
    procedure _Set_endpointDescriptor(const pRetVal: _UAEndpointDescriptor); safecall;
    function Get_NodeDescriptor: _UANodeDescriptor; safecall;
    procedure _Set_NodeDescriptor(const pRetVal: _UANodeDescriptor); safecall;
    function Get_AttributeId: UAAttributeId; safecall;
    procedure Set_AttributeId(pRetVal: UAAttributeId); safecall;
    function Get_IndexRangeList: _UAIndexRangeList; safecall;
    procedure _Set_IndexRangeList(const pRetVal: _UAIndexRangeList); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property State: OleVariant read Get_State write _Set_State;
    property endpointDescriptor: _UAEndpointDescriptor read Get_endpointDescriptor write _Set_endpointDescriptor;
    property NodeDescriptor: _UANodeDescriptor read Get_NodeDescriptor write _Set_NodeDescriptor;
    property AttributeId: UAAttributeId read Get_AttributeId write Set_AttributeId;
    property IndexRangeList: _UAIndexRangeList read Get_IndexRangeList write _Set_IndexRangeList;
  end;

// *********************************************************************//
// DispIntf:  _UAAttributeArgumentsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7FCFB434-2C79-46BE-8B17-265CFAE8632B}
// *********************************************************************//
  _UAAttributeArgumentsDisp = dispinterface
    ['{7FCFB434-2C79-46BE-8B17-265CFAE8632B}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property State: OleVariant dispid 1610743814;
    function MemberwiseClone: _OperationArguments; dispid 1610743816;
    procedure SetState(State: OleVariant); dispid 1610743817;
    property endpointDescriptor: _UAEndpointDescriptor dispid 1610743818;
    property NodeDescriptor: _UANodeDescriptor dispid 1610743820;
    property AttributeId: UAAttributeId dispid 1610743822;
    property IndexRangeList: _UAIndexRangeList dispid 1610743824;
  end;

// *********************************************************************//
// Interface: _UABrowseArguments
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {CF31BF5E-0323-40C7-B17A-5CC08AB3F5BB}
// *********************************************************************//
  _UABrowseArguments = interface(IDispatch)
    ['{CF31BF5E-0323-40C7-B17A-5CC08AB3F5BB}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_State: OleVariant; safecall;
    procedure _Set_State(pRetVal: OleVariant); safecall;
    function MemberwiseClone: _OperationArguments; safecall;
    procedure SetState(State: OleVariant); safecall;
    function Get_endpointDescriptor: _UAEndpointDescriptor; safecall;
    procedure _Set_endpointDescriptor(const pRetVal: _UAEndpointDescriptor); safecall;
    function Get_NodeDescriptor: _UANodeDescriptor; safecall;
    procedure _Set_NodeDescriptor(const pRetVal: _UANodeDescriptor); safecall;
    function Get_BrowseParameters: _UABrowseParameters; safecall;
    procedure _Set_BrowseParameters(const pRetVal: _UABrowseParameters); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property State: OleVariant read Get_State write _Set_State;
    property endpointDescriptor: _UAEndpointDescriptor read Get_endpointDescriptor write _Set_endpointDescriptor;
    property NodeDescriptor: _UANodeDescriptor read Get_NodeDescriptor write _Set_NodeDescriptor;
    property BrowseParameters: _UABrowseParameters read Get_BrowseParameters write _Set_BrowseParameters;
  end;

// *********************************************************************//
// DispIntf:  _UABrowseArgumentsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {CF31BF5E-0323-40C7-B17A-5CC08AB3F5BB}
// *********************************************************************//
  _UABrowseArgumentsDisp = dispinterface
    ['{CF31BF5E-0323-40C7-B17A-5CC08AB3F5BB}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property State: OleVariant dispid 1610743814;
    function MemberwiseClone: _OperationArguments; dispid 1610743816;
    procedure SetState(State: OleVariant); dispid 1610743817;
    property endpointDescriptor: _UAEndpointDescriptor dispid 1610743818;
    property NodeDescriptor: _UANodeDescriptor dispid 1610743820;
    property BrowseParameters: _UABrowseParameters dispid 1610743822;
  end;

// *********************************************************************//
// Interface: _UACallArguments
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {06EECC23-3211-48FB-B2AC-8C40396703B5}
// *********************************************************************//
  _UACallArguments = interface(IDispatch)
    ['{06EECC23-3211-48FB-B2AC-8C40396703B5}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_State: OleVariant; safecall;
    procedure _Set_State(pRetVal: OleVariant); safecall;
    function MemberwiseClone: _OperationArguments; safecall;
    procedure SetState(State: OleVariant); safecall;
    function Get_endpointDescriptor: _UAEndpointDescriptor; safecall;
    procedure _Set_endpointDescriptor(const pRetVal: _UAEndpointDescriptor); safecall;
    function Get_NodeDescriptor: _UANodeDescriptor; safecall;
    procedure _Set_NodeDescriptor(const pRetVal: _UANodeDescriptor); safecall;
    function Get_InputArguments: PSafeArray; safecall;
    procedure Set_InputArguments(pRetVal: PSafeArray); safecall;
    function Get_InputTypeCodes: OleVariant; safecall;
    procedure _Set_InputTypeCodes(pRetVal: OleVariant); safecall;
    function Get_InputTypeFullNames: OleVariant; safecall;
    procedure _Set_InputTypeFullNames(pRetVal: OleVariant); safecall;
    function Get_InputTypes: OleVariant; safecall;
    procedure _Set_InputTypes(pRetVal: OleVariant); safecall;
    function Get_MethodNodeDescriptor: _UANodeDescriptor; safecall;
    procedure _Set_MethodNodeDescriptor(const pRetVal: _UANodeDescriptor); safecall;
    procedure SetInputArguments(InputArguments: OleVariant); safecall;
    procedure SetInputTypeCodes(InputTypeCodes: OleVariant); safecall;
    procedure SetInputTypeFullNames(var InputTypeFullNames: PSafeArray); safecall;
    procedure SetInputTypes(var InputTypes: PSafeArray); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property State: OleVariant read Get_State write _Set_State;
    property endpointDescriptor: _UAEndpointDescriptor read Get_endpointDescriptor write _Set_endpointDescriptor;
    property NodeDescriptor: _UANodeDescriptor read Get_NodeDescriptor write _Set_NodeDescriptor;
    property InputArguments: PSafeArray read Get_InputArguments write Set_InputArguments;
    property InputTypeCodes: OleVariant read Get_InputTypeCodes write _Set_InputTypeCodes;
    property InputTypeFullNames: OleVariant read Get_InputTypeFullNames write _Set_InputTypeFullNames;
    property InputTypes: OleVariant read Get_InputTypes write _Set_InputTypes;
    property MethodNodeDescriptor: _UANodeDescriptor read Get_MethodNodeDescriptor write _Set_MethodNodeDescriptor;
  end;

// *********************************************************************//
// DispIntf:  _UACallArgumentsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {06EECC23-3211-48FB-B2AC-8C40396703B5}
// *********************************************************************//
  _UACallArgumentsDisp = dispinterface
    ['{06EECC23-3211-48FB-B2AC-8C40396703B5}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property State: OleVariant dispid 1610743814;
    function MemberwiseClone: _OperationArguments; dispid 1610743816;
    procedure SetState(State: OleVariant); dispid 1610743817;
    property endpointDescriptor: _UAEndpointDescriptor dispid 1610743818;
    property NodeDescriptor: _UANodeDescriptor dispid 1610743820;
    property InputArguments: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 1610743822;
    property InputTypeCodes: OleVariant dispid 1610743824;
    property InputTypeFullNames: OleVariant dispid 1610743826;
    property InputTypes: OleVariant dispid 1610743828;
    property MethodNodeDescriptor: _UANodeDescriptor dispid 1610743830;
    procedure SetInputArguments(InputArguments: OleVariant); dispid 1610743832;
    procedure SetInputTypeCodes(InputTypeCodes: OleVariant); dispid 1610743833;
    procedure SetInputTypeFullNames(var InputTypeFullNames: {NOT_OLEAUTO(PSafeArray)}OleVariant); dispid 1610743834;
    procedure SetInputTypes(var InputTypes: {NOT_OLEAUTO(PSafeArray)}OleVariant); dispid 1610743835;
  end;

// *********************************************************************//
// Interface: _UAMonitoredItemArguments
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4851E2D1-C678-473C-81BE-8318555601B5}
// *********************************************************************//
  _UAMonitoredItemArguments = interface(IDispatch)
    ['{4851E2D1-C678-473C-81BE-8318555601B5}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_State: OleVariant; safecall;
    procedure _Set_State(pRetVal: OleVariant); safecall;
    function MemberwiseClone: _OperationArguments; safecall;
    procedure SetState(State: OleVariant); safecall;
    function Get_endpointDescriptor: _UAEndpointDescriptor; safecall;
    procedure _Set_endpointDescriptor(const pRetVal: _UAEndpointDescriptor); safecall;
    function Get_NodeDescriptor: _UANodeDescriptor; safecall;
    procedure _Set_NodeDescriptor(const pRetVal: _UANodeDescriptor); safecall;
    function Get_AttributeId: UAAttributeId; safecall;
    procedure Set_AttributeId(pRetVal: UAAttributeId); safecall;
    function Get_IndexRangeList: _UAIndexRangeList; safecall;
    procedure _Set_IndexRangeList(const pRetVal: _UAIndexRangeList); safecall;
    function Get_AutoConditionRefresh: WordBool; safecall;
    procedure Set_AutoConditionRefresh(pRetVal: WordBool); safecall;
    function Get_MonitoringParameters: _UAMonitoringParameters; safecall;
    procedure _Set_MonitoringParameters(const pRetVal: _UAMonitoringParameters); safecall;
    function Get_SubscriptionParameters: _UASubscriptionParameters; safecall;
    procedure _Set_SubscriptionParameters(const pRetVal: _UASubscriptionParameters); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property State: OleVariant read Get_State write _Set_State;
    property endpointDescriptor: _UAEndpointDescriptor read Get_endpointDescriptor write _Set_endpointDescriptor;
    property NodeDescriptor: _UANodeDescriptor read Get_NodeDescriptor write _Set_NodeDescriptor;
    property AttributeId: UAAttributeId read Get_AttributeId write Set_AttributeId;
    property IndexRangeList: _UAIndexRangeList read Get_IndexRangeList write _Set_IndexRangeList;
    property AutoConditionRefresh: WordBool read Get_AutoConditionRefresh write Set_AutoConditionRefresh;
    property MonitoringParameters: _UAMonitoringParameters read Get_MonitoringParameters write _Set_MonitoringParameters;
    property SubscriptionParameters: _UASubscriptionParameters read Get_SubscriptionParameters write _Set_SubscriptionParameters;
  end;

// *********************************************************************//
// DispIntf:  _UAMonitoredItemArgumentsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4851E2D1-C678-473C-81BE-8318555601B5}
// *********************************************************************//
  _UAMonitoredItemArgumentsDisp = dispinterface
    ['{4851E2D1-C678-473C-81BE-8318555601B5}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property State: OleVariant dispid 1610743814;
    function MemberwiseClone: _OperationArguments; dispid 1610743816;
    procedure SetState(State: OleVariant); dispid 1610743817;
    property endpointDescriptor: _UAEndpointDescriptor dispid 1610743818;
    property NodeDescriptor: _UANodeDescriptor dispid 1610743820;
    property AttributeId: UAAttributeId dispid 1610743822;
    property IndexRangeList: _UAIndexRangeList dispid 1610743824;
    property AutoConditionRefresh: WordBool dispid 1610743826;
    property MonitoringParameters: _UAMonitoringParameters dispid 1610743828;
    property SubscriptionParameters: _UASubscriptionParameters dispid 1610743830;
  end;

// *********************************************************************//
// Interface: _UAReadArguments
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9E47FE1B-4806-425E-A57C-C58BA8310951}
// *********************************************************************//
  _UAReadArguments = interface(IDispatch)
    ['{9E47FE1B-4806-425E-A57C-C58BA8310951}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_State: OleVariant; safecall;
    procedure _Set_State(pRetVal: OleVariant); safecall;
    function MemberwiseClone: _OperationArguments; safecall;
    procedure SetState(State: OleVariant); safecall;
    function Get_endpointDescriptor: _UAEndpointDescriptor; safecall;
    procedure _Set_endpointDescriptor(const pRetVal: _UAEndpointDescriptor); safecall;
    function Get_NodeDescriptor: _UANodeDescriptor; safecall;
    procedure _Set_NodeDescriptor(const pRetVal: _UANodeDescriptor); safecall;
    function Get_AttributeId: UAAttributeId; safecall;
    procedure Set_AttributeId(pRetVal: UAAttributeId); safecall;
    function Get_IndexRangeList: _UAIndexRangeList; safecall;
    procedure _Set_IndexRangeList(const pRetVal: _UAIndexRangeList); safecall;
    function Get_ReadParameters: _UAReadParameters; safecall;
    procedure _Set_ReadParameters(const pRetVal: _UAReadParameters); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property State: OleVariant read Get_State write _Set_State;
    property endpointDescriptor: _UAEndpointDescriptor read Get_endpointDescriptor write _Set_endpointDescriptor;
    property NodeDescriptor: _UANodeDescriptor read Get_NodeDescriptor write _Set_NodeDescriptor;
    property AttributeId: UAAttributeId read Get_AttributeId write Set_AttributeId;
    property IndexRangeList: _UAIndexRangeList read Get_IndexRangeList write _Set_IndexRangeList;
    property ReadParameters: _UAReadParameters read Get_ReadParameters write _Set_ReadParameters;
  end;

// *********************************************************************//
// DispIntf:  _UAReadArgumentsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9E47FE1B-4806-425E-A57C-C58BA8310951}
// *********************************************************************//
  _UAReadArgumentsDisp = dispinterface
    ['{9E47FE1B-4806-425E-A57C-C58BA8310951}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property State: OleVariant dispid 1610743814;
    function MemberwiseClone: _OperationArguments; dispid 1610743816;
    procedure SetState(State: OleVariant); dispid 1610743817;
    property endpointDescriptor: _UAEndpointDescriptor dispid 1610743818;
    property NodeDescriptor: _UANodeDescriptor dispid 1610743820;
    property AttributeId: UAAttributeId dispid 1610743822;
    property IndexRangeList: _UAIndexRangeList dispid 1610743824;
    property ReadParameters: _UAReadParameters dispid 1610743826;
  end;

// *********************************************************************//
// Interface: _UAWriteArgumentsBase
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B0BBE300-E1B8-4742-9C7B-B0753BF50693}
// *********************************************************************//
  _UAWriteArgumentsBase = interface(IDispatch)
    ['{B0BBE300-E1B8-4742-9C7B-B0753BF50693}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_State: OleVariant; safecall;
    procedure _Set_State(pRetVal: OleVariant); safecall;
    function MemberwiseClone: _OperationArguments; safecall;
    procedure SetState(State: OleVariant); safecall;
    function Get_endpointDescriptor: _UAEndpointDescriptor; safecall;
    procedure _Set_endpointDescriptor(const pRetVal: _UAEndpointDescriptor); safecall;
    function Get_NodeDescriptor: _UANodeDescriptor; safecall;
    procedure _Set_NodeDescriptor(const pRetVal: _UANodeDescriptor); safecall;
    function Get_AttributeId: UAAttributeId; safecall;
    procedure Set_AttributeId(pRetVal: UAAttributeId); safecall;
    function Get_IndexRangeList: _UAIndexRangeList; safecall;
    procedure _Set_IndexRangeList(const pRetVal: _UAIndexRangeList); safecall;
    function Get_AttributeType: _Type; safecall;
    function Get_ValueType: _Type; safecall;
    procedure _Set_ValueType(const pRetVal: _Type); safecall;
    function Get_ValueTypeFullName: WideString; safecall;
    procedure Set_ValueTypeFullName(const pRetVal: WideString); safecall;
    function Get_ValueTypeCode: TypeCode; safecall;
    procedure Set_ValueTypeCode(pRetVal: TypeCode); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property State: OleVariant read Get_State write _Set_State;
    property endpointDescriptor: _UAEndpointDescriptor read Get_endpointDescriptor write _Set_endpointDescriptor;
    property NodeDescriptor: _UANodeDescriptor read Get_NodeDescriptor write _Set_NodeDescriptor;
    property AttributeId: UAAttributeId read Get_AttributeId write Set_AttributeId;
    property IndexRangeList: _UAIndexRangeList read Get_IndexRangeList write _Set_IndexRangeList;
    property AttributeType: _Type read Get_AttributeType;
    property ValueType: _Type read Get_ValueType write _Set_ValueType;
    property ValueTypeFullName: WideString read Get_ValueTypeFullName write Set_ValueTypeFullName;
    property ValueTypeCode: TypeCode read Get_ValueTypeCode write Set_ValueTypeCode;
  end;

// *********************************************************************//
// DispIntf:  _UAWriteArgumentsBaseDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B0BBE300-E1B8-4742-9C7B-B0753BF50693}
// *********************************************************************//
  _UAWriteArgumentsBaseDisp = dispinterface
    ['{B0BBE300-E1B8-4742-9C7B-B0753BF50693}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property State: OleVariant dispid 1610743814;
    function MemberwiseClone: _OperationArguments; dispid 1610743816;
    procedure SetState(State: OleVariant); dispid 1610743817;
    property endpointDescriptor: _UAEndpointDescriptor dispid 1610743818;
    property NodeDescriptor: _UANodeDescriptor dispid 1610743820;
    property AttributeId: UAAttributeId dispid 1610743822;
    property IndexRangeList: _UAIndexRangeList dispid 1610743824;
    property AttributeType: _Type readonly dispid 1610743826;
    property ValueType: _Type dispid 1610743827;
    property ValueTypeFullName: WideString dispid 1610743829;
    property ValueTypeCode: TypeCode dispid 1610743831;
  end;

// *********************************************************************//
// Interface: _UAWriteValueArguments
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {33DD7EC9-A915-496F-B707-4B64E51A27C8}
// *********************************************************************//
  _UAWriteValueArguments = interface(IDispatch)
    ['{33DD7EC9-A915-496F-B707-4B64E51A27C8}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_State: OleVariant; safecall;
    procedure _Set_State(pRetVal: OleVariant); safecall;
    function MemberwiseClone: _OperationArguments; safecall;
    procedure SetState(State: OleVariant); safecall;
    function Get_endpointDescriptor: _UAEndpointDescriptor; safecall;
    procedure _Set_endpointDescriptor(const pRetVal: _UAEndpointDescriptor); safecall;
    function Get_NodeDescriptor: _UANodeDescriptor; safecall;
    procedure _Set_NodeDescriptor(const pRetVal: _UANodeDescriptor); safecall;
    function Get_AttributeId: UAAttributeId; safecall;
    procedure Set_AttributeId(pRetVal: UAAttributeId); safecall;
    function Get_IndexRangeList: _UAIndexRangeList; safecall;
    procedure _Set_IndexRangeList(const pRetVal: _UAIndexRangeList); safecall;
    function Get_AttributeType: _Type; safecall;
    function Get_ValueType: _Type; safecall;
    procedure _Set_ValueType(const pRetVal: _Type); safecall;
    function Get_ValueTypeFullName: WideString; safecall;
    procedure Set_ValueTypeFullName(const pRetVal: WideString); safecall;
    function Get_ValueTypeCode: TypeCode; safecall;
    procedure Set_ValueTypeCode(pRetVal: TypeCode); safecall;
    function Get_value: OleVariant; safecall;
    procedure _Set_value(pRetVal: OleVariant); safecall;
    procedure SetValue(value: OleVariant); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property State: OleVariant read Get_State write _Set_State;
    property endpointDescriptor: _UAEndpointDescriptor read Get_endpointDescriptor write _Set_endpointDescriptor;
    property NodeDescriptor: _UANodeDescriptor read Get_NodeDescriptor write _Set_NodeDescriptor;
    property AttributeId: UAAttributeId read Get_AttributeId write Set_AttributeId;
    property IndexRangeList: _UAIndexRangeList read Get_IndexRangeList write _Set_IndexRangeList;
    property AttributeType: _Type read Get_AttributeType;
    property ValueType: _Type read Get_ValueType write _Set_ValueType;
    property ValueTypeFullName: WideString read Get_ValueTypeFullName write Set_ValueTypeFullName;
    property ValueTypeCode: TypeCode read Get_ValueTypeCode write Set_ValueTypeCode;
    property value: OleVariant read Get_value write _Set_value;
  end;

// *********************************************************************//
// DispIntf:  _UAWriteValueArgumentsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {33DD7EC9-A915-496F-B707-4B64E51A27C8}
// *********************************************************************//
  _UAWriteValueArgumentsDisp = dispinterface
    ['{33DD7EC9-A915-496F-B707-4B64E51A27C8}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property State: OleVariant dispid 1610743814;
    function MemberwiseClone: _OperationArguments; dispid 1610743816;
    procedure SetState(State: OleVariant); dispid 1610743817;
    property endpointDescriptor: _UAEndpointDescriptor dispid 1610743818;
    property NodeDescriptor: _UANodeDescriptor dispid 1610743820;
    property AttributeId: UAAttributeId dispid 1610743822;
    property IndexRangeList: _UAIndexRangeList dispid 1610743824;
    property AttributeType: _Type readonly dispid 1610743826;
    property ValueType: _Type dispid 1610743827;
    property ValueTypeFullName: WideString dispid 1610743829;
    property ValueTypeCode: TypeCode dispid 1610743831;
    property value: OleVariant dispid 1610743833;
    procedure SetValue(value: OleVariant); dispid 1610743835;
  end;

// *********************************************************************//
// Interface: _EasyUADataChangeNotificationEventArgs
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D9986E34-5210-4D35-B972-3AB17C807361}
// *********************************************************************//
  _EasyUADataChangeNotificationEventArgs = interface(IDispatch)
    ['{D9986E34-5210-4D35-B972-3AB17C807361}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_Diagnostics: _ExceptionCollection; safecall;
    procedure _Set_Diagnostics(const pRetVal: _ExceptionCollection); safecall;
    function Get_DiagnosticsCount: Integer; safecall;
    function Get_DiagnosticsSummary: WideString; safecall;
    function Get_ErrorId: WideString; safecall;
    procedure Set_ErrorId(const pRetVal: WideString); safecall;
    function Get_ErrorMessage: WideString; safecall;
    procedure Set_ErrorMessage(const pRetVal: WideString); safecall;
    function Get_ErrorMessageBrief: WideString; safecall;
    function Get_Exception: _Exception; safecall;
    procedure _Set_Exception(const pRetVal: _Exception); safecall;
    function Get_NormalizedDiagnostics: _NormalizedExceptionCollection; safecall;
    function Get_NormalizedException: _NormalizedException; safecall;
    function Get_Succeeded: WordBool; safecall;
    function Clone: OleVariant; safecall;
    function MemberwiseClone: _OperationEventArgs; safecall;
    function ToLongString: WideString; safecall;
    function Get_Arguments: _EasyUAMonitoredItemArguments; safecall;
    procedure _Set_Arguments(const pRetVal: _EasyUAMonitoredItemArguments); safecall;
    function Get_AttributeData: _UAAttributeData; safecall;
    procedure _Set_AttributeData(const pRetVal: _UAAttributeData); safecall;
    function Get_StatusInfo: StatusInfo; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Diagnostics: _ExceptionCollection read Get_Diagnostics write _Set_Diagnostics;
    property DiagnosticsCount: Integer read Get_DiagnosticsCount;
    property DiagnosticsSummary: WideString read Get_DiagnosticsSummary;
    property ErrorId: WideString read Get_ErrorId write Set_ErrorId;
    property ErrorMessage: WideString read Get_ErrorMessage write Set_ErrorMessage;
    property ErrorMessageBrief: WideString read Get_ErrorMessageBrief;
    property Exception: _Exception read Get_Exception write _Set_Exception;
    property NormalizedDiagnostics: _NormalizedExceptionCollection read Get_NormalizedDiagnostics;
    property NormalizedException: _NormalizedException read Get_NormalizedException;
    property Succeeded: WordBool read Get_Succeeded;
    property Arguments: _EasyUAMonitoredItemArguments read Get_Arguments write _Set_Arguments;
    property AttributeData: _UAAttributeData read Get_AttributeData write _Set_AttributeData;
    property StatusInfo: StatusInfo read Get_StatusInfo;
  end;

// *********************************************************************//
// DispIntf:  _EasyUADataChangeNotificationEventArgsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D9986E34-5210-4D35-B972-3AB17C807361}
// *********************************************************************//
  _EasyUADataChangeNotificationEventArgsDisp = dispinterface
    ['{D9986E34-5210-4D35-B972-3AB17C807361}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    property Diagnostics: _ExceptionCollection dispid 1610743813;
    property DiagnosticsCount: Integer readonly dispid 1610743815;
    property DiagnosticsSummary: WideString readonly dispid 1610743816;
    property ErrorId: WideString dispid 1610743817;
    property ErrorMessage: WideString dispid 1610743819;
    property ErrorMessageBrief: WideString readonly dispid 1610743821;
    property Exception: _Exception dispid 1610743822;
    property NormalizedDiagnostics: _NormalizedExceptionCollection readonly dispid 1610743824;
    property NormalizedException: _NormalizedException readonly dispid 1610743825;
    property Succeeded: WordBool readonly dispid 1610743826;
    function Clone: OleVariant; dispid 1610743827;
    function MemberwiseClone: _OperationEventArgs; dispid 1610743828;
    function ToLongString: WideString; dispid 1610743829;
    property Arguments: _EasyUAMonitoredItemArguments dispid 1610743830;
    property AttributeData: _UAAttributeData dispid 1610743832;
    property StatusInfo: StatusInfo readonly dispid 1610743834;
  end;

// *********************************************************************//
// Interface: _EasyUAEventNotificationEventArgs
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7A12AC93-3C60-496F-959A-DD1732AB9740}
// *********************************************************************//
  _EasyUAEventNotificationEventArgs = interface(IDispatch)
    ['{7A12AC93-3C60-496F-959A-DD1732AB9740}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_Diagnostics: _ExceptionCollection; safecall;
    procedure _Set_Diagnostics(const pRetVal: _ExceptionCollection); safecall;
    function Get_DiagnosticsCount: Integer; safecall;
    function Get_DiagnosticsSummary: WideString; safecall;
    function Get_ErrorId: WideString; safecall;
    procedure Set_ErrorId(const pRetVal: WideString); safecall;
    function Get_ErrorMessage: WideString; safecall;
    procedure Set_ErrorMessage(const pRetVal: WideString); safecall;
    function Get_ErrorMessageBrief: WideString; safecall;
    function Get_Exception: _Exception; safecall;
    procedure _Set_Exception(const pRetVal: _Exception); safecall;
    function Get_NormalizedDiagnostics: _NormalizedExceptionCollection; safecall;
    function Get_NormalizedException: _NormalizedException; safecall;
    function Get_Succeeded: WordBool; safecall;
    function Clone: OleVariant; safecall;
    function MemberwiseClone: _OperationEventArgs; safecall;
    function ToLongString: WideString; safecall;
    function Get_Arguments: _EasyUAMonitoredItemArguments; safecall;
    procedure _Set_Arguments(const pRetVal: _EasyUAMonitoredItemArguments); safecall;
    function Get_EventData: _UAEventData; safecall;
    procedure _Set_EventData(const pRetVal: _UAEventData); safecall;
    function Get_Refresh: WordBool; safecall;
    procedure Set_Refresh(pRetVal: WordBool); safecall;
    function Get_RefreshComplete: WordBool; safecall;
    procedure Set_RefreshComplete(pRetVal: WordBool); safecall;
    function Get_RefreshInitiated: WordBool; safecall;
    procedure Set_RefreshInitiated(pRetVal: WordBool); safecall;
    function Get_StatusInfo: StatusInfo; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Diagnostics: _ExceptionCollection read Get_Diagnostics write _Set_Diagnostics;
    property DiagnosticsCount: Integer read Get_DiagnosticsCount;
    property DiagnosticsSummary: WideString read Get_DiagnosticsSummary;
    property ErrorId: WideString read Get_ErrorId write Set_ErrorId;
    property ErrorMessage: WideString read Get_ErrorMessage write Set_ErrorMessage;
    property ErrorMessageBrief: WideString read Get_ErrorMessageBrief;
    property Exception: _Exception read Get_Exception write _Set_Exception;
    property NormalizedDiagnostics: _NormalizedExceptionCollection read Get_NormalizedDiagnostics;
    property NormalizedException: _NormalizedException read Get_NormalizedException;
    property Succeeded: WordBool read Get_Succeeded;
    property Arguments: _EasyUAMonitoredItemArguments read Get_Arguments write _Set_Arguments;
    property EventData: _UAEventData read Get_EventData write _Set_EventData;
    property Refresh: WordBool read Get_Refresh write Set_Refresh;
    property RefreshComplete: WordBool read Get_RefreshComplete write Set_RefreshComplete;
    property RefreshInitiated: WordBool read Get_RefreshInitiated write Set_RefreshInitiated;
    property StatusInfo: StatusInfo read Get_StatusInfo;
  end;

// *********************************************************************//
// DispIntf:  _EasyUAEventNotificationEventArgsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7A12AC93-3C60-496F-959A-DD1732AB9740}
// *********************************************************************//
  _EasyUAEventNotificationEventArgsDisp = dispinterface
    ['{7A12AC93-3C60-496F-959A-DD1732AB9740}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    property Diagnostics: _ExceptionCollection dispid 1610743813;
    property DiagnosticsCount: Integer readonly dispid 1610743815;
    property DiagnosticsSummary: WideString readonly dispid 1610743816;
    property ErrorId: WideString dispid 1610743817;
    property ErrorMessage: WideString dispid 1610743819;
    property ErrorMessageBrief: WideString readonly dispid 1610743821;
    property Exception: _Exception dispid 1610743822;
    property NormalizedDiagnostics: _NormalizedExceptionCollection readonly dispid 1610743824;
    property NormalizedException: _NormalizedException readonly dispid 1610743825;
    property Succeeded: WordBool readonly dispid 1610743826;
    function Clone: OleVariant; dispid 1610743827;
    function MemberwiseClone: _OperationEventArgs; dispid 1610743828;
    function ToLongString: WideString; dispid 1610743829;
    property Arguments: _EasyUAMonitoredItemArguments dispid 1610743830;
    property EventData: _UAEventData dispid 1610743832;
    property Refresh: WordBool dispid 1610743834;
    property RefreshComplete: WordBool dispid 1610743836;
    property RefreshInitiated: WordBool dispid 1610743838;
    property StatusInfo: StatusInfo readonly dispid 1610743840;
  end;

// *********************************************************************//
// Interface: _EasyUAServerConditionChangedEventArgs
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EB380053-871B-4F51-932E-CB1E25C5154C}
// *********************************************************************//
  _EasyUAServerConditionChangedEventArgs = interface(IDispatch)
    ['{EB380053-871B-4F51-932E-CB1E25C5154C}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_Diagnostics: _ExceptionCollection; safecall;
    procedure _Set_Diagnostics(const pRetVal: _ExceptionCollection); safecall;
    function Get_DiagnosticsCount: Integer; safecall;
    function Get_DiagnosticsSummary: WideString; safecall;
    function Get_ErrorId: WideString; safecall;
    procedure Set_ErrorId(const pRetVal: WideString); safecall;
    function Get_ErrorMessage: WideString; safecall;
    procedure Set_ErrorMessage(const pRetVal: WideString); safecall;
    function Get_ErrorMessageBrief: WideString; safecall;
    function Get_Exception: _Exception; safecall;
    procedure _Set_Exception(const pRetVal: _Exception); safecall;
    function Get_NormalizedDiagnostics: _NormalizedExceptionCollection; safecall;
    function Get_NormalizedException: _NormalizedException; safecall;
    function Get_Succeeded: WordBool; safecall;
    function Clone: OleVariant; safecall;
    function MemberwiseClone: _OperationEventArgs; safecall;
    function ToLongString: WideString; safecall;
    function Get_ConnectionState: ConnectionState; safecall;
    procedure Set_ConnectionState(pRetVal: ConnectionState); safecall;
    function Get_IsConnected: WordBool; safecall;
    function Get_RetrialDelay: Integer; safecall;
    procedure Set_RetrialDelay(pRetVal: Integer); safecall;
    function Get_Statistics: _ConnectedConditionStatistics; safecall;
    procedure _Set_Statistics(const pRetVal: _ConnectedConditionStatistics); safecall;
    function Get_StatusInfo: StatusInfo; safecall;
    function Get_endpointDescriptor: _UAEndpointDescriptor; safecall;
    procedure _Set_endpointDescriptor(const pRetVal: _UAEndpointDescriptor); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Diagnostics: _ExceptionCollection read Get_Diagnostics write _Set_Diagnostics;
    property DiagnosticsCount: Integer read Get_DiagnosticsCount;
    property DiagnosticsSummary: WideString read Get_DiagnosticsSummary;
    property ErrorId: WideString read Get_ErrorId write Set_ErrorId;
    property ErrorMessage: WideString read Get_ErrorMessage write Set_ErrorMessage;
    property ErrorMessageBrief: WideString read Get_ErrorMessageBrief;
    property Exception: _Exception read Get_Exception write _Set_Exception;
    property NormalizedDiagnostics: _NormalizedExceptionCollection read Get_NormalizedDiagnostics;
    property NormalizedException: _NormalizedException read Get_NormalizedException;
    property Succeeded: WordBool read Get_Succeeded;
    property ConnectionState: ConnectionState read Get_ConnectionState write Set_ConnectionState;
    property IsConnected: WordBool read Get_IsConnected;
    property RetrialDelay: Integer read Get_RetrialDelay write Set_RetrialDelay;
    property Statistics: _ConnectedConditionStatistics read Get_Statistics write _Set_Statistics;
    property StatusInfo: StatusInfo read Get_StatusInfo;
    property endpointDescriptor: _UAEndpointDescriptor read Get_endpointDescriptor write _Set_endpointDescriptor;
  end;

// *********************************************************************//
// DispIntf:  _EasyUAServerConditionChangedEventArgsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EB380053-871B-4F51-932E-CB1E25C5154C}
// *********************************************************************//
  _EasyUAServerConditionChangedEventArgsDisp = dispinterface
    ['{EB380053-871B-4F51-932E-CB1E25C5154C}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    property Diagnostics: _ExceptionCollection dispid 1610743813;
    property DiagnosticsCount: Integer readonly dispid 1610743815;
    property DiagnosticsSummary: WideString readonly dispid 1610743816;
    property ErrorId: WideString dispid 1610743817;
    property ErrorMessage: WideString dispid 1610743819;
    property ErrorMessageBrief: WideString readonly dispid 1610743821;
    property Exception: _Exception dispid 1610743822;
    property NormalizedDiagnostics: _NormalizedExceptionCollection readonly dispid 1610743824;
    property NormalizedException: _NormalizedException readonly dispid 1610743825;
    property Succeeded: WordBool readonly dispid 1610743826;
    function Clone: OleVariant; dispid 1610743827;
    function MemberwiseClone: _OperationEventArgs; dispid 1610743828;
    function ToLongString: WideString; dispid 1610743829;
    property ConnectionState: ConnectionState dispid 1610743830;
    property IsConnected: WordBool readonly dispid 1610743832;
    property RetrialDelay: Integer dispid 1610743833;
    property Statistics: _ConnectedConditionStatistics dispid 1610743835;
    property StatusInfo: StatusInfo readonly dispid 1610743837;
    property endpointDescriptor: _UAEndpointDescriptor dispid 1610743838;
  end;

// *********************************************************************//
// Interface: _UAAttributeDataResult
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3CF81E46-6344-41F8-9DB2-59DB25E04959}
// *********************************************************************//
  _UAAttributeDataResult = interface(IDispatch)
    ['{3CF81E46-6344-41F8-9DB2-59DB25E04959}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_ToString_2(const format: WideString; const formatProvider: IFormatProvider): WideString; safecall;
    function Get_ToString_3(const format: WideString): WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_Diagnostics: _ExceptionCollection; safecall;
    procedure _Set_Diagnostics(const pRetVal: _ExceptionCollection); safecall;
    function Get_DiagnosticsCount: Integer; safecall;
    function Get_DiagnosticsSummary: WideString; safecall;
    function Get_ErrorId: WideString; safecall;
    procedure Set_ErrorId(const pRetVal: WideString); safecall;
    function Get_ErrorMessage: WideString; safecall;
    procedure Set_ErrorMessage(const pRetVal: WideString); safecall;
    function Get_ErrorMessageBrief: WideString; safecall;
    function Get_Exception: _Exception; safecall;
    procedure _Set_Exception(const pRetVal: _Exception); safecall;
    function Get_NormalizedDiagnostics: _NormalizedExceptionCollection; safecall;
    function Get_NormalizedException: _NormalizedException; safecall;
    function Get_State: OleVariant; safecall;
    procedure _Set_State(pRetVal: OleVariant); safecall;
    function Get_Succeeded: WordBool; safecall;
    function MemberwiseClone: _OperationResult; safecall;
    procedure SetState(State: OleVariant); safecall;
    procedure ThrowIfFailed; safecall;
    function Get_AttributeData: _UAAttributeData; safecall;
    procedure _Set_AttributeData(const pRetVal: _UAAttributeData); safecall;
    function Get_StatusInfo: StatusInfo; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property ToString_2[const format: WideString; const formatProvider: IFormatProvider]: WideString read Get_ToString_2;
    property ToString_3[const format: WideString]: WideString read Get_ToString_3;
    property Diagnostics: _ExceptionCollection read Get_Diagnostics write _Set_Diagnostics;
    property DiagnosticsCount: Integer read Get_DiagnosticsCount;
    property DiagnosticsSummary: WideString read Get_DiagnosticsSummary;
    property ErrorId: WideString read Get_ErrorId write Set_ErrorId;
    property ErrorMessage: WideString read Get_ErrorMessage write Set_ErrorMessage;
    property ErrorMessageBrief: WideString read Get_ErrorMessageBrief;
    property Exception: _Exception read Get_Exception write _Set_Exception;
    property NormalizedDiagnostics: _NormalizedExceptionCollection read Get_NormalizedDiagnostics;
    property NormalizedException: _NormalizedException read Get_NormalizedException;
    property State: OleVariant read Get_State write _Set_State;
    property Succeeded: WordBool read Get_Succeeded;
    property AttributeData: _UAAttributeData read Get_AttributeData write _Set_AttributeData;
    property StatusInfo: StatusInfo read Get_StatusInfo;
  end;

// *********************************************************************//
// DispIntf:  _UAAttributeDataResultDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3CF81E46-6344-41F8-9DB2-59DB25E04959}
// *********************************************************************//
  _UAAttributeDataResultDisp = dispinterface
    ['{3CF81E46-6344-41F8-9DB2-59DB25E04959}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    property ToString_2[const format: WideString; const formatProvider: IFormatProvider]: WideString readonly dispid 1610743813;
    property ToString_3[const format: WideString]: WideString readonly dispid 1610743814;
    function Clone: OleVariant; dispid 1610743815;
    property Diagnostics: _ExceptionCollection dispid 1610743816;
    property DiagnosticsCount: Integer readonly dispid 1610743818;
    property DiagnosticsSummary: WideString readonly dispid 1610743819;
    property ErrorId: WideString dispid 1610743820;
    property ErrorMessage: WideString dispid 1610743822;
    property ErrorMessageBrief: WideString readonly dispid 1610743824;
    property Exception: _Exception dispid 1610743825;
    property NormalizedDiagnostics: _NormalizedExceptionCollection readonly dispid 1610743827;
    property NormalizedException: _NormalizedException readonly dispid 1610743828;
    property State: OleVariant dispid 1610743829;
    property Succeeded: WordBool readonly dispid 1610743831;
    function MemberwiseClone: _OperationResult; dispid 1610743832;
    procedure SetState(State: OleVariant); dispid 1610743833;
    procedure ThrowIfFailed; dispid 1610743834;
    property AttributeData: _UAAttributeData dispid 1610743835;
    property StatusInfo: StatusInfo readonly dispid 1610743837;
  end;

// *********************************************************************//
// Interface: _UANodeElementCollectionResult
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {803E75B3-48FC-4D25-A38A-72A7B6CA29DB}
// *********************************************************************//
  _UANodeElementCollectionResult = interface(IDispatch)
    ['{803E75B3-48FC-4D25-A38A-72A7B6CA29DB}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_ToString_2(const format: WideString; const formatProvider: IFormatProvider): WideString; safecall;
    function Get_ToString_3(const format: WideString): WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_Diagnostics: _ExceptionCollection; safecall;
    procedure _Set_Diagnostics(const pRetVal: _ExceptionCollection); safecall;
    function Get_DiagnosticsCount: Integer; safecall;
    function Get_DiagnosticsSummary: WideString; safecall;
    function Get_ErrorId: WideString; safecall;
    procedure Set_ErrorId(const pRetVal: WideString); safecall;
    function Get_ErrorMessage: WideString; safecall;
    procedure Set_ErrorMessage(const pRetVal: WideString); safecall;
    function Get_ErrorMessageBrief: WideString; safecall;
    function Get_Exception: _Exception; safecall;
    procedure _Set_Exception(const pRetVal: _Exception); safecall;
    function Get_NormalizedDiagnostics: _NormalizedExceptionCollection; safecall;
    function Get_NormalizedException: _NormalizedException; safecall;
    function Get_State: OleVariant; safecall;
    procedure _Set_State(pRetVal: OleVariant); safecall;
    function Get_Succeeded: WordBool; safecall;
    function MemberwiseClone: _OperationResult; safecall;
    procedure SetState(State: OleVariant); safecall;
    procedure ThrowIfFailed; safecall;
    function Get_RegularizedValue: OleVariant; safecall;
    function Get_value: _UANodeElementCollection; safecall;
    procedure _Set_value(const pRetVal: _UANodeElementCollection); safecall;
    function Get_ValueType: _Type; safecall;
    procedure SetValue(value: OleVariant); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property ToString_2[const format: WideString; const formatProvider: IFormatProvider]: WideString read Get_ToString_2;
    property ToString_3[const format: WideString]: WideString read Get_ToString_3;
    property Diagnostics: _ExceptionCollection read Get_Diagnostics write _Set_Diagnostics;
    property DiagnosticsCount: Integer read Get_DiagnosticsCount;
    property DiagnosticsSummary: WideString read Get_DiagnosticsSummary;
    property ErrorId: WideString read Get_ErrorId write Set_ErrorId;
    property ErrorMessage: WideString read Get_ErrorMessage write Set_ErrorMessage;
    property ErrorMessageBrief: WideString read Get_ErrorMessageBrief;
    property Exception: _Exception read Get_Exception write _Set_Exception;
    property NormalizedDiagnostics: _NormalizedExceptionCollection read Get_NormalizedDiagnostics;
    property NormalizedException: _NormalizedException read Get_NormalizedException;
    property State: OleVariant read Get_State write _Set_State;
    property Succeeded: WordBool read Get_Succeeded;
    property RegularizedValue: OleVariant read Get_RegularizedValue;
    property value: _UANodeElementCollection read Get_value write _Set_value;
    property ValueType: _Type read Get_ValueType;
  end;

// *********************************************************************//
// DispIntf:  _UANodeElementCollectionResultDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {803E75B3-48FC-4D25-A38A-72A7B6CA29DB}
// *********************************************************************//
  _UANodeElementCollectionResultDisp = dispinterface
    ['{803E75B3-48FC-4D25-A38A-72A7B6CA29DB}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    property ToString_2[const format: WideString; const formatProvider: IFormatProvider]: WideString readonly dispid 1610743813;
    property ToString_3[const format: WideString]: WideString readonly dispid 1610743814;
    function Clone: OleVariant; dispid 1610743815;
    property Diagnostics: _ExceptionCollection dispid 1610743816;
    property DiagnosticsCount: Integer readonly dispid 1610743818;
    property DiagnosticsSummary: WideString readonly dispid 1610743819;
    property ErrorId: WideString dispid 1610743820;
    property ErrorMessage: WideString dispid 1610743822;
    property ErrorMessageBrief: WideString readonly dispid 1610743824;
    property Exception: _Exception dispid 1610743825;
    property NormalizedDiagnostics: _NormalizedExceptionCollection readonly dispid 1610743827;
    property NormalizedException: _NormalizedException readonly dispid 1610743828;
    property State: OleVariant dispid 1610743829;
    property Succeeded: WordBool readonly dispid 1610743831;
    function MemberwiseClone: _OperationResult; dispid 1610743832;
    procedure SetState(State: OleVariant); dispid 1610743833;
    procedure ThrowIfFailed; dispid 1610743834;
    property RegularizedValue: OleVariant readonly dispid 1610743835;
    property value: _UANodeElementCollection dispid 1610743836;
    property ValueType: _Type readonly dispid 1610743838;
    procedure SetValue(value: OleVariant); dispid 1610743839;
  end;

// *********************************************************************//
// Interface: _UAWriteResult
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {262AFFB0-449E-4A62-8E35-000988C0487B}
// *********************************************************************//
  _UAWriteResult = interface(IDispatch)
    ['{262AFFB0-449E-4A62-8E35-000988C0487B}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_ToString_2(const format: WideString; const formatProvider: IFormatProvider): WideString; safecall;
    function Get_ToString_3(const format: WideString): WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_Diagnostics: _ExceptionCollection; safecall;
    procedure _Set_Diagnostics(const pRetVal: _ExceptionCollection); safecall;
    function Get_DiagnosticsCount: Integer; safecall;
    function Get_DiagnosticsSummary: WideString; safecall;
    function Get_ErrorId: WideString; safecall;
    procedure Set_ErrorId(const pRetVal: WideString); safecall;
    function Get_ErrorMessage: WideString; safecall;
    procedure Set_ErrorMessage(const pRetVal: WideString); safecall;
    function Get_ErrorMessageBrief: WideString; safecall;
    function Get_Exception: _Exception; safecall;
    procedure _Set_Exception(const pRetVal: _Exception); safecall;
    function Get_NormalizedDiagnostics: _NormalizedExceptionCollection; safecall;
    function Get_NormalizedException: _NormalizedException; safecall;
    function Get_State: OleVariant; safecall;
    procedure _Set_State(pRetVal: OleVariant); safecall;
    function Get_Succeeded: WordBool; safecall;
    function MemberwiseClone: _OperationResult; safecall;
    procedure SetState(State: OleVariant); safecall;
    procedure ThrowIfFailed; safecall;
    function Get_Clamped: WordBool; safecall;
    procedure Set_Clamped(pRetVal: WordBool); safecall;
    function Get_CompletesAsynchronously: WordBool; safecall;
    procedure Set_CompletesAsynchronously(pRetVal: WordBool); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property ToString_2[const format: WideString; const formatProvider: IFormatProvider]: WideString read Get_ToString_2;
    property ToString_3[const format: WideString]: WideString read Get_ToString_3;
    property Diagnostics: _ExceptionCollection read Get_Diagnostics write _Set_Diagnostics;
    property DiagnosticsCount: Integer read Get_DiagnosticsCount;
    property DiagnosticsSummary: WideString read Get_DiagnosticsSummary;
    property ErrorId: WideString read Get_ErrorId write Set_ErrorId;
    property ErrorMessage: WideString read Get_ErrorMessage write Set_ErrorMessage;
    property ErrorMessageBrief: WideString read Get_ErrorMessageBrief;
    property Exception: _Exception read Get_Exception write _Set_Exception;
    property NormalizedDiagnostics: _NormalizedExceptionCollection read Get_NormalizedDiagnostics;
    property NormalizedException: _NormalizedException read Get_NormalizedException;
    property State: OleVariant read Get_State write _Set_State;
    property Succeeded: WordBool read Get_Succeeded;
    property Clamped: WordBool read Get_Clamped write Set_Clamped;
    property CompletesAsynchronously: WordBool read Get_CompletesAsynchronously write Set_CompletesAsynchronously;
  end;

// *********************************************************************//
// DispIntf:  _UAWriteResultDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {262AFFB0-449E-4A62-8E35-000988C0487B}
// *********************************************************************//
  _UAWriteResultDisp = dispinterface
    ['{262AFFB0-449E-4A62-8E35-000988C0487B}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    property ToString_2[const format: WideString; const formatProvider: IFormatProvider]: WideString readonly dispid 1610743813;
    property ToString_3[const format: WideString]: WideString readonly dispid 1610743814;
    function Clone: OleVariant; dispid 1610743815;
    property Diagnostics: _ExceptionCollection dispid 1610743816;
    property DiagnosticsCount: Integer readonly dispid 1610743818;
    property DiagnosticsSummary: WideString readonly dispid 1610743819;
    property ErrorId: WideString dispid 1610743820;
    property ErrorMessage: WideString dispid 1610743822;
    property ErrorMessageBrief: WideString readonly dispid 1610743824;
    property Exception: _Exception dispid 1610743825;
    property NormalizedDiagnostics: _NormalizedExceptionCollection readonly dispid 1610743827;
    property NormalizedException: _NormalizedException readonly dispid 1610743828;
    property State: OleVariant dispid 1610743829;
    property Succeeded: WordBool readonly dispid 1610743831;
    function MemberwiseClone: _OperationResult; dispid 1610743832;
    procedure SetState(State: OleVariant); dispid 1610743833;
    procedure ThrowIfFailed; dispid 1610743834;
    property Clamped: WordBool dispid 1610743835;
    property CompletesAsynchronously: WordBool dispid 1610743837;
  end;

// *********************************************************************//
// Interface: _EasyUAMonitoredItemArguments
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {751F09D0-7C37-4E42-8719-26471E33010B}
// *********************************************************************//
  _EasyUAMonitoredItemArguments = interface(IDispatch)
    ['{751F09D0-7C37-4E42-8719-26471E33010B}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_State: OleVariant; safecall;
    procedure _Set_State(pRetVal: OleVariant); safecall;
    function MemberwiseClone: _OperationArguments; safecall;
    procedure SetState(State: OleVariant); safecall;
    function Get_endpointDescriptor: _UAEndpointDescriptor; safecall;
    procedure _Set_endpointDescriptor(const pRetVal: _UAEndpointDescriptor); safecall;
    function Get_NodeDescriptor: _UANodeDescriptor; safecall;
    procedure _Set_NodeDescriptor(const pRetVal: _UANodeDescriptor); safecall;
    function Get_AttributeId: UAAttributeId; safecall;
    procedure Set_AttributeId(pRetVal: UAAttributeId); safecall;
    function Get_IndexRangeList: _UAIndexRangeList; safecall;
    procedure _Set_IndexRangeList(const pRetVal: _UAIndexRangeList); safecall;
    function Get_AutoConditionRefresh: WordBool; safecall;
    procedure Set_AutoConditionRefresh(pRetVal: WordBool); safecall;
    function Get_MonitoringParameters: _UAMonitoringParameters; safecall;
    procedure _Set_MonitoringParameters(const pRetVal: _UAMonitoringParameters); safecall;
    function Get_SubscriptionParameters: _UASubscriptionParameters; safecall;
    procedure _Set_SubscriptionParameters(const pRetVal: _UASubscriptionParameters); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property State: OleVariant read Get_State write _Set_State;
    property endpointDescriptor: _UAEndpointDescriptor read Get_endpointDescriptor write _Set_endpointDescriptor;
    property NodeDescriptor: _UANodeDescriptor read Get_NodeDescriptor write _Set_NodeDescriptor;
    property AttributeId: UAAttributeId read Get_AttributeId write Set_AttributeId;
    property IndexRangeList: _UAIndexRangeList read Get_IndexRangeList write _Set_IndexRangeList;
    property AutoConditionRefresh: WordBool read Get_AutoConditionRefresh write Set_AutoConditionRefresh;
    property MonitoringParameters: _UAMonitoringParameters read Get_MonitoringParameters write _Set_MonitoringParameters;
    property SubscriptionParameters: _UASubscriptionParameters read Get_SubscriptionParameters write _Set_SubscriptionParameters;
  end;

// *********************************************************************//
// DispIntf:  _EasyUAMonitoredItemArgumentsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {751F09D0-7C37-4E42-8719-26471E33010B}
// *********************************************************************//
  _EasyUAMonitoredItemArgumentsDisp = dispinterface
    ['{751F09D0-7C37-4E42-8719-26471E33010B}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property State: OleVariant dispid 1610743814;
    function MemberwiseClone: _OperationArguments; dispid 1610743816;
    procedure SetState(State: OleVariant); dispid 1610743817;
    property endpointDescriptor: _UAEndpointDescriptor dispid 1610743818;
    property NodeDescriptor: _UANodeDescriptor dispid 1610743820;
    property AttributeId: UAAttributeId dispid 1610743822;
    property IndexRangeList: _UAIndexRangeList dispid 1610743824;
    property AutoConditionRefresh: WordBool dispid 1610743826;
    property MonitoringParameters: _UAMonitoringParameters dispid 1610743828;
    property SubscriptionParameters: _UASubscriptionParameters dispid 1610743830;
  end;

// *********************************************************************//
// Interface: _EasyUAMonitoredItemChangedEventArgs
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3AC3E6D1-E4F1-4196-A7C1-3BDDC3D2B94F}
// *********************************************************************//
  _EasyUAMonitoredItemChangedEventArgs = interface(IDispatch)
    ['{3AC3E6D1-E4F1-4196-A7C1-3BDDC3D2B94F}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_Diagnostics: _ExceptionCollection; safecall;
    procedure _Set_Diagnostics(const pRetVal: _ExceptionCollection); safecall;
    function Get_DiagnosticsCount: Integer; safecall;
    function Get_DiagnosticsSummary: WideString; safecall;
    function Get_ErrorId: WideString; safecall;
    procedure Set_ErrorId(const pRetVal: WideString); safecall;
    function Get_ErrorMessage: WideString; safecall;
    procedure Set_ErrorMessage(const pRetVal: WideString); safecall;
    function Get_ErrorMessageBrief: WideString; safecall;
    function Get_Exception: _Exception; safecall;
    procedure _Set_Exception(const pRetVal: _Exception); safecall;
    function Get_NormalizedDiagnostics: _NormalizedExceptionCollection; safecall;
    function Get_NormalizedException: _NormalizedException; safecall;
    function Get_Succeeded: WordBool; safecall;
    function Clone: OleVariant; safecall;
    function MemberwiseClone: _OperationEventArgs; safecall;
    function ToLongString: WideString; safecall;
    function Get_Arguments: _EasyUAMonitoredItemArguments; safecall;
    procedure _Set_Arguments(const pRetVal: _EasyUAMonitoredItemArguments); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Diagnostics: _ExceptionCollection read Get_Diagnostics write _Set_Diagnostics;
    property DiagnosticsCount: Integer read Get_DiagnosticsCount;
    property DiagnosticsSummary: WideString read Get_DiagnosticsSummary;
    property ErrorId: WideString read Get_ErrorId write Set_ErrorId;
    property ErrorMessage: WideString read Get_ErrorMessage write Set_ErrorMessage;
    property ErrorMessageBrief: WideString read Get_ErrorMessageBrief;
    property Exception: _Exception read Get_Exception write _Set_Exception;
    property NormalizedDiagnostics: _NormalizedExceptionCollection read Get_NormalizedDiagnostics;
    property NormalizedException: _NormalizedException read Get_NormalizedException;
    property Succeeded: WordBool read Get_Succeeded;
    property Arguments: _EasyUAMonitoredItemArguments read Get_Arguments write _Set_Arguments;
  end;

// *********************************************************************//
// DispIntf:  _EasyUAMonitoredItemChangedEventArgsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3AC3E6D1-E4F1-4196-A7C1-3BDDC3D2B94F}
// *********************************************************************//
  _EasyUAMonitoredItemChangedEventArgsDisp = dispinterface
    ['{3AC3E6D1-E4F1-4196-A7C1-3BDDC3D2B94F}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    property Diagnostics: _ExceptionCollection dispid 1610743813;
    property DiagnosticsCount: Integer readonly dispid 1610743815;
    property DiagnosticsSummary: WideString readonly dispid 1610743816;
    property ErrorId: WideString dispid 1610743817;
    property ErrorMessage: WideString dispid 1610743819;
    property ErrorMessageBrief: WideString readonly dispid 1610743821;
    property Exception: _Exception dispid 1610743822;
    property NormalizedDiagnostics: _NormalizedExceptionCollection readonly dispid 1610743824;
    property NormalizedException: _NormalizedException readonly dispid 1610743825;
    property Succeeded: WordBool readonly dispid 1610743826;
    function Clone: OleVariant; dispid 1610743827;
    function MemberwiseClone: _OperationEventArgs; dispid 1610743828;
    function ToLongString: WideString; dispid 1610743829;
    property Arguments: _EasyUAMonitoredItemArguments dispid 1610743830;
  end;

// *********************************************************************//
// Interface: _UAWriteArguments
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E76841C2-AE50-442A-9C5E-A95A03CDF6DE}
// *********************************************************************//
  _UAWriteArguments = interface(IDispatch)
    ['{E76841C2-AE50-442A-9C5E-A95A03CDF6DE}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_State: OleVariant; safecall;
    procedure _Set_State(pRetVal: OleVariant); safecall;
    function MemberwiseClone: _OperationArguments; safecall;
    procedure SetState(State: OleVariant); safecall;
    function Get_endpointDescriptor: _UAEndpointDescriptor; safecall;
    procedure _Set_endpointDescriptor(const pRetVal: _UAEndpointDescriptor); safecall;
    function Get_NodeDescriptor: _UANodeDescriptor; safecall;
    procedure _Set_NodeDescriptor(const pRetVal: _UANodeDescriptor); safecall;
    function Get_AttributeId: UAAttributeId; safecall;
    procedure Set_AttributeId(pRetVal: UAAttributeId); safecall;
    function Get_IndexRangeList: _UAIndexRangeList; safecall;
    procedure _Set_IndexRangeList(const pRetVal: _UAIndexRangeList); safecall;
    function Get_AttributeType: _Type; safecall;
    function Get_ValueType: _Type; safecall;
    procedure _Set_ValueType(const pRetVal: _Type); safecall;
    function Get_ValueTypeFullName: WideString; safecall;
    procedure Set_ValueTypeFullName(const pRetVal: WideString); safecall;
    function Get_ValueTypeCode: TypeCode; safecall;
    procedure Set_ValueTypeCode(pRetVal: TypeCode); safecall;
    function Get_AttributeData: _UAAttributeData; safecall;
    procedure _Set_AttributeData(const pRetVal: _UAAttributeData); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property State: OleVariant read Get_State write _Set_State;
    property endpointDescriptor: _UAEndpointDescriptor read Get_endpointDescriptor write _Set_endpointDescriptor;
    property NodeDescriptor: _UANodeDescriptor read Get_NodeDescriptor write _Set_NodeDescriptor;
    property AttributeId: UAAttributeId read Get_AttributeId write Set_AttributeId;
    property IndexRangeList: _UAIndexRangeList read Get_IndexRangeList write _Set_IndexRangeList;
    property AttributeType: _Type read Get_AttributeType;
    property ValueType: _Type read Get_ValueType write _Set_ValueType;
    property ValueTypeFullName: WideString read Get_ValueTypeFullName write Set_ValueTypeFullName;
    property ValueTypeCode: TypeCode read Get_ValueTypeCode write Set_ValueTypeCode;
    property AttributeData: _UAAttributeData read Get_AttributeData write _Set_AttributeData;
  end;

// *********************************************************************//
// DispIntf:  _UAWriteArgumentsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E76841C2-AE50-442A-9C5E-A95A03CDF6DE}
// *********************************************************************//
  _UAWriteArgumentsDisp = dispinterface
    ['{E76841C2-AE50-442A-9C5E-A95A03CDF6DE}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property State: OleVariant dispid 1610743814;
    function MemberwiseClone: _OperationArguments; dispid 1610743816;
    procedure SetState(State: OleVariant); dispid 1610743817;
    property endpointDescriptor: _UAEndpointDescriptor dispid 1610743818;
    property NodeDescriptor: _UANodeDescriptor dispid 1610743820;
    property AttributeId: UAAttributeId dispid 1610743822;
    property IndexRangeList: _UAIndexRangeList dispid 1610743824;
    property AttributeType: _Type readonly dispid 1610743826;
    property ValueType: _Type dispid 1610743827;
    property ValueTypeFullName: WideString dispid 1610743829;
    property ValueTypeCode: TypeCode dispid 1610743831;
    property AttributeData: _UAAttributeData dispid 1610743833;
  end;

// *********************************************************************//
// Interface: _UABrowsePathElementCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3EEAC651-8E16-46E2-A07B-ADE95F8EC36F}
// *********************************************************************//
  _UABrowsePathElementCollection = interface(IDispatch)
    ['{3EEAC651-8E16-46E2-A07B-ADE95F8EC36F}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_Item(index: Integer): _UABrowsePathElement; safecall;
    procedure _Set_Item(index: Integer; const pRetVal: _UABrowsePathElement); safecall;
    function Get_Count: Integer; safecall;
    function GetEnumerator: IEnumVARIANT; safecall;
    procedure Add(Item: OleVariant); safecall;
    procedure Clear; safecall;
    function Contains(Item: OleVariant): WordBool; safecall;
    function IndexOf(Item: OleVariant): Integer; safecall;
    procedure Insert(index: Integer; Item: OleVariant); safecall;
    function Remove(Item: OleVariant): WordBool; safecall;
    procedure RemoveAt(index: Integer); safecall;
    function Get_IsSimple: WordBool; safecall;
    function CommonPrefix(collection2: OleVariant): _UABrowsePathElementCollection; safecall;
    function CommonPrefixLength(collection2: OleVariant): Integer; safecall;
    function format(const DefaultNamespaceUriString: WideString): WideString; safecall;
    function IsPrefix(prefix: OleVariant): WordBool; safecall;
    function ToUAQualifiedNameCollection: _UAQualifiedNameCollection; safecall;
    property ToString: WideString read Get_ToString;
    property Item[index: Integer]: _UABrowsePathElement read Get_Item write _Set_Item; default;
    property Count: Integer read Get_Count;
    property IsSimple: WordBool read Get_IsSimple;
  end;

// *********************************************************************//
// DispIntf:  _UABrowsePathElementCollectionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3EEAC651-8E16-46E2-A07B-ADE95F8EC36F}
// *********************************************************************//
  _UABrowsePathElementCollectionDisp = dispinterface
    ['{3EEAC651-8E16-46E2-A07B-ADE95F8EC36F}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property Item[index: Integer]: _UABrowsePathElement dispid 0; default;
    property Count: Integer readonly dispid 1610743814;
    function GetEnumerator: IEnumVARIANT; dispid -4;
    procedure Add(Item: OleVariant); dispid 1610743816;
    procedure Clear; dispid 1610743817;
    function Contains(Item: OleVariant): WordBool; dispid 1610743818;
    function IndexOf(Item: OleVariant): Integer; dispid 1610743819;
    procedure Insert(index: Integer; Item: OleVariant); dispid 1610743820;
    function Remove(Item: OleVariant): WordBool; dispid 1610743821;
    procedure RemoveAt(index: Integer); dispid 1610743822;
    property IsSimple: WordBool readonly dispid 1610743823;
    function CommonPrefix(collection2: OleVariant): _UABrowsePathElementCollection; dispid 1610743824;
    function CommonPrefixLength(collection2: OleVariant): Integer; dispid 1610743825;
    function format(const DefaultNamespaceUriString: WideString): WideString; dispid 1610743826;
    function IsPrefix(prefix: OleVariant): WordBool; dispid 1610743827;
    function ToUAQualifiedNameCollection: _UAQualifiedNameCollection; dispid 1610743828;
  end;

// *********************************************************************//
// Interface: _UABrowsePath
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {36B8484E-1E5B-4D82-B542-787AC6FE74DA}
// *********************************************************************//
  _UABrowsePath = interface(IDispatch)
    ['{36B8484E-1E5B-4D82-B542-787AC6FE74DA}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_Elements: _UABrowsePathElementCollection; safecall;
    procedure _Set_Elements(const pRetVal: _UABrowsePathElementCollection); safecall;
    function Get_StartingNodeDescriptor: _UANodeDescriptor; safecall;
    procedure _Set_StartingNodeDescriptor(const pRetVal: _UANodeDescriptor); safecall;
    function Get_StartingNodeId: _UANodeId; safecall;
    procedure _Set_StartingNodeId(const pRetVal: _UANodeId); safecall;
    function Get_IsEmpty: WordBool; safecall;
    function Get_IsNull: WordBool; safecall;
    function Get_Length: Integer; safecall;
    procedure AppendElement(element: OleVariant); safecall;
    procedure AppendRelative(more: OleVariant); safecall;
    procedure Combine(const more: WideString; const DefaultNamespaceUriString: WideString); safecall;
    function Flatten: _UABrowsePath; safecall;
    function format(const DefaultNamespaceUriString: WideString): WideString; safecall;
    function GetLastElement: _UABrowsePathElement; safecall;
    function ToUANodeDescriptor: _UANodeDescriptor; safecall;
    function TryAppendRelative(ParsingFlags: UABrowsePathParsingFlags; const more: WideString; 
                               const DefaultNamespaceUriString: WideString): _StringParsingError; safecall;
    function TryCombine(ParsingFlags: UABrowsePathParsingFlags; const more: WideString; 
                        const DefaultNamespaceUriString: WideString): _StringParsingError; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Elements: _UABrowsePathElementCollection read Get_Elements write _Set_Elements;
    property StartingNodeDescriptor: _UANodeDescriptor read Get_StartingNodeDescriptor write _Set_StartingNodeDescriptor;
    property StartingNodeId: _UANodeId read Get_StartingNodeId write _Set_StartingNodeId;
    property IsEmpty: WordBool read Get_IsEmpty;
    property IsNull: WordBool read Get_IsNull;
    property Length: Integer read Get_Length;
  end;

// *********************************************************************//
// DispIntf:  _UABrowsePathDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {36B8484E-1E5B-4D82-B542-787AC6FE74DA}
// *********************************************************************//
  _UABrowsePathDisp = dispinterface
    ['{36B8484E-1E5B-4D82-B542-787AC6FE74DA}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property Elements: _UABrowsePathElementCollection dispid 1610743814;
    property StartingNodeDescriptor: _UANodeDescriptor dispid 1610743816;
    property StartingNodeId: _UANodeId dispid 1610743818;
    property IsEmpty: WordBool readonly dispid 1610743820;
    property IsNull: WordBool readonly dispid 1610743821;
    property Length: Integer readonly dispid 1610743822;
    procedure AppendElement(element: OleVariant); dispid 1610743823;
    procedure AppendRelative(more: OleVariant); dispid 1610743824;
    procedure Combine(const more: WideString; const DefaultNamespaceUriString: WideString); dispid 1610743825;
    function Flatten: _UABrowsePath; dispid 1610743826;
    function format(const DefaultNamespaceUriString: WideString): WideString; dispid 1610743827;
    function GetLastElement: _UABrowsePathElement; dispid 1610743828;
    function ToUANodeDescriptor: _UANodeDescriptor; dispid 1610743829;
    function TryAppendRelative(ParsingFlags: UABrowsePathParsingFlags; const more: WideString; 
                               const DefaultNamespaceUriString: WideString): _StringParsingError; dispid 1610743830;
    function TryCombine(ParsingFlags: UABrowsePathParsingFlags; const more: WideString; 
                        const DefaultNamespaceUriString: WideString): _StringParsingError; dispid 1610743831;
  end;

// *********************************************************************//
// Interface: _UABrowsePathElement
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F78C4C94-2D2D-4DCC-BAFF-68A86AD33627}
// *********************************************************************//
  _UABrowsePathElement = interface(IDispatch)
    ['{F78C4C94-2D2D-4DCC-BAFF-68A86AD33627}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_ElementType: UABrowsePathElementType; safecall;
    procedure Set_ElementType(pRetVal: UABrowsePathElementType); safecall;
    function Get_IncludeSubtypes: WordBool; safecall;
    procedure Set_IncludeSubtypes(pRetVal: WordBool); safecall;
    function Get_IsConfigured: WordBool; safecall;
    function Get_IsNull: WordBool; safecall;
    function Get_IsSimple: WordBool; safecall;
    function Get_ReferenceIsInverse: WordBool; safecall;
    function Get_ReferenceTypeImplied: WordBool; safecall;
    function Get_ReferenceTypeId: _UANodeId; safecall;
    procedure _Set_ReferenceTypeId(const pRetVal: _UANodeId); safecall;
    function Get_TargetName: _UAQualifiedName; safecall;
    procedure _Set_TargetName(const pRetVal: _UAQualifiedName); safecall;
    function format(const DefaultNamespaceUriString: WideString): WideString; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property ElementType: UABrowsePathElementType read Get_ElementType write Set_ElementType;
    property IncludeSubtypes: WordBool read Get_IncludeSubtypes write Set_IncludeSubtypes;
    property IsConfigured: WordBool read Get_IsConfigured;
    property IsNull: WordBool read Get_IsNull;
    property IsSimple: WordBool read Get_IsSimple;
    property ReferenceIsInverse: WordBool read Get_ReferenceIsInverse;
    property ReferenceTypeImplied: WordBool read Get_ReferenceTypeImplied;
    property ReferenceTypeId: _UANodeId read Get_ReferenceTypeId write _Set_ReferenceTypeId;
    property TargetName: _UAQualifiedName read Get_TargetName write _Set_TargetName;
  end;

// *********************************************************************//
// DispIntf:  _UABrowsePathElementDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F78C4C94-2D2D-4DCC-BAFF-68A86AD33627}
// *********************************************************************//
  _UABrowsePathElementDisp = dispinterface
    ['{F78C4C94-2D2D-4DCC-BAFF-68A86AD33627}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property ElementType: UABrowsePathElementType dispid 1610743814;
    property IncludeSubtypes: WordBool dispid 1610743816;
    property IsConfigured: WordBool readonly dispid 1610743818;
    property IsNull: WordBool readonly dispid 1610743819;
    property IsSimple: WordBool readonly dispid 1610743820;
    property ReferenceIsInverse: WordBool readonly dispid 1610743821;
    property ReferenceTypeImplied: WordBool readonly dispid 1610743822;
    property ReferenceTypeId: _UANodeId dispid 1610743823;
    property TargetName: _UAQualifiedName dispid 1610743825;
    function format(const DefaultNamespaceUriString: WideString): WideString; dispid 1610743827;
  end;

// *********************************************************************//
// Interface: _UABrowsePathFormatException
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {80ED3B9B-F034-49B0-AEFD-039A632D1CEA}
// *********************************************************************//
  _UABrowsePathFormatException = interface(IDispatch)
    ['{80ED3B9B-F034-49B0-AEFD-039A632D1CEA}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_Message: WideString; safecall;
    function Get_StackTrace: WideString; safecall;
    function Get_HelpLink: WideString; safecall;
    procedure Set_HelpLink(const pRetVal: WideString); safecall;
    function Get_Source: WideString; safecall;
    procedure Set_Source(const pRetVal: WideString); safecall;
    function Get_InnerException: _Exception; safecall;
    function Get_TargetSite: _MethodBase; safecall;
    function GetBaseException: _Exception; safecall;
    procedure GetObjectData(const info: _SerializationInfo; context: StreamingContext); safecall;
    function Get_Data: _Dictionary; safecall;
    function Get_HResult: Integer; safecall;
    function Get_ErrorId: WideString; safecall;
    function Get_FormatError: _StringParsingError; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Message: WideString read Get_Message;
    property StackTrace: WideString read Get_StackTrace;
    property HelpLink: WideString read Get_HelpLink write Set_HelpLink;
    property Source: WideString read Get_Source write Set_Source;
    property InnerException: _Exception read Get_InnerException;
    property TargetSite: _MethodBase read Get_TargetSite;
    property Data: _Dictionary read Get_Data;
    property HResult: Integer read Get_HResult;
    property ErrorId: WideString read Get_ErrorId;
    property FormatError: _StringParsingError read Get_FormatError;
  end;

// *********************************************************************//
// DispIntf:  _UABrowsePathFormatExceptionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {80ED3B9B-F034-49B0-AEFD-039A632D1CEA}
// *********************************************************************//
  _UABrowsePathFormatExceptionDisp = dispinterface
    ['{80ED3B9B-F034-49B0-AEFD-039A632D1CEA}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    property Message: WideString readonly dispid 1610743813;
    property StackTrace: WideString readonly dispid 1610743814;
    property HelpLink: WideString dispid 1610743815;
    property Source: WideString dispid 1610743817;
    property InnerException: _Exception readonly dispid 1610743819;
    property TargetSite: _MethodBase readonly dispid 1610743820;
    function GetBaseException: _Exception; dispid 1610743821;
    procedure GetObjectData(const info: _SerializationInfo; 
                            context: {NOT_OLEAUTO(StreamingContext)}OleVariant); dispid 1610743822;
    property Data: _Dictionary readonly dispid 1610743823;
    property HResult: Integer readonly dispid 1610743824;
    property ErrorId: WideString readonly dispid 1610743825;
    property FormatError: _StringParsingError readonly dispid 1610743826;
  end;

// *********************************************************************//
// Interface: _UABrowsePathParser
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7535B40D-25FC-4689-93FC-DA9D3C0654FB}
// *********************************************************************//
  _UABrowsePathParser = interface(IDispatch)
    ['{7535B40D-25FC-4689-93FC-DA9D3C0654FB}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_BasePath: _UABrowsePath; safecall;
    procedure _Set_BasePath(const pRetVal: _UABrowsePath); safecall;
    function Get_DefaultNamespaceUriString: WideString; safecall;
    procedure Set_DefaultNamespaceUriString(const pRetVal: WideString); safecall;
    function Get_ParsingFlags: UABrowsePathParsingFlags; safecall;
    procedure Set_ParsingFlags(pRetVal: UABrowsePathParsingFlags); safecall;
    function IsAbsolute(const value: WideString): WordBool; safecall;
    function Parse(const value: WideString): _UABrowsePath; safecall;
    function ParseRelative(const value: WideString): _UABrowsePathElementCollection; safecall;
    function TryParse(const value: WideString; out browsePath: OleVariant): _StringParsingError; safecall;
    function TryParseRelative(const value: WideString; browsePathElementCollection: OleVariant): _StringParsingError; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property BasePath: _UABrowsePath read Get_BasePath write _Set_BasePath;
    property DefaultNamespaceUriString: WideString read Get_DefaultNamespaceUriString write Set_DefaultNamespaceUriString;
    property ParsingFlags: UABrowsePathParsingFlags read Get_ParsingFlags write Set_ParsingFlags;
  end;

// *********************************************************************//
// DispIntf:  _UABrowsePathParserDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7535B40D-25FC-4689-93FC-DA9D3C0654FB}
// *********************************************************************//
  _UABrowsePathParserDisp = dispinterface
    ['{7535B40D-25FC-4689-93FC-DA9D3C0654FB}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    property BasePath: _UABrowsePath dispid 1610743813;
    property DefaultNamespaceUriString: WideString dispid 1610743815;
    property ParsingFlags: UABrowsePathParsingFlags dispid 1610743817;
    function IsAbsolute(const value: WideString): WordBool; dispid 1610743819;
    function Parse(const value: WideString): _UABrowsePath; dispid 1610743820;
    function ParseRelative(const value: WideString): _UABrowsePathElementCollection; dispid 1610743821;
    function TryParse(const value: WideString; out browsePath: OleVariant): _StringParsingError; dispid 1610743822;
    function TryParseRelative(const value: WideString; browsePathElementCollection: OleVariant): _StringParsingError; dispid 1610743823;
  end;

// *********************************************************************//
// Interface: _UAModelNodeDescriptor
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {44FDAC9F-DE45-452B-BF72-AD1F9D5D6428}
// *********************************************************************//
  _UAModelNodeDescriptor = interface(IDispatch)
    ['{44FDAC9F-DE45-452B-BF72-AD1F9D5D6428}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_endpointDescriptor: _UAEndpointDescriptor; safecall;
    procedure _Set_endpointDescriptor(const pRetVal: _UAEndpointDescriptor); safecall;
    function Get_IsNull: WordBool; safecall;
    function Get_NodeDescriptor: _UANodeDescriptor; safecall;
    procedure _Set_NodeDescriptor(const pRetVal: _UANodeDescriptor); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property endpointDescriptor: _UAEndpointDescriptor read Get_endpointDescriptor write _Set_endpointDescriptor;
    property IsNull: WordBool read Get_IsNull;
    property NodeDescriptor: _UANodeDescriptor read Get_NodeDescriptor write _Set_NodeDescriptor;
  end;

// *********************************************************************//
// DispIntf:  _UAModelNodeDescriptorDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {44FDAC9F-DE45-452B-BF72-AD1F9D5D6428}
// *********************************************************************//
  _UAModelNodeDescriptorDisp = dispinterface
    ['{44FDAC9F-DE45-452B-BF72-AD1F9D5D6428}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property endpointDescriptor: _UAEndpointDescriptor dispid 1610743814;
    property IsNull: WordBool readonly dispid 1610743816;
    property NodeDescriptor: _UANodeDescriptor dispid 1610743817;
  end;

// *********************************************************************//
// Interface: _EasyUAClientServerApplication
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B7F50F59-162D-4BAD-829F-3069BD5BB8C3}
// *********************************************************************//
  _EasyUAClientServerApplication = interface(IDispatch)
    ['{B7F50F59-162D-4BAD-829F-3069BD5BB8C3}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_ApplicationIdDictionary: _StringUANodeIdReadOnlyDictionary; safecall;
    function Get_ApplicationStoreGroup: IUnknown; safecall;
    function Get_CertificateGenerationParameters: _CertificateGenerationParameters; safecall;
    function Get_CertificateRequestParameters: _UACertificateRequestParameters; safecall;
    function Get_HostNames: _StringCollection; safecall;
    function Get_SupportsGds: WordBool; safecall;
    function AssureOwnCertificate(createOwnCertificateArguments: OleVariant): WordBool; safecall;
    procedure CreateOwnCertificate(createOwnCertificateArguments: OleVariant); safecall;
    procedure ExportApplicationConfiguration(const stream: _Stream); safecall;
    procedure ExportApplicationConfigurationToFile(const filePath: WideString); safecall;
    procedure ExportOwnCertificateToFile(exportCertificateArguments: OleVariant); safecall;
    procedure ExportRegisteredApplication(const stream: _Stream); safecall;
    procedure ExportRegisteredApplicationToFile(const filePath: WideString); safecall;
    procedure ExportSecuredApplication(const stream: _Stream); safecall;
    procedure ExportSecuredApplicationToFile(const filePath: WideString); safecall;
    function FindGdsRegistrations(gdsEndpointDescriptor: OleVariant): _UANodeIdUAApplicationElementReadOnlyDictionary; safecall;
    function FindOwnCertificate(const certificateSubId: WideString): _PkiCertificate; safecall;
    function GetApplicationElement: _UAApplicationElement; safecall;
    function GetApplicationId(gdsEndpointDescriptor: OleVariant): _UANodeId; safecall;
    function GetCertificateSubjectName(const certificateSubId: WideString): WideString; safecall;
    function GetCertificateSubjectNameDictionary: _StringStringDictionary; safecall;
    function GetEffectiveApplicationManifest: _UAApplicationManifest; safecall;
    function GetEffectiveHostNames(alternateHostNames: OleVariant): _StringCollection; safecall;
    function GetPrivateKeyPasswordStrength(const certificateSubId: WideString): Single; safecall;
    function HasOwnCertificate(const certificateSubId: WideString): WordBool; safecall;
    function HasPrivateKeyPassword(const certificateSubId: WideString): WordBool; safecall;
    procedure ImportOwnCertificateFromFile(importCertificateArguments: OleVariant); safecall;
    function ListCertificateSubIds: _StringSet; safecall;
    function ListCertificateTypeElements(gdsEndpointDescriptor: OleVariant; 
                                         applicationStoreKind: PkiApplicationStoreKind): _UACertificateTypeElementCollection; safecall;
    function ObtainNewCertificate(Arguments: OleVariant): _PkiCertificate; safecall;
    function ProtectOrUnprotectOwnCertificate(const certificateSubId: WideString; 
                                              const newPrivateKeyPassword: WideString): WordBool; safecall;
    procedure ProtectOwnCertificate(const newPrivateKeyPassword: WideString); safecall;
    function RefreshTrustLists(gdsEndpointDescriptor: OleVariant; updateGdsRegistration: WordBool): UATrustListMasks; safecall;
    function RegisterToGds(gdsEndpointDescriptor: OleVariant): _UANodeId; safecall;
    function RemoveOwnCertificates(const certificateSubIdPattern: WideString; mustExist: WordBool; 
                                   updateTrustedPeerCertificates: WordBool): Integer; safecall;
    procedure RemovePrivateKeyPassword(const certificateSubId: WideString); safecall;
    procedure SetPrivateKeyPassword(const certificateSubId: WideString; 
                                    const privateKeyPassword: WideString); safecall;
    procedure UnprotectOwnCertificate; safecall;
    procedure UnregisterFromGds(gdsEndpointDescriptor: OleVariant); safecall;
    function updateGdsRegistration(gdsEndpointDescriptor: OleVariant): _UANodeId; safecall;
    procedure ValidateOwnCertificate(certificateGenerationArguments: OleVariant); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property ApplicationIdDictionary: _StringUANodeIdReadOnlyDictionary read Get_ApplicationIdDictionary;
    property ApplicationStoreGroup: IUnknown read Get_ApplicationStoreGroup;
    property CertificateGenerationParameters: _CertificateGenerationParameters read Get_CertificateGenerationParameters;
    property CertificateRequestParameters: _UACertificateRequestParameters read Get_CertificateRequestParameters;
    property HostNames: _StringCollection read Get_HostNames;
    property SupportsGds: WordBool read Get_SupportsGds;
  end;

// *********************************************************************//
// DispIntf:  _EasyUAClientServerApplicationDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B7F50F59-162D-4BAD-829F-3069BD5BB8C3}
// *********************************************************************//
  _EasyUAClientServerApplicationDisp = dispinterface
    ['{B7F50F59-162D-4BAD-829F-3069BD5BB8C3}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    property ApplicationIdDictionary: _StringUANodeIdReadOnlyDictionary readonly dispid 1610743813;
    property ApplicationStoreGroup: IUnknown readonly dispid 1610743814;
    property CertificateGenerationParameters: _CertificateGenerationParameters readonly dispid 1610743815;
    property CertificateRequestParameters: _UACertificateRequestParameters readonly dispid 1610743816;
    property HostNames: _StringCollection readonly dispid 1610743817;
    property SupportsGds: WordBool readonly dispid 1610743818;
    function AssureOwnCertificate(createOwnCertificateArguments: OleVariant): WordBool; dispid 1610743819;
    procedure CreateOwnCertificate(createOwnCertificateArguments: OleVariant); dispid 1610743820;
    procedure ExportApplicationConfiguration(const stream: _Stream); dispid 1610743821;
    procedure ExportApplicationConfigurationToFile(const filePath: WideString); dispid 1610743822;
    procedure ExportOwnCertificateToFile(exportCertificateArguments: OleVariant); dispid 1610743823;
    procedure ExportRegisteredApplication(const stream: _Stream); dispid 1610743824;
    procedure ExportRegisteredApplicationToFile(const filePath: WideString); dispid 1610743825;
    procedure ExportSecuredApplication(const stream: _Stream); dispid 1610743826;
    procedure ExportSecuredApplicationToFile(const filePath: WideString); dispid 1610743827;
    function FindGdsRegistrations(gdsEndpointDescriptor: OleVariant): _UANodeIdUAApplicationElementReadOnlyDictionary; dispid 1610743828;
    function FindOwnCertificate(const certificateSubId: WideString): _PkiCertificate; dispid 1610743829;
    function GetApplicationElement: _UAApplicationElement; dispid 1610743830;
    function GetApplicationId(gdsEndpointDescriptor: OleVariant): _UANodeId; dispid 1610743831;
    function GetCertificateSubjectName(const certificateSubId: WideString): WideString; dispid 1610743832;
    function GetCertificateSubjectNameDictionary: _StringStringDictionary; dispid 1610743833;
    function GetEffectiveApplicationManifest: _UAApplicationManifest; dispid 1610743834;
    function GetEffectiveHostNames(alternateHostNames: OleVariant): _StringCollection; dispid 1610743835;
    function GetPrivateKeyPasswordStrength(const certificateSubId: WideString): Single; dispid 1610743836;
    function HasOwnCertificate(const certificateSubId: WideString): WordBool; dispid 1610743837;
    function HasPrivateKeyPassword(const certificateSubId: WideString): WordBool; dispid 1610743838;
    procedure ImportOwnCertificateFromFile(importCertificateArguments: OleVariant); dispid 1610743839;
    function ListCertificateSubIds: _StringSet; dispid 1610743840;
    function ListCertificateTypeElements(gdsEndpointDescriptor: OleVariant; 
                                         applicationStoreKind: PkiApplicationStoreKind): _UACertificateTypeElementCollection; dispid 1610743841;
    function ObtainNewCertificate(Arguments: OleVariant): _PkiCertificate; dispid 1610743842;
    function ProtectOrUnprotectOwnCertificate(const certificateSubId: WideString; 
                                              const newPrivateKeyPassword: WideString): WordBool; dispid 1610743843;
    procedure ProtectOwnCertificate(const newPrivateKeyPassword: WideString); dispid 1610743844;
    function RefreshTrustLists(gdsEndpointDescriptor: OleVariant; updateGdsRegistration: WordBool): UATrustListMasks; dispid 1610743845;
    function RegisterToGds(gdsEndpointDescriptor: OleVariant): _UANodeId; dispid 1610743846;
    function RemoveOwnCertificates(const certificateSubIdPattern: WideString; mustExist: WordBool; 
                                   updateTrustedPeerCertificates: WordBool): Integer; dispid 1610743847;
    procedure RemovePrivateKeyPassword(const certificateSubId: WideString); dispid 1610743848;
    procedure SetPrivateKeyPassword(const certificateSubId: WideString; 
                                    const privateKeyPassword: WideString); dispid 1610743849;
    procedure UnprotectOwnCertificate; dispid 1610743850;
    procedure UnregisterFromGds(gdsEndpointDescriptor: OleVariant); dispid 1610743851;
    function updateGdsRegistration(gdsEndpointDescriptor: OleVariant): _UANodeId; dispid 1610743852;
    procedure ValidateOwnCertificate(certificateGenerationArguments: OleVariant); dispid 1610743853;
  end;

// *********************************************************************//
// Interface: _UACertificateGroupElementCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {73732AA9-0086-4073-8CE4-BE4A590D9F14}
// *********************************************************************//
  _UACertificateGroupElementCollection = interface(IDispatch)
    ['{73732AA9-0086-4073-8CE4-BE4A590D9F14}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_Item(key: OleVariant): _UACertificateGroupElement; safecall;
    function Get_Count: Integer; safecall;
    function GetEnumerator: IEnumVARIANT; safecall;
    procedure Add(Item: OleVariant); safecall;
    procedure Clear; safecall;
    function Contains(Item: OleVariant): WordBool; safecall;
    function IndexOf(Item: OleVariant): Integer; safecall;
    function Remove(key: OleVariant): WordBool; safecall;
    procedure RemoveAt(index: Integer); safecall;
    function ToList: _ElasticVector; safecall;
    function TryGetValue(key: OleVariant; out Item: OleVariant): WordBool; safecall;
    function Clone: OleVariant; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Item[key: OleVariant]: _UACertificateGroupElement read Get_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  _UACertificateGroupElementCollectionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {73732AA9-0086-4073-8CE4-BE4A590D9F14}
// *********************************************************************//
  _UACertificateGroupElementCollectionDisp = dispinterface
    ['{73732AA9-0086-4073-8CE4-BE4A590D9F14}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 1610743812;
    property Item[key: OleVariant]: _UACertificateGroupElement readonly dispid 0; default;
    property Count: Integer readonly dispid 1610743814;
    function GetEnumerator: IEnumVARIANT; dispid -4;
    procedure Add(Item: OleVariant); dispid 1610743816;
    procedure Clear; dispid 1610743817;
    function Contains(Item: OleVariant): WordBool; dispid 1610743818;
    function IndexOf(Item: OleVariant): Integer; dispid 1610743819;
    function Remove(key: OleVariant): WordBool; dispid 1610743820;
    procedure RemoveAt(index: Integer); dispid 1610743821;
    function ToList: _ElasticVector; dispid 1610743822;
    function TryGetValue(key: OleVariant; out Item: OleVariant): WordBool; dispid 1610743823;
    function Clone: OleVariant; dispid 1610743824;
  end;

// *********************************************************************//
// Interface: _UAApplicationElement
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5D1D840D-60F0-481C-9DDD-1A9F2DF5CFDA}
// *********************************************************************//
  _UAApplicationElement = interface(IDispatch)
    ['{5D1D840D-60F0-481C-9DDD-1A9F2DF5CFDA}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_applicationName: WideString; safecall;
    procedure Set_applicationName(const pRetVal: WideString); safecall;
    function Get_ApplicationType: UAApplicationTypes; safecall;
    procedure Set_ApplicationType(pRetVal: UAApplicationTypes); safecall;
    function Get_applicationUriString: WideString; safecall;
    procedure Set_applicationUriString(const pRetVal: WideString); safecall;
    function Get_DiscoveryUriString: WideString; safecall;
    procedure Set_DiscoveryUriString(const pRetVal: WideString); safecall;
    function Get_DiscoveryUriStrings: _StringCollection; safecall;
    procedure _Set_DiscoveryUriStrings(const pRetVal: _StringCollection); safecall;
    function Get_productUriString: WideString; safecall;
    procedure Set_productUriString(const pRetVal: WideString); safecall;
    function Get_serverCapabilities: _StringCollection; safecall;
    procedure _Set_serverCapabilities(const pRetVal: _StringCollection); safecall;
    function Get_ServerCapabilitySet: _StringSet; safecall;
    function ToUAEndpointDescriptor: _UAEndpointDescriptor; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property applicationName: WideString read Get_applicationName write Set_applicationName;
    property ApplicationType: UAApplicationTypes read Get_ApplicationType write Set_ApplicationType;
    property applicationUriString: WideString read Get_applicationUriString write Set_applicationUriString;
    property DiscoveryUriString: WideString read Get_DiscoveryUriString write Set_DiscoveryUriString;
    property DiscoveryUriStrings: _StringCollection read Get_DiscoveryUriStrings write _Set_DiscoveryUriStrings;
    property productUriString: WideString read Get_productUriString write Set_productUriString;
    property serverCapabilities: _StringCollection read Get_serverCapabilities write _Set_serverCapabilities;
    property ServerCapabilitySet: _StringSet read Get_ServerCapabilitySet;
  end;

// *********************************************************************//
// DispIntf:  _UAApplicationElementDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5D1D840D-60F0-481C-9DDD-1A9F2DF5CFDA}
// *********************************************************************//
  _UAApplicationElementDisp = dispinterface
    ['{5D1D840D-60F0-481C-9DDD-1A9F2DF5CFDA}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property applicationName: WideString dispid 1610743814;
    property ApplicationType: UAApplicationTypes dispid 1610743816;
    property applicationUriString: WideString dispid 1610743818;
    property DiscoveryUriString: WideString dispid 1610743820;
    property DiscoveryUriStrings: _StringCollection dispid 1610743822;
    property productUriString: WideString dispid 1610743824;
    property serverCapabilities: _StringCollection dispid 1610743826;
    property ServerCapabilitySet: _StringSet readonly dispid 1610743828;
    function ToUAEndpointDescriptor: _UAEndpointDescriptor; dispid 1610743829;
  end;

// *********************************************************************//
// Interface: _UACertificateGroupElement
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {62DEFC9F-9E02-4C17-9790-3502A45ED5AE}
// *********************************************************************//
  _UACertificateGroupElement = interface(IDispatch)
    ['{62DEFC9F-9E02-4C17-9790-3502A45ED5AE}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_certificateGroupId: _UANodeId; safecall;
    procedure _Set_certificateGroupId(const pRetVal: _UANodeId); safecall;
    function Get_CertificateTypeIds: _UANodeIdCollection; safecall;
    function Get_IsBuiltIn: WordBool; safecall;
    procedure Set_IsBuiltIn(pRetVal: WordBool); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property certificateGroupId: _UANodeId read Get_certificateGroupId write _Set_certificateGroupId;
    property CertificateTypeIds: _UANodeIdCollection read Get_CertificateTypeIds;
    property IsBuiltIn: WordBool read Get_IsBuiltIn write Set_IsBuiltIn;
    property Name: WideString read Get_Name write Set_Name;
  end;

// *********************************************************************//
// DispIntf:  _UACertificateGroupElementDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {62DEFC9F-9E02-4C17-9790-3502A45ED5AE}
// *********************************************************************//
  _UACertificateGroupElementDisp = dispinterface
    ['{62DEFC9F-9E02-4C17-9790-3502A45ED5AE}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property certificateGroupId: _UANodeId dispid 1610743814;
    property CertificateTypeIds: _UANodeIdCollection readonly dispid 1610743816;
    property IsBuiltIn: WordBool dispid 1610743817;
    property Name: WideString dispid 1610743819;
  end;

// *********************************************************************//
// Interface: _EasyUACertificateManagementClient
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0BD47EE3-1436-4686-A88F-9E1577FBE764}
// *********************************************************************//
  _EasyUACertificateManagementClient = interface(IDispatch)
    ['{0BD47EE3-1436-4686-A88F-9E1577FBE764}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_CustomReference: WideString; safecall;
    procedure Set_CustomReference(const pRetVal: WideString); safecall;
    function Clone: OleVariant; safecall;
    function GetService(const serviceType: _Type): OleVariant; safecall;
    function GetServiceByName(const serviceTypeName: WideString): OleVariant; safecall;
    function ValueEquals(other: OleVariant): WordBool; safecall;
    function Get_ClientSelector: _EasyUAClientSelector; safecall;
    procedure _Set_ClientSelector(const pRetVal: _EasyUAClientSelector); safecall;
    function Get_IsDerived: WordBool; safecall;
    function AsClient: _EasyUAClient; safecall;
    function BrowseCertificateGroups(gdsEndpointDescriptor: OleVariant): _UACertificateGroupElementCollection; safecall;
    procedure FinishRequest(gdsEndpointDescriptor: OleVariant; applicationId: OleVariant; 
                            requestId: OleVariant; out certificate: OleVariant; 
                            out privateKey: OleVariant; out issuerCertificateArray: OleVariant); safecall;
    function GetCertificateGroupElement(gdsEndpointDescriptor: OleVariant; 
                                        certificateGroupId: OleVariant): _UACertificateGroupElement; safecall;
    function GetCertificateGroupIds(gdsEndpointDescriptor: OleVariant; applicationId: OleVariant): PSafeArray; safecall;
    function GetCertificateStatus(gdsEndpointDescriptor: OleVariant; applicationId: OleVariant; 
                                  certificateGroupId: OleVariant; certificateTypeId: OleVariant): WordBool; safecall;
    function GetTrustList(gdsEndpointDescriptor: OleVariant; applicationId: OleVariant; 
                          certificateGroupId: OleVariant): _UANodeId; safecall;
    function StartNewKeyPairRequest(gdsEndpointDescriptor: OleVariant; applicationId: OleVariant; 
                                    certificateGroupId: OleVariant; certificateTypeId: OleVariant; 
                                    const subjectName: WideString; domainNames: OleVariant; 
                                    const privateKeyFormat: WideString; 
                                    const privateKeyPassword: WideString): _UANodeId; safecall;
    function StartSigningRequest(gdsEndpointDescriptor: OleVariant; applicationId: OleVariant; 
                                 certificateGroupId: OleVariant; certificateTypeId: OleVariant; 
                                 certificateRequest: OleVariant): _UANodeId; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property CustomReference: WideString read Get_CustomReference write Set_CustomReference;
    property ClientSelector: _EasyUAClientSelector read Get_ClientSelector write _Set_ClientSelector;
    property IsDerived: WordBool read Get_IsDerived;
  end;

// *********************************************************************//
// DispIntf:  _EasyUACertificateManagementClientDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0BD47EE3-1436-4686-A88F-9E1577FBE764}
// *********************************************************************//
  _EasyUACertificateManagementClientDisp = dispinterface
    ['{0BD47EE3-1436-4686-A88F-9E1577FBE764}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    property CustomReference: WideString dispid 1610743813;
    function Clone: OleVariant; dispid 1610743815;
    function GetService(const serviceType: _Type): OleVariant; dispid 1610743816;
    function GetServiceByName(const serviceTypeName: WideString): OleVariant; dispid 1610743817;
    function ValueEquals(other: OleVariant): WordBool; dispid 1610743818;
    property ClientSelector: _EasyUAClientSelector dispid 1610743819;
    property IsDerived: WordBool readonly dispid 1610743821;
    function AsClient: _EasyUAClient; dispid 1610743822;
    function BrowseCertificateGroups(gdsEndpointDescriptor: OleVariant): _UACertificateGroupElementCollection; dispid 1610743823;
    procedure FinishRequest(gdsEndpointDescriptor: OleVariant; applicationId: OleVariant; 
                            requestId: OleVariant; out certificate: OleVariant; 
                            out privateKey: OleVariant; out issuerCertificateArray: OleVariant); dispid 1610743824;
    function GetCertificateGroupElement(gdsEndpointDescriptor: OleVariant; 
                                        certificateGroupId: OleVariant): _UACertificateGroupElement; dispid 1610743825;
    function GetCertificateGroupIds(gdsEndpointDescriptor: OleVariant; applicationId: OleVariant): {NOT_OLEAUTO(PSafeArray)}OleVariant; dispid 1610743826;
    function GetCertificateStatus(gdsEndpointDescriptor: OleVariant; applicationId: OleVariant; 
                                  certificateGroupId: OleVariant; certificateTypeId: OleVariant): WordBool; dispid 1610743827;
    function GetTrustList(gdsEndpointDescriptor: OleVariant; applicationId: OleVariant; 
                          certificateGroupId: OleVariant): _UANodeId; dispid 1610743828;
    function StartNewKeyPairRequest(gdsEndpointDescriptor: OleVariant; applicationId: OleVariant; 
                                    certificateGroupId: OleVariant; certificateTypeId: OleVariant; 
                                    const subjectName: WideString; domainNames: OleVariant; 
                                    const privateKeyFormat: WideString; 
                                    const privateKeyPassword: WideString): _UANodeId; dispid 1610743829;
    function StartSigningRequest(gdsEndpointDescriptor: OleVariant; applicationId: OleVariant; 
                                 certificateGroupId: OleVariant; certificateTypeId: OleVariant; 
                                 certificateRequest: OleVariant): _UANodeId; dispid 1610743830;
  end;

// *********************************************************************//
// Interface: _EasyUAGlobalDiscoveryClient
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9832BE91-FBD4-40A5-99DF-7BE9222E9A80}
// *********************************************************************//
  _EasyUAGlobalDiscoveryClient = interface(IDispatch)
    ['{9832BE91-FBD4-40A5-99DF-7BE9222E9A80}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_CustomReference: WideString; safecall;
    procedure Set_CustomReference(const pRetVal: WideString); safecall;
    function Clone: OleVariant; safecall;
    function GetService(const serviceType: _Type): OleVariant; safecall;
    function GetServiceByName(const serviceTypeName: WideString): OleVariant; safecall;
    function ValueEquals(other: OleVariant): WordBool; safecall;
    function Get_ClientSelector: _EasyUAClientSelector; safecall;
    procedure _Set_ClientSelector(const pRetVal: _EasyUAClientSelector); safecall;
    function Get_IsDerived: WordBool; safecall;
    function AsClient: _EasyUAClient; safecall;
    function FindApplications(gdsEndpointDescriptor: OleVariant; 
                              const applicationUriString: WideString): PSafeArray; safecall;
    function GetApplication(gdsEndpointDescriptor: OleVariant; applicationId: OleVariant): _UAApplicationRecordDataType; safecall;
    procedure QueryApplications(gdsEndpointDescriptor: OleVariant; startingRecordId: Integer; 
                                maximumRecordsToReturn: Integer; const applicationName: WideString; 
                                const applicationUriString: WideString; 
                                applicationTypes: UAApplicationTypes; 
                                const productUriString: WideString; serverCapabilities: OleVariant; 
                                out lastCounterResetTime: TDateTime; out nextRecordId: Integer; 
                                out applications: OleVariant); safecall;
    procedure QueryServers(gdsEndpointDescriptor: OleVariant; startingRecordId: Integer; 
                           maximumRecordsToReturn: Integer; const applicationName: WideString; 
                           const applicationUriString: WideString; 
                           const productUriString: WideString; serverCapabilities: OleVariant; 
                           out lastCounterResetTime: TDateTime; out serverOnNetworkArray: OleVariant); safecall;
    function RegisterApplication(gdsEndpointDescriptor: OleVariant; applicationRecord: OleVariant): _UANodeId; safecall;
    procedure UnregisterApplication(gdsEndpointDescriptor: OleVariant; applicationId: OleVariant); safecall;
    procedure UpdateApplication(gdsEndpointDescriptor: OleVariant; applicationRecord: OleVariant); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property CustomReference: WideString read Get_CustomReference write Set_CustomReference;
    property ClientSelector: _EasyUAClientSelector read Get_ClientSelector write _Set_ClientSelector;
    property IsDerived: WordBool read Get_IsDerived;
  end;

// *********************************************************************//
// DispIntf:  _EasyUAGlobalDiscoveryClientDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9832BE91-FBD4-40A5-99DF-7BE9222E9A80}
// *********************************************************************//
  _EasyUAGlobalDiscoveryClientDisp = dispinterface
    ['{9832BE91-FBD4-40A5-99DF-7BE9222E9A80}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    property CustomReference: WideString dispid 1610743813;
    function Clone: OleVariant; dispid 1610743815;
    function GetService(const serviceType: _Type): OleVariant; dispid 1610743816;
    function GetServiceByName(const serviceTypeName: WideString): OleVariant; dispid 1610743817;
    function ValueEquals(other: OleVariant): WordBool; dispid 1610743818;
    property ClientSelector: _EasyUAClientSelector dispid 1610743819;
    property IsDerived: WordBool readonly dispid 1610743821;
    function AsClient: _EasyUAClient; dispid 1610743822;
    function FindApplications(gdsEndpointDescriptor: OleVariant; 
                              const applicationUriString: WideString): {NOT_OLEAUTO(PSafeArray)}OleVariant; dispid 1610743823;
    function GetApplication(gdsEndpointDescriptor: OleVariant; applicationId: OleVariant): _UAApplicationRecordDataType; dispid 1610743824;
    procedure QueryApplications(gdsEndpointDescriptor: OleVariant; startingRecordId: Integer; 
                                maximumRecordsToReturn: Integer; const applicationName: WideString; 
                                const applicationUriString: WideString; 
                                applicationTypes: UAApplicationTypes; 
                                const productUriString: WideString; serverCapabilities: OleVariant; 
                                out lastCounterResetTime: TDateTime; out nextRecordId: Integer; 
                                out applications: OleVariant); dispid 1610743825;
    procedure QueryServers(gdsEndpointDescriptor: OleVariant; startingRecordId: Integer; 
                           maximumRecordsToReturn: Integer; const applicationName: WideString; 
                           const applicationUriString: WideString; 
                           const productUriString: WideString; serverCapabilities: OleVariant; 
                           out lastCounterResetTime: TDateTime; out serverOnNetworkArray: OleVariant); dispid 1610743826;
    function RegisterApplication(gdsEndpointDescriptor: OleVariant; applicationRecord: OleVariant): _UANodeId; dispid 1610743827;
    procedure UnregisterApplication(gdsEndpointDescriptor: OleVariant; applicationId: OleVariant); dispid 1610743828;
    procedure UpdateApplication(gdsEndpointDescriptor: OleVariant; applicationRecord: OleVariant); dispid 1610743829;
  end;

// *********************************************************************//
// Interface: _UAApplicationRecordDataType
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DC2726E7-1704-45E3-885B-F8F414CD483F}
// *********************************************************************//
  _UAApplicationRecordDataType = interface(IDispatch)
    ['{DC2726E7-1704-45E3-885B-F8F414CD483F}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_applicationName: WideString; safecall;
    procedure Set_applicationName(const pRetVal: WideString); safecall;
    function Get_ApplicationType: UAApplicationTypes; safecall;
    procedure Set_ApplicationType(pRetVal: UAApplicationTypes); safecall;
    function Get_applicationUriString: WideString; safecall;
    procedure Set_applicationUriString(const pRetVal: WideString); safecall;
    function Get_DiscoveryUriString: WideString; safecall;
    procedure Set_DiscoveryUriString(const pRetVal: WideString); safecall;
    function Get_DiscoveryUriStrings: _StringCollection; safecall;
    procedure _Set_DiscoveryUriStrings(const pRetVal: _StringCollection); safecall;
    function Get_productUriString: WideString; safecall;
    procedure Set_productUriString(const pRetVal: WideString); safecall;
    function Get_serverCapabilities: _StringCollection; safecall;
    procedure _Set_serverCapabilities(const pRetVal: _StringCollection); safecall;
    function Get_ServerCapabilitySet: _StringSet; safecall;
    function ToUAEndpointDescriptor: _UAEndpointDescriptor; safecall;
    function Get_applicationId: _UANodeId; safecall;
    procedure _Set_applicationId(const pRetVal: _UANodeId); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property applicationName: WideString read Get_applicationName write Set_applicationName;
    property ApplicationType: UAApplicationTypes read Get_ApplicationType write Set_ApplicationType;
    property applicationUriString: WideString read Get_applicationUriString write Set_applicationUriString;
    property DiscoveryUriString: WideString read Get_DiscoveryUriString write Set_DiscoveryUriString;
    property DiscoveryUriStrings: _StringCollection read Get_DiscoveryUriStrings write _Set_DiscoveryUriStrings;
    property productUriString: WideString read Get_productUriString write Set_productUriString;
    property serverCapabilities: _StringCollection read Get_serverCapabilities write _Set_serverCapabilities;
    property ServerCapabilitySet: _StringSet read Get_ServerCapabilitySet;
    property applicationId: _UANodeId read Get_applicationId write _Set_applicationId;
  end;

// *********************************************************************//
// DispIntf:  _UAApplicationRecordDataTypeDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DC2726E7-1704-45E3-885B-F8F414CD483F}
// *********************************************************************//
  _UAApplicationRecordDataTypeDisp = dispinterface
    ['{DC2726E7-1704-45E3-885B-F8F414CD483F}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property applicationName: WideString dispid 1610743814;
    property ApplicationType: UAApplicationTypes dispid 1610743816;
    property applicationUriString: WideString dispid 1610743818;
    property DiscoveryUriString: WideString dispid 1610743820;
    property DiscoveryUriStrings: _StringCollection dispid 1610743822;
    property productUriString: WideString dispid 1610743824;
    property serverCapabilities: _StringCollection dispid 1610743826;
    property ServerCapabilitySet: _StringSet readonly dispid 1610743828;
    function ToUAEndpointDescriptor: _UAEndpointDescriptor; dispid 1610743829;
    property applicationId: _UANodeId dispid 1610743830;
  end;

// *********************************************************************//
// Interface: _UAFilterOperand
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AB8DFD6E-2992-43A1-80A8-95D8A8CE77A3}
// *********************************************************************//
  _UAFilterOperand = interface(IDispatch)
    ['{AB8DFD6E-2992-43A1-80A8-95D8A8CE77A3}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_TotalElements: Integer; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property TotalElements: Integer read Get_TotalElements;
  end;

// *********************************************************************//
// DispIntf:  _UAFilterOperandDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AB8DFD6E-2992-43A1-80A8-95D8A8CE77A3}
// *********************************************************************//
  _UAFilterOperandDisp = dispinterface
    ['{AB8DFD6E-2992-43A1-80A8-95D8A8CE77A3}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property TotalElements: Integer readonly dispid 1610743814;
  end;

// *********************************************************************//
// Interface: _UAFilterOperandCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A95C464A-D2E7-4C2A-B018-49B110A31A47}
// *********************************************************************//
  _UAFilterOperandCollection = interface(IDispatch)
    ['{A95C464A-D2E7-4C2A-B018-49B110A31A47}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_Item(index: Integer): _UAFilterOperand; safecall;
    procedure _Set_Item(index: Integer; const pRetVal: _UAFilterOperand); safecall;
    function Get_Count: Integer; safecall;
    function GetEnumerator: IEnumVARIANT; safecall;
    procedure Add(Item: OleVariant); safecall;
    procedure Clear; safecall;
    function Contains(Item: OleVariant): WordBool; safecall;
    function IndexOf(Item: OleVariant): Integer; safecall;
    procedure Insert(index: Integer; Item: OleVariant); safecall;
    function Remove(Item: OleVariant): WordBool; safecall;
    procedure RemoveAt(index: Integer); safecall;
    property ToString: WideString read Get_ToString;
    property Item[index: Integer]: _UAFilterOperand read Get_Item write _Set_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  _UAFilterOperandCollectionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A95C464A-D2E7-4C2A-B018-49B110A31A47}
// *********************************************************************//
  _UAFilterOperandCollectionDisp = dispinterface
    ['{A95C464A-D2E7-4C2A-B018-49B110A31A47}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property Item[index: Integer]: _UAFilterOperand dispid 0; default;
    property Count: Integer readonly dispid 1610743814;
    function GetEnumerator: IEnumVARIANT; dispid -4;
    procedure Add(Item: OleVariant); dispid 1610743816;
    procedure Clear; dispid 1610743817;
    function Contains(Item: OleVariant): WordBool; dispid 1610743818;
    function IndexOf(Item: OleVariant): Integer; dispid 1610743819;
    procedure Insert(index: Integer; Item: OleVariant); dispid 1610743820;
    function Remove(Item: OleVariant): WordBool; dispid 1610743821;
    procedure RemoveAt(index: Integer); dispid 1610743822;
  end;

// *********************************************************************//
// Interface: _UASimpleAttributeOperandCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {62A9E7AA-6107-482F-A884-122564599088}
// *********************************************************************//
  _UASimpleAttributeOperandCollection = interface(IDispatch)
    ['{62A9E7AA-6107-482F-A884-122564599088}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_Item(index: Integer): _UASimpleAttributeOperand; safecall;
    procedure _Set_Item(index: Integer; const pRetVal: _UASimpleAttributeOperand); safecall;
    function Get_Count: Integer; safecall;
    function GetEnumerator: IEnumVARIANT; safecall;
    procedure Add(Item: OleVariant); safecall;
    procedure Clear; safecall;
    function Contains(Item: OleVariant): WordBool; safecall;
    function IndexOf(Item: OleVariant): Integer; safecall;
    procedure Insert(index: Integer; Item: OleVariant); safecall;
    function Remove(Item: OleVariant): WordBool; safecall;
    procedure RemoveAt(index: Integer); safecall;
    property ToString: WideString read Get_ToString;
    property Item[index: Integer]: _UASimpleAttributeOperand read Get_Item write _Set_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  _UASimpleAttributeOperandCollectionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {62A9E7AA-6107-482F-A884-122564599088}
// *********************************************************************//
  _UASimpleAttributeOperandCollectionDisp = dispinterface
    ['{62A9E7AA-6107-482F-A884-122564599088}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property Item[index: Integer]: _UASimpleAttributeOperand dispid 0; default;
    property Count: Integer readonly dispid 1610743814;
    function GetEnumerator: IEnumVARIANT; dispid -4;
    procedure Add(Item: OleVariant); dispid 1610743816;
    procedure Clear; dispid 1610743817;
    function Contains(Item: OleVariant): WordBool; dispid 1610743818;
    function IndexOf(Item: OleVariant): Integer; dispid 1610743819;
    procedure Insert(index: Integer; Item: OleVariant); dispid 1610743820;
    function Remove(Item: OleVariant): WordBool; dispid 1610743821;
    procedure RemoveAt(index: Integer); dispid 1610743822;
  end;

// *********************************************************************//
// Interface: _UAAttributeOperand
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4E62FCC7-D7FB-4459-8BDD-AAC147F07630}
// *********************************************************************//
  _UAAttributeOperand = interface(IDispatch)
    ['{4E62FCC7-D7FB-4459-8BDD-AAC147F07630}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_TotalElements: Integer; safecall;
    function Get_AliasName: WideString; safecall;
    procedure Set_AliasName(const pRetVal: WideString); safecall;
    function Get_ArgumentString: WideString; safecall;
    function Get_AttributeId: UAAttributeId; safecall;
    procedure Set_AttributeId(pRetVal: UAAttributeId); safecall;
    function Get_IndexRangeList: _UAIndexRangeList; safecall;
    procedure _Set_IndexRangeList(const pRetVal: _UAIndexRangeList); safecall;
    function Get_IsNull: WordBool; safecall;
    function Get_RelativePath: _UABrowsePathElementCollection; safecall;
    procedure _Set_RelativePath(const pRetVal: _UABrowsePathElementCollection); safecall;
    function Get_TypeId: _UANodeDescriptor; safecall;
    procedure _Set_TypeId(const pRetVal: _UANodeDescriptor); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property TotalElements: Integer read Get_TotalElements;
    property AliasName: WideString read Get_AliasName write Set_AliasName;
    property ArgumentString: WideString read Get_ArgumentString;
    property AttributeId: UAAttributeId read Get_AttributeId write Set_AttributeId;
    property IndexRangeList: _UAIndexRangeList read Get_IndexRangeList write _Set_IndexRangeList;
    property IsNull: WordBool read Get_IsNull;
    property RelativePath: _UABrowsePathElementCollection read Get_RelativePath write _Set_RelativePath;
    property TypeId: _UANodeDescriptor read Get_TypeId write _Set_TypeId;
  end;

// *********************************************************************//
// DispIntf:  _UAAttributeOperandDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4E62FCC7-D7FB-4459-8BDD-AAC147F07630}
// *********************************************************************//
  _UAAttributeOperandDisp = dispinterface
    ['{4E62FCC7-D7FB-4459-8BDD-AAC147F07630}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property TotalElements: Integer readonly dispid 1610743814;
    property AliasName: WideString dispid 1610743815;
    property ArgumentString: WideString readonly dispid 1610743817;
    property AttributeId: UAAttributeId dispid 1610743818;
    property IndexRangeList: _UAIndexRangeList dispid 1610743820;
    property IsNull: WordBool readonly dispid 1610743822;
    property RelativePath: _UABrowsePathElementCollection dispid 1610743823;
    property TypeId: _UANodeDescriptor dispid 1610743825;
  end;

// *********************************************************************//
// Interface: _UAContentFilterElement
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {21B7FB6A-3D73-466C-8E32-C6F0DC41B0B0}
// *********************************************************************//
  _UAContentFilterElement = interface(IDispatch)
    ['{21B7FB6A-3D73-466C-8E32-C6F0DC41B0B0}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_TotalElements: Integer; safecall;
    function Get_FilterOperands: _UAFilterOperandCollection; safecall;
    procedure _Set_FilterOperands(const pRetVal: _UAFilterOperandCollection); safecall;
    function Get_FilterOperator: UAFilterOperator; safecall;
    procedure Set_FilterOperator(pRetVal: UAFilterOperator); safecall;
    function Get_IsCyclic: WordBool; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property TotalElements: Integer read Get_TotalElements;
    property FilterOperands: _UAFilterOperandCollection read Get_FilterOperands write _Set_FilterOperands;
    property FilterOperator: UAFilterOperator read Get_FilterOperator write Set_FilterOperator;
    property IsCyclic: WordBool read Get_IsCyclic;
  end;

// *********************************************************************//
// DispIntf:  _UAContentFilterElementDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {21B7FB6A-3D73-466C-8E32-C6F0DC41B0B0}
// *********************************************************************//
  _UAContentFilterElementDisp = dispinterface
    ['{21B7FB6A-3D73-466C-8E32-C6F0DC41B0B0}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property TotalElements: Integer readonly dispid 1610743814;
    property FilterOperands: _UAFilterOperandCollection dispid 1610743815;
    property FilterOperator: UAFilterOperator dispid 1610743817;
    property IsCyclic: WordBool readonly dispid 1610743819;
  end;

// *********************************************************************//
// Interface: _UALiteralOperand
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {06E71EF6-10D6-4978-A8FA-89ABA53238A1}
// *********************************************************************//
  _UALiteralOperand = interface(IDispatch)
    ['{06E71EF6-10D6-4978-A8FA-89ABA53238A1}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_TotalElements: Integer; safecall;
    function Get_ValueType: _Type; safecall;
    procedure _Set_ValueType(const pRetVal: _Type); safecall;
    function Get_ValueTypeFullName: WideString; safecall;
    procedure Set_ValueTypeFullName(const pRetVal: WideString); safecall;
    function Get_ValueTypeCode: TypeCode; safecall;
    procedure Set_ValueTypeCode(pRetVal: TypeCode); safecall;
    function Get_value: OleVariant; safecall;
    procedure _Set_value(pRetVal: OleVariant); safecall;
    procedure SetValue(value: OleVariant); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property TotalElements: Integer read Get_TotalElements;
    property ValueType: _Type read Get_ValueType write _Set_ValueType;
    property ValueTypeFullName: WideString read Get_ValueTypeFullName write Set_ValueTypeFullName;
    property ValueTypeCode: TypeCode read Get_ValueTypeCode write Set_ValueTypeCode;
    property value: OleVariant read Get_value write _Set_value;
  end;

// *********************************************************************//
// DispIntf:  _UALiteralOperandDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {06E71EF6-10D6-4978-A8FA-89ABA53238A1}
// *********************************************************************//
  _UALiteralOperandDisp = dispinterface
    ['{06E71EF6-10D6-4978-A8FA-89ABA53238A1}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property TotalElements: Integer readonly dispid 1610743814;
    property ValueType: _Type dispid 1610743815;
    property ValueTypeFullName: WideString dispid 1610743817;
    property ValueTypeCode: TypeCode dispid 1610743819;
    property value: OleVariant dispid 1610743821;
    procedure SetValue(value: OleVariant); dispid 1610743823;
  end;

// *********************************************************************//
// Interface: _UASimpleAttributeOperand
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0191D5CB-B5F2-4954-BE0A-1E02EE7B10B2}
// *********************************************************************//
  _UASimpleAttributeOperand = interface(IDispatch)
    ['{0191D5CB-B5F2-4954-BE0A-1E02EE7B10B2}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_TotalElements: Integer; safecall;
    function Get_ArgumentString: WideString; safecall;
    function Get_AttributeId: UAAttributeId; safecall;
    procedure Set_AttributeId(pRetVal: UAAttributeId); safecall;
    function Get_IndexRangeList: _UAIndexRangeList; safecall;
    procedure _Set_IndexRangeList(const pRetVal: _UAIndexRangeList); safecall;
    function Get_IsNull: WordBool; safecall;
    function Get_QualifiedNames: _UAQualifiedNameCollection; safecall;
    procedure _Set_QualifiedNames(const pRetVal: _UAQualifiedNameCollection); safecall;
    function Get_TypeId: _UANodeDescriptor; safecall;
    procedure _Set_TypeId(const pRetVal: _UANodeDescriptor); safecall;
    function ToUAAttributeField: _UAAttributeField; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property TotalElements: Integer read Get_TotalElements;
    property ArgumentString: WideString read Get_ArgumentString;
    property AttributeId: UAAttributeId read Get_AttributeId write Set_AttributeId;
    property IndexRangeList: _UAIndexRangeList read Get_IndexRangeList write _Set_IndexRangeList;
    property IsNull: WordBool read Get_IsNull;
    property QualifiedNames: _UAQualifiedNameCollection read Get_QualifiedNames write _Set_QualifiedNames;
    property TypeId: _UANodeDescriptor read Get_TypeId write _Set_TypeId;
  end;

// *********************************************************************//
// DispIntf:  _UASimpleAttributeOperandDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0191D5CB-B5F2-4954-BE0A-1E02EE7B10B2}
// *********************************************************************//
  _UASimpleAttributeOperandDisp = dispinterface
    ['{0191D5CB-B5F2-4954-BE0A-1E02EE7B10B2}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property TotalElements: Integer readonly dispid 1610743814;
    property ArgumentString: WideString readonly dispid 1610743815;
    property AttributeId: UAAttributeId dispid 1610743816;
    property IndexRangeList: _UAIndexRangeList dispid 1610743818;
    property IsNull: WordBool readonly dispid 1610743820;
    property QualifiedNames: _UAQualifiedNameCollection dispid 1610743821;
    property TypeId: _UANodeDescriptor dispid 1610743823;
    function ToUAAttributeField: _UAAttributeField; dispid 1610743825;
  end;

// *********************************************************************//
// Interface: _UAEngineException
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FB6388F4-EDD4-42E4-9666-ED609791F194}
// *********************************************************************//
  _UAEngineException = interface(IDispatch)
    ['{FB6388F4-EDD4-42E4-9666-ED609791F194}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_Message: WideString; safecall;
    function Get_StackTrace: WideString; safecall;
    function Get_HelpLink: WideString; safecall;
    procedure Set_HelpLink(const pRetVal: WideString); safecall;
    function Get_Source: WideString; safecall;
    procedure Set_Source(const pRetVal: WideString); safecall;
    function Get_InnerException: _Exception; safecall;
    function Get_TargetSite: _MethodBase; safecall;
    function GetBaseException: _Exception; safecall;
    procedure GetObjectData(const info: _SerializationInfo; context: StreamingContext); safecall;
    function Get_Data: _Dictionary; safecall;
    function Get_HResult: Integer; safecall;
    function Get_ErrorId: WideString; safecall;
    function Get_ActivityTrace: WideString; safecall;
    function Get_ErrorCode: Integer; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Message: WideString read Get_Message;
    property StackTrace: WideString read Get_StackTrace;
    property HelpLink: WideString read Get_HelpLink write Set_HelpLink;
    property Source: WideString read Get_Source write Set_Source;
    property InnerException: _Exception read Get_InnerException;
    property TargetSite: _MethodBase read Get_TargetSite;
    property Data: _Dictionary read Get_Data;
    property HResult: Integer read Get_HResult;
    property ErrorId: WideString read Get_ErrorId;
    property ActivityTrace: WideString read Get_ActivityTrace;
    property ErrorCode: Integer read Get_ErrorCode;
  end;

// *********************************************************************//
// DispIntf:  _UAEngineExceptionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FB6388F4-EDD4-42E4-9666-ED609791F194}
// *********************************************************************//
  _UAEngineExceptionDisp = dispinterface
    ['{FB6388F4-EDD4-42E4-9666-ED609791F194}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    property Message: WideString readonly dispid 1610743813;
    property StackTrace: WideString readonly dispid 1610743814;
    property HelpLink: WideString dispid 1610743815;
    property Source: WideString dispid 1610743817;
    property InnerException: _Exception readonly dispid 1610743819;
    property TargetSite: _MethodBase readonly dispid 1610743820;
    function GetBaseException: _Exception; dispid 1610743821;
    procedure GetObjectData(const info: _SerializationInfo; 
                            context: {NOT_OLEAUTO(StreamingContext)}OleVariant); dispid 1610743822;
    property Data: _Dictionary readonly dispid 1610743823;
    property HResult: Integer readonly dispid 1610743824;
    property ErrorId: WideString readonly dispid 1610743825;
    property ActivityTrace: WideString readonly dispid 1610743826;
    property ErrorCode: Integer readonly dispid 1610743827;
  end;

// *********************************************************************//
// Interface: _UAClientAdaptableParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D2A18F5C-6863-4B26-89ED-0D81F4A2B7C6}
// *********************************************************************//
  _UAClientAdaptableParameters = interface(IDispatch)
    ['{D2A18F5C-6863-4B26-89ED-0D81F4A2B7C6}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_DiscoveryParameters: _UADiscoveryParameters; safecall;
    procedure _Set_DiscoveryParameters(const pRetVal: _UADiscoveryParameters); safecall;
    function Get_HostParameters: _UAHostParameters; safecall;
    procedure _Set_HostParameters(const pRetVal: _UAHostParameters); safecall;
    function Get_MonitoredItemParameters: _UAClientMonitoredItemParameters; safecall;
    procedure _Set_MonitoredItemParameters(const pRetVal: _UAClientMonitoredItemParameters); safecall;
    function Get_SessionParameters: _UASmartClientSessionParameters; safecall;
    procedure _Set_SessionParameters(const pRetVal: _UASmartClientSessionParameters); safecall;
    function Get_SubscriptionParameters: _UAClientSubscriptionParameters; safecall;
    procedure _Set_SubscriptionParameters(const pRetVal: _UAClientSubscriptionParameters); safecall;
    procedure Reset; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property DiscoveryParameters: _UADiscoveryParameters read Get_DiscoveryParameters write _Set_DiscoveryParameters;
    property HostParameters: _UAHostParameters read Get_HostParameters write _Set_HostParameters;
    property MonitoredItemParameters: _UAClientMonitoredItemParameters read Get_MonitoredItemParameters write _Set_MonitoredItemParameters;
    property SessionParameters: _UASmartClientSessionParameters read Get_SessionParameters write _Set_SessionParameters;
    property SubscriptionParameters: _UAClientSubscriptionParameters read Get_SubscriptionParameters write _Set_SubscriptionParameters;
  end;

// *********************************************************************//
// DispIntf:  _UAClientAdaptableParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D2A18F5C-6863-4B26-89ED-0D81F4A2B7C6}
// *********************************************************************//
  _UAClientAdaptableParametersDisp = dispinterface
    ['{D2A18F5C-6863-4B26-89ED-0D81F4A2B7C6}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property DiscoveryParameters: _UADiscoveryParameters dispid 1610743816;
    property HostParameters: _UAHostParameters dispid 1610743818;
    property MonitoredItemParameters: _UAClientMonitoredItemParameters dispid 1610743820;
    property SessionParameters: _UASmartClientSessionParameters dispid 1610743822;
    property SubscriptionParameters: _UAClientSubscriptionParameters dispid 1610743824;
    procedure Reset; dispid 1610743826;
  end;

// *********************************************************************//
// Interface: _UAClientServerEngineParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4C1C75BD-D564-402C-B399-9F000B297367}
// *********************************************************************//
  _UAClientServerEngineParameters = interface(IDispatch)
    ['{4C1C75BD-D564-402C-B399-9F000B297367}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_CertificateAcceptancePolicy: _UACertificateAcceptancePolicy; safecall;
    procedure _Set_CertificateAcceptancePolicy(const pRetVal: _UACertificateAcceptancePolicy); safecall;
    function Get_ConfigurationPropertyOverrides: _StringObjectDictionary; safecall;
    procedure _Set_ConfigurationPropertyOverrides(const pRetVal: _StringObjectDictionary); safecall;
    function Get_ConfigurationSources: UAConfigurationSources; safecall;
    procedure Set_ConfigurationSources(pRetVal: UAConfigurationSources); safecall;
    function Get_DebuggerDetectionOverride: Sign; safecall;
    procedure Set_DebuggerDetectionOverride(pRetVal: Sign); safecall;
    function Get_gdsEndpointDescriptor: _UAEndpointDescriptor; safecall;
    procedure _Set_gdsEndpointDescriptor(const pRetVal: _UAEndpointDescriptor); safecall;
    function Get_RetrialDelay: Integer; safecall;
    procedure Set_RetrialDelay(pRetVal: Integer); safecall;
    function Get_ReconnectionPeriod: Integer; safecall;
    procedure Set_ReconnectionPeriod(pRetVal: Integer); safecall;
    function Get_UserInteractionParameters: _UAUserInteractionParameters; safecall;
    procedure _Set_UserInteractionParameters(const pRetVal: _UAUserInteractionParameters); safecall;
    procedure Reset; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property CertificateAcceptancePolicy: _UACertificateAcceptancePolicy read Get_CertificateAcceptancePolicy write _Set_CertificateAcceptancePolicy;
    property ConfigurationPropertyOverrides: _StringObjectDictionary read Get_ConfigurationPropertyOverrides write _Set_ConfigurationPropertyOverrides;
    property ConfigurationSources: UAConfigurationSources read Get_ConfigurationSources write Set_ConfigurationSources;
    property DebuggerDetectionOverride: Sign read Get_DebuggerDetectionOverride write Set_DebuggerDetectionOverride;
    property gdsEndpointDescriptor: _UAEndpointDescriptor read Get_gdsEndpointDescriptor write _Set_gdsEndpointDescriptor;
    property RetrialDelay: Integer read Get_RetrialDelay write Set_RetrialDelay;
    property ReconnectionPeriod: Integer read Get_ReconnectionPeriod write Set_ReconnectionPeriod;
    property UserInteractionParameters: _UAUserInteractionParameters read Get_UserInteractionParameters write _Set_UserInteractionParameters;
  end;

// *********************************************************************//
// DispIntf:  _UAClientServerEngineParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4C1C75BD-D564-402C-B399-9F000B297367}
// *********************************************************************//
  _UAClientServerEngineParametersDisp = dispinterface
    ['{4C1C75BD-D564-402C-B399-9F000B297367}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property CertificateAcceptancePolicy: _UACertificateAcceptancePolicy dispid 1610743816;
    property ConfigurationPropertyOverrides: _StringObjectDictionary dispid 1610743818;
    property ConfigurationSources: UAConfigurationSources dispid 1610743820;
    property DebuggerDetectionOverride: Sign dispid 1610743822;
    property gdsEndpointDescriptor: _UAEndpointDescriptor dispid 1610743824;
    property RetrialDelay: Integer dispid 1610743826;
    property ReconnectionPeriod: Integer dispid 1610743828;
    property UserInteractionParameters: _UAUserInteractionParameters dispid 1610743830;
    procedure Reset; dispid 1610743832;
  end;

// *********************************************************************//
// Interface: _EasyUAClientInstanceParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0B31304A-2B75-4F8E-B46E-321CE71879EC}
// *********************************************************************//
  _EasyUAClientInstanceParameters = interface(IDispatch)
    ['{0B31304A-2B75-4F8E-B46E-321CE71879EC}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_PluginConfigurations: _ConfigurationPartCollection; safecall;
    procedure _Set_PluginConfigurations(const pRetVal: _ConfigurationPartCollection); safecall;
    function Get_PluginSetups: _PluginSetupCollection; safecall;
    procedure _Set_PluginSetups(const pRetVal: _PluginSetupCollection); safecall;
    procedure Reset; safecall;
    function Get_DiscoveryHost: WideString; safecall;
    procedure Set_DiscoveryHost(const pRetVal: WideString); safecall;
    function Get_EnableModelCaching: WordBool; safecall;
    procedure Set_EnableModelCaching(pRetVal: WordBool); safecall;
    function Get_Mode: _EasyUAClientMode; safecall;
    procedure _Set_Mode(const pRetVal: _EasyUAClientMode); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property PluginConfigurations: _ConfigurationPartCollection read Get_PluginConfigurations write _Set_PluginConfigurations;
    property PluginSetups: _PluginSetupCollection read Get_PluginSetups write _Set_PluginSetups;
    property DiscoveryHost: WideString read Get_DiscoveryHost write Set_DiscoveryHost;
    property EnableModelCaching: WordBool read Get_EnableModelCaching write Set_EnableModelCaching;
    property Mode: _EasyUAClientMode read Get_Mode write _Set_Mode;
  end;

// *********************************************************************//
// DispIntf:  _EasyUAClientInstanceParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0B31304A-2B75-4F8E-B46E-321CE71879EC}
// *********************************************************************//
  _EasyUAClientInstanceParametersDisp = dispinterface
    ['{0B31304A-2B75-4F8E-B46E-321CE71879EC}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property PluginConfigurations: _ConfigurationPartCollection dispid 1610743816;
    property PluginSetups: _PluginSetupCollection dispid 1610743818;
    procedure Reset; dispid 1610743820;
    property DiscoveryHost: WideString dispid 1610743821;
    property EnableModelCaching: WordBool dispid 1610743823;
    property Mode: _EasyUAClientMode dispid 1610743825;
  end;

// *********************************************************************//
// Interface: _EasyUAClientMode
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {298B87ED-7C5B-4FA0-BD41-8B0A88F8BAD3}
// *********************************************************************//
  _EasyUAClientMode = interface(IDispatch)
    ['{298B87ED-7C5B-4FA0-BD41-8B0A88F8BAD3}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
  end;

// *********************************************************************//
// DispIntf:  _EasyUAClientModeDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {298B87ED-7C5B-4FA0-BD41-8B0A88F8BAD3}
// *********************************************************************//
  _EasyUAClientModeDisp = dispinterface
    ['{298B87ED-7C5B-4FA0-BD41-8B0A88F8BAD3}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
  end;

// *********************************************************************//
// Interface: _EasyUAClientSharedParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E32CDBD7-D9B9-4A5C-BC91-86E45BC68F70}
// *********************************************************************//
  _EasyUAClientSharedParameters = interface(IDispatch)
    ['{E32CDBD7-D9B9-4A5C-BC91-86E45BC68F70}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_PluginConfigurations: _ConfigurationPartCollection; safecall;
    procedure _Set_PluginConfigurations(const pRetVal: _ConfigurationPartCollection); safecall;
    function Get_PluginSetups: _PluginSetupCollection; safecall;
    procedure _Set_PluginSetups(const pRetVal: _PluginSetupCollection); safecall;
    procedure Reset; safecall;
    function Get_EngineParameters: _EasyUAClientEngineParameters; safecall;
    procedure _Set_EngineParameters(const pRetVal: _EasyUAClientEngineParameters); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property PluginConfigurations: _ConfigurationPartCollection read Get_PluginConfigurations write _Set_PluginConfigurations;
    property PluginSetups: _PluginSetupCollection read Get_PluginSetups write _Set_PluginSetups;
    property EngineParameters: _EasyUAClientEngineParameters read Get_EngineParameters write _Set_EngineParameters;
  end;

// *********************************************************************//
// DispIntf:  _EasyUAClientSharedParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E32CDBD7-D9B9-4A5C-BC91-86E45BC68F70}
// *********************************************************************//
  _EasyUAClientSharedParametersDisp = dispinterface
    ['{E32CDBD7-D9B9-4A5C-BC91-86E45BC68F70}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property PluginConfigurations: _ConfigurationPartCollection dispid 1610743816;
    property PluginSetups: _PluginSetupCollection dispid 1610743818;
    procedure Reset; dispid 1610743820;
    property EngineParameters: _EasyUAClientEngineParameters dispid 1610743821;
  end;

// *********************************************************************//
// Interface: _UAClientEngineParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B3EC5B1E-CC28-4617-A2F5-8FC0047A5189}
// *********************************************************************//
  _UAClientEngineParameters = interface(IDispatch)
    ['{B3EC5B1E-CC28-4617-A2F5-8FC0047A5189}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_CertificateAcceptancePolicy: _UACertificateAcceptancePolicy; safecall;
    procedure _Set_CertificateAcceptancePolicy(const pRetVal: _UACertificateAcceptancePolicy); safecall;
    function Get_ConfigurationPropertyOverrides: _StringObjectDictionary; safecall;
    procedure _Set_ConfigurationPropertyOverrides(const pRetVal: _StringObjectDictionary); safecall;
    function Get_ConfigurationSources: UAConfigurationSources; safecall;
    procedure Set_ConfigurationSources(pRetVal: UAConfigurationSources); safecall;
    function Get_DebuggerDetectionOverride: Sign; safecall;
    procedure Set_DebuggerDetectionOverride(pRetVal: Sign); safecall;
    function Get_gdsEndpointDescriptor: _UAEndpointDescriptor; safecall;
    procedure _Set_gdsEndpointDescriptor(const pRetVal: _UAEndpointDescriptor); safecall;
    function Get_RetrialDelay: Integer; safecall;
    procedure Set_RetrialDelay(pRetVal: Integer); safecall;
    function Get_ReconnectionPeriod: Integer; safecall;
    procedure Set_ReconnectionPeriod(pRetVal: Integer); safecall;
    function Get_UserInteractionParameters: _UAUserInteractionParameters; safecall;
    procedure _Set_UserInteractionParameters(const pRetVal: _UAUserInteractionParameters); safecall;
    procedure Reset; safecall;
    function Get_HttpsCertificateAcceptancePolicy: _UACertificateAcceptancePolicy; safecall;
    procedure _Set_HttpsCertificateAcceptancePolicy(const pRetVal: _UACertificateAcceptancePolicy); safecall;
    function Get_UseCustomHttpsCertificateValidation: WordBool; safecall;
    procedure Set_UseCustomHttpsCertificateValidation(pRetVal: WordBool); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property CertificateAcceptancePolicy: _UACertificateAcceptancePolicy read Get_CertificateAcceptancePolicy write _Set_CertificateAcceptancePolicy;
    property ConfigurationPropertyOverrides: _StringObjectDictionary read Get_ConfigurationPropertyOverrides write _Set_ConfigurationPropertyOverrides;
    property ConfigurationSources: UAConfigurationSources read Get_ConfigurationSources write Set_ConfigurationSources;
    property DebuggerDetectionOverride: Sign read Get_DebuggerDetectionOverride write Set_DebuggerDetectionOverride;
    property gdsEndpointDescriptor: _UAEndpointDescriptor read Get_gdsEndpointDescriptor write _Set_gdsEndpointDescriptor;
    property RetrialDelay: Integer read Get_RetrialDelay write Set_RetrialDelay;
    property ReconnectionPeriod: Integer read Get_ReconnectionPeriod write Set_ReconnectionPeriod;
    property UserInteractionParameters: _UAUserInteractionParameters read Get_UserInteractionParameters write _Set_UserInteractionParameters;
    property HttpsCertificateAcceptancePolicy: _UACertificateAcceptancePolicy read Get_HttpsCertificateAcceptancePolicy write _Set_HttpsCertificateAcceptancePolicy;
    property UseCustomHttpsCertificateValidation: WordBool read Get_UseCustomHttpsCertificateValidation write Set_UseCustomHttpsCertificateValidation;
  end;

// *********************************************************************//
// DispIntf:  _UAClientEngineParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B3EC5B1E-CC28-4617-A2F5-8FC0047A5189}
// *********************************************************************//
  _UAClientEngineParametersDisp = dispinterface
    ['{B3EC5B1E-CC28-4617-A2F5-8FC0047A5189}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property CertificateAcceptancePolicy: _UACertificateAcceptancePolicy dispid 1610743816;
    property ConfigurationPropertyOverrides: _StringObjectDictionary dispid 1610743818;
    property ConfigurationSources: UAConfigurationSources dispid 1610743820;
    property DebuggerDetectionOverride: Sign dispid 1610743822;
    property gdsEndpointDescriptor: _UAEndpointDescriptor dispid 1610743824;
    property RetrialDelay: Integer dispid 1610743826;
    property ReconnectionPeriod: Integer dispid 1610743828;
    property UserInteractionParameters: _UAUserInteractionParameters dispid 1610743830;
    procedure Reset; dispid 1610743832;
    property HttpsCertificateAcceptancePolicy: _UACertificateAcceptancePolicy dispid 1610743833;
    property UseCustomHttpsCertificateValidation: WordBool dispid 1610743835;
  end;

// *********************************************************************//
// Interface: _UAClientMonitoredItemParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4C8C8151-7251-4E12-AB3D-FE1FF653AB49}
// *********************************************************************//
  _UAClientMonitoredItemParameters = interface(IDispatch)
    ['{4C8C8151-7251-4E12-AB3D-FE1FF653AB49}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_CheckMonitoredItemId: WordBool; safecall;
    procedure Set_CheckMonitoredItemId(pRetVal: WordBool); safecall;
    function Get_RequireValidRevisedSamplingInterval: WordBool; safecall;
    procedure Set_RequireValidRevisedSamplingInterval(pRetVal: WordBool); safecall;
    function Get_RequireValidRevisedQueueSize: WordBool; safecall;
    procedure Set_RequireValidRevisedQueueSize(pRetVal: WordBool); safecall;
    function Get_RetrialDelay: Integer; safecall;
    procedure Set_RetrialDelay(pRetVal: Integer); safecall;
    function Get_SanitizeNotificationDataValue: WordBool; safecall;
    procedure Set_SanitizeNotificationDataValue(pRetVal: WordBool); safecall;
    procedure Reset; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property CheckMonitoredItemId: WordBool read Get_CheckMonitoredItemId write Set_CheckMonitoredItemId;
    property RequireValidRevisedSamplingInterval: WordBool read Get_RequireValidRevisedSamplingInterval write Set_RequireValidRevisedSamplingInterval;
    property RequireValidRevisedQueueSize: WordBool read Get_RequireValidRevisedQueueSize write Set_RequireValidRevisedQueueSize;
    property RetrialDelay: Integer read Get_RetrialDelay write Set_RetrialDelay;
    property SanitizeNotificationDataValue: WordBool read Get_SanitizeNotificationDataValue write Set_SanitizeNotificationDataValue;
  end;

// *********************************************************************//
// DispIntf:  _UAClientMonitoredItemParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4C8C8151-7251-4E12-AB3D-FE1FF653AB49}
// *********************************************************************//
  _UAClientMonitoredItemParametersDisp = dispinterface
    ['{4C8C8151-7251-4E12-AB3D-FE1FF653AB49}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property CheckMonitoredItemId: WordBool dispid 1610743816;
    property RequireValidRevisedSamplingInterval: WordBool dispid 1610743818;
    property RequireValidRevisedQueueSize: WordBool dispid 1610743820;
    property RetrialDelay: Integer dispid 1610743822;
    property SanitizeNotificationDataValue: WordBool dispid 1610743824;
    procedure Reset; dispid 1610743826;
  end;

// *********************************************************************//
// Interface: _UAClientServerApplicationParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4EBB9E50-E292-4D01-A182-8345BC293D21}
// *********************************************************************//
  _UAClientServerApplicationParameters = interface(IDispatch)
    ['{4EBB9E50-E292-4D01-A182-8345BC293D21}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_ApplicationManifest: _UAApplicationManifest; safecall;
    procedure _Set_ApplicationManifest(const pRetVal: _UAApplicationManifest); safecall;
    function Get_ApplicationUriTemplateString: WideString; safecall;
    procedure Set_ApplicationUriTemplateString(const pRetVal: WideString); safecall;
    function Get_AutoGenerateInstanceCertificate: WordBool; safecall;
    procedure Set_AutoGenerateInstanceCertificate(pRetVal: WordBool); safecall;
    function Get_AutoTrustInstanceCertificate: WordBool; safecall;
    procedure Set_AutoTrustInstanceCertificate(pRetVal: WordBool); safecall;
    function Get_HostNames: _StringCollection; safecall;
    procedure _Set_HostNames(const pRetVal: _StringCollection); safecall;
    function Get_HostNamesString: WideString; safecall;
    procedure Set_HostNamesString(const pRetVal: WideString); safecall;
    function Get_InstanceCertificateGenerationParameters: _CertificateGenerationParameters; safecall;
    procedure _Set_InstanceCertificateGenerationParameters(const pRetVal: _CertificateGenerationParameters); safecall;
    function Get_InstanceCertificatePrivateKeyPassword: WideString; safecall;
    procedure Set_InstanceCertificatePrivateKeyPassword(const pRetVal: WideString); safecall;
    function Get_InstanceCertificatePrivateKeyPasswordDictionary: _StringStringDictionary; safecall;
    procedure _Set_InstanceCertificatePrivateKeyPasswordDictionary(const pRetVal: _StringStringDictionary); safecall;
    function Get_RelaxedCertificateSearch: WordBool; safecall;
    procedure Set_RelaxedCertificateSearch(pRetVal: WordBool); safecall;
    function Get_ValidateOwnInstanceCertificate: WordBool; safecall;
    procedure Set_ValidateOwnInstanceCertificate(pRetVal: WordBool); safecall;
    function FindInstanceCertificatePrivateKeyPassword(const certificateSubId: WideString): WideString; safecall;
    procedure Reset; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property ApplicationManifest: _UAApplicationManifest read Get_ApplicationManifest write _Set_ApplicationManifest;
    property ApplicationUriTemplateString: WideString read Get_ApplicationUriTemplateString write Set_ApplicationUriTemplateString;
    property AutoGenerateInstanceCertificate: WordBool read Get_AutoGenerateInstanceCertificate write Set_AutoGenerateInstanceCertificate;
    property AutoTrustInstanceCertificate: WordBool read Get_AutoTrustInstanceCertificate write Set_AutoTrustInstanceCertificate;
    property HostNames: _StringCollection read Get_HostNames write _Set_HostNames;
    property HostNamesString: WideString read Get_HostNamesString write Set_HostNamesString;
    property InstanceCertificateGenerationParameters: _CertificateGenerationParameters read Get_InstanceCertificateGenerationParameters write _Set_InstanceCertificateGenerationParameters;
    property InstanceCertificatePrivateKeyPassword: WideString read Get_InstanceCertificatePrivateKeyPassword write Set_InstanceCertificatePrivateKeyPassword;
    property InstanceCertificatePrivateKeyPasswordDictionary: _StringStringDictionary read Get_InstanceCertificatePrivateKeyPasswordDictionary write _Set_InstanceCertificatePrivateKeyPasswordDictionary;
    property RelaxedCertificateSearch: WordBool read Get_RelaxedCertificateSearch write Set_RelaxedCertificateSearch;
    property ValidateOwnInstanceCertificate: WordBool read Get_ValidateOwnInstanceCertificate write Set_ValidateOwnInstanceCertificate;
  end;

// *********************************************************************//
// DispIntf:  _UAClientServerApplicationParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4EBB9E50-E292-4D01-A182-8345BC293D21}
// *********************************************************************//
  _UAClientServerApplicationParametersDisp = dispinterface
    ['{4EBB9E50-E292-4D01-A182-8345BC293D21}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property ApplicationManifest: _UAApplicationManifest dispid 1610743816;
    property ApplicationUriTemplateString: WideString dispid 1610743818;
    property AutoGenerateInstanceCertificate: WordBool dispid 1610743820;
    property AutoTrustInstanceCertificate: WordBool dispid 1610743822;
    property HostNames: _StringCollection dispid 1610743824;
    property HostNamesString: WideString dispid 1610743826;
    property InstanceCertificateGenerationParameters: _CertificateGenerationParameters dispid 1610743828;
    property InstanceCertificatePrivateKeyPassword: WideString dispid 1610743830;
    property InstanceCertificatePrivateKeyPasswordDictionary: _StringStringDictionary dispid 1610743832;
    property RelaxedCertificateSearch: WordBool dispid 1610743834;
    property ValidateOwnInstanceCertificate: WordBool dispid 1610743836;
    function FindInstanceCertificatePrivateKeyPassword(const certificateSubId: WideString): WideString; dispid 1610743838;
    procedure Reset; dispid 1610743839;
  end;

// *********************************************************************//
// Interface: _UAClientSessionParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A09524BA-9DE2-4447-99FC-01C4985F7C4D}
// *********************************************************************//
  _UAClientSessionParameters = interface(IDispatch)
    ['{A09524BA-9DE2-4447-99FC-01C4985F7C4D}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_AcknowledgedMessagesLimit: Integer; safecall;
    procedure Set_AcknowledgedMessagesLimit(pRetVal: Integer); safecall;
    function Get_AllowEndpointDomainPrompt: WordBool; safecall;
    procedure Set_AllowEndpointDomainPrompt(pRetVal: WordBool); safecall;
    function Get_AlwaysPreselectEndpoint: WordBool; safecall;
    procedure Set_AlwaysPreselectEndpoint(pRetVal: WordBool); safecall;
    function Get_CheckAvailableSequenceNumbers: WordBool; safecall;
    procedure Set_CheckAvailableSequenceNumbers(pRetVal: WordBool); safecall;
    function Get_CheckBrowseResults: WordBool; safecall;
    procedure Set_CheckBrowseResults(pRetVal: WordBool); safecall;
    function Get_CheckEndpointDomain: WordBool; safecall;
    procedure Set_CheckEndpointDomain(pRetVal: WordBool); safecall;
    function Get_CheckNotificationMessage: WordBool; safecall;
    procedure Set_CheckNotificationMessage(pRetVal: WordBool); safecall;
    function Get_CheckSessionId: WordBool; safecall;
    procedure Set_CheckSessionId(pRetVal: WordBool); safecall;
    function Get_CloseTimeout: Integer; safecall;
    procedure Set_CloseTimeout(pRetVal: Integer); safecall;
    function Get_DiagnosticsMasks: UADiagnosticsMasks; safecall;
    procedure Set_DiagnosticsMasks(pRetVal: UADiagnosticsMasks); safecall;
    function Get_EndpointDescriptionChecks: _UAEndpointDescriptionChecks; safecall;
    procedure _Set_EndpointDescriptionChecks(const pRetVal: _UAEndpointDescriptionChecks); safecall;
    function Get_EndpointSelectionPolicy: _UAEndpointSelectionPolicy; safecall;
    procedure _Set_EndpointSelectionPolicy(const pRetVal: _UAEndpointSelectionPolicy); safecall;
    function Get_EndpointSelectionTimeout: Integer; safecall;
    procedure Set_EndpointSelectionTimeout(pRetVal: Integer); safecall;
    function Get_KeepAliveInterval: Integer; safecall;
    procedure Set_KeepAliveInterval(pRetVal: Integer); safecall;
    function Get_KeepAliveIntervalDebug: Integer; safecall;
    procedure Set_KeepAliveIntervalDebug(pRetVal: Integer); safecall;
    function Get_LocaleId: WideString; safecall;
    procedure Set_LocaleId(const pRetVal: WideString); safecall;
    function Get_MaximumReferencesPerBrowseNode: Integer; safecall;
    procedure Set_MaximumReferencesPerBrowseNode(pRetVal: Integer); safecall;
    function Get_OperationTimeout: Integer; safecall;
    procedure Set_OperationTimeout(pRetVal: Integer); safecall;
    function Get_PendingMessagesLimit: Integer; safecall;
    procedure Set_PendingMessagesLimit(pRetVal: Integer); safecall;
    function Get_PreselectedEndpointValidityPeriod: Integer; safecall;
    procedure Set_PreselectedEndpointValidityPeriod(pRetVal: Integer); safecall;
    function Get_RequireMatchingServerSoftwareCertificates: WordBool; safecall;
    procedure Set_RequireMatchingServerSoftwareCertificates(pRetVal: WordBool); safecall;
    function Get_RequireNonEmptyServerSignature: WordBool; safecall;
    procedure Set_RequireNonEmptyServerSignature(pRetVal: WordBool); safecall;
    function Get_RequireServerEndpointsMatchDiscovery: WordBool; safecall;
    procedure Set_RequireServerEndpointsMatchDiscovery(pRetVal: WordBool); safecall;
    function Get_RequireTimestampsAsRequested: WordBool; safecall;
    procedure Set_RequireTimestampsAsRequested(pRetVal: WordBool); safecall;
    function Get_RequireUniqueAuthenticationToken: WordBool; safecall;
    procedure Set_RequireUniqueAuthenticationToken(pRetVal: WordBool); safecall;
    function Get_RequireUniqueServerNonce: WordBool; safecall;
    procedure Set_RequireUniqueServerNonce(pRetVal: WordBool); safecall;
    function Get_RequireValidAuthenticationToken: WordBool; safecall;
    procedure Set_RequireValidAuthenticationToken(pRetVal: WordBool); safecall;
    function Get_RequireValidServerNonce: WordBool; safecall;
    procedure Set_RequireValidServerNonce(pRetVal: WordBool); safecall;
    function Get_RetrialDelay: Integer; safecall;
    procedure Set_RetrialDelay(pRetVal: Integer); safecall;
    function Get_SanitizeReferenceDescriptions: WordBool; safecall;
    procedure Set_SanitizeReferenceDescriptions(pRetVal: WordBool); safecall;
    function Get_SessionConnectTimeout: Integer; safecall;
    procedure Set_SessionConnectTimeout(pRetVal: Integer); safecall;
    function Get_SessionTimeout: Integer; safecall;
    procedure Set_SessionTimeout(pRetVal: Integer); safecall;
    function Get_SessionTimeoutDebug: Integer; safecall;
    procedure Set_SessionTimeoutDebug(pRetVal: Integer); safecall;
    function Get_ShortestAllowedRevisedSessionTimeout: Double; safecall;
    procedure Set_ShortestAllowedRevisedSessionTimeout(pRetVal: Double); safecall;
    function Get_UpdateEndpointBeforeConnect: WordBool; safecall;
    procedure Set_UpdateEndpointBeforeConnect(pRetVal: WordBool); safecall;
    function Get_UserIdentity: _UserIdentity; safecall;
    procedure _Set_UserIdentity(const pRetVal: _UserIdentity); safecall;
    function Get_WriteNarrowestIntegerType: WordBool; safecall;
    procedure Set_WriteNarrowestIntegerType(pRetVal: WordBool); safecall;
    function Get_WriteNarrowestRealType: WordBool; safecall;
    procedure Set_WriteNarrowestRealType(pRetVal: WordBool); safecall;
    procedure Reset; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property AcknowledgedMessagesLimit: Integer read Get_AcknowledgedMessagesLimit write Set_AcknowledgedMessagesLimit;
    property AllowEndpointDomainPrompt: WordBool read Get_AllowEndpointDomainPrompt write Set_AllowEndpointDomainPrompt;
    property AlwaysPreselectEndpoint: WordBool read Get_AlwaysPreselectEndpoint write Set_AlwaysPreselectEndpoint;
    property CheckAvailableSequenceNumbers: WordBool read Get_CheckAvailableSequenceNumbers write Set_CheckAvailableSequenceNumbers;
    property CheckBrowseResults: WordBool read Get_CheckBrowseResults write Set_CheckBrowseResults;
    property CheckEndpointDomain: WordBool read Get_CheckEndpointDomain write Set_CheckEndpointDomain;
    property CheckNotificationMessage: WordBool read Get_CheckNotificationMessage write Set_CheckNotificationMessage;
    property CheckSessionId: WordBool read Get_CheckSessionId write Set_CheckSessionId;
    property CloseTimeout: Integer read Get_CloseTimeout write Set_CloseTimeout;
    property DiagnosticsMasks: UADiagnosticsMasks read Get_DiagnosticsMasks write Set_DiagnosticsMasks;
    property EndpointDescriptionChecks: _UAEndpointDescriptionChecks read Get_EndpointDescriptionChecks write _Set_EndpointDescriptionChecks;
    property EndpointSelectionPolicy: _UAEndpointSelectionPolicy read Get_EndpointSelectionPolicy write _Set_EndpointSelectionPolicy;
    property EndpointSelectionTimeout: Integer read Get_EndpointSelectionTimeout write Set_EndpointSelectionTimeout;
    property KeepAliveInterval: Integer read Get_KeepAliveInterval write Set_KeepAliveInterval;
    property KeepAliveIntervalDebug: Integer read Get_KeepAliveIntervalDebug write Set_KeepAliveIntervalDebug;
    property LocaleId: WideString read Get_LocaleId write Set_LocaleId;
    property MaximumReferencesPerBrowseNode: Integer read Get_MaximumReferencesPerBrowseNode write Set_MaximumReferencesPerBrowseNode;
    property OperationTimeout: Integer read Get_OperationTimeout write Set_OperationTimeout;
    property PendingMessagesLimit: Integer read Get_PendingMessagesLimit write Set_PendingMessagesLimit;
    property PreselectedEndpointValidityPeriod: Integer read Get_PreselectedEndpointValidityPeriod write Set_PreselectedEndpointValidityPeriod;
    property RequireMatchingServerSoftwareCertificates: WordBool read Get_RequireMatchingServerSoftwareCertificates write Set_RequireMatchingServerSoftwareCertificates;
    property RequireNonEmptyServerSignature: WordBool read Get_RequireNonEmptyServerSignature write Set_RequireNonEmptyServerSignature;
    property RequireServerEndpointsMatchDiscovery: WordBool read Get_RequireServerEndpointsMatchDiscovery write Set_RequireServerEndpointsMatchDiscovery;
    property RequireTimestampsAsRequested: WordBool read Get_RequireTimestampsAsRequested write Set_RequireTimestampsAsRequested;
    property RequireUniqueAuthenticationToken: WordBool read Get_RequireUniqueAuthenticationToken write Set_RequireUniqueAuthenticationToken;
    property RequireUniqueServerNonce: WordBool read Get_RequireUniqueServerNonce write Set_RequireUniqueServerNonce;
    property RequireValidAuthenticationToken: WordBool read Get_RequireValidAuthenticationToken write Set_RequireValidAuthenticationToken;
    property RequireValidServerNonce: WordBool read Get_RequireValidServerNonce write Set_RequireValidServerNonce;
    property RetrialDelay: Integer read Get_RetrialDelay write Set_RetrialDelay;
    property SanitizeReferenceDescriptions: WordBool read Get_SanitizeReferenceDescriptions write Set_SanitizeReferenceDescriptions;
    property SessionConnectTimeout: Integer read Get_SessionConnectTimeout write Set_SessionConnectTimeout;
    property SessionTimeout: Integer read Get_SessionTimeout write Set_SessionTimeout;
    property SessionTimeoutDebug: Integer read Get_SessionTimeoutDebug write Set_SessionTimeoutDebug;
    property ShortestAllowedRevisedSessionTimeout: Double read Get_ShortestAllowedRevisedSessionTimeout write Set_ShortestAllowedRevisedSessionTimeout;
    property UpdateEndpointBeforeConnect: WordBool read Get_UpdateEndpointBeforeConnect write Set_UpdateEndpointBeforeConnect;
    property UserIdentity: _UserIdentity read Get_UserIdentity write _Set_UserIdentity;
    property WriteNarrowestIntegerType: WordBool read Get_WriteNarrowestIntegerType write Set_WriteNarrowestIntegerType;
    property WriteNarrowestRealType: WordBool read Get_WriteNarrowestRealType write Set_WriteNarrowestRealType;
  end;

// *********************************************************************//
// DispIntf:  _UAClientSessionParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A09524BA-9DE2-4447-99FC-01C4985F7C4D}
// *********************************************************************//
  _UAClientSessionParametersDisp = dispinterface
    ['{A09524BA-9DE2-4447-99FC-01C4985F7C4D}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property AcknowledgedMessagesLimit: Integer dispid 1610743816;
    property AllowEndpointDomainPrompt: WordBool dispid 1610743818;
    property AlwaysPreselectEndpoint: WordBool dispid 1610743820;
    property CheckAvailableSequenceNumbers: WordBool dispid 1610743822;
    property CheckBrowseResults: WordBool dispid 1610743824;
    property CheckEndpointDomain: WordBool dispid 1610743826;
    property CheckNotificationMessage: WordBool dispid 1610743828;
    property CheckSessionId: WordBool dispid 1610743830;
    property CloseTimeout: Integer dispid 1610743832;
    property DiagnosticsMasks: UADiagnosticsMasks dispid 1610743834;
    property EndpointDescriptionChecks: _UAEndpointDescriptionChecks dispid 1610743836;
    property EndpointSelectionPolicy: _UAEndpointSelectionPolicy dispid 1610743838;
    property EndpointSelectionTimeout: Integer dispid 1610743840;
    property KeepAliveInterval: Integer dispid 1610743842;
    property KeepAliveIntervalDebug: Integer dispid 1610743844;
    property LocaleId: WideString dispid 1610743846;
    property MaximumReferencesPerBrowseNode: Integer dispid 1610743848;
    property OperationTimeout: Integer dispid 1610743850;
    property PendingMessagesLimit: Integer dispid 1610743852;
    property PreselectedEndpointValidityPeriod: Integer dispid 1610743854;
    property RequireMatchingServerSoftwareCertificates: WordBool dispid 1610743856;
    property RequireNonEmptyServerSignature: WordBool dispid 1610743858;
    property RequireServerEndpointsMatchDiscovery: WordBool dispid 1610743860;
    property RequireTimestampsAsRequested: WordBool dispid 1610743862;
    property RequireUniqueAuthenticationToken: WordBool dispid 1610743864;
    property RequireUniqueServerNonce: WordBool dispid 1610743866;
    property RequireValidAuthenticationToken: WordBool dispid 1610743868;
    property RequireValidServerNonce: WordBool dispid 1610743870;
    property RetrialDelay: Integer dispid 1610743872;
    property SanitizeReferenceDescriptions: WordBool dispid 1610743874;
    property SessionConnectTimeout: Integer dispid 1610743876;
    property SessionTimeout: Integer dispid 1610743878;
    property SessionTimeoutDebug: Integer dispid 1610743880;
    property ShortestAllowedRevisedSessionTimeout: Double dispid 1610743882;
    property UpdateEndpointBeforeConnect: WordBool dispid 1610743884;
    property UserIdentity: _UserIdentity dispid 1610743886;
    property WriteNarrowestIntegerType: WordBool dispid 1610743888;
    property WriteNarrowestRealType: WordBool dispid 1610743890;
    procedure Reset; dispid 1610743892;
  end;

// *********************************************************************//
// Interface: _UAClientSubscriptionParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0CCA8354-6931-4EDB-B85A-740F0FC6CC62}
// *********************************************************************//
  _UAClientSubscriptionParameters = interface(IDispatch)
    ['{0CCA8354-6931-4EDB-B85A-740F0FC6CC62}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_AllowPublishTimeAhead: WordBool; safecall;
    procedure Set_AllowPublishTimeAhead(pRetVal: WordBool); safecall;
    function Get_AllowPublishTimeStale: WordBool; safecall;
    procedure Set_AllowPublishTimeStale(pRetVal: WordBool); safecall;
    function Get_AssumedMinimumKeepAliveCount: Integer; safecall;
    procedure Set_AssumedMinimumKeepAliveCount(pRetVal: Integer); safecall;
    function Get_AssumedMinimumLifetimeCount: Integer; safecall;
    procedure Set_AssumedMinimumLifetimeCount(pRetVal: Integer); safecall;
    function Get_AssumedMinimumPublishingInterval: Integer; safecall;
    procedure Set_AssumedMinimumPublishingInterval(pRetVal: Integer); safecall;
    function Get_CheckSubscriptionId: WordBool; safecall;
    procedure Set_CheckSubscriptionId(pRetVal: WordBool); safecall;
    function Get_FastestKeepAliveInterval: Integer; safecall;
    procedure Set_FastestKeepAliveInterval(pRetVal: Integer); safecall;
    function Get_FastestKeepAliveIntervalDebug: Integer; safecall;
    procedure Set_FastestKeepAliveIntervalDebug(pRetVal: Integer); safecall;
    function Get_FastestLifetimeInterval: Integer; safecall;
    procedure Set_FastestLifetimeInterval(pRetVal: Integer); safecall;
    function Get_FastestLifetimeIntervalDebug: Integer; safecall;
    procedure Set_FastestLifetimeIntervalDebug(pRetVal: Integer); safecall;
    function Get_KeepAliveCount: Integer; safecall;
    procedure Set_KeepAliveCount(pRetVal: Integer); safecall;
    function Get_LifetimeCount: Integer; safecall;
    procedure Set_LifetimeCount(pRetVal: Integer); safecall;
    function Get_MaximumLifetimeDueTime: Double; safecall;
    procedure Set_MaximumLifetimeDueTime(pRetVal: Double); safecall;
    function Get_PublishingHaltedProbationaryPeriod: Integer; safecall;
    procedure Set_PublishingHaltedProbationaryPeriod(pRetVal: Integer); safecall;
    function Get_PublishStatusChangedQueueLimit: Integer; safecall;
    procedure Set_PublishStatusChangedQueueLimit(pRetVal: Integer); safecall;
    function Get_RequireMinimumRevisedLifetimeCount: WordBool; safecall;
    procedure Set_RequireMinimumRevisedLifetimeCount(pRetVal: WordBool); safecall;
    function Get_RetrialDelay: Integer; safecall;
    procedure Set_RetrialDelay(pRetVal: Integer); safecall;
    procedure Reset; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property AllowPublishTimeAhead: WordBool read Get_AllowPublishTimeAhead write Set_AllowPublishTimeAhead;
    property AllowPublishTimeStale: WordBool read Get_AllowPublishTimeStale write Set_AllowPublishTimeStale;
    property AssumedMinimumKeepAliveCount: Integer read Get_AssumedMinimumKeepAliveCount write Set_AssumedMinimumKeepAliveCount;
    property AssumedMinimumLifetimeCount: Integer read Get_AssumedMinimumLifetimeCount write Set_AssumedMinimumLifetimeCount;
    property AssumedMinimumPublishingInterval: Integer read Get_AssumedMinimumPublishingInterval write Set_AssumedMinimumPublishingInterval;
    property CheckSubscriptionId: WordBool read Get_CheckSubscriptionId write Set_CheckSubscriptionId;
    property FastestKeepAliveInterval: Integer read Get_FastestKeepAliveInterval write Set_FastestKeepAliveInterval;
    property FastestKeepAliveIntervalDebug: Integer read Get_FastestKeepAliveIntervalDebug write Set_FastestKeepAliveIntervalDebug;
    property FastestLifetimeInterval: Integer read Get_FastestLifetimeInterval write Set_FastestLifetimeInterval;
    property FastestLifetimeIntervalDebug: Integer read Get_FastestLifetimeIntervalDebug write Set_FastestLifetimeIntervalDebug;
    property KeepAliveCount: Integer read Get_KeepAliveCount write Set_KeepAliveCount;
    property LifetimeCount: Integer read Get_LifetimeCount write Set_LifetimeCount;
    property MaximumLifetimeDueTime: Double read Get_MaximumLifetimeDueTime write Set_MaximumLifetimeDueTime;
    property PublishingHaltedProbationaryPeriod: Integer read Get_PublishingHaltedProbationaryPeriod write Set_PublishingHaltedProbationaryPeriod;
    property PublishStatusChangedQueueLimit: Integer read Get_PublishStatusChangedQueueLimit write Set_PublishStatusChangedQueueLimit;
    property RequireMinimumRevisedLifetimeCount: WordBool read Get_RequireMinimumRevisedLifetimeCount write Set_RequireMinimumRevisedLifetimeCount;
    property RetrialDelay: Integer read Get_RetrialDelay write Set_RetrialDelay;
  end;

// *********************************************************************//
// DispIntf:  _UAClientSubscriptionParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0CCA8354-6931-4EDB-B85A-740F0FC6CC62}
// *********************************************************************//
  _UAClientSubscriptionParametersDisp = dispinterface
    ['{0CCA8354-6931-4EDB-B85A-740F0FC6CC62}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property AllowPublishTimeAhead: WordBool dispid 1610743816;
    property AllowPublishTimeStale: WordBool dispid 1610743818;
    property AssumedMinimumKeepAliveCount: Integer dispid 1610743820;
    property AssumedMinimumLifetimeCount: Integer dispid 1610743822;
    property AssumedMinimumPublishingInterval: Integer dispid 1610743824;
    property CheckSubscriptionId: WordBool dispid 1610743826;
    property FastestKeepAliveInterval: Integer dispid 1610743828;
    property FastestKeepAliveIntervalDebug: Integer dispid 1610743830;
    property FastestLifetimeInterval: Integer dispid 1610743832;
    property FastestLifetimeIntervalDebug: Integer dispid 1610743834;
    property KeepAliveCount: Integer dispid 1610743836;
    property LifetimeCount: Integer dispid 1610743838;
    property MaximumLifetimeDueTime: Double dispid 1610743840;
    property PublishingHaltedProbationaryPeriod: Integer dispid 1610743842;
    property PublishStatusChangedQueueLimit: Integer dispid 1610743844;
    property RequireMinimumRevisedLifetimeCount: WordBool dispid 1610743846;
    property RetrialDelay: Integer dispid 1610743848;
    procedure Reset; dispid 1610743850;
  end;

// *********************************************************************//
// Interface: _UADiscoveryParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {23D76E10-3379-4A29-B178-2452CBC404E0}
// *********************************************************************//
  _UADiscoveryParameters = interface(IDispatch)
    ['{23D76E10-3379-4A29-B178-2452CBC404E0}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_CheckApplicationDescription: WordBool; safecall;
    procedure Set_CheckApplicationDescription(pRetVal: WordBool); safecall;
    function Get_DiscoveryTimeout: Integer; safecall;
    procedure Set_DiscoveryTimeout(pRetVal: Integer); safecall;
    function Get_ParallelDiscovery: WordBool; safecall;
    procedure Set_ParallelDiscovery(pRetVal: WordBool); safecall;
    function Get_ReturnSameSites: WordBool; safecall;
    procedure Set_ReturnSameSites(pRetVal: WordBool); safecall;
    procedure Reset; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property CheckApplicationDescription: WordBool read Get_CheckApplicationDescription write Set_CheckApplicationDescription;
    property DiscoveryTimeout: Integer read Get_DiscoveryTimeout write Set_DiscoveryTimeout;
    property ParallelDiscovery: WordBool read Get_ParallelDiscovery write Set_ParallelDiscovery;
    property ReturnSameSites: WordBool read Get_ReturnSameSites write Set_ReturnSameSites;
  end;

// *********************************************************************//
// DispIntf:  _UADiscoveryParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {23D76E10-3379-4A29-B178-2452CBC404E0}
// *********************************************************************//
  _UADiscoveryParametersDisp = dispinterface
    ['{23D76E10-3379-4A29-B178-2452CBC404E0}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property CheckApplicationDescription: WordBool dispid 1610743816;
    property DiscoveryTimeout: Integer dispid 1610743818;
    property ParallelDiscovery: WordBool dispid 1610743820;
    property ReturnSameSites: WordBool dispid 1610743822;
    procedure Reset; dispid 1610743824;
  end;

// *********************************************************************//
// Interface: _UAEndpointDescriptionChecks
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DC62DE51-E00E-449B-879C-920F16E4B4A3}
// *********************************************************************//
  _UAEndpointDescriptionChecks = interface(IDispatch)
    ['{DC62DE51-E00E-449B-879C-920F16E4B4A3}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_CheckEndpointUrl: WordBool; safecall;
    procedure Set_CheckEndpointUrl(pRetVal: WordBool); safecall;
    function Get_CheckServerApplication: WordBool; safecall;
    procedure Set_CheckServerApplication(pRetVal: WordBool); safecall;
    function Get_CheckServerCertificate: WordBool; safecall;
    procedure Set_CheckServerCertificate(pRetVal: WordBool); safecall;
    function Get_CheckSecurityMode: WordBool; safecall;
    procedure Set_CheckSecurityMode(pRetVal: WordBool); safecall;
    function Get_CheckSecurityPolicyUri: WordBool; safecall;
    procedure Set_CheckSecurityPolicyUri(pRetVal: WordBool); safecall;
    function Get_CheckUserIdentityTokens: WordBool; safecall;
    procedure Set_CheckUserIdentityTokens(pRetVal: WordBool); safecall;
    function Get_CheckTransportProfileUri: WordBool; safecall;
    procedure Set_CheckTransportProfileUri(pRetVal: WordBool); safecall;
    function Get_RequireHostMatchCertificate: WordBool; safecall;
    procedure Set_RequireHostMatchCertificate(pRetVal: WordBool); safecall;
    function Get_RequireValidDiscoveryUrls: WordBool; safecall;
    procedure Set_RequireValidDiscoveryUrls(pRetVal: WordBool); safecall;
    function Get_UseStrictUrlMatch: WordBool; safecall;
    procedure Set_UseStrictUrlMatch(pRetVal: WordBool); safecall;
    procedure Reset; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property CheckEndpointUrl: WordBool read Get_CheckEndpointUrl write Set_CheckEndpointUrl;
    property CheckServerApplication: WordBool read Get_CheckServerApplication write Set_CheckServerApplication;
    property CheckServerCertificate: WordBool read Get_CheckServerCertificate write Set_CheckServerCertificate;
    property CheckSecurityMode: WordBool read Get_CheckSecurityMode write Set_CheckSecurityMode;
    property CheckSecurityPolicyUri: WordBool read Get_CheckSecurityPolicyUri write Set_CheckSecurityPolicyUri;
    property CheckUserIdentityTokens: WordBool read Get_CheckUserIdentityTokens write Set_CheckUserIdentityTokens;
    property CheckTransportProfileUri: WordBool read Get_CheckTransportProfileUri write Set_CheckTransportProfileUri;
    property RequireHostMatchCertificate: WordBool read Get_RequireHostMatchCertificate write Set_RequireHostMatchCertificate;
    property RequireValidDiscoveryUrls: WordBool read Get_RequireValidDiscoveryUrls write Set_RequireValidDiscoveryUrls;
    property UseStrictUrlMatch: WordBool read Get_UseStrictUrlMatch write Set_UseStrictUrlMatch;
  end;

// *********************************************************************//
// DispIntf:  _UAEndpointDescriptionChecksDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DC62DE51-E00E-449B-879C-920F16E4B4A3}
// *********************************************************************//
  _UAEndpointDescriptionChecksDisp = dispinterface
    ['{DC62DE51-E00E-449B-879C-920F16E4B4A3}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property CheckEndpointUrl: WordBool dispid 1610743816;
    property CheckServerApplication: WordBool dispid 1610743818;
    property CheckServerCertificate: WordBool dispid 1610743820;
    property CheckSecurityMode: WordBool dispid 1610743822;
    property CheckSecurityPolicyUri: WordBool dispid 1610743824;
    property CheckUserIdentityTokens: WordBool dispid 1610743826;
    property CheckTransportProfileUri: WordBool dispid 1610743828;
    property RequireHostMatchCertificate: WordBool dispid 1610743830;
    property RequireValidDiscoveryUrls: WordBool dispid 1610743832;
    property UseStrictUrlMatch: WordBool dispid 1610743834;
    procedure Reset; dispid 1610743836;
  end;

// *********************************************************************//
// Interface: _UAEnhancedClientSessionParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2EAA2DB0-9563-4509-8E3B-42DD933A6B59}
// *********************************************************************//
  _UAEnhancedClientSessionParameters = interface(IDispatch)
    ['{2EAA2DB0-9563-4509-8E3B-42DD933A6B59}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_AcknowledgedMessagesLimit: Integer; safecall;
    procedure Set_AcknowledgedMessagesLimit(pRetVal: Integer); safecall;
    function Get_AllowEndpointDomainPrompt: WordBool; safecall;
    procedure Set_AllowEndpointDomainPrompt(pRetVal: WordBool); safecall;
    function Get_AlwaysPreselectEndpoint: WordBool; safecall;
    procedure Set_AlwaysPreselectEndpoint(pRetVal: WordBool); safecall;
    function Get_CheckAvailableSequenceNumbers: WordBool; safecall;
    procedure Set_CheckAvailableSequenceNumbers(pRetVal: WordBool); safecall;
    function Get_CheckBrowseResults: WordBool; safecall;
    procedure Set_CheckBrowseResults(pRetVal: WordBool); safecall;
    function Get_CheckEndpointDomain: WordBool; safecall;
    procedure Set_CheckEndpointDomain(pRetVal: WordBool); safecall;
    function Get_CheckNotificationMessage: WordBool; safecall;
    procedure Set_CheckNotificationMessage(pRetVal: WordBool); safecall;
    function Get_CheckSessionId: WordBool; safecall;
    procedure Set_CheckSessionId(pRetVal: WordBool); safecall;
    function Get_CloseTimeout: Integer; safecall;
    procedure Set_CloseTimeout(pRetVal: Integer); safecall;
    function Get_DiagnosticsMasks: UADiagnosticsMasks; safecall;
    procedure Set_DiagnosticsMasks(pRetVal: UADiagnosticsMasks); safecall;
    function Get_EndpointDescriptionChecks: _UAEndpointDescriptionChecks; safecall;
    procedure _Set_EndpointDescriptionChecks(const pRetVal: _UAEndpointDescriptionChecks); safecall;
    function Get_EndpointSelectionPolicy: _UAEndpointSelectionPolicy; safecall;
    procedure _Set_EndpointSelectionPolicy(const pRetVal: _UAEndpointSelectionPolicy); safecall;
    function Get_EndpointSelectionTimeout: Integer; safecall;
    procedure Set_EndpointSelectionTimeout(pRetVal: Integer); safecall;
    function Get_KeepAliveInterval: Integer; safecall;
    procedure Set_KeepAliveInterval(pRetVal: Integer); safecall;
    function Get_KeepAliveIntervalDebug: Integer; safecall;
    procedure Set_KeepAliveIntervalDebug(pRetVal: Integer); safecall;
    function Get_LocaleId: WideString; safecall;
    procedure Set_LocaleId(const pRetVal: WideString); safecall;
    function Get_MaximumReferencesPerBrowseNode: Integer; safecall;
    procedure Set_MaximumReferencesPerBrowseNode(pRetVal: Integer); safecall;
    function Get_OperationTimeout: Integer; safecall;
    procedure Set_OperationTimeout(pRetVal: Integer); safecall;
    function Get_PendingMessagesLimit: Integer; safecall;
    procedure Set_PendingMessagesLimit(pRetVal: Integer); safecall;
    function Get_PreselectedEndpointValidityPeriod: Integer; safecall;
    procedure Set_PreselectedEndpointValidityPeriod(pRetVal: Integer); safecall;
    function Get_RequireMatchingServerSoftwareCertificates: WordBool; safecall;
    procedure Set_RequireMatchingServerSoftwareCertificates(pRetVal: WordBool); safecall;
    function Get_RequireNonEmptyServerSignature: WordBool; safecall;
    procedure Set_RequireNonEmptyServerSignature(pRetVal: WordBool); safecall;
    function Get_RequireServerEndpointsMatchDiscovery: WordBool; safecall;
    procedure Set_RequireServerEndpointsMatchDiscovery(pRetVal: WordBool); safecall;
    function Get_RequireTimestampsAsRequested: WordBool; safecall;
    procedure Set_RequireTimestampsAsRequested(pRetVal: WordBool); safecall;
    function Get_RequireUniqueAuthenticationToken: WordBool; safecall;
    procedure Set_RequireUniqueAuthenticationToken(pRetVal: WordBool); safecall;
    function Get_RequireUniqueServerNonce: WordBool; safecall;
    procedure Set_RequireUniqueServerNonce(pRetVal: WordBool); safecall;
    function Get_RequireValidAuthenticationToken: WordBool; safecall;
    procedure Set_RequireValidAuthenticationToken(pRetVal: WordBool); safecall;
    function Get_RequireValidServerNonce: WordBool; safecall;
    procedure Set_RequireValidServerNonce(pRetVal: WordBool); safecall;
    function Get_RetrialDelay: Integer; safecall;
    procedure Set_RetrialDelay(pRetVal: Integer); safecall;
    function Get_SanitizeReferenceDescriptions: WordBool; safecall;
    procedure Set_SanitizeReferenceDescriptions(pRetVal: WordBool); safecall;
    function Get_SessionConnectTimeout: Integer; safecall;
    procedure Set_SessionConnectTimeout(pRetVal: Integer); safecall;
    function Get_SessionTimeout: Integer; safecall;
    procedure Set_SessionTimeout(pRetVal: Integer); safecall;
    function Get_SessionTimeoutDebug: Integer; safecall;
    procedure Set_SessionTimeoutDebug(pRetVal: Integer); safecall;
    function Get_ShortestAllowedRevisedSessionTimeout: Double; safecall;
    procedure Set_ShortestAllowedRevisedSessionTimeout(pRetVal: Double); safecall;
    function Get_UpdateEndpointBeforeConnect: WordBool; safecall;
    procedure Set_UpdateEndpointBeforeConnect(pRetVal: WordBool); safecall;
    function Get_UserIdentity: _UserIdentity; safecall;
    procedure _Set_UserIdentity(const pRetVal: _UserIdentity); safecall;
    function Get_WriteNarrowestIntegerType: WordBool; safecall;
    procedure Set_WriteNarrowestIntegerType(pRetVal: WordBool); safecall;
    function Get_WriteNarrowestRealType: WordBool; safecall;
    procedure Set_WriteNarrowestRealType(pRetVal: WordBool); safecall;
    procedure Reset; safecall;
    function Get_EnableStatusSubscription: WordBool; safecall;
    procedure Set_EnableStatusSubscription(pRetVal: WordBool); safecall;
    function Get_MaximumMonitoredItemsPerSubscription: Integer; safecall;
    procedure Set_MaximumMonitoredItemsPerSubscription(pRetVal: Integer); safecall;
    function Get_ServerShutdownRetrialDelay: Integer; safecall;
    procedure Set_ServerShutdownRetrialDelay(pRetVal: Integer); safecall;
    function Get_StatusSubscriptionSamplingInterval: Integer; safecall;
    procedure Set_StatusSubscriptionSamplingInterval(pRetVal: Integer); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property AcknowledgedMessagesLimit: Integer read Get_AcknowledgedMessagesLimit write Set_AcknowledgedMessagesLimit;
    property AllowEndpointDomainPrompt: WordBool read Get_AllowEndpointDomainPrompt write Set_AllowEndpointDomainPrompt;
    property AlwaysPreselectEndpoint: WordBool read Get_AlwaysPreselectEndpoint write Set_AlwaysPreselectEndpoint;
    property CheckAvailableSequenceNumbers: WordBool read Get_CheckAvailableSequenceNumbers write Set_CheckAvailableSequenceNumbers;
    property CheckBrowseResults: WordBool read Get_CheckBrowseResults write Set_CheckBrowseResults;
    property CheckEndpointDomain: WordBool read Get_CheckEndpointDomain write Set_CheckEndpointDomain;
    property CheckNotificationMessage: WordBool read Get_CheckNotificationMessage write Set_CheckNotificationMessage;
    property CheckSessionId: WordBool read Get_CheckSessionId write Set_CheckSessionId;
    property CloseTimeout: Integer read Get_CloseTimeout write Set_CloseTimeout;
    property DiagnosticsMasks: UADiagnosticsMasks read Get_DiagnosticsMasks write Set_DiagnosticsMasks;
    property EndpointDescriptionChecks: _UAEndpointDescriptionChecks read Get_EndpointDescriptionChecks write _Set_EndpointDescriptionChecks;
    property EndpointSelectionPolicy: _UAEndpointSelectionPolicy read Get_EndpointSelectionPolicy write _Set_EndpointSelectionPolicy;
    property EndpointSelectionTimeout: Integer read Get_EndpointSelectionTimeout write Set_EndpointSelectionTimeout;
    property KeepAliveInterval: Integer read Get_KeepAliveInterval write Set_KeepAliveInterval;
    property KeepAliveIntervalDebug: Integer read Get_KeepAliveIntervalDebug write Set_KeepAliveIntervalDebug;
    property LocaleId: WideString read Get_LocaleId write Set_LocaleId;
    property MaximumReferencesPerBrowseNode: Integer read Get_MaximumReferencesPerBrowseNode write Set_MaximumReferencesPerBrowseNode;
    property OperationTimeout: Integer read Get_OperationTimeout write Set_OperationTimeout;
    property PendingMessagesLimit: Integer read Get_PendingMessagesLimit write Set_PendingMessagesLimit;
    property PreselectedEndpointValidityPeriod: Integer read Get_PreselectedEndpointValidityPeriod write Set_PreselectedEndpointValidityPeriod;
    property RequireMatchingServerSoftwareCertificates: WordBool read Get_RequireMatchingServerSoftwareCertificates write Set_RequireMatchingServerSoftwareCertificates;
    property RequireNonEmptyServerSignature: WordBool read Get_RequireNonEmptyServerSignature write Set_RequireNonEmptyServerSignature;
    property RequireServerEndpointsMatchDiscovery: WordBool read Get_RequireServerEndpointsMatchDiscovery write Set_RequireServerEndpointsMatchDiscovery;
    property RequireTimestampsAsRequested: WordBool read Get_RequireTimestampsAsRequested write Set_RequireTimestampsAsRequested;
    property RequireUniqueAuthenticationToken: WordBool read Get_RequireUniqueAuthenticationToken write Set_RequireUniqueAuthenticationToken;
    property RequireUniqueServerNonce: WordBool read Get_RequireUniqueServerNonce write Set_RequireUniqueServerNonce;
    property RequireValidAuthenticationToken: WordBool read Get_RequireValidAuthenticationToken write Set_RequireValidAuthenticationToken;
    property RequireValidServerNonce: WordBool read Get_RequireValidServerNonce write Set_RequireValidServerNonce;
    property RetrialDelay: Integer read Get_RetrialDelay write Set_RetrialDelay;
    property SanitizeReferenceDescriptions: WordBool read Get_SanitizeReferenceDescriptions write Set_SanitizeReferenceDescriptions;
    property SessionConnectTimeout: Integer read Get_SessionConnectTimeout write Set_SessionConnectTimeout;
    property SessionTimeout: Integer read Get_SessionTimeout write Set_SessionTimeout;
    property SessionTimeoutDebug: Integer read Get_SessionTimeoutDebug write Set_SessionTimeoutDebug;
    property ShortestAllowedRevisedSessionTimeout: Double read Get_ShortestAllowedRevisedSessionTimeout write Set_ShortestAllowedRevisedSessionTimeout;
    property UpdateEndpointBeforeConnect: WordBool read Get_UpdateEndpointBeforeConnect write Set_UpdateEndpointBeforeConnect;
    property UserIdentity: _UserIdentity read Get_UserIdentity write _Set_UserIdentity;
    property WriteNarrowestIntegerType: WordBool read Get_WriteNarrowestIntegerType write Set_WriteNarrowestIntegerType;
    property WriteNarrowestRealType: WordBool read Get_WriteNarrowestRealType write Set_WriteNarrowestRealType;
    property EnableStatusSubscription: WordBool read Get_EnableStatusSubscription write Set_EnableStatusSubscription;
    property MaximumMonitoredItemsPerSubscription: Integer read Get_MaximumMonitoredItemsPerSubscription write Set_MaximumMonitoredItemsPerSubscription;
    property ServerShutdownRetrialDelay: Integer read Get_ServerShutdownRetrialDelay write Set_ServerShutdownRetrialDelay;
    property StatusSubscriptionSamplingInterval: Integer read Get_StatusSubscriptionSamplingInterval write Set_StatusSubscriptionSamplingInterval;
  end;

// *********************************************************************//
// DispIntf:  _UAEnhancedClientSessionParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2EAA2DB0-9563-4509-8E3B-42DD933A6B59}
// *********************************************************************//
  _UAEnhancedClientSessionParametersDisp = dispinterface
    ['{2EAA2DB0-9563-4509-8E3B-42DD933A6B59}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property AcknowledgedMessagesLimit: Integer dispid 1610743816;
    property AllowEndpointDomainPrompt: WordBool dispid 1610743818;
    property AlwaysPreselectEndpoint: WordBool dispid 1610743820;
    property CheckAvailableSequenceNumbers: WordBool dispid 1610743822;
    property CheckBrowseResults: WordBool dispid 1610743824;
    property CheckEndpointDomain: WordBool dispid 1610743826;
    property CheckNotificationMessage: WordBool dispid 1610743828;
    property CheckSessionId: WordBool dispid 1610743830;
    property CloseTimeout: Integer dispid 1610743832;
    property DiagnosticsMasks: UADiagnosticsMasks dispid 1610743834;
    property EndpointDescriptionChecks: _UAEndpointDescriptionChecks dispid 1610743836;
    property EndpointSelectionPolicy: _UAEndpointSelectionPolicy dispid 1610743838;
    property EndpointSelectionTimeout: Integer dispid 1610743840;
    property KeepAliveInterval: Integer dispid 1610743842;
    property KeepAliveIntervalDebug: Integer dispid 1610743844;
    property LocaleId: WideString dispid 1610743846;
    property MaximumReferencesPerBrowseNode: Integer dispid 1610743848;
    property OperationTimeout: Integer dispid 1610743850;
    property PendingMessagesLimit: Integer dispid 1610743852;
    property PreselectedEndpointValidityPeriod: Integer dispid 1610743854;
    property RequireMatchingServerSoftwareCertificates: WordBool dispid 1610743856;
    property RequireNonEmptyServerSignature: WordBool dispid 1610743858;
    property RequireServerEndpointsMatchDiscovery: WordBool dispid 1610743860;
    property RequireTimestampsAsRequested: WordBool dispid 1610743862;
    property RequireUniqueAuthenticationToken: WordBool dispid 1610743864;
    property RequireUniqueServerNonce: WordBool dispid 1610743866;
    property RequireValidAuthenticationToken: WordBool dispid 1610743868;
    property RequireValidServerNonce: WordBool dispid 1610743870;
    property RetrialDelay: Integer dispid 1610743872;
    property SanitizeReferenceDescriptions: WordBool dispid 1610743874;
    property SessionConnectTimeout: Integer dispid 1610743876;
    property SessionTimeout: Integer dispid 1610743878;
    property SessionTimeoutDebug: Integer dispid 1610743880;
    property ShortestAllowedRevisedSessionTimeout: Double dispid 1610743882;
    property UpdateEndpointBeforeConnect: WordBool dispid 1610743884;
    property UserIdentity: _UserIdentity dispid 1610743886;
    property WriteNarrowestIntegerType: WordBool dispid 1610743888;
    property WriteNarrowestRealType: WordBool dispid 1610743890;
    procedure Reset; dispid 1610743892;
    property EnableStatusSubscription: WordBool dispid 1610743893;
    property MaximumMonitoredItemsPerSubscription: Integer dispid 1610743895;
    property ServerShutdownRetrialDelay: Integer dispid 1610743897;
    property StatusSubscriptionSamplingInterval: Integer dispid 1610743899;
  end;

// *********************************************************************//
// Interface: _UAHostParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A2020BCE-F738-4956-8021-2D603850BBB1}
// *********************************************************************//
  _UAHostParameters = interface(IDispatch)
    ['{A2020BCE-F738-4956-8021-2D603850BBB1}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_DiscoveryUriTemplateStrings: _StringCollection; safecall;
    procedure _Set_DiscoveryUriTemplateStrings(const pRetVal: _StringCollection); safecall;
    procedure Reset; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property DiscoveryUriTemplateStrings: _StringCollection read Get_DiscoveryUriTemplateStrings write _Set_DiscoveryUriTemplateStrings;
  end;

// *********************************************************************//
// DispIntf:  _UAHostParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A2020BCE-F738-4956-8021-2D603850BBB1}
// *********************************************************************//
  _UAHostParametersDisp = dispinterface
    ['{A2020BCE-F738-4956-8021-2D603850BBB1}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property DiscoveryUriTemplateStrings: _StringCollection dispid 1610743816;
    procedure Reset; dispid 1610743818;
  end;

// *********************************************************************//
// Interface: _UASmartClientEngineParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {61307AAA-A0B0-400B-A24B-0BC60694B324}
// *********************************************************************//
  _UASmartClientEngineParameters = interface(IDispatch)
    ['{61307AAA-A0B0-400B-A24B-0BC60694B324}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_CertificateAcceptancePolicy: _UACertificateAcceptancePolicy; safecall;
    procedure _Set_CertificateAcceptancePolicy(const pRetVal: _UACertificateAcceptancePolicy); safecall;
    function Get_ConfigurationPropertyOverrides: _StringObjectDictionary; safecall;
    procedure _Set_ConfigurationPropertyOverrides(const pRetVal: _StringObjectDictionary); safecall;
    function Get_ConfigurationSources: UAConfigurationSources; safecall;
    procedure Set_ConfigurationSources(pRetVal: UAConfigurationSources); safecall;
    function Get_DebuggerDetectionOverride: Sign; safecall;
    procedure Set_DebuggerDetectionOverride(pRetVal: Sign); safecall;
    function Get_gdsEndpointDescriptor: _UAEndpointDescriptor; safecall;
    procedure _Set_gdsEndpointDescriptor(const pRetVal: _UAEndpointDescriptor); safecall;
    function Get_RetrialDelay: Integer; safecall;
    procedure Set_RetrialDelay(pRetVal: Integer); safecall;
    function Get_ReconnectionPeriod: Integer; safecall;
    procedure Set_ReconnectionPeriod(pRetVal: Integer); safecall;
    function Get_UserInteractionParameters: _UAUserInteractionParameters; safecall;
    procedure _Set_UserInteractionParameters(const pRetVal: _UAUserInteractionParameters); safecall;
    procedure Reset; safecall;
    function Get_HttpsCertificateAcceptancePolicy: _UACertificateAcceptancePolicy; safecall;
    procedure _Set_HttpsCertificateAcceptancePolicy(const pRetVal: _UACertificateAcceptancePolicy); safecall;
    function Get_UseCustomHttpsCertificateValidation: WordBool; safecall;
    procedure Set_UseCustomHttpsCertificateValidation(pRetVal: WordBool); safecall;
    function Get_GarbageCollectionPeriod: Integer; safecall;
    procedure Set_GarbageCollectionPeriod(pRetVal: Integer); safecall;
    function Get_MaximumDormantSessions: Integer; safecall;
    procedure Set_MaximumDormantSessions(pRetVal: Integer); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property CertificateAcceptancePolicy: _UACertificateAcceptancePolicy read Get_CertificateAcceptancePolicy write _Set_CertificateAcceptancePolicy;
    property ConfigurationPropertyOverrides: _StringObjectDictionary read Get_ConfigurationPropertyOverrides write _Set_ConfigurationPropertyOverrides;
    property ConfigurationSources: UAConfigurationSources read Get_ConfigurationSources write Set_ConfigurationSources;
    property DebuggerDetectionOverride: Sign read Get_DebuggerDetectionOverride write Set_DebuggerDetectionOverride;
    property gdsEndpointDescriptor: _UAEndpointDescriptor read Get_gdsEndpointDescriptor write _Set_gdsEndpointDescriptor;
    property RetrialDelay: Integer read Get_RetrialDelay write Set_RetrialDelay;
    property ReconnectionPeriod: Integer read Get_ReconnectionPeriod write Set_ReconnectionPeriod;
    property UserInteractionParameters: _UAUserInteractionParameters read Get_UserInteractionParameters write _Set_UserInteractionParameters;
    property HttpsCertificateAcceptancePolicy: _UACertificateAcceptancePolicy read Get_HttpsCertificateAcceptancePolicy write _Set_HttpsCertificateAcceptancePolicy;
    property UseCustomHttpsCertificateValidation: WordBool read Get_UseCustomHttpsCertificateValidation write Set_UseCustomHttpsCertificateValidation;
    property GarbageCollectionPeriod: Integer read Get_GarbageCollectionPeriod write Set_GarbageCollectionPeriod;
    property MaximumDormantSessions: Integer read Get_MaximumDormantSessions write Set_MaximumDormantSessions;
  end;

// *********************************************************************//
// DispIntf:  _UASmartClientEngineParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {61307AAA-A0B0-400B-A24B-0BC60694B324}
// *********************************************************************//
  _UASmartClientEngineParametersDisp = dispinterface
    ['{61307AAA-A0B0-400B-A24B-0BC60694B324}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property CertificateAcceptancePolicy: _UACertificateAcceptancePolicy dispid 1610743816;
    property ConfigurationPropertyOverrides: _StringObjectDictionary dispid 1610743818;
    property ConfigurationSources: UAConfigurationSources dispid 1610743820;
    property DebuggerDetectionOverride: Sign dispid 1610743822;
    property gdsEndpointDescriptor: _UAEndpointDescriptor dispid 1610743824;
    property RetrialDelay: Integer dispid 1610743826;
    property ReconnectionPeriod: Integer dispid 1610743828;
    property UserInteractionParameters: _UAUserInteractionParameters dispid 1610743830;
    procedure Reset; dispid 1610743832;
    property HttpsCertificateAcceptancePolicy: _UACertificateAcceptancePolicy dispid 1610743833;
    property UseCustomHttpsCertificateValidation: WordBool dispid 1610743835;
    property GarbageCollectionPeriod: Integer dispid 1610743837;
    property MaximumDormantSessions: Integer dispid 1610743839;
  end;

// *********************************************************************//
// Interface: _UASmartClientSessionParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2056DFDF-FEF9-41D7-9A27-C580BAA7D5B1}
// *********************************************************************//
  _UASmartClientSessionParameters = interface(IDispatch)
    ['{2056DFDF-FEF9-41D7-9A27-C580BAA7D5B1}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_AcknowledgedMessagesLimit: Integer; safecall;
    procedure Set_AcknowledgedMessagesLimit(pRetVal: Integer); safecall;
    function Get_AllowEndpointDomainPrompt: WordBool; safecall;
    procedure Set_AllowEndpointDomainPrompt(pRetVal: WordBool); safecall;
    function Get_AlwaysPreselectEndpoint: WordBool; safecall;
    procedure Set_AlwaysPreselectEndpoint(pRetVal: WordBool); safecall;
    function Get_CheckAvailableSequenceNumbers: WordBool; safecall;
    procedure Set_CheckAvailableSequenceNumbers(pRetVal: WordBool); safecall;
    function Get_CheckBrowseResults: WordBool; safecall;
    procedure Set_CheckBrowseResults(pRetVal: WordBool); safecall;
    function Get_CheckEndpointDomain: WordBool; safecall;
    procedure Set_CheckEndpointDomain(pRetVal: WordBool); safecall;
    function Get_CheckNotificationMessage: WordBool; safecall;
    procedure Set_CheckNotificationMessage(pRetVal: WordBool); safecall;
    function Get_CheckSessionId: WordBool; safecall;
    procedure Set_CheckSessionId(pRetVal: WordBool); safecall;
    function Get_CloseTimeout: Integer; safecall;
    procedure Set_CloseTimeout(pRetVal: Integer); safecall;
    function Get_DiagnosticsMasks: UADiagnosticsMasks; safecall;
    procedure Set_DiagnosticsMasks(pRetVal: UADiagnosticsMasks); safecall;
    function Get_EndpointDescriptionChecks: _UAEndpointDescriptionChecks; safecall;
    procedure _Set_EndpointDescriptionChecks(const pRetVal: _UAEndpointDescriptionChecks); safecall;
    function Get_EndpointSelectionPolicy: _UAEndpointSelectionPolicy; safecall;
    procedure _Set_EndpointSelectionPolicy(const pRetVal: _UAEndpointSelectionPolicy); safecall;
    function Get_EndpointSelectionTimeout: Integer; safecall;
    procedure Set_EndpointSelectionTimeout(pRetVal: Integer); safecall;
    function Get_KeepAliveInterval: Integer; safecall;
    procedure Set_KeepAliveInterval(pRetVal: Integer); safecall;
    function Get_KeepAliveIntervalDebug: Integer; safecall;
    procedure Set_KeepAliveIntervalDebug(pRetVal: Integer); safecall;
    function Get_LocaleId: WideString; safecall;
    procedure Set_LocaleId(const pRetVal: WideString); safecall;
    function Get_OperationTimeout: Integer; safecall;
    procedure Set_OperationTimeout(pRetVal: Integer); safecall;
    function Get_MaximumReferencesPerBrowseNode: Integer; safecall;
    procedure Set_MaximumReferencesPerBrowseNode(pRetVal: Integer); safecall;
    function Get_PendingMessagesLimit: Integer; safecall;
    procedure Set_PendingMessagesLimit(pRetVal: Integer); safecall;
    function Get_PreselectedEndpointValidityPeriod: Integer; safecall;
    procedure Set_PreselectedEndpointValidityPeriod(pRetVal: Integer); safecall;
    function Get_RequireMatchingServerSoftwareCertificates: WordBool; safecall;
    procedure Set_RequireMatchingServerSoftwareCertificates(pRetVal: WordBool); safecall;
    function Get_RequireNonEmptyServerSignature: WordBool; safecall;
    procedure Set_RequireNonEmptyServerSignature(pRetVal: WordBool); safecall;
    function Get_RequireServerEndpointsMatchDiscovery: WordBool; safecall;
    procedure Set_RequireServerEndpointsMatchDiscovery(pRetVal: WordBool); safecall;
    function Get_RequireTimestampsAsRequested: WordBool; safecall;
    procedure Set_RequireTimestampsAsRequested(pRetVal: WordBool); safecall;
    function Get_RequireUniqueAuthenticationToken: WordBool; safecall;
    procedure Set_RequireUniqueAuthenticationToken(pRetVal: WordBool); safecall;
    function Get_RequireUniqueServerNonce: WordBool; safecall;
    procedure Set_RequireUniqueServerNonce(pRetVal: WordBool); safecall;
    function Get_RequireValidAuthenticationToken: WordBool; safecall;
    procedure Set_RequireValidAuthenticationToken(pRetVal: WordBool); safecall;
    function Get_RequireValidServerNonce: WordBool; safecall;
    procedure Set_RequireValidServerNonce(pRetVal: WordBool); safecall;
    function Get_RetrialDelay: Integer; safecall;
    procedure Set_RetrialDelay(pRetVal: Integer); safecall;
    function Get_SanitizeReferenceDescriptions: WordBool; safecall;
    procedure Set_SanitizeReferenceDescriptions(pRetVal: WordBool); safecall;
    function Get_SessionConnectTimeout: Integer; safecall;
    procedure Set_SessionConnectTimeout(pRetVal: Integer); safecall;
    function Get_SessionTimeout: Integer; safecall;
    procedure Set_SessionTimeout(pRetVal: Integer); safecall;
    function Get_SessionTimeoutDebug: Integer; safecall;
    procedure Set_SessionTimeoutDebug(pRetVal: Integer); safecall;
    function Get_ShortestAllowedRevisedSessionTimeout: Double; safecall;
    procedure Set_ShortestAllowedRevisedSessionTimeout(pRetVal: Double); safecall;
    function Get_UpdateEndpointBeforeConnect: WordBool; safecall;
    procedure Set_UpdateEndpointBeforeConnect(pRetVal: WordBool); safecall;
    function Get_UserIdentity: _UserIdentity; safecall;
    procedure _Set_UserIdentity(const pRetVal: _UserIdentity); safecall;
    function Get_WriteNarrowestIntegerType: WordBool; safecall;
    procedure Set_WriteNarrowestIntegerType(pRetVal: WordBool); safecall;
    function Get_WriteNarrowestRealType: WordBool; safecall;
    procedure Set_WriteNarrowestRealType(pRetVal: WordBool); safecall;
    procedure Reset; safecall;
    function Get_EnableStatusSubscription: WordBool; safecall;
    procedure Set_EnableStatusSubscription(pRetVal: WordBool); safecall;
    function Get_MaximumMonitoredItemsPerSubscription: Integer; safecall;
    procedure Set_MaximumMonitoredItemsPerSubscription(pRetVal: Integer); safecall;
    function Get_ServerShutdownRetrialDelay: Integer; safecall;
    procedure Set_ServerShutdownRetrialDelay(pRetVal: Integer); safecall;
    function Get_StatusSubscriptionSamplingInterval: Integer; safecall;
    procedure Set_StatusSubscriptionSamplingInterval(pRetVal: Integer); safecall;
    function Get_DormancyPeriod: Int64; safecall;
    procedure Set_DormancyPeriod(pRetVal: Int64); safecall;
    function Get_DormancyPeriodDouble: Double; safecall;
    procedure Set_DormancyPeriodDouble(pRetVal: Double); safecall;
    function Get_HoldPeriod: Integer; safecall;
    procedure Set_HoldPeriod(pRetVal: Integer); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property AcknowledgedMessagesLimit: Integer read Get_AcknowledgedMessagesLimit write Set_AcknowledgedMessagesLimit;
    property AllowEndpointDomainPrompt: WordBool read Get_AllowEndpointDomainPrompt write Set_AllowEndpointDomainPrompt;
    property AlwaysPreselectEndpoint: WordBool read Get_AlwaysPreselectEndpoint write Set_AlwaysPreselectEndpoint;
    property CheckAvailableSequenceNumbers: WordBool read Get_CheckAvailableSequenceNumbers write Set_CheckAvailableSequenceNumbers;
    property CheckBrowseResults: WordBool read Get_CheckBrowseResults write Set_CheckBrowseResults;
    property CheckEndpointDomain: WordBool read Get_CheckEndpointDomain write Set_CheckEndpointDomain;
    property CheckNotificationMessage: WordBool read Get_CheckNotificationMessage write Set_CheckNotificationMessage;
    property CheckSessionId: WordBool read Get_CheckSessionId write Set_CheckSessionId;
    property CloseTimeout: Integer read Get_CloseTimeout write Set_CloseTimeout;
    property DiagnosticsMasks: UADiagnosticsMasks read Get_DiagnosticsMasks write Set_DiagnosticsMasks;
    property EndpointDescriptionChecks: _UAEndpointDescriptionChecks read Get_EndpointDescriptionChecks write _Set_EndpointDescriptionChecks;
    property EndpointSelectionPolicy: _UAEndpointSelectionPolicy read Get_EndpointSelectionPolicy write _Set_EndpointSelectionPolicy;
    property EndpointSelectionTimeout: Integer read Get_EndpointSelectionTimeout write Set_EndpointSelectionTimeout;
    property KeepAliveInterval: Integer read Get_KeepAliveInterval write Set_KeepAliveInterval;
    property KeepAliveIntervalDebug: Integer read Get_KeepAliveIntervalDebug write Set_KeepAliveIntervalDebug;
    property LocaleId: WideString read Get_LocaleId write Set_LocaleId;
    property OperationTimeout: Integer read Get_OperationTimeout write Set_OperationTimeout;
    property MaximumReferencesPerBrowseNode: Integer read Get_MaximumReferencesPerBrowseNode write Set_MaximumReferencesPerBrowseNode;
    property PendingMessagesLimit: Integer read Get_PendingMessagesLimit write Set_PendingMessagesLimit;
    property PreselectedEndpointValidityPeriod: Integer read Get_PreselectedEndpointValidityPeriod write Set_PreselectedEndpointValidityPeriod;
    property RequireMatchingServerSoftwareCertificates: WordBool read Get_RequireMatchingServerSoftwareCertificates write Set_RequireMatchingServerSoftwareCertificates;
    property RequireNonEmptyServerSignature: WordBool read Get_RequireNonEmptyServerSignature write Set_RequireNonEmptyServerSignature;
    property RequireServerEndpointsMatchDiscovery: WordBool read Get_RequireServerEndpointsMatchDiscovery write Set_RequireServerEndpointsMatchDiscovery;
    property RequireTimestampsAsRequested: WordBool read Get_RequireTimestampsAsRequested write Set_RequireTimestampsAsRequested;
    property RequireUniqueAuthenticationToken: WordBool read Get_RequireUniqueAuthenticationToken write Set_RequireUniqueAuthenticationToken;
    property RequireUniqueServerNonce: WordBool read Get_RequireUniqueServerNonce write Set_RequireUniqueServerNonce;
    property RequireValidAuthenticationToken: WordBool read Get_RequireValidAuthenticationToken write Set_RequireValidAuthenticationToken;
    property RequireValidServerNonce: WordBool read Get_RequireValidServerNonce write Set_RequireValidServerNonce;
    property RetrialDelay: Integer read Get_RetrialDelay write Set_RetrialDelay;
    property SanitizeReferenceDescriptions: WordBool read Get_SanitizeReferenceDescriptions write Set_SanitizeReferenceDescriptions;
    property SessionConnectTimeout: Integer read Get_SessionConnectTimeout write Set_SessionConnectTimeout;
    property SessionTimeout: Integer read Get_SessionTimeout write Set_SessionTimeout;
    property SessionTimeoutDebug: Integer read Get_SessionTimeoutDebug write Set_SessionTimeoutDebug;
    property ShortestAllowedRevisedSessionTimeout: Double read Get_ShortestAllowedRevisedSessionTimeout write Set_ShortestAllowedRevisedSessionTimeout;
    property UpdateEndpointBeforeConnect: WordBool read Get_UpdateEndpointBeforeConnect write Set_UpdateEndpointBeforeConnect;
    property UserIdentity: _UserIdentity read Get_UserIdentity write _Set_UserIdentity;
    property WriteNarrowestIntegerType: WordBool read Get_WriteNarrowestIntegerType write Set_WriteNarrowestIntegerType;
    property WriteNarrowestRealType: WordBool read Get_WriteNarrowestRealType write Set_WriteNarrowestRealType;
    property EnableStatusSubscription: WordBool read Get_EnableStatusSubscription write Set_EnableStatusSubscription;
    property MaximumMonitoredItemsPerSubscription: Integer read Get_MaximumMonitoredItemsPerSubscription write Set_MaximumMonitoredItemsPerSubscription;
    property ServerShutdownRetrialDelay: Integer read Get_ServerShutdownRetrialDelay write Set_ServerShutdownRetrialDelay;
    property StatusSubscriptionSamplingInterval: Integer read Get_StatusSubscriptionSamplingInterval write Set_StatusSubscriptionSamplingInterval;
    property DormancyPeriod: Int64 read Get_DormancyPeriod write Set_DormancyPeriod;
    property DormancyPeriodDouble: Double read Get_DormancyPeriodDouble write Set_DormancyPeriodDouble;
    property HoldPeriod: Integer read Get_HoldPeriod write Set_HoldPeriod;
  end;

// *********************************************************************//
// DispIntf:  _UASmartClientSessionParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2056DFDF-FEF9-41D7-9A27-C580BAA7D5B1}
// *********************************************************************//
  _UASmartClientSessionParametersDisp = dispinterface
    ['{2056DFDF-FEF9-41D7-9A27-C580BAA7D5B1}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property AcknowledgedMessagesLimit: Integer dispid 1610743816;
    property AllowEndpointDomainPrompt: WordBool dispid 1610743818;
    property AlwaysPreselectEndpoint: WordBool dispid 1610743820;
    property CheckAvailableSequenceNumbers: WordBool dispid 1610743822;
    property CheckBrowseResults: WordBool dispid 1610743824;
    property CheckEndpointDomain: WordBool dispid 1610743826;
    property CheckNotificationMessage: WordBool dispid 1610743828;
    property CheckSessionId: WordBool dispid 1610743830;
    property CloseTimeout: Integer dispid 1610743832;
    property DiagnosticsMasks: UADiagnosticsMasks dispid 1610743834;
    property EndpointDescriptionChecks: _UAEndpointDescriptionChecks dispid 1610743836;
    property EndpointSelectionPolicy: _UAEndpointSelectionPolicy dispid 1610743838;
    property EndpointSelectionTimeout: Integer dispid 1610743840;
    property KeepAliveInterval: Integer dispid 1610743842;
    property KeepAliveIntervalDebug: Integer dispid 1610743844;
    property LocaleId: WideString dispid 1610743846;
    property OperationTimeout: Integer dispid 1610743848;
    property MaximumReferencesPerBrowseNode: Integer dispid 1610743850;
    property PendingMessagesLimit: Integer dispid 1610743852;
    property PreselectedEndpointValidityPeriod: Integer dispid 1610743854;
    property RequireMatchingServerSoftwareCertificates: WordBool dispid 1610743856;
    property RequireNonEmptyServerSignature: WordBool dispid 1610743858;
    property RequireServerEndpointsMatchDiscovery: WordBool dispid 1610743860;
    property RequireTimestampsAsRequested: WordBool dispid 1610743862;
    property RequireUniqueAuthenticationToken: WordBool dispid 1610743864;
    property RequireUniqueServerNonce: WordBool dispid 1610743866;
    property RequireValidAuthenticationToken: WordBool dispid 1610743868;
    property RequireValidServerNonce: WordBool dispid 1610743870;
    property RetrialDelay: Integer dispid 1610743872;
    property SanitizeReferenceDescriptions: WordBool dispid 1610743874;
    property SessionConnectTimeout: Integer dispid 1610743876;
    property SessionTimeout: Integer dispid 1610743878;
    property SessionTimeoutDebug: Integer dispid 1610743880;
    property ShortestAllowedRevisedSessionTimeout: Double dispid 1610743882;
    property UpdateEndpointBeforeConnect: WordBool dispid 1610743884;
    property UserIdentity: _UserIdentity dispid 1610743886;
    property WriteNarrowestIntegerType: WordBool dispid 1610743888;
    property WriteNarrowestRealType: WordBool dispid 1610743890;
    procedure Reset; dispid 1610743892;
    property EnableStatusSubscription: WordBool dispid 1610743893;
    property MaximumMonitoredItemsPerSubscription: Integer dispid 1610743895;
    property ServerShutdownRetrialDelay: Integer dispid 1610743897;
    property StatusSubscriptionSamplingInterval: Integer dispid 1610743899;
    property DormancyPeriod: Int64 dispid 1610743901;
    property DormancyPeriodDouble: Double dispid 1610743903;
    property HoldPeriod: Integer dispid 1610743905;
  end;

// *********************************************************************//
// Interface: _UAUserInteractionParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {79DF1B0A-0098-4F86-A7E1-88A940480EE8}
// *********************************************************************//
  _UAUserInteractionParameters = interface(IDispatch)
    ['{79DF1B0A-0098-4F86-A7E1-88A940480EE8}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_AcceptNotificationTimeout: Integer; safecall;
    procedure Set_AcceptNotificationTimeout(pRetVal: Integer); safecall;
    procedure Reset; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property AcceptNotificationTimeout: Integer read Get_AcceptNotificationTimeout write Set_AcceptNotificationTimeout;
  end;

// *********************************************************************//
// DispIntf:  _UAUserInteractionParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {79DF1B0A-0098-4F86-A7E1-88A940480EE8}
// *********************************************************************//
  _UAUserInteractionParametersDisp = dispinterface
    ['{79DF1B0A-0098-4F86-A7E1-88A940480EE8}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property AcceptNotificationTimeout: Integer dispid 1610743816;
    procedure Reset; dispid 1610743818;
  end;

// *********************************************************************//
// Interface: _UACertificateAcceptancePolicy
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {52BE490E-DFCD-42A4-BCEA-1B6CC025E604}
// *********************************************************************//
  _UACertificateAcceptancePolicy = interface(IDispatch)
    ['{52BE490E-DFCD-42A4-BCEA-1B6CC025E604}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_AcceptAnyCertificate: WordBool; safecall;
    procedure Set_AcceptAnyCertificate(pRetVal: WordBool); safecall;
    function Get_AllowSha1SignedCertificates: WordBool; safecall;
    procedure Set_AllowSha1SignedCertificates(pRetVal: WordBool); safecall;
    function Get_AllowUserAcceptCertificate: WordBool; safecall;
    procedure Set_AllowUserAcceptCertificate(pRetVal: WordBool); safecall;
    function Get_CheckTimeValidAndNested: WordBool; safecall;
    procedure Set_CheckTimeValidAndNested(pRetVal: WordBool); safecall;
    function Get_MinimumCertificateKeySize: Integer; safecall;
    procedure Set_MinimumCertificateKeySize(pRetVal: Integer); safecall;
    function Get_RequireRevocationStatusKnown: WordBool; safecall;
    procedure Set_RequireRevocationStatusKnown(pRetVal: WordBool); safecall;
    function Get_TrustedEndpointUrlStrings: _StringCollection; safecall;
    procedure _Set_TrustedEndpointUrlStrings(const pRetVal: _StringCollection); safecall;
    procedure DistrustEndpointUrlString(const endpointUrlString: WideString); safecall;
    function IsEndpointUrlStringTrusted(const endpointUrlString: WideString): WordBool; safecall;
    procedure TrustEndpointUrlString(const endpointUrlString: WideString); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property AcceptAnyCertificate: WordBool read Get_AcceptAnyCertificate write Set_AcceptAnyCertificate;
    property AllowSha1SignedCertificates: WordBool read Get_AllowSha1SignedCertificates write Set_AllowSha1SignedCertificates;
    property AllowUserAcceptCertificate: WordBool read Get_AllowUserAcceptCertificate write Set_AllowUserAcceptCertificate;
    property CheckTimeValidAndNested: WordBool read Get_CheckTimeValidAndNested write Set_CheckTimeValidAndNested;
    property MinimumCertificateKeySize: Integer read Get_MinimumCertificateKeySize write Set_MinimumCertificateKeySize;
    property RequireRevocationStatusKnown: WordBool read Get_RequireRevocationStatusKnown write Set_RequireRevocationStatusKnown;
    property TrustedEndpointUrlStrings: _StringCollection read Get_TrustedEndpointUrlStrings write _Set_TrustedEndpointUrlStrings;
  end;

// *********************************************************************//
// DispIntf:  _UACertificateAcceptancePolicyDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {52BE490E-DFCD-42A4-BCEA-1B6CC025E604}
// *********************************************************************//
  _UACertificateAcceptancePolicyDisp = dispinterface
    ['{52BE490E-DFCD-42A4-BCEA-1B6CC025E604}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property AcceptAnyCertificate: WordBool dispid 1610743816;
    property AllowSha1SignedCertificates: WordBool dispid 1610743818;
    property AllowUserAcceptCertificate: WordBool dispid 1610743820;
    property CheckTimeValidAndNested: WordBool dispid 1610743822;
    property MinimumCertificateKeySize: Integer dispid 1610743824;
    property RequireRevocationStatusKnown: WordBool dispid 1610743826;
    property TrustedEndpointUrlStrings: _StringCollection dispid 1610743828;
    procedure DistrustEndpointUrlString(const endpointUrlString: WideString); dispid 1610743830;
    function IsEndpointUrlStringTrusted(const endpointUrlString: WideString): WordBool; dispid 1610743831;
    procedure TrustEndpointUrlString(const endpointUrlString: WideString); dispid 1610743832;
  end;

// *********************************************************************//
// Interface: _UAEndpointSelectionPolicy
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {79DE5541-62AA-4848-BE00-944B99745829}
// *********************************************************************//
  _UAEndpointSelectionPolicy = interface(IDispatch)
    ['{79DE5541-62AA-4848-BE00-944B99745829}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_AllowedMessageSecurityModes: UAMessageSecurityModes; safecall;
    procedure Set_AllowedMessageSecurityModes(pRetVal: UAMessageSecurityModes); safecall;
    function Get_AllowZeroSecurityLevel: WordBool; safecall;
    procedure Set_AllowZeroSecurityLevel(pRetVal: WordBool); safecall;
    function Get_ChannelSecurityRanking: OleVariant; safecall;
    function Get_CommunicationSecurityRanking: OleVariant; safecall;
    function Get_CustomPolicySpecifier: WideString; safecall;
    procedure Set_CustomPolicySpecifier(const pRetVal: WideString); safecall;
    function Get_DataEncodingName: WideString; safecall;
    procedure Set_DataEncodingName(const pRetVal: WideString); safecall;
    function Get_EnforceSamePort: WordBool; safecall;
    procedure Set_EnforceSamePort(pRetVal: WordBool); safecall;
    function Get_EnforceSameSite: WordBool; safecall;
    procedure Set_EnforceSameSite(pRetVal: WordBool); safecall;
    function Get_IsPrecise: WordBool; safecall;
    function Get_MessageSecurityModeName: WideString; safecall;
    procedure Set_MessageSecurityModeName(const pRetVal: WideString); safecall;
    function Get_MessageSecurityPreference: Sign; safecall;
    procedure Set_MessageSecurityPreference(pRetVal: Sign); safecall;
    function Get_OrganicSecurityRanking: OleVariant; safecall;
    function Get_ProtocolName: WideString; safecall;
    procedure Set_ProtocolName(const pRetVal: WideString); safecall;
    function Get_RejectObsoleteSecurityPolicies: WordBool; safecall;
    procedure Set_RejectObsoleteSecurityPolicies(pRetVal: WordBool); safecall;
    function Get_RequireAuthentication: WordBool; safecall;
    procedure Set_RequireAuthentication(pRetVal: WordBool); safecall;
    function Get_RequireConfidentiality: WordBool; safecall;
    procedure Set_RequireConfidentiality(pRetVal: WordBool); safecall;
    function Get_RequireIntegrity: WordBool; safecall;
    procedure Set_RequireIntegrity(pRetVal: WordBool); safecall;
    function Get_SecurityPolicyDisplayName: WideString; safecall;
    procedure Set_SecurityPolicyDisplayName(const pRetVal: WideString); safecall;
    function Get_SecurityPolicyUriString: WideString; safecall;
    procedure Set_SecurityPolicyUriString(const pRetVal: WideString); safecall;
    function Get_TransportProfileDisplayName: WideString; safecall;
    procedure Set_TransportProfileDisplayName(const pRetVal: WideString); safecall;
    function Get_TransportProfileUriString: WideString; safecall;
    procedure Set_TransportProfileUriString(const pRetVal: WideString); safecall;
    function Get_TransportSecurityRanking: OleVariant; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property AllowedMessageSecurityModes: UAMessageSecurityModes read Get_AllowedMessageSecurityModes write Set_AllowedMessageSecurityModes;
    property AllowZeroSecurityLevel: WordBool read Get_AllowZeroSecurityLevel write Set_AllowZeroSecurityLevel;
    property ChannelSecurityRanking: OleVariant read Get_ChannelSecurityRanking;
    property CommunicationSecurityRanking: OleVariant read Get_CommunicationSecurityRanking;
    property CustomPolicySpecifier: WideString read Get_CustomPolicySpecifier write Set_CustomPolicySpecifier;
    property DataEncodingName: WideString read Get_DataEncodingName write Set_DataEncodingName;
    property EnforceSamePort: WordBool read Get_EnforceSamePort write Set_EnforceSamePort;
    property EnforceSameSite: WordBool read Get_EnforceSameSite write Set_EnforceSameSite;
    property IsPrecise: WordBool read Get_IsPrecise;
    property MessageSecurityModeName: WideString read Get_MessageSecurityModeName write Set_MessageSecurityModeName;
    property MessageSecurityPreference: Sign read Get_MessageSecurityPreference write Set_MessageSecurityPreference;
    property OrganicSecurityRanking: OleVariant read Get_OrganicSecurityRanking;
    property ProtocolName: WideString read Get_ProtocolName write Set_ProtocolName;
    property RejectObsoleteSecurityPolicies: WordBool read Get_RejectObsoleteSecurityPolicies write Set_RejectObsoleteSecurityPolicies;
    property RequireAuthentication: WordBool read Get_RequireAuthentication write Set_RequireAuthentication;
    property RequireConfidentiality: WordBool read Get_RequireConfidentiality write Set_RequireConfidentiality;
    property RequireIntegrity: WordBool read Get_RequireIntegrity write Set_RequireIntegrity;
    property SecurityPolicyDisplayName: WideString read Get_SecurityPolicyDisplayName write Set_SecurityPolicyDisplayName;
    property SecurityPolicyUriString: WideString read Get_SecurityPolicyUriString write Set_SecurityPolicyUriString;
    property TransportProfileDisplayName: WideString read Get_TransportProfileDisplayName write Set_TransportProfileDisplayName;
    property TransportProfileUriString: WideString read Get_TransportProfileUriString write Set_TransportProfileUriString;
    property TransportSecurityRanking: OleVariant read Get_TransportSecurityRanking;
  end;

// *********************************************************************//
// DispIntf:  _UAEndpointSelectionPolicyDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {79DE5541-62AA-4848-BE00-944B99745829}
// *********************************************************************//
  _UAEndpointSelectionPolicyDisp = dispinterface
    ['{79DE5541-62AA-4848-BE00-944B99745829}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property AllowedMessageSecurityModes: UAMessageSecurityModes dispid 1610743816;
    property AllowZeroSecurityLevel: WordBool dispid 1610743818;
    property ChannelSecurityRanking: OleVariant readonly dispid 1610743820;
    property CommunicationSecurityRanking: OleVariant readonly dispid 1610743821;
    property CustomPolicySpecifier: WideString dispid 1610743822;
    property DataEncodingName: WideString dispid 1610743824;
    property EnforceSamePort: WordBool dispid 1610743826;
    property EnforceSameSite: WordBool dispid 1610743828;
    property IsPrecise: WordBool readonly dispid 1610743830;
    property MessageSecurityModeName: WideString dispid 1610743831;
    property MessageSecurityPreference: Sign dispid 1610743833;
    property OrganicSecurityRanking: OleVariant readonly dispid 1610743835;
    property ProtocolName: WideString dispid 1610743836;
    property RejectObsoleteSecurityPolicies: WordBool dispid 1610743838;
    property RequireAuthentication: WordBool dispid 1610743840;
    property RequireConfidentiality: WordBool dispid 1610743842;
    property RequireIntegrity: WordBool dispid 1610743844;
    property SecurityPolicyDisplayName: WideString dispid 1610743846;
    property SecurityPolicyUriString: WideString dispid 1610743848;
    property TransportProfileDisplayName: WideString dispid 1610743850;
    property TransportProfileUriString: WideString dispid 1610743852;
    property TransportSecurityRanking: OleVariant readonly dispid 1610743854;
  end;

// *********************************************************************//
// Interface: _EasyUAClientAdaptableParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6019F1FB-ED9A-409A-93D3-43C45EBA78A7}
// *********************************************************************//
  _EasyUAClientAdaptableParameters = interface(IDispatch)
    ['{6019F1FB-ED9A-409A-93D3-43C45EBA78A7}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_DiscoveryParameters: _UADiscoveryParameters; safecall;
    procedure _Set_DiscoveryParameters(const pRetVal: _UADiscoveryParameters); safecall;
    function Get_HostParameters: _UAHostParameters; safecall;
    procedure _Set_HostParameters(const pRetVal: _UAHostParameters); safecall;
    function Get_MonitoredItemParameters: _UAClientMonitoredItemParameters; safecall;
    procedure _Set_MonitoredItemParameters(const pRetVal: _UAClientMonitoredItemParameters); safecall;
    function Get_SessionParameters: _UASmartClientSessionParameters; safecall;
    procedure _Set_SessionParameters(const pRetVal: _UASmartClientSessionParameters); safecall;
    function Get_SubscriptionParameters: _UAClientSubscriptionParameters; safecall;
    procedure _Set_SubscriptionParameters(const pRetVal: _UAClientSubscriptionParameters); safecall;
    procedure Reset; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property DiscoveryParameters: _UADiscoveryParameters read Get_DiscoveryParameters write _Set_DiscoveryParameters;
    property HostParameters: _UAHostParameters read Get_HostParameters write _Set_HostParameters;
    property MonitoredItemParameters: _UAClientMonitoredItemParameters read Get_MonitoredItemParameters write _Set_MonitoredItemParameters;
    property SessionParameters: _UASmartClientSessionParameters read Get_SessionParameters write _Set_SessionParameters;
    property SubscriptionParameters: _UAClientSubscriptionParameters read Get_SubscriptionParameters write _Set_SubscriptionParameters;
  end;

// *********************************************************************//
// DispIntf:  _EasyUAClientAdaptableParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6019F1FB-ED9A-409A-93D3-43C45EBA78A7}
// *********************************************************************//
  _EasyUAClientAdaptableParametersDisp = dispinterface
    ['{6019F1FB-ED9A-409A-93D3-43C45EBA78A7}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property DiscoveryParameters: _UADiscoveryParameters dispid 1610743816;
    property HostParameters: _UAHostParameters dispid 1610743818;
    property MonitoredItemParameters: _UAClientMonitoredItemParameters dispid 1610743820;
    property SessionParameters: _UASmartClientSessionParameters dispid 1610743822;
    property SubscriptionParameters: _UAClientSubscriptionParameters dispid 1610743824;
    procedure Reset; dispid 1610743826;
  end;

// *********************************************************************//
// Interface: _EasyUAClientEngineParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {CAD749B4-8F4B-49B9-9C25-CD45CA885C43}
// *********************************************************************//
  _EasyUAClientEngineParameters = interface(IDispatch)
    ['{CAD749B4-8F4B-49B9-9C25-CD45CA885C43}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_CertificateAcceptancePolicy: _UACertificateAcceptancePolicy; safecall;
    procedure _Set_CertificateAcceptancePolicy(const pRetVal: _UACertificateAcceptancePolicy); safecall;
    function Get_ConfigurationPropertyOverrides: _StringObjectDictionary; safecall;
    procedure _Set_ConfigurationPropertyOverrides(const pRetVal: _StringObjectDictionary); safecall;
    function Get_ConfigurationSources: UAConfigurationSources; safecall;
    procedure Set_ConfigurationSources(pRetVal: UAConfigurationSources); safecall;
    function Get_DebuggerDetectionOverride: Sign; safecall;
    procedure Set_DebuggerDetectionOverride(pRetVal: Sign); safecall;
    function Get_gdsEndpointDescriptor: _UAEndpointDescriptor; safecall;
    procedure _Set_gdsEndpointDescriptor(const pRetVal: _UAEndpointDescriptor); safecall;
    function Get_RetrialDelay: Integer; safecall;
    procedure Set_RetrialDelay(pRetVal: Integer); safecall;
    function Get_ReconnectionPeriod: Integer; safecall;
    procedure Set_ReconnectionPeriod(pRetVal: Integer); safecall;
    function Get_UserInteractionParameters: _UAUserInteractionParameters; safecall;
    procedure _Set_UserInteractionParameters(const pRetVal: _UAUserInteractionParameters); safecall;
    procedure Reset; safecall;
    function Get_HttpsCertificateAcceptancePolicy: _UACertificateAcceptancePolicy; safecall;
    procedure _Set_HttpsCertificateAcceptancePolicy(const pRetVal: _UACertificateAcceptancePolicy); safecall;
    function Get_UseCustomHttpsCertificateValidation: WordBool; safecall;
    procedure Set_UseCustomHttpsCertificateValidation(pRetVal: WordBool); safecall;
    function Get_GarbageCollectionPeriod: Integer; safecall;
    procedure Set_GarbageCollectionPeriod(pRetVal: Integer); safecall;
    function Get_MaximumDormantSessions: Integer; safecall;
    procedure Set_MaximumDormantSessions(pRetVal: Integer); safecall;
    function Get_AutomaticPublishingFactor: Single; safecall;
    procedure Set_AutomaticPublishingFactor(pRetVal: Single); safecall;
    function Get_FastestAutomaticPublishingInterval: Integer; safecall;
    procedure Set_FastestAutomaticPublishingInterval(pRetVal: Integer); safecall;
    function Get_RestrictToSupportedTypes: WordBool; safecall;
    procedure Set_RestrictToSupportedTypes(pRetVal: WordBool); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property CertificateAcceptancePolicy: _UACertificateAcceptancePolicy read Get_CertificateAcceptancePolicy write _Set_CertificateAcceptancePolicy;
    property ConfigurationPropertyOverrides: _StringObjectDictionary read Get_ConfigurationPropertyOverrides write _Set_ConfigurationPropertyOverrides;
    property ConfigurationSources: UAConfigurationSources read Get_ConfigurationSources write Set_ConfigurationSources;
    property DebuggerDetectionOverride: Sign read Get_DebuggerDetectionOverride write Set_DebuggerDetectionOverride;
    property gdsEndpointDescriptor: _UAEndpointDescriptor read Get_gdsEndpointDescriptor write _Set_gdsEndpointDescriptor;
    property RetrialDelay: Integer read Get_RetrialDelay write Set_RetrialDelay;
    property ReconnectionPeriod: Integer read Get_ReconnectionPeriod write Set_ReconnectionPeriod;
    property UserInteractionParameters: _UAUserInteractionParameters read Get_UserInteractionParameters write _Set_UserInteractionParameters;
    property HttpsCertificateAcceptancePolicy: _UACertificateAcceptancePolicy read Get_HttpsCertificateAcceptancePolicy write _Set_HttpsCertificateAcceptancePolicy;
    property UseCustomHttpsCertificateValidation: WordBool read Get_UseCustomHttpsCertificateValidation write Set_UseCustomHttpsCertificateValidation;
    property GarbageCollectionPeriod: Integer read Get_GarbageCollectionPeriod write Set_GarbageCollectionPeriod;
    property MaximumDormantSessions: Integer read Get_MaximumDormantSessions write Set_MaximumDormantSessions;
    property AutomaticPublishingFactor: Single read Get_AutomaticPublishingFactor write Set_AutomaticPublishingFactor;
    property FastestAutomaticPublishingInterval: Integer read Get_FastestAutomaticPublishingInterval write Set_FastestAutomaticPublishingInterval;
    property RestrictToSupportedTypes: WordBool read Get_RestrictToSupportedTypes write Set_RestrictToSupportedTypes;
  end;

// *********************************************************************//
// DispIntf:  _EasyUAClientEngineParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {CAD749B4-8F4B-49B9-9C25-CD45CA885C43}
// *********************************************************************//
  _EasyUAClientEngineParametersDisp = dispinterface
    ['{CAD749B4-8F4B-49B9-9C25-CD45CA885C43}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property CertificateAcceptancePolicy: _UACertificateAcceptancePolicy dispid 1610743816;
    property ConfigurationPropertyOverrides: _StringObjectDictionary dispid 1610743818;
    property ConfigurationSources: UAConfigurationSources dispid 1610743820;
    property DebuggerDetectionOverride: Sign dispid 1610743822;
    property gdsEndpointDescriptor: _UAEndpointDescriptor dispid 1610743824;
    property RetrialDelay: Integer dispid 1610743826;
    property ReconnectionPeriod: Integer dispid 1610743828;
    property UserInteractionParameters: _UAUserInteractionParameters dispid 1610743830;
    procedure Reset; dispid 1610743832;
    property HttpsCertificateAcceptancePolicy: _UACertificateAcceptancePolicy dispid 1610743833;
    property UseCustomHttpsCertificateValidation: WordBool dispid 1610743835;
    property GarbageCollectionPeriod: Integer dispid 1610743837;
    property MaximumDormantSessions: Integer dispid 1610743839;
    property AutomaticPublishingFactor: Single dispid 1610743841;
    property FastestAutomaticPublishingInterval: Integer dispid 1610743843;
    property RestrictToSupportedTypes: WordBool dispid 1610743845;
  end;

// *********************************************************************//
// Interface: _UAApplicationDescription
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {682D26C9-D9B2-4E2E-8089-DE1F3B57D93C}
// *********************************************************************//
  _UAApplicationDescription = interface(IDispatch)
    ['{682D26C9-D9B2-4E2E-8089-DE1F3B57D93C}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_applicationName: WideString; safecall;
    procedure Set_applicationName(const pRetVal: WideString); safecall;
    function Get_ApplicationType: UAApplicationTypes; safecall;
    procedure Set_ApplicationType(pRetVal: UAApplicationTypes); safecall;
    function Get_applicationUriString: WideString; safecall;
    procedure Set_applicationUriString(const pRetVal: WideString); safecall;
    function Get_DiscoveryProfileUriString: WideString; safecall;
    procedure Set_DiscoveryProfileUriString(const pRetVal: WideString); safecall;
    function Get_DiscoveryUriStrings: _StringCollection; safecall;
    procedure _Set_DiscoveryUriStrings(const pRetVal: _StringCollection); safecall;
    function Get_GatewayServerUriString: WideString; safecall;
    procedure Set_GatewayServerUriString(const pRetVal: WideString); safecall;
    function Get_productUriString: WideString; safecall;
    procedure Set_productUriString(const pRetVal: WideString); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property applicationName: WideString read Get_applicationName write Set_applicationName;
    property ApplicationType: UAApplicationTypes read Get_ApplicationType write Set_ApplicationType;
    property applicationUriString: WideString read Get_applicationUriString write Set_applicationUriString;
    property DiscoveryProfileUriString: WideString read Get_DiscoveryProfileUriString write Set_DiscoveryProfileUriString;
    property DiscoveryUriStrings: _StringCollection read Get_DiscoveryUriStrings write _Set_DiscoveryUriStrings;
    property GatewayServerUriString: WideString read Get_GatewayServerUriString write Set_GatewayServerUriString;
    property productUriString: WideString read Get_productUriString write Set_productUriString;
  end;

// *********************************************************************//
// DispIntf:  _UAApplicationDescriptionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {682D26C9-D9B2-4E2E-8089-DE1F3B57D93C}
// *********************************************************************//
  _UAApplicationDescriptionDisp = dispinterface
    ['{682D26C9-D9B2-4E2E-8089-DE1F3B57D93C}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property applicationName: WideString dispid 1610743814;
    property ApplicationType: UAApplicationTypes dispid 1610743816;
    property applicationUriString: WideString dispid 1610743818;
    property DiscoveryProfileUriString: WideString dispid 1610743820;
    property DiscoveryUriStrings: _StringCollection dispid 1610743822;
    property GatewayServerUriString: WideString dispid 1610743824;
    property productUriString: WideString dispid 1610743826;
  end;

// *********************************************************************//
// Interface: _UADiscoveryElement
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {50FBEB9F-3AB0-4C8F-850B-FE7DE3D9C1A4}
// *********************************************************************//
  _UADiscoveryElement = interface(IDispatch)
    ['{50FBEB9F-3AB0-4C8F-850B-FE7DE3D9C1A4}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_applicationName: WideString; safecall;
    procedure Set_applicationName(const pRetVal: WideString); safecall;
    function Get_ApplicationType: UAApplicationTypes; safecall;
    procedure Set_ApplicationType(pRetVal: UAApplicationTypes); safecall;
    function Get_applicationUriString: WideString; safecall;
    procedure Set_applicationUriString(const pRetVal: WideString); safecall;
    function Get_DiscoveryUriString: WideString; safecall;
    procedure Set_DiscoveryUriString(const pRetVal: WideString); safecall;
    function Get_DiscoveryUriStrings: _StringCollection; safecall;
    procedure _Set_DiscoveryUriStrings(const pRetVal: _StringCollection); safecall;
    function Get_productUriString: WideString; safecall;
    procedure Set_productUriString(const pRetVal: WideString); safecall;
    function Get_serverCapabilities: _StringCollection; safecall;
    procedure _Set_serverCapabilities(const pRetVal: _StringCollection); safecall;
    function Get_ServerCapabilitySet: _StringSet; safecall;
    function ToUAEndpointDescriptor: _UAEndpointDescriptor; safecall;
    function Get_ApplicationOrServerName: WideString; safecall;
    function Get_DiscoveryProfileUriString: WideString; safecall;
    procedure Set_DiscoveryProfileUriString(const pRetVal: WideString); safecall;
    function Get_EndpointSelectionPolicy: _UAEndpointSelectionPolicy; safecall;
    procedure _Set_EndpointSelectionPolicy(const pRetVal: _UAEndpointSelectionPolicy); safecall;
    function Get_EndpointUriString: WideString; safecall;
    procedure Set_EndpointUriString(const pRetVal: WideString); safecall;
    function Get_GatewayServerUriString: WideString; safecall;
    procedure Set_GatewayServerUriString(const pRetVal: WideString); safecall;
    function Get_IsValidServer: WordBool; safecall;
    function Get_ServerCertificate: _PkiCertificate; safecall;
    procedure _Set_ServerCertificate(const pRetVal: _PkiCertificate); safecall;
    function Get_ServerCertificateByteArray: OleVariant; safecall;
    procedure _Set_ServerCertificateByteArray(pRetVal: OleVariant); safecall;
    function Get_ServerName: WideString; safecall;
    procedure Set_ServerName(const pRetVal: WideString); safecall;
    procedure SetServerCertificateByteArray(value: OleVariant); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property applicationName: WideString read Get_applicationName write Set_applicationName;
    property ApplicationType: UAApplicationTypes read Get_ApplicationType write Set_ApplicationType;
    property applicationUriString: WideString read Get_applicationUriString write Set_applicationUriString;
    property DiscoveryUriString: WideString read Get_DiscoveryUriString write Set_DiscoveryUriString;
    property DiscoveryUriStrings: _StringCollection read Get_DiscoveryUriStrings write _Set_DiscoveryUriStrings;
    property productUriString: WideString read Get_productUriString write Set_productUriString;
    property serverCapabilities: _StringCollection read Get_serverCapabilities write _Set_serverCapabilities;
    property ServerCapabilitySet: _StringSet read Get_ServerCapabilitySet;
    property ApplicationOrServerName: WideString read Get_ApplicationOrServerName;
    property DiscoveryProfileUriString: WideString read Get_DiscoveryProfileUriString write Set_DiscoveryProfileUriString;
    property EndpointSelectionPolicy: _UAEndpointSelectionPolicy read Get_EndpointSelectionPolicy write _Set_EndpointSelectionPolicy;
    property EndpointUriString: WideString read Get_EndpointUriString write Set_EndpointUriString;
    property GatewayServerUriString: WideString read Get_GatewayServerUriString write Set_GatewayServerUriString;
    property IsValidServer: WordBool read Get_IsValidServer;
    property ServerCertificate: _PkiCertificate read Get_ServerCertificate write _Set_ServerCertificate;
    property ServerCertificateByteArray: OleVariant read Get_ServerCertificateByteArray write _Set_ServerCertificateByteArray;
    property ServerName: WideString read Get_ServerName write Set_ServerName;
  end;

// *********************************************************************//
// DispIntf:  _UADiscoveryElementDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {50FBEB9F-3AB0-4C8F-850B-FE7DE3D9C1A4}
// *********************************************************************//
  _UADiscoveryElementDisp = dispinterface
    ['{50FBEB9F-3AB0-4C8F-850B-FE7DE3D9C1A4}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property applicationName: WideString dispid 1610743814;
    property ApplicationType: UAApplicationTypes dispid 1610743816;
    property applicationUriString: WideString dispid 1610743818;
    property DiscoveryUriString: WideString dispid 1610743820;
    property DiscoveryUriStrings: _StringCollection dispid 1610743822;
    property productUriString: WideString dispid 1610743824;
    property serverCapabilities: _StringCollection dispid 1610743826;
    property ServerCapabilitySet: _StringSet readonly dispid 1610743828;
    function ToUAEndpointDescriptor: _UAEndpointDescriptor; dispid 1610743829;
    property ApplicationOrServerName: WideString readonly dispid 1610743830;
    property DiscoveryProfileUriString: WideString dispid 1610743831;
    property EndpointSelectionPolicy: _UAEndpointSelectionPolicy dispid 1610743833;
    property EndpointUriString: WideString dispid 1610743835;
    property GatewayServerUriString: WideString dispid 1610743837;
    property IsValidServer: WordBool readonly dispid 1610743839;
    property ServerCertificate: _PkiCertificate dispid 1610743840;
    property ServerCertificateByteArray: OleVariant dispid 1610743842;
    property ServerName: WideString dispid 1610743844;
    procedure SetServerCertificateByteArray(value: OleVariant); dispid 1610743846;
  end;

// *********************************************************************//
// Interface: _UADiscoveryElementCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {77CE0F30-375B-4F26-A772-DB53BDEE0C60}
// *********************************************************************//
  _UADiscoveryElementCollection = interface(IDispatch)
    ['{77CE0F30-375B-4F26-A772-DB53BDEE0C60}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_Item(index: Integer): _UADiscoveryElement; safecall;
    procedure _Set_Item(index: Integer; const pRetVal: _UADiscoveryElement); safecall;
    function Get_Count: Integer; safecall;
    function GetEnumerator: IEnumVARIANT; safecall;
    procedure Add(Item: OleVariant); safecall;
    procedure Clear; safecall;
    function Contains(Item: OleVariant): WordBool; safecall;
    function IndexOf(Item: OleVariant): Integer; safecall;
    procedure Insert(index: Integer; Item: OleVariant); safecall;
    function Remove(Item: OleVariant): WordBool; safecall;
    procedure RemoveAt(index: Integer); safecall;
    function ToList: _ElasticVector; safecall;
    function ToUAEndpointDescriptorCollection: _UAEndpointDescriptorCollection; safecall;
    property ToString: WideString read Get_ToString;
    property Item[index: Integer]: _UADiscoveryElement read Get_Item write _Set_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  _UADiscoveryElementCollectionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {77CE0F30-375B-4F26-A772-DB53BDEE0C60}
// *********************************************************************//
  _UADiscoveryElementCollectionDisp = dispinterface
    ['{77CE0F30-375B-4F26-A772-DB53BDEE0C60}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property Item[index: Integer]: _UADiscoveryElement dispid 0; default;
    property Count: Integer readonly dispid 1610743814;
    function GetEnumerator: IEnumVARIANT; dispid -4;
    procedure Add(Item: OleVariant); dispid 1610743816;
    procedure Clear; dispid 1610743817;
    function Contains(Item: OleVariant): WordBool; dispid 1610743818;
    function IndexOf(Item: OleVariant): Integer; dispid 1610743819;
    procedure Insert(index: Integer; Item: OleVariant); dispid 1610743820;
    function Remove(Item: OleVariant): WordBool; dispid 1610743821;
    procedure RemoveAt(index: Integer); dispid 1610743822;
    function ToList: _ElasticVector; dispid 1610743823;
    function ToUAEndpointDescriptorCollection: _UAEndpointDescriptorCollection; dispid 1610743824;
  end;

// *********************************************************************//
// Interface: _UAQueryApplicationsFilter
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9C92CE87-FCB5-44C7-8AF2-6A0404806E2A}
// *********************************************************************//
  _UAQueryApplicationsFilter = interface(IDispatch)
    ['{9C92CE87-FCB5-44C7-8AF2-6A0404806E2A}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_applicationName: WideString; safecall;
    procedure Set_applicationName(const pRetVal: WideString); safecall;
    function Get_applicationTypes: UAApplicationTypes; safecall;
    procedure Set_applicationTypes(pRetVal: UAApplicationTypes); safecall;
    function Get_applicationUriString: WideString; safecall;
    procedure Set_applicationUriString(const pRetVal: WideString); safecall;
    function Get_productUriString: WideString; safecall;
    procedure Set_productUriString(const pRetVal: WideString); safecall;
    function Get_serverCapabilities: _StringCollection; safecall;
    procedure _Set_serverCapabilities(const pRetVal: _StringCollection); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property applicationName: WideString read Get_applicationName write Set_applicationName;
    property applicationTypes: UAApplicationTypes read Get_applicationTypes write Set_applicationTypes;
    property applicationUriString: WideString read Get_applicationUriString write Set_applicationUriString;
    property productUriString: WideString read Get_productUriString write Set_productUriString;
    property serverCapabilities: _StringCollection read Get_serverCapabilities write _Set_serverCapabilities;
  end;

// *********************************************************************//
// DispIntf:  _UAQueryApplicationsFilterDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9C92CE87-FCB5-44C7-8AF2-6A0404806E2A}
// *********************************************************************//
  _UAQueryApplicationsFilterDisp = dispinterface
    ['{9C92CE87-FCB5-44C7-8AF2-6A0404806E2A}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property applicationName: WideString dispid 1610743814;
    property applicationTypes: UAApplicationTypes dispid 1610743816;
    property applicationUriString: WideString dispid 1610743818;
    property productUriString: WideString dispid 1610743820;
    property serverCapabilities: _StringCollection dispid 1610743822;
  end;

// *********************************************************************//
// Interface: _UAServerOnNetwork
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {83972BED-14E7-42F7-83A4-E226960B73DF}
// *********************************************************************//
  _UAServerOnNetwork = interface(IDispatch)
    ['{83972BED-14E7-42F7-83A4-E226960B73DF}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_DiscoveryUrlString: WideString; safecall;
    procedure Set_DiscoveryUrlString(const pRetVal: WideString); safecall;
    function Get_RecordId: Integer; safecall;
    procedure Set_RecordId(pRetVal: Integer); safecall;
    function Get_serverCapabilities: _StringCollection; safecall;
    procedure _Set_serverCapabilities(const pRetVal: _StringCollection); safecall;
    function Get_ServerName: WideString; safecall;
    procedure Set_ServerName(const pRetVal: WideString); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DiscoveryUrlString: WideString read Get_DiscoveryUrlString write Set_DiscoveryUrlString;
    property RecordId: Integer read Get_RecordId write Set_RecordId;
    property serverCapabilities: _StringCollection read Get_serverCapabilities write _Set_serverCapabilities;
    property ServerName: WideString read Get_ServerName write Set_ServerName;
  end;

// *********************************************************************//
// DispIntf:  _UAServerOnNetworkDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {83972BED-14E7-42F7-83A4-E226960B73DF}
// *********************************************************************//
  _UAServerOnNetworkDisp = dispinterface
    ['{83972BED-14E7-42F7-83A4-E226960B73DF}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property DiscoveryUrlString: WideString dispid 1610743814;
    property RecordId: Integer dispid 1610743816;
    property serverCapabilities: _StringCollection dispid 1610743818;
    property ServerName: WideString dispid 1610743820;
  end;

// *********************************************************************//
// Interface: _UAApplicationDiscoveryQuery
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A75A9B68-EA3C-4DE5-BD2F-9C272B691E0B}
// *********************************************************************//
  _UAApplicationDiscoveryQuery = interface(IDispatch)
    ['{A75A9B68-EA3C-4DE5-BD2F-9C272B691E0B}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_Flat: WordBool; safecall;
    procedure Set_Flat(pRetVal: WordBool); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Flat: WordBool read Get_Flat write Set_Flat;
  end;

// *********************************************************************//
// DispIntf:  _UAApplicationDiscoveryQueryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A75A9B68-EA3C-4DE5-BD2F-9C272B691E0B}
// *********************************************************************//
  _UAApplicationDiscoveryQueryDisp = dispinterface
    ['{A75A9B68-EA3C-4DE5-BD2F-9C272B691E0B}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property Flat: WordBool dispid 1610743814;
  end;

// *********************************************************************//
// Interface: _UALdsDiscoveryQuery
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7654C2C4-D1C6-4E17-82E2-0AFFF078981C}
// *********************************************************************//
  _UALdsDiscoveryQuery = interface(IDispatch)
    ['{7654C2C4-D1C6-4E17-82E2-0AFFF078981C}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_Flat: WordBool; safecall;
    procedure Set_Flat(pRetVal: WordBool); safecall;
    function Get_applicationTypes: UAApplicationTypes; safecall;
    procedure Set_applicationTypes(pRetVal: UAApplicationTypes); safecall;
    function Get_DiscoveryHost: WideString; safecall;
    procedure Set_DiscoveryHost(const pRetVal: WideString); safecall;
    function Get_DiscoveryUriStrings: _StringCollection; safecall;
    procedure _Set_DiscoveryUriStrings(const pRetVal: _StringCollection); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Flat: WordBool read Get_Flat write Set_Flat;
    property applicationTypes: UAApplicationTypes read Get_applicationTypes write Set_applicationTypes;
    property DiscoveryHost: WideString read Get_DiscoveryHost write Set_DiscoveryHost;
    property DiscoveryUriStrings: _StringCollection read Get_DiscoveryUriStrings write _Set_DiscoveryUriStrings;
  end;

// *********************************************************************//
// DispIntf:  _UALdsDiscoveryQueryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7654C2C4-D1C6-4E17-82E2-0AFFF078981C}
// *********************************************************************//
  _UALdsDiscoveryQueryDisp = dispinterface
    ['{7654C2C4-D1C6-4E17-82E2-0AFFF078981C}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property Flat: WordBool dispid 1610743814;
    property applicationTypes: UAApplicationTypes dispid 1610743816;
    property DiscoveryHost: WideString dispid 1610743818;
    property DiscoveryUriStrings: _StringCollection dispid 1610743820;
  end;

// *********************************************************************//
// Interface: _UALocalEndpointDiscoveryQuery
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {07E1C12C-DF98-4A54-820D-FF4A36C777FF}
// *********************************************************************//
  _UALocalEndpointDiscoveryQuery = interface(IDispatch)
    ['{07E1C12C-DF98-4A54-820D-FF4A36C777FF}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_DiscoveryUriString: WideString; safecall;
    procedure Set_DiscoveryUriString(const pRetVal: WideString); safecall;
    function Get_DiscoveryUriStrings: _StringCollection; safecall;
    procedure _Set_DiscoveryUriStrings(const pRetVal: _StringCollection); safecall;
    function Get_MatchDiscoveryUriSchemes: WordBool; safecall;
    procedure Set_MatchDiscoveryUriSchemes(pRetVal: WordBool); safecall;
    function Get_TransportProfileUriStringFilter: _StringCollection; safecall;
    procedure _Set_TransportProfileUriStringFilter(const pRetVal: _StringCollection); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DiscoveryUriString: WideString read Get_DiscoveryUriString write Set_DiscoveryUriString;
    property DiscoveryUriStrings: _StringCollection read Get_DiscoveryUriStrings write _Set_DiscoveryUriStrings;
    property MatchDiscoveryUriSchemes: WordBool read Get_MatchDiscoveryUriSchemes write Set_MatchDiscoveryUriSchemes;
    property TransportProfileUriStringFilter: _StringCollection read Get_TransportProfileUriStringFilter write _Set_TransportProfileUriStringFilter;
  end;

// *********************************************************************//
// DispIntf:  _UALocalEndpointDiscoveryQueryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {07E1C12C-DF98-4A54-820D-FF4A36C777FF}
// *********************************************************************//
  _UALocalEndpointDiscoveryQueryDisp = dispinterface
    ['{07E1C12C-DF98-4A54-820D-FF4A36C777FF}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property DiscoveryUriString: WideString dispid 1610743814;
    property DiscoveryUriStrings: _StringCollection dispid 1610743816;
    property MatchDiscoveryUriSchemes: WordBool dispid 1610743818;
    property TransportProfileUriStringFilter: _StringCollection dispid 1610743820;
  end;

// *********************************************************************//
// Interface: _UANetworkServerDiscoveryQuery
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {CD4B741D-9B6B-42AD-9274-0FDB53DA6CB7}
// *********************************************************************//
  _UANetworkServerDiscoveryQuery = interface(IDispatch)
    ['{CD4B741D-9B6B-42AD-9274-0FDB53DA6CB7}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_Flat: WordBool; safecall;
    procedure Set_Flat(pRetVal: WordBool); safecall;
    function Get_applicationTypes: UAApplicationTypes; safecall;
    procedure Set_applicationTypes(pRetVal: UAApplicationTypes); safecall;
    function Get_DiscoveryHost: WideString; safecall;
    procedure Set_DiscoveryHost(const pRetVal: WideString); safecall;
    function Get_DiscoveryUriStrings: _StringCollection; safecall;
    procedure _Set_DiscoveryUriStrings(const pRetVal: _StringCollection); safecall;
    function Get_ServerCapabilityFilter: _StringCollection; safecall;
    procedure _Set_ServerCapabilityFilter(const pRetVal: _StringCollection); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Flat: WordBool read Get_Flat write Set_Flat;
    property applicationTypes: UAApplicationTypes read Get_applicationTypes write Set_applicationTypes;
    property DiscoveryHost: WideString read Get_DiscoveryHost write Set_DiscoveryHost;
    property DiscoveryUriStrings: _StringCollection read Get_DiscoveryUriStrings write _Set_DiscoveryUriStrings;
    property ServerCapabilityFilter: _StringCollection read Get_ServerCapabilityFilter write _Set_ServerCapabilityFilter;
  end;

// *********************************************************************//
// DispIntf:  _UANetworkServerDiscoveryQueryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {CD4B741D-9B6B-42AD-9274-0FDB53DA6CB7}
// *********************************************************************//
  _UANetworkServerDiscoveryQueryDisp = dispinterface
    ['{CD4B741D-9B6B-42AD-9274-0FDB53DA6CB7}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property Flat: WordBool dispid 1610743814;
    property applicationTypes: UAApplicationTypes dispid 1610743816;
    property DiscoveryHost: WideString dispid 1610743818;
    property DiscoveryUriStrings: _StringCollection dispid 1610743820;
    property ServerCapabilityFilter: _StringCollection dispid 1610743822;
  end;

// *********************************************************************//
// Interface: _UAGlobalApplicationDiscoveryQuery
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8455D571-9EE7-4315-A534-AECDEA511114}
// *********************************************************************//
  _UAGlobalApplicationDiscoveryQuery = interface(IDispatch)
    ['{8455D571-9EE7-4315-A534-AECDEA511114}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_Flat: WordBool; safecall;
    procedure Set_Flat(pRetVal: WordBool); safecall;
    function Get_gdsEndpointDescriptor: _UAEndpointDescriptor; safecall;
    procedure _Set_gdsEndpointDescriptor(const pRetVal: _UAEndpointDescriptor); safecall;
    function Get_QueryApplicationsFilter: _UAQueryApplicationsFilter; safecall;
    procedure _Set_QueryApplicationsFilter(const pRetVal: _UAQueryApplicationsFilter); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Flat: WordBool read Get_Flat write Set_Flat;
    property gdsEndpointDescriptor: _UAEndpointDescriptor read Get_gdsEndpointDescriptor write _Set_gdsEndpointDescriptor;
    property QueryApplicationsFilter: _UAQueryApplicationsFilter read Get_QueryApplicationsFilter write _Set_QueryApplicationsFilter;
  end;

// *********************************************************************//
// DispIntf:  _UAGlobalApplicationDiscoveryQueryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8455D571-9EE7-4315-A534-AECDEA511114}
// *********************************************************************//
  _UAGlobalApplicationDiscoveryQueryDisp = dispinterface
    ['{8455D571-9EE7-4315-A534-AECDEA511114}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property Flat: WordBool dispid 1610743814;
    property gdsEndpointDescriptor: _UAEndpointDescriptor dispid 1610743816;
    property QueryApplicationsFilter: _UAQueryApplicationsFilter dispid 1610743818;
  end;

// *********************************************************************//
// Interface: _UADiscoveryQuery
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EB136E88-AED0-4506-B447-FF6CFFDCF4AD}
// *********************************************************************//
  _UADiscoveryQuery = interface(IDispatch)
    ['{EB136E88-AED0-4506-B447-FF6CFFDCF4AD}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
  end;

// *********************************************************************//
// DispIntf:  _UADiscoveryQueryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EB136E88-AED0-4506-B447-FF6CFFDCF4AD}
// *********************************************************************//
  _UADiscoveryQueryDisp = dispinterface
    ['{EB136E88-AED0-4506-B447-FF6CFFDCF4AD}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
  end;

// *********************************************************************//
// Interface: _UALocalApplicationDiscoveryQuery
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {96493275-7EEE-4214-8BF8-3E410B306E4F}
// *********************************************************************//
  _UALocalApplicationDiscoveryQuery = interface(IDispatch)
    ['{96493275-7EEE-4214-8BF8-3E410B306E4F}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_Flat: WordBool; safecall;
    procedure Set_Flat(pRetVal: WordBool); safecall;
    function Get_applicationTypes: UAApplicationTypes; safecall;
    procedure Set_applicationTypes(pRetVal: UAApplicationTypes); safecall;
    function Get_DiscoveryHost: WideString; safecall;
    procedure Set_DiscoveryHost(const pRetVal: WideString); safecall;
    function Get_DiscoveryUriStrings: _StringCollection; safecall;
    procedure _Set_DiscoveryUriStrings(const pRetVal: _StringCollection); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Flat: WordBool read Get_Flat write Set_Flat;
    property applicationTypes: UAApplicationTypes read Get_applicationTypes write Set_applicationTypes;
    property DiscoveryHost: WideString read Get_DiscoveryHost write Set_DiscoveryHost;
    property DiscoveryUriStrings: _StringCollection read Get_DiscoveryUriStrings write _Set_DiscoveryUriStrings;
  end;

// *********************************************************************//
// DispIntf:  _UALocalApplicationDiscoveryQueryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {96493275-7EEE-4214-8BF8-3E410B306E4F}
// *********************************************************************//
  _UALocalApplicationDiscoveryQueryDisp = dispinterface
    ['{96493275-7EEE-4214-8BF8-3E410B306E4F}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property Flat: WordBool dispid 1610743814;
    property applicationTypes: UAApplicationTypes dispid 1610743816;
    property DiscoveryHost: WideString dispid 1610743818;
    property DiscoveryUriStrings: _StringCollection dispid 1610743820;
  end;

// *********************************************************************//
// Interface: _UADataTypeSchema
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F8D9BBA1-5B21-48EB-BCCC-50A003C8F948}
// *********************************************************************//
  _UADataTypeSchema = interface(IDispatch)
    ['{F8D9BBA1-5B21-48EB-BCCC-50A003C8F948}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function FindDataTypeDescriptions(dataTypeIdList: OleVariant; searchSupertypes: WordBool): PSafeArray; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
  end;

// *********************************************************************//
// DispIntf:  _UADataTypeSchemaDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F8D9BBA1-5B21-48EB-BCCC-50A003C8F948}
// *********************************************************************//
  _UADataTypeSchemaDisp = dispinterface
    ['{F8D9BBA1-5B21-48EB-BCCC-50A003C8F948}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function FindDataTypeDescriptions(dataTypeIdList: OleVariant; searchSupertypes: WordBool): {NOT_OLEAUTO(PSafeArray)}OleVariant; dispid 1610743813;
  end;

// *********************************************************************//
// Interface: _UADataTypeDefinition
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2D7CF054-797B-4B23-96F5-48B88962C797}
// *********************************************************************//
  _UADataTypeDefinition = interface(IDispatch)
    ['{2D7CF054-797B-4B23-96F5-48B88962C797}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
  end;

// *********************************************************************//
// DispIntf:  _UADataTypeDefinitionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2D7CF054-797B-4B23-96F5-48B88962C797}
// *********************************************************************//
  _UADataTypeDefinitionDisp = dispinterface
    ['{2D7CF054-797B-4B23-96F5-48B88962C797}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
  end;

// *********************************************************************//
// Interface: _UAEnumValue
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E7ECB7FC-45DB-4C78-B7A2-9BAF140482A4}
// *********************************************************************//
  _UAEnumValue = interface(IDispatch)
    ['{E7ECB7FC-45DB-4C78-B7A2-9BAF140482A4}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_DecimalValue: TDecimal; safecall;
    procedure Set_DecimalValue(pRetVal: TDecimal); safecall;
    function Get_Description: WideString; safecall;
    procedure Set_Description(const pRetVal: WideString); safecall;
    function Get_DisplayName: WideString; safecall;
    procedure Set_DisplayName(const pRetVal: WideString); safecall;
    function Get_Int32Value: Integer; safecall;
    procedure Set_Int32Value(pRetVal: Integer); safecall;
    function Get_value: Int64; safecall;
    procedure Set_value(pRetVal: Int64); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DecimalValue: TDecimal read Get_DecimalValue write Set_DecimalValue;
    property Description: WideString read Get_Description write Set_Description;
    property DisplayName: WideString read Get_DisplayName write Set_DisplayName;
    property Int32Value: Integer read Get_Int32Value write Set_Int32Value;
    property value: Int64 read Get_value write Set_value;
  end;

// *********************************************************************//
// DispIntf:  _UAEnumValueDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E7ECB7FC-45DB-4C78-B7A2-9BAF140482A4}
// *********************************************************************//
  _UAEnumValueDisp = dispinterface
    ['{E7ECB7FC-45DB-4C78-B7A2-9BAF140482A4}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property DecimalValue: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 1610743814;
    property Description: WideString dispid 1610743816;
    property DisplayName: WideString dispid 1610743818;
    property Int32Value: Integer dispid 1610743820;
    property value: Int64 dispid 1610743822;
  end;

// *********************************************************************//
// Interface: _UAStructureDefinition
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {557DABBD-11B6-40B5-84C0-FFB5BEDE7186}
// *********************************************************************//
  _UAStructureDefinition = interface(IDispatch)
    ['{557DABBD-11B6-40B5-84C0-FFB5BEDE7186}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_BaseDataTypeId: _UANodeId; safecall;
    procedure _Set_BaseDataTypeId(const pRetVal: _UANodeId); safecall;
    function Get_DefaultEncodingId: _UANodeId; safecall;
    procedure _Set_DefaultEncodingId(const pRetVal: _UANodeId); safecall;
    function Get_Fields: ICollection; safecall;
    function Get_StructureType: UAStructureType; safecall;
    procedure Set_StructureType(pRetVal: UAStructureType); safecall;
    function Clone: OleVariant; safecall;
    procedure Add(structureField: OleVariant); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property BaseDataTypeId: _UANodeId read Get_BaseDataTypeId write _Set_BaseDataTypeId;
    property DefaultEncodingId: _UANodeId read Get_DefaultEncodingId write _Set_DefaultEncodingId;
    property Fields: ICollection read Get_Fields;
    property StructureType: UAStructureType read Get_StructureType write Set_StructureType;
  end;

// *********************************************************************//
// DispIntf:  _UAStructureDefinitionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {557DABBD-11B6-40B5-84C0-FFB5BEDE7186}
// *********************************************************************//
  _UAStructureDefinitionDisp = dispinterface
    ['{557DABBD-11B6-40B5-84C0-FFB5BEDE7186}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    property BaseDataTypeId: _UANodeId dispid 1610743813;
    property DefaultEncodingId: _UANodeId dispid 1610743815;
    property Fields: ICollection readonly dispid 1610743817;
    property StructureType: UAStructureType dispid 1610743818;
    function Clone: OleVariant; dispid 1610743820;
    procedure Add(structureField: OleVariant); dispid 1610743821;
  end;

// *********************************************************************//
// Interface: _UAStructureField
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6300AC71-9922-48C6-990D-423BE54CA6F2}
// *********************************************************************//
  _UAStructureField = interface(IDispatch)
    ['{6300AC71-9922-48C6-990D-423BE54CA6F2}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_ArrayDimensions: PSafeArray; safecall;
    procedure Set_ArrayDimensions(pRetVal: PSafeArray); safecall;
    function Get_DataTypeId: _UANodeId; safecall;
    procedure _Set_DataTypeId(const pRetVal: _UANodeId); safecall;
    function Get_DecimalMaximumStringLength: TDecimal; safecall;
    procedure Set_DecimalMaximumStringLength(pRetVal: TDecimal); safecall;
    function Get_Description: WideString; safecall;
    procedure Set_Description(const pRetVal: WideString); safecall;
    function Get_Int32MaximumStringLength: Integer; safecall;
    procedure Set_Int32MaximumStringLength(pRetVal: Integer); safecall;
    function Get_IsOptional: WordBool; safecall;
    procedure Set_IsOptional(pRetVal: WordBool); safecall;
    function Get_MaximumStringLength: Int64; safecall;
    procedure Set_MaximumStringLength(pRetVal: Int64); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_ValueRank: Integer; safecall;
    procedure Set_ValueRank(pRetVal: Integer); safecall;
    procedure SetDecimalArrayDimensions(var value: PSafeArray); safecall;
    function ToUAStructureFieldInfoResult(readOnlyDataTypeSchema: OleVariant; 
                                          requireBaseDataTypes: WordBool): _ValueResult; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property ArrayDimensions: PSafeArray read Get_ArrayDimensions write Set_ArrayDimensions;
    property DataTypeId: _UANodeId read Get_DataTypeId write _Set_DataTypeId;
    property DecimalMaximumStringLength: TDecimal read Get_DecimalMaximumStringLength write Set_DecimalMaximumStringLength;
    property Description: WideString read Get_Description write Set_Description;
    property Int32MaximumStringLength: Integer read Get_Int32MaximumStringLength write Set_Int32MaximumStringLength;
    property IsOptional: WordBool read Get_IsOptional write Set_IsOptional;
    property MaximumStringLength: Int64 read Get_MaximumStringLength write Set_MaximumStringLength;
    property Name: WideString read Get_Name write Set_Name;
    property ValueRank: Integer read Get_ValueRank write Set_ValueRank;
  end;

// *********************************************************************//
// DispIntf:  _UAStructureFieldDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6300AC71-9922-48C6-990D-423BE54CA6F2}
// *********************************************************************//
  _UAStructureFieldDisp = dispinterface
    ['{6300AC71-9922-48C6-990D-423BE54CA6F2}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property ArrayDimensions: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 1610743814;
    property DataTypeId: _UANodeId dispid 1610743816;
    property DecimalMaximumStringLength: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 1610743818;
    property Description: WideString dispid 1610743820;
    property Int32MaximumStringLength: Integer dispid 1610743822;
    property IsOptional: WordBool dispid 1610743824;
    property MaximumStringLength: Int64 dispid 1610743826;
    property Name: WideString dispid 1610743828;
    property ValueRank: Integer dispid 1610743830;
    procedure SetDecimalArrayDimensions(var value: {NOT_OLEAUTO(PSafeArray)}OleVariant); dispid 1610743832;
    function ToUAStructureFieldInfoResult(readOnlyDataTypeSchema: OleVariant; 
                                          requireBaseDataTypes: WordBool): _ValueResult; dispid 1610743833;
  end;

// *********************************************************************//
// Interface: _UADataTypeDescription
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2D2F3602-7A08-48E2-A83E-9EFE9C4A204B}
// *********************************************************************//
  _UADataTypeDescription = interface(IDispatch)
    ['{2D2F3602-7A08-48E2-A83E-9EFE9C4A204B}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_DataTypeId: _UANodeId; safecall;
    procedure _Set_DataTypeId(const pRetVal: _UANodeId); safecall;
    function Get_Name: _UAQualifiedName; safecall;
    procedure _Set_Name(const pRetVal: _UAQualifiedName); safecall;
    function ToUADataTypeInfoResult(readOnlyDataTypeSchema: OleVariant; 
                                    requireBaseDataTypes: WordBool): _ValueResult; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DataTypeId: _UANodeId read Get_DataTypeId write _Set_DataTypeId;
    property Name: _UAQualifiedName read Get_Name write _Set_Name;
  end;

// *********************************************************************//
// DispIntf:  _UADataTypeDescriptionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2D2F3602-7A08-48E2-A83E-9EFE9C4A204B}
// *********************************************************************//
  _UADataTypeDescriptionDisp = dispinterface
    ['{2D2F3602-7A08-48E2-A83E-9EFE9C4A204B}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property DataTypeId: _UANodeId dispid 1610743814;
    property Name: _UAQualifiedName dispid 1610743816;
    function ToUADataTypeInfoResult(readOnlyDataTypeSchema: OleVariant; 
                                    requireBaseDataTypes: WordBool): _ValueResult; dispid 1610743818;
  end;

// *********************************************************************//
// Interface: _UASimpleTypeDescription
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B37CFECE-AA5E-4D72-A763-A291394EA5B2}
// *********************************************************************//
  _UASimpleTypeDescription = interface(IDispatch)
    ['{B37CFECE-AA5E-4D72-A763-A291394EA5B2}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_DataTypeId: _UANodeId; safecall;
    procedure _Set_DataTypeId(const pRetVal: _UANodeId); safecall;
    function Get_Name: _UAQualifiedName; safecall;
    procedure _Set_Name(const pRetVal: _UAQualifiedName); safecall;
    function ToUADataTypeInfoResult(readOnlyDataTypeSchema: OleVariant; 
                                    requireBaseDataTypes: WordBool): _ValueResult; safecall;
    function Get_BaseDataTypeId: _UANodeId; safecall;
    procedure _Set_BaseDataTypeId(const pRetVal: _UANodeId); safecall;
    function Get_BuiltInType: UABuiltInType; safecall;
    procedure Set_BuiltInType(pRetVal: UABuiltInType); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DataTypeId: _UANodeId read Get_DataTypeId write _Set_DataTypeId;
    property Name: _UAQualifiedName read Get_Name write _Set_Name;
    property BaseDataTypeId: _UANodeId read Get_BaseDataTypeId write _Set_BaseDataTypeId;
    property BuiltInType: UABuiltInType read Get_BuiltInType write Set_BuiltInType;
  end;

// *********************************************************************//
// DispIntf:  _UASimpleTypeDescriptionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B37CFECE-AA5E-4D72-A763-A291394EA5B2}
// *********************************************************************//
  _UASimpleTypeDescriptionDisp = dispinterface
    ['{B37CFECE-AA5E-4D72-A763-A291394EA5B2}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property DataTypeId: _UANodeId dispid 1610743814;
    property Name: _UAQualifiedName dispid 1610743816;
    function ToUADataTypeInfoResult(readOnlyDataTypeSchema: OleVariant; 
                                    requireBaseDataTypes: WordBool): _ValueResult; dispid 1610743818;
    property BaseDataTypeId: _UANodeId dispid 1610743819;
    property BuiltInType: UABuiltInType dispid 1610743821;
  end;

// *********************************************************************//
// Interface: _UAStructureDescription
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B6C6791C-0102-4701-AFA6-5C1048704680}
// *********************************************************************//
  _UAStructureDescription = interface(IDispatch)
    ['{B6C6791C-0102-4701-AFA6-5C1048704680}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_DataTypeId: _UANodeId; safecall;
    procedure _Set_DataTypeId(const pRetVal: _UANodeId); safecall;
    function Get_Name: _UAQualifiedName; safecall;
    procedure _Set_Name(const pRetVal: _UAQualifiedName); safecall;
    function ToUADataTypeInfoResult(readOnlyDataTypeSchema: OleVariant; 
                                    requireBaseDataTypes: WordBool): _ValueResult; safecall;
    function Get_StructureDefinition: _UAStructureDefinition; safecall;
    procedure _Set_StructureDefinition(const pRetVal: _UAStructureDefinition); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DataTypeId: _UANodeId read Get_DataTypeId write _Set_DataTypeId;
    property Name: _UAQualifiedName read Get_Name write _Set_Name;
    property StructureDefinition: _UAStructureDefinition read Get_StructureDefinition write _Set_StructureDefinition;
  end;

// *********************************************************************//
// DispIntf:  _UAStructureDescriptionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B6C6791C-0102-4701-AFA6-5C1048704680}
// *********************************************************************//
  _UAStructureDescriptionDisp = dispinterface
    ['{B6C6791C-0102-4701-AFA6-5C1048704680}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property DataTypeId: _UANodeId dispid 1610743814;
    property Name: _UAQualifiedName dispid 1610743816;
    function ToUADataTypeInfoResult(readOnlyDataTypeSchema: OleVariant; 
                                    requireBaseDataTypes: WordBool): _ValueResult; dispid 1610743818;
    property StructureDefinition: _UAStructureDefinition dispid 1610743819;
  end;

// *********************************************************************//
// Interface: _UADataTypeInfo
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {52E99547-2CA9-450E-B872-34A1BC032197}
// *********************************************************************//
  _UADataTypeInfo = interface(IDispatch)
    ['{52E99547-2CA9-450E-B872-34A1BC032197}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_DataTypeId: _UAModelNodeDescriptor; safecall;
    procedure _Set_DataTypeId(const pRetVal: _UAModelNodeDescriptor); safecall;
    function Get_Name: _UAQualifiedName; safecall;
    procedure _Set_Name(const pRetVal: _UAQualifiedName); safecall;
    function AsEnumTypeInfo: _UAEnumTypeInfo; safecall;
    function AsSimpleTypeInfo: _UASimpleTypeInfo; safecall;
    function AsStructureTypeInfo: _UAStructureTypeInfo; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DataTypeId: _UAModelNodeDescriptor read Get_DataTypeId write _Set_DataTypeId;
    property Name: _UAQualifiedName read Get_Name write _Set_Name;
  end;

// *********************************************************************//
// DispIntf:  _UADataTypeInfoDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {52E99547-2CA9-450E-B872-34A1BC032197}
// *********************************************************************//
  _UADataTypeInfoDisp = dispinterface
    ['{52E99547-2CA9-450E-B872-34A1BC032197}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    property DataTypeId: _UAModelNodeDescriptor dispid 1610743813;
    property Name: _UAQualifiedName dispid 1610743815;
    function AsEnumTypeInfo: _UAEnumTypeInfo; dispid 1610743817;
    function AsSimpleTypeInfo: _UASimpleTypeInfo; dispid 1610743818;
    function AsStructureTypeInfo: _UAStructureTypeInfo; dispid 1610743819;
  end;

// *********************************************************************//
// Interface: _UAEnumFieldInfo
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1E2DC657-40B3-41E7-BA9F-38CCF8E8611A}
// *********************************************************************//
  _UAEnumFieldInfo = interface(IDispatch)
    ['{1E2DC657-40B3-41E7-BA9F-38CCF8E8611A}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_DecimalValue: TDecimal; safecall;
    procedure Set_DecimalValue(pRetVal: TDecimal); safecall;
    function Get_Description: WideString; safecall;
    procedure Set_Description(const pRetVal: WideString); safecall;
    function Get_DisplayName: WideString; safecall;
    procedure Set_DisplayName(const pRetVal: WideString); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_value: Int64; safecall;
    procedure Set_value(pRetVal: Int64); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DecimalValue: TDecimal read Get_DecimalValue write Set_DecimalValue;
    property Description: WideString read Get_Description write Set_Description;
    property DisplayName: WideString read Get_DisplayName write Set_DisplayName;
    property Name: WideString read Get_Name write Set_Name;
    property value: Int64 read Get_value write Set_value;
  end;

// *********************************************************************//
// DispIntf:  _UAEnumFieldInfoDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1E2DC657-40B3-41E7-BA9F-38CCF8E8611A}
// *********************************************************************//
  _UAEnumFieldInfoDisp = dispinterface
    ['{1E2DC657-40B3-41E7-BA9F-38CCF8E8611A}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property DecimalValue: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 1610743814;
    property Description: WideString dispid 1610743816;
    property DisplayName: WideString dispid 1610743818;
    property Name: WideString dispid 1610743820;
    property value: Int64 dispid 1610743822;
  end;

// *********************************************************************//
// Interface: _UAEnumTypeInfo
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2C551603-5AA5-4166-B949-7E42E66B6163}
// *********************************************************************//
  _UAEnumTypeInfo = interface(IDispatch)
    ['{2C551603-5AA5-4166-B949-7E42E66B6163}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_DataTypeId: _UAModelNodeDescriptor; safecall;
    procedure _Set_DataTypeId(const pRetVal: _UAModelNodeDescriptor); safecall;
    function Get_Name: _UAQualifiedName; safecall;
    procedure _Set_Name(const pRetVal: _UAQualifiedName); safecall;
    function AsEnumTypeInfo: _UAEnumTypeInfo; safecall;
    function AsSimpleTypeInfo: _UASimpleTypeInfo; safecall;
    function AsStructureTypeInfo: _UAStructureTypeInfo; safecall;
    function Get_BuiltInType: UABuiltInType; safecall;
    procedure Set_BuiltInType(pRetVal: UABuiltInType); safecall;
    function Get_FieldInfos: ICollection; safecall;
    procedure Add(enumFieldInfo: OleVariant); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DataTypeId: _UAModelNodeDescriptor read Get_DataTypeId write _Set_DataTypeId;
    property Name: _UAQualifiedName read Get_Name write _Set_Name;
    property BuiltInType: UABuiltInType read Get_BuiltInType write Set_BuiltInType;
    property FieldInfos: ICollection read Get_FieldInfos;
  end;

// *********************************************************************//
// DispIntf:  _UAEnumTypeInfoDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2C551603-5AA5-4166-B949-7E42E66B6163}
// *********************************************************************//
  _UAEnumTypeInfoDisp = dispinterface
    ['{2C551603-5AA5-4166-B949-7E42E66B6163}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    property DataTypeId: _UAModelNodeDescriptor dispid 1610743813;
    property Name: _UAQualifiedName dispid 1610743815;
    function AsEnumTypeInfo: _UAEnumTypeInfo; dispid 1610743817;
    function AsSimpleTypeInfo: _UASimpleTypeInfo; dispid 1610743818;
    function AsStructureTypeInfo: _UAStructureTypeInfo; dispid 1610743819;
    property BuiltInType: UABuiltInType dispid 1610743820;
    property FieldInfos: ICollection readonly dispid 1610743822;
    procedure Add(enumFieldInfo: OleVariant); dispid 1610743823;
  end;

// *********************************************************************//
// Interface: _UASimpleTypeInfo
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6AFC24DF-3CB1-4DA1-8D1C-4BD2D5B5ECCD}
// *********************************************************************//
  _UASimpleTypeInfo = interface(IDispatch)
    ['{6AFC24DF-3CB1-4DA1-8D1C-4BD2D5B5ECCD}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_DataTypeId: _UAModelNodeDescriptor; safecall;
    procedure _Set_DataTypeId(const pRetVal: _UAModelNodeDescriptor); safecall;
    function Get_Name: _UAQualifiedName; safecall;
    procedure _Set_Name(const pRetVal: _UAQualifiedName); safecall;
    function AsEnumTypeInfo: _UAEnumTypeInfo; safecall;
    function AsSimpleTypeInfo: _UASimpleTypeInfo; safecall;
    function AsStructureTypeInfo: _UAStructureTypeInfo; safecall;
    function Get_BaseDataTypeId: _UAModelNodeDescriptor; safecall;
    procedure _Set_BaseDataTypeId(const pRetVal: _UAModelNodeDescriptor); safecall;
    function Get_BaseDataTypeInfo: _UADataTypeInfo; safecall;
    procedure _Set_BaseDataTypeInfo(const pRetVal: _UADataTypeInfo); safecall;
    function Get_BuiltInType: UABuiltInType; safecall;
    procedure Set_BuiltInType(pRetVal: UABuiltInType); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DataTypeId: _UAModelNodeDescriptor read Get_DataTypeId write _Set_DataTypeId;
    property Name: _UAQualifiedName read Get_Name write _Set_Name;
    property BaseDataTypeId: _UAModelNodeDescriptor read Get_BaseDataTypeId write _Set_BaseDataTypeId;
    property BaseDataTypeInfo: _UADataTypeInfo read Get_BaseDataTypeInfo write _Set_BaseDataTypeInfo;
    property BuiltInType: UABuiltInType read Get_BuiltInType write Set_BuiltInType;
  end;

// *********************************************************************//
// DispIntf:  _UASimpleTypeInfoDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6AFC24DF-3CB1-4DA1-8D1C-4BD2D5B5ECCD}
// *********************************************************************//
  _UASimpleTypeInfoDisp = dispinterface
    ['{6AFC24DF-3CB1-4DA1-8D1C-4BD2D5B5ECCD}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    property DataTypeId: _UAModelNodeDescriptor dispid 1610743813;
    property Name: _UAQualifiedName dispid 1610743815;
    function AsEnumTypeInfo: _UAEnumTypeInfo; dispid 1610743817;
    function AsSimpleTypeInfo: _UASimpleTypeInfo; dispid 1610743818;
    function AsStructureTypeInfo: _UAStructureTypeInfo; dispid 1610743819;
    property BaseDataTypeId: _UAModelNodeDescriptor dispid 1610743820;
    property BaseDataTypeInfo: _UADataTypeInfo dispid 1610743822;
    property BuiltInType: UABuiltInType dispid 1610743824;
  end;

// *********************************************************************//
// Interface: _UAStructureFieldInfo
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A40C030B-5364-4289-98E8-B508D940C190}
// *********************************************************************//
  _UAStructureFieldInfo = interface(IDispatch)
    ['{A40C030B-5364-4289-98E8-B508D940C190}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_ArrayDimensions: PSafeArray; safecall;
    procedure Set_ArrayDimensions(pRetVal: PSafeArray); safecall;
    function Get_DataTypeInfo: _UADataTypeInfo; safecall;
    procedure _Set_DataTypeInfo(const pRetVal: _UADataTypeInfo); safecall;
    function Get_DecimalMaximumStringLength: TDecimal; safecall;
    procedure Set_DecimalMaximumStringLength(pRetVal: TDecimal); safecall;
    function Get_Description: WideString; safecall;
    procedure Set_Description(const pRetVal: WideString); safecall;
    function Get_Int32MaximumStringLength: Integer; safecall;
    procedure Set_Int32MaximumStringLength(pRetVal: Integer); safecall;
    function Get_IsOptional: WordBool; safecall;
    procedure Set_IsOptional(pRetVal: WordBool); safecall;
    function Get_MaximumStringLength: Int64; safecall;
    procedure Set_MaximumStringLength(pRetVal: Int64); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_ValueRank: Integer; safecall;
    procedure Set_ValueRank(pRetVal: Integer); safecall;
    procedure SetDecimalArrayDimensions(var value: PSafeArray); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property ArrayDimensions: PSafeArray read Get_ArrayDimensions write Set_ArrayDimensions;
    property DataTypeInfo: _UADataTypeInfo read Get_DataTypeInfo write _Set_DataTypeInfo;
    property DecimalMaximumStringLength: TDecimal read Get_DecimalMaximumStringLength write Set_DecimalMaximumStringLength;
    property Description: WideString read Get_Description write Set_Description;
    property Int32MaximumStringLength: Integer read Get_Int32MaximumStringLength write Set_Int32MaximumStringLength;
    property IsOptional: WordBool read Get_IsOptional write Set_IsOptional;
    property MaximumStringLength: Int64 read Get_MaximumStringLength write Set_MaximumStringLength;
    property Name: WideString read Get_Name write Set_Name;
    property ValueRank: Integer read Get_ValueRank write Set_ValueRank;
  end;

// *********************************************************************//
// DispIntf:  _UAStructureFieldInfoDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A40C030B-5364-4289-98E8-B508D940C190}
// *********************************************************************//
  _UAStructureFieldInfoDisp = dispinterface
    ['{A40C030B-5364-4289-98E8-B508D940C190}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    property ArrayDimensions: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 1610743813;
    property DataTypeInfo: _UADataTypeInfo dispid 1610743815;
    property DecimalMaximumStringLength: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 1610743817;
    property Description: WideString dispid 1610743819;
    property Int32MaximumStringLength: Integer dispid 1610743821;
    property IsOptional: WordBool dispid 1610743823;
    property MaximumStringLength: Int64 dispid 1610743825;
    property Name: WideString dispid 1610743827;
    property ValueRank: Integer dispid 1610743829;
    procedure SetDecimalArrayDimensions(var value: {NOT_OLEAUTO(PSafeArray)}OleVariant); dispid 1610743831;
  end;

// *********************************************************************//
// Interface: _UAStructureTypeInfo
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {384E7A1E-49D8-4A95-8673-5C0FD4EAD22B}
// *********************************************************************//
  _UAStructureTypeInfo = interface(IDispatch)
    ['{384E7A1E-49D8-4A95-8673-5C0FD4EAD22B}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_DataTypeId: _UAModelNodeDescriptor; safecall;
    procedure _Set_DataTypeId(const pRetVal: _UAModelNodeDescriptor); safecall;
    function Get_Name: _UAQualifiedName; safecall;
    procedure _Set_Name(const pRetVal: _UAQualifiedName); safecall;
    function AsEnumTypeInfo: _UAEnumTypeInfo; safecall;
    function AsSimpleTypeInfo: _UASimpleTypeInfo; safecall;
    function AsStructureTypeInfo: _UAStructureTypeInfo; safecall;
    function Get_BaseDataTypeId: _UAModelNodeDescriptor; safecall;
    procedure _Set_BaseDataTypeId(const pRetVal: _UAModelNodeDescriptor); safecall;
    function Get_BaseDataTypeInfo: _UADataTypeInfo; safecall;
    procedure _Set_BaseDataTypeInfo(const pRetVal: _UADataTypeInfo); safecall;
    function Get_FieldInfos: ICollection; safecall;
    function Get_StructureType: UAStructureType; safecall;
    procedure Set_StructureType(pRetVal: UAStructureType); safecall;
    procedure Add(structureFieldInfo: OleVariant); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DataTypeId: _UAModelNodeDescriptor read Get_DataTypeId write _Set_DataTypeId;
    property Name: _UAQualifiedName read Get_Name write _Set_Name;
    property BaseDataTypeId: _UAModelNodeDescriptor read Get_BaseDataTypeId write _Set_BaseDataTypeId;
    property BaseDataTypeInfo: _UADataTypeInfo read Get_BaseDataTypeInfo write _Set_BaseDataTypeInfo;
    property FieldInfos: ICollection read Get_FieldInfos;
    property StructureType: UAStructureType read Get_StructureType write Set_StructureType;
  end;

// *********************************************************************//
// DispIntf:  _UAStructureTypeInfoDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {384E7A1E-49D8-4A95-8673-5C0FD4EAD22B}
// *********************************************************************//
  _UAStructureTypeInfoDisp = dispinterface
    ['{384E7A1E-49D8-4A95-8673-5C0FD4EAD22B}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    property DataTypeId: _UAModelNodeDescriptor dispid 1610743813;
    property Name: _UAQualifiedName dispid 1610743815;
    function AsEnumTypeInfo: _UAEnumTypeInfo; dispid 1610743817;
    function AsSimpleTypeInfo: _UASimpleTypeInfo; dispid 1610743818;
    function AsStructureTypeInfo: _UAStructureTypeInfo; dispid 1610743819;
    property BaseDataTypeId: _UAModelNodeDescriptor dispid 1610743820;
    property BaseDataTypeInfo: _UADataTypeInfo dispid 1610743822;
    property FieldInfos: ICollection readonly dispid 1610743824;
    property StructureType: UAStructureType dispid 1610743825;
    procedure Add(structureFieldInfo: OleVariant); dispid 1610743827;
  end;

// *********************************************************************//
// Interface: _UAEnumDefinition
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {CAC978FF-365B-4D9F-BE01-C4E887A3E505}
// *********************************************************************//
  _UAEnumDefinition = interface(IDispatch)
    ['{CAC978FF-365B-4D9F-BE01-C4E887A3E505}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_Fields: ICollection; safecall;
    procedure Add(enumField: OleVariant); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Fields: ICollection read Get_Fields;
  end;

// *********************************************************************//
// DispIntf:  _UAEnumDefinitionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {CAC978FF-365B-4D9F-BE01-C4E887A3E505}
// *********************************************************************//
  _UAEnumDefinitionDisp = dispinterface
    ['{CAC978FF-365B-4D9F-BE01-C4E887A3E505}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property Fields: ICollection readonly dispid 1610743814;
    procedure Add(enumField: OleVariant); dispid 1610743815;
  end;

// *********************************************************************//
// Interface: _UAEnumDescription
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {239D6A62-5CB7-483C-A9D9-03BBA45A782E}
// *********************************************************************//
  _UAEnumDescription = interface(IDispatch)
    ['{239D6A62-5CB7-483C-A9D9-03BBA45A782E}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_DataTypeId: _UANodeId; safecall;
    procedure _Set_DataTypeId(const pRetVal: _UANodeId); safecall;
    function Get_Name: _UAQualifiedName; safecall;
    procedure _Set_Name(const pRetVal: _UAQualifiedName); safecall;
    function ToUADataTypeInfoResult(readOnlyDataTypeSchema: OleVariant; 
                                    requireBaseDataTypes: WordBool): _ValueResult; safecall;
    function Get_BuiltInType: UABuiltInType; safecall;
    procedure Set_BuiltInType(pRetVal: UABuiltInType); safecall;
    function Get_EnumDefinition: _UAEnumDefinition; safecall;
    procedure _Set_EnumDefinition(const pRetVal: _UAEnumDefinition); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DataTypeId: _UANodeId read Get_DataTypeId write _Set_DataTypeId;
    property Name: _UAQualifiedName read Get_Name write _Set_Name;
    property BuiltInType: UABuiltInType read Get_BuiltInType write Set_BuiltInType;
    property EnumDefinition: _UAEnumDefinition read Get_EnumDefinition write _Set_EnumDefinition;
  end;

// *********************************************************************//
// DispIntf:  _UAEnumDescriptionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {239D6A62-5CB7-483C-A9D9-03BBA45A782E}
// *********************************************************************//
  _UAEnumDescriptionDisp = dispinterface
    ['{239D6A62-5CB7-483C-A9D9-03BBA45A782E}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property DataTypeId: _UANodeId dispid 1610743814;
    property Name: _UAQualifiedName dispid 1610743816;
    function ToUADataTypeInfoResult(readOnlyDataTypeSchema: OleVariant; 
                                    requireBaseDataTypes: WordBool): _ValueResult; dispid 1610743818;
    property BuiltInType: UABuiltInType dispid 1610743819;
    property EnumDefinition: _UAEnumDefinition dispid 1610743821;
  end;

// *********************************************************************//
// Interface: _UAHeaderDataTypeSchema
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8EE117C9-D664-4C92-B028-9A1788D89CF7}
// *********************************************************************//
  _UAHeaderDataTypeSchema = interface(IDispatch)
    ['{8EE117C9-D664-4C92-B028-9A1788D89CF7}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function FindDataTypeDescriptions(dataTypeIdList: OleVariant; searchSupertypes: WordBool): PSafeArray; safecall;
    function Get_EnumDescriptions: ICollection; safecall;
    function Get_NamespaceArray: PSafeArray; safecall;
    procedure Set_NamespaceArray(pRetVal: PSafeArray); safecall;
    function Get_SimpleTypeDescriptions: ICollection; safecall;
    function Get_StructureDescriptions: ICollection; safecall;
    function Clone: OleVariant; safecall;
    procedure SetNamespaceArray(var value: PSafeArray); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property EnumDescriptions: ICollection read Get_EnumDescriptions;
    property NamespaceArray: PSafeArray read Get_NamespaceArray write Set_NamespaceArray;
    property SimpleTypeDescriptions: ICollection read Get_SimpleTypeDescriptions;
    property StructureDescriptions: ICollection read Get_StructureDescriptions;
  end;

// *********************************************************************//
// DispIntf:  _UAHeaderDataTypeSchemaDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8EE117C9-D664-4C92-B028-9A1788D89CF7}
// *********************************************************************//
  _UAHeaderDataTypeSchemaDisp = dispinterface
    ['{8EE117C9-D664-4C92-B028-9A1788D89CF7}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function FindDataTypeDescriptions(dataTypeIdList: OleVariant; searchSupertypes: WordBool): {NOT_OLEAUTO(PSafeArray)}OleVariant; dispid 1610743813;
    property EnumDescriptions: ICollection readonly dispid 1610743814;
    property NamespaceArray: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 1610743815;
    property SimpleTypeDescriptions: ICollection readonly dispid 1610743817;
    property StructureDescriptions: ICollection readonly dispid 1610743818;
    function Clone: OleVariant; dispid 1610743819;
    procedure SetNamespaceArray(var value: {NOT_OLEAUTO(PSafeArray)}OleVariant); dispid 1610743820;
  end;

// *********************************************************************//
// Interface: _UAEnumField
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1FC3A7C6-63C5-4B44-A88D-7040A8FA9EC2}
// *********************************************************************//
  _UAEnumField = interface(IDispatch)
    ['{1FC3A7C6-63C5-4B44-A88D-7040A8FA9EC2}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_DecimalValue: TDecimal; safecall;
    procedure Set_DecimalValue(pRetVal: TDecimal); safecall;
    function Get_Description: WideString; safecall;
    procedure Set_Description(const pRetVal: WideString); safecall;
    function Get_DisplayName: WideString; safecall;
    procedure Set_DisplayName(const pRetVal: WideString); safecall;
    function Get_Int32Value: Integer; safecall;
    procedure Set_Int32Value(pRetVal: Integer); safecall;
    function Get_value: Int64; safecall;
    procedure Set_value(pRetVal: Int64); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DecimalValue: TDecimal read Get_DecimalValue write Set_DecimalValue;
    property Description: WideString read Get_Description write Set_Description;
    property DisplayName: WideString read Get_DisplayName write Set_DisplayName;
    property Int32Value: Integer read Get_Int32Value write Set_Int32Value;
    property value: Int64 read Get_value write Set_value;
    property Name: WideString read Get_Name write Set_Name;
  end;

// *********************************************************************//
// DispIntf:  _UAEnumFieldDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1FC3A7C6-63C5-4B44-A88D-7040A8FA9EC2}
// *********************************************************************//
  _UAEnumFieldDisp = dispinterface
    ['{1FC3A7C6-63C5-4B44-A88D-7040A8FA9EC2}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property DecimalValue: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 1610743814;
    property Description: WideString dispid 1610743816;
    property DisplayName: WideString dispid 1610743818;
    property Int32Value: Integer dispid 1610743820;
    property value: Int64 dispid 1610743822;
    property Name: WideString dispid 1610743824;
  end;

// *********************************************************************//
// Interface: _UADataTypeDescriptor
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {81E0CC77-C55C-417D-AA82-13E4F654B5A0}
// *********************************************************************//
  _UADataTypeDescriptor = interface(IDispatch)
    ['{81E0CC77-C55C-417D-AA82-13E4F654B5A0}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_DataTypeDescription: OleVariant; safecall;
    procedure _Set_DataTypeDescription(pRetVal: OleVariant); safecall;
    function Get_DataTypeDictionaryId: _UAModelNodeDescriptor; safecall;
    procedure _Set_DataTypeDictionaryId(const pRetVal: _UAModelNodeDescriptor); safecall;
    procedure SetDataTypeDescription(DataTypeDescription: OleVariant); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DataTypeDescription: OleVariant read Get_DataTypeDescription write _Set_DataTypeDescription;
    property DataTypeDictionaryId: _UAModelNodeDescriptor read Get_DataTypeDictionaryId write _Set_DataTypeDictionaryId;
  end;

// *********************************************************************//
// DispIntf:  _UADataTypeDescriptorDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {81E0CC77-C55C-417D-AA82-13E4F654B5A0}
// *********************************************************************//
  _UADataTypeDescriptorDisp = dispinterface
    ['{81E0CC77-C55C-417D-AA82-13E4F654B5A0}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property DataTypeDescription: OleVariant dispid 1610743814;
    property DataTypeDictionaryId: _UAModelNodeDescriptor dispid 1610743816;
    procedure SetDataTypeDescription(DataTypeDescription: OleVariant); dispid 1610743818;
  end;

// *********************************************************************//
// Interface: _UADataTypeSystemParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {81F5925A-933B-4B7C-917E-837689DAF84D}
// *********************************************************************//
  _UADataTypeSystemParameters = interface(IDispatch)
    ['{81F5925A-933B-4B7C-917E-837689DAF84D}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_AllowCircularTypeNameReferences: WordBool; safecall;
    procedure Set_AllowCircularTypeNameReferences(pRetVal: WordBool); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property AllowCircularTypeNameReferences: WordBool read Get_AllowCircularTypeNameReferences write Set_AllowCircularTypeNameReferences;
  end;

// *********************************************************************//
// DispIntf:  _UADataTypeSystemParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {81F5925A-933B-4B7C-917E-837689DAF84D}
// *********************************************************************//
  _UADataTypeSystemParametersDisp = dispinterface
    ['{81F5925A-933B-4B7C-917E-837689DAF84D}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property AllowCircularTypeNameReferences: WordBool dispid 1610743816;
  end;

// *********************************************************************//
// Interface: _UAOpcBinaryDtsParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3E3FED36-A742-4B82-9BA5-87F8E1BA0E6D}
// *********************************************************************//
  _UAOpcBinaryDtsParameters = interface(IDispatch)
    ['{3E3FED36-A742-4B82-9BA5-87F8E1BA0E6D}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_AllowCircularTypeNameReferences: WordBool; safecall;
    procedure Set_AllowCircularTypeNameReferences(pRetVal: WordBool); safecall;
    function Get_AllowDataPastEndOfStream: WordBool; safecall;
    procedure Set_AllowDataPastEndOfStream(pRetVal: WordBool); safecall;
    function Get_ImplicitImportDictionary: _StringStringDictionary; safecall;
    procedure _Set_ImplicitImportDictionary(const pRetVal: _StringStringDictionary); safecall;
    function Get_NamespaceRedirectionDictionary: _StringStringDictionary; safecall;
    procedure _Set_NamespaceRedirectionDictionary(const pRetVal: _StringStringDictionary); safecall;
    function Get_OverrideLocationForKnownNamespaces: WordBool; safecall;
    procedure Set_OverrideLocationForKnownNamespaces(pRetVal: WordBool); safecall;
    function Get_TypeNameRemappingDictionary: _XmlQualifiedName2Dictionary; safecall;
    procedure _Set_TypeNameRemappingDictionary(const pRetVal: _XmlQualifiedName2Dictionary); safecall;
    function Get_WellKnownLocationTemplateDictionary: _StringStringDictionary; safecall;
    procedure _Set_WellKnownLocationTemplateDictionary(const pRetVal: _StringStringDictionary); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property AllowCircularTypeNameReferences: WordBool read Get_AllowCircularTypeNameReferences write Set_AllowCircularTypeNameReferences;
    property AllowDataPastEndOfStream: WordBool read Get_AllowDataPastEndOfStream write Set_AllowDataPastEndOfStream;
    property ImplicitImportDictionary: _StringStringDictionary read Get_ImplicitImportDictionary write _Set_ImplicitImportDictionary;
    property NamespaceRedirectionDictionary: _StringStringDictionary read Get_NamespaceRedirectionDictionary write _Set_NamespaceRedirectionDictionary;
    property OverrideLocationForKnownNamespaces: WordBool read Get_OverrideLocationForKnownNamespaces write Set_OverrideLocationForKnownNamespaces;
    property TypeNameRemappingDictionary: _XmlQualifiedName2Dictionary read Get_TypeNameRemappingDictionary write _Set_TypeNameRemappingDictionary;
    property WellKnownLocationTemplateDictionary: _StringStringDictionary read Get_WellKnownLocationTemplateDictionary write _Set_WellKnownLocationTemplateDictionary;
  end;

// *********************************************************************//
// DispIntf:  _UAOpcBinaryDtsParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3E3FED36-A742-4B82-9BA5-87F8E1BA0E6D}
// *********************************************************************//
  _UAOpcBinaryDtsParametersDisp = dispinterface
    ['{3E3FED36-A742-4B82-9BA5-87F8E1BA0E6D}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property AllowCircularTypeNameReferences: WordBool dispid 1610743816;
    property AllowDataPastEndOfStream: WordBool dispid 1610743818;
    property ImplicitImportDictionary: _StringStringDictionary dispid 1610743820;
    property NamespaceRedirectionDictionary: _StringStringDictionary dispid 1610743822;
    property OverrideLocationForKnownNamespaces: WordBool dispid 1610743824;
    property TypeNameRemappingDictionary: _XmlQualifiedName2Dictionary dispid 1610743826;
    property WellKnownLocationTemplateDictionary: _StringStringDictionary dispid 1610743828;
  end;

// *********************************************************************//
// Interface: _UAXmlSchemaDtsParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {62935881-3269-488A-AB88-ADC9C5AAFF8A}
// *********************************************************************//
  _UAXmlSchemaDtsParameters = interface(IDispatch)
    ['{62935881-3269-488A-AB88-ADC9C5AAFF8A}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_AllowCircularTypeNameReferences: WordBool; safecall;
    procedure Set_AllowCircularTypeNameReferences(pRetVal: WordBool); safecall;
    function Get_SelectLowestLevelDataTypeDescription: WordBool; safecall;
    procedure Set_SelectLowestLevelDataTypeDescription(pRetVal: WordBool); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property AllowCircularTypeNameReferences: WordBool read Get_AllowCircularTypeNameReferences write Set_AllowCircularTypeNameReferences;
    property SelectLowestLevelDataTypeDescription: WordBool read Get_SelectLowestLevelDataTypeDescription write Set_SelectLowestLevelDataTypeDescription;
  end;

// *********************************************************************//
// DispIntf:  _UAXmlSchemaDtsParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {62935881-3269-488A-AB88-ADC9C5AAFF8A}
// *********************************************************************//
  _UAXmlSchemaDtsParametersDisp = dispinterface
    ['{62935881-3269-488A-AB88-ADC9C5AAFF8A}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property AllowCircularTypeNameReferences: WordBool dispid 1610743816;
    property SelectLowestLevelDataTypeDescription: WordBool dispid 1610743818;
  end;

// *********************************************************************//
// Interface: _UADataTypeDefinitionProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1B8314F6-96ED-4DFB-8C65-50BAF38EDA26}
// *********************************************************************//
  _UADataTypeDefinitionProvider = interface(IDispatch)
    ['{1B8314F6-96ED-4DFB-8C65-50BAF38EDA26}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function GetDataTypeInfoFromDataTypeId(DataTypeId: OleVariant; searchSupertypes: WordBool; 
                                           requireBaseDataType: WordBool): _ValueResult; safecall;
    function GetDataTypeInfosFromDataTypeIds(dataTypeIdList: OleVariant; 
                                             searchSupertypes: WordBool; 
                                             requireBaseDataTypes: WordBool): PSafeArray; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
  end;

// *********************************************************************//
// DispIntf:  _UADataTypeDefinitionProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1B8314F6-96ED-4DFB-8C65-50BAF38EDA26}
// *********************************************************************//
  _UADataTypeDefinitionProviderDisp = dispinterface
    ['{1B8314F6-96ED-4DFB-8C65-50BAF38EDA26}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function GetDataTypeInfoFromDataTypeId(DataTypeId: OleVariant; searchSupertypes: WordBool; 
                                           requireBaseDataType: WordBool): _ValueResult; dispid 1610743813;
    function GetDataTypeInfosFromDataTypeIds(dataTypeIdList: OleVariant; 
                                             searchSupertypes: WordBool; 
                                             requireBaseDataTypes: WordBool): {NOT_OLEAUTO(PSafeArray)}OleVariant; dispid 1610743814;
  end;

// *********************************************************************//
// Interface: _UADataTypeDictionaryProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1FF6F3C4-1987-45D4-94AC-96DA40E4F99E}
// *********************************************************************//
  _UADataTypeDictionaryProvider = interface(IDispatch)
    ['{1FF6F3C4-1987-45D4-94AC-96DA40E4F99E}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function GetDataTypeDescriptionFromDataTypeDescriptionId(dataTypeDescriptionId: OleVariant): _ValueResult; safecall;
    function GetDataTypeDescriptionsFromDataTypeDescriptionIds(dataTypeDescriptionIdList: OleVariant): PSafeArray; safecall;
    function GetDataTypeDescriptionIdFromDataTypeEncodingId(dataTypeEncodingId: OleVariant): _ValueResult; safecall;
    function GetDataTypeDescriptionIdsFromDataTypeEncodingIds(dataTypeEncodingIdList: OleVariant): PSafeArray; safecall;
    function GetDataTypeDictionaryFromDataTypeDictionaryId(DataTypeDictionaryId: OleVariant): _ValueResult; safecall;
    function GetDataTypeDictionariesFromDataTypeDictionaryIds(dataTypeDictionaryIdList: OleVariant): PSafeArray; safecall;
    function GetDataTypeDictionaryIdFromDataTypeDescriptionId(dataTypeDescriptionId: OleVariant): _ValueResult; safecall;
    function GetDataTypeDictionaryIdsFromDataTypeDescriptionIds(dataTypeDescriptionIdList: OleVariant): PSafeArray; safecall;
    function ResolveDataTypeDescriptorFromDataTypeEncodingId(dataTypeEncodingId: OleVariant): _ValueResult; safecall;
    function ResolveDataTypeDescriptorsFromDataTypeEncodingIds(dataTypeEncodingIdList: OleVariant): PSafeArray; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
  end;

// *********************************************************************//
// DispIntf:  _UADataTypeDictionaryProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1FF6F3C4-1987-45D4-94AC-96DA40E4F99E}
// *********************************************************************//
  _UADataTypeDictionaryProviderDisp = dispinterface
    ['{1FF6F3C4-1987-45D4-94AC-96DA40E4F99E}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function GetDataTypeDescriptionFromDataTypeDescriptionId(dataTypeDescriptionId: OleVariant): _ValueResult; dispid 1610743813;
    function GetDataTypeDescriptionsFromDataTypeDescriptionIds(dataTypeDescriptionIdList: OleVariant): {NOT_OLEAUTO(PSafeArray)}OleVariant; dispid 1610743814;
    function GetDataTypeDescriptionIdFromDataTypeEncodingId(dataTypeEncodingId: OleVariant): _ValueResult; dispid 1610743815;
    function GetDataTypeDescriptionIdsFromDataTypeEncodingIds(dataTypeEncodingIdList: OleVariant): {NOT_OLEAUTO(PSafeArray)}OleVariant; dispid 1610743816;
    function GetDataTypeDictionaryFromDataTypeDictionaryId(DataTypeDictionaryId: OleVariant): _ValueResult; dispid 1610743817;
    function GetDataTypeDictionariesFromDataTypeDictionaryIds(dataTypeDictionaryIdList: OleVariant): {NOT_OLEAUTO(PSafeArray)}OleVariant; dispid 1610743818;
    function GetDataTypeDictionaryIdFromDataTypeDescriptionId(dataTypeDescriptionId: OleVariant): _ValueResult; dispid 1610743819;
    function GetDataTypeDictionaryIdsFromDataTypeDescriptionIds(dataTypeDescriptionIdList: OleVariant): {NOT_OLEAUTO(PSafeArray)}OleVariant; dispid 1610743820;
    function ResolveDataTypeDescriptorFromDataTypeEncodingId(dataTypeEncodingId: OleVariant): _ValueResult; dispid 1610743821;
    function ResolveDataTypeDescriptorsFromDataTypeEncodingIds(dataTypeEncodingIdList: OleVariant): {NOT_OLEAUTO(PSafeArray)}OleVariant; dispid 1610743822;
  end;

// *********************************************************************//
// Interface: _UADataTypeModelProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0149DEAE-D4FA-4281-89B5-C0017A9BCA52}
// *********************************************************************//
  _UADataTypeModelProvider = interface(IDispatch)
    ['{0149DEAE-D4FA-4281-89B5-C0017A9BCA52}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function GetDataTypeIdFromDataTypeEncodingId(dataTypeEncodingId: OleVariant): _ValueResult; safecall;
    function GetDataTypeIdsFromDataTypeEncodingIds(dataTypeEncodingIdList: OleVariant): PSafeArray; safecall;
    function GetDataTypeIdFromModelNodeDescriptor(modelNodeDescriptor: OleVariant): _ValueResult; safecall;
    function GetDataTypeIdsFromModelNodeDescriptors(modelNodeDescriptorList: OleVariant): PSafeArray; safecall;
    function GetEncodingNodeElementCollectionFromDataTypeId(DataTypeId: OleVariant): _ValueResult; safecall;
    function GetEncodingNodeElementCollectionsFromDataTypeIds(dataTypeIdList: OleVariant): PSafeArray; safecall;
    function ResolveEncodingIdFromDataTypeId(DataTypeId: OleVariant; encodingName: OleVariant): _ValueResult; safecall;
    function ResolveEncodingIdsFromDataTypeIds(dataTypeIdList: OleVariant; encodingName: OleVariant): PSafeArray; safecall;
    function ResolveEncodingIdFromModelNodeDescriptor(modelNodeDescriptor: OleVariant; 
                                                      encodingName: OleVariant): _ValueResult; safecall;
    function ResolveEncodingIdsFromModelNodeDescriptors(modelNodeDescriptorList: OleVariant; 
                                                        encodingName: OleVariant): PSafeArray; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
  end;

// *********************************************************************//
// DispIntf:  _UADataTypeModelProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0149DEAE-D4FA-4281-89B5-C0017A9BCA52}
// *********************************************************************//
  _UADataTypeModelProviderDisp = dispinterface
    ['{0149DEAE-D4FA-4281-89B5-C0017A9BCA52}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function GetDataTypeIdFromDataTypeEncodingId(dataTypeEncodingId: OleVariant): _ValueResult; dispid 1610743813;
    function GetDataTypeIdsFromDataTypeEncodingIds(dataTypeEncodingIdList: OleVariant): {NOT_OLEAUTO(PSafeArray)}OleVariant; dispid 1610743814;
    function GetDataTypeIdFromModelNodeDescriptor(modelNodeDescriptor: OleVariant): _ValueResult; dispid 1610743815;
    function GetDataTypeIdsFromModelNodeDescriptors(modelNodeDescriptorList: OleVariant): {NOT_OLEAUTO(PSafeArray)}OleVariant; dispid 1610743816;
    function GetEncodingNodeElementCollectionFromDataTypeId(DataTypeId: OleVariant): _ValueResult; dispid 1610743817;
    function GetEncodingNodeElementCollectionsFromDataTypeIds(dataTypeIdList: OleVariant): {NOT_OLEAUTO(PSafeArray)}OleVariant; dispid 1610743818;
    function ResolveEncodingIdFromDataTypeId(DataTypeId: OleVariant; encodingName: OleVariant): _ValueResult; dispid 1610743819;
    function ResolveEncodingIdsFromDataTypeIds(dataTypeIdList: OleVariant; encodingName: OleVariant): {NOT_OLEAUTO(PSafeArray)}OleVariant; dispid 1610743820;
    function ResolveEncodingIdFromModelNodeDescriptor(modelNodeDescriptor: OleVariant; 
                                                      encodingName: OleVariant): _ValueResult; dispid 1610743821;
    function ResolveEncodingIdsFromModelNodeDescriptors(modelNodeDescriptorList: OleVariant; 
                                                        encodingName: OleVariant): {NOT_OLEAUTO(PSafeArray)}OleVariant; dispid 1610743822;
  end;

// *********************************************************************//
// Interface: _UADataTypeSystem
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {627AD4C1-0408-401C-AE42-065CFA5A908F}
// *********************************************************************//
  _UADataTypeSystem = interface(IDispatch)
    ['{627AD4C1-0408-401C-AE42-065CFA5A908F}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_encodingName: _UAQualifiedName; safecall;
    function Get_extensionObjectType: UAExtensionObjectType; safecall;
    procedure AddDataTypeDictionary(modelNodeDescriptor: OleVariant; dictionaryByteArray: OleVariant); safecall;
    function DecodeInDataTypeDefinitionModel(DataTypeInfo: OleVariant; objectBody: OleVariant; 
                                             endpointDescriptor: OleVariant; 
                                             ServerTables: OleVariant; fixedLayout: WordBool): _ValueResult; safecall;
    function DecodeInDataTypeDictionaryModel(dataTypeDescriptor: OleVariant; 
                                             extensionObjectBody: OleVariant): _ValueResult; safecall;
    function EncodeInDataTypeDefinitionModel(DataTypeInfo: OleVariant; genericData: OleVariant; 
                                             endpointDescriptor: OleVariant; 
                                             ServerTables: OleVariant; fixedLayout: WordBool): _ValueResult; safecall;
    function EncodeInDataTypeDictionaryModel(dataTypeDescriptor: OleVariant; genericData: OleVariant): _ValueResult; safecall;
    function GetDataType(DataTypeInfo: OleVariant): _ValueResult; safecall;
    function GetDataTypeInDataTypeDictionaryModel(dataTypeDescriptor: OleVariant): _ValueResult; safecall;
    function HasDataTypeDictionary(modelNodeDescriptor: OleVariant): WordBool; safecall;
    procedure RemoveDataTypeDictionary(modelNodeDescriptor: OleVariant); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property encodingName: _UAQualifiedName read Get_encodingName;
    property extensionObjectType: UAExtensionObjectType read Get_extensionObjectType;
  end;

// *********************************************************************//
// DispIntf:  _UADataTypeSystemDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {627AD4C1-0408-401C-AE42-065CFA5A908F}
// *********************************************************************//
  _UADataTypeSystemDisp = dispinterface
    ['{627AD4C1-0408-401C-AE42-065CFA5A908F}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    property encodingName: _UAQualifiedName readonly dispid 1610743813;
    property extensionObjectType: UAExtensionObjectType readonly dispid 1610743814;
    procedure AddDataTypeDictionary(modelNodeDescriptor: OleVariant; dictionaryByteArray: OleVariant); dispid 1610743815;
    function DecodeInDataTypeDefinitionModel(DataTypeInfo: OleVariant; objectBody: OleVariant; 
                                             endpointDescriptor: OleVariant; 
                                             ServerTables: OleVariant; fixedLayout: WordBool): _ValueResult; dispid 1610743816;
    function DecodeInDataTypeDictionaryModel(dataTypeDescriptor: OleVariant; 
                                             extensionObjectBody: OleVariant): _ValueResult; dispid 1610743817;
    function EncodeInDataTypeDefinitionModel(DataTypeInfo: OleVariant; genericData: OleVariant; 
                                             endpointDescriptor: OleVariant; 
                                             ServerTables: OleVariant; fixedLayout: WordBool): _ValueResult; dispid 1610743818;
    function EncodeInDataTypeDictionaryModel(dataTypeDescriptor: OleVariant; genericData: OleVariant): _ValueResult; dispid 1610743819;
    function GetDataType(DataTypeInfo: OleVariant): _ValueResult; dispid 1610743820;
    function GetDataTypeInDataTypeDictionaryModel(dataTypeDescriptor: OleVariant): _ValueResult; dispid 1610743821;
    function HasDataTypeDictionary(modelNodeDescriptor: OleVariant): WordBool; dispid 1610743822;
    procedure RemoveDataTypeDictionary(modelNodeDescriptor: OleVariant); dispid 1610743823;
  end;

// *********************************************************************//
// Interface: _UAEUInformation
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3D500236-2A8B-493A-9910-BC0797CF8542}
// *********************************************************************//
  _UAEUInformation = interface(IDispatch)
    ['{3D500236-2A8B-493A-9910-BC0797CF8542}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_Description: WideString; safecall;
    procedure Set_Description(const pRetVal: WideString); safecall;
    function Get_DisplayName: WideString; safecall;
    procedure Set_DisplayName(const pRetVal: WideString); safecall;
    function Get_NamespaceUriString: WideString; safecall;
    procedure Set_NamespaceUriString(const pRetVal: WideString); safecall;
    function Get_UnitId: Integer; safecall;
    procedure Set_UnitId(pRetVal: Integer); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Description: WideString read Get_Description write Set_Description;
    property DisplayName: WideString read Get_DisplayName write Set_DisplayName;
    property NamespaceUriString: WideString read Get_NamespaceUriString write Set_NamespaceUriString;
    property UnitId: Integer read Get_UnitId write Set_UnitId;
  end;

// *********************************************************************//
// DispIntf:  _UAEUInformationDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3D500236-2A8B-493A-9910-BC0797CF8542}
// *********************************************************************//
  _UAEUInformationDisp = dispinterface
    ['{3D500236-2A8B-493A-9910-BC0797CF8542}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property Description: WideString dispid 1610743814;
    property DisplayName: WideString dispid 1610743816;
    property NamespaceUriString: WideString dispid 1610743818;
    property UnitId: Integer dispid 1610743820;
  end;

// *********************************************************************//
// Interface: _UARange
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7AF3786A-C1B7-44E3-9DA2-7EC79A303B2E}
// *********************************************************************//
  _UARange = interface(IDispatch)
    ['{7AF3786A-C1B7-44E3-9DA2-7EC79A303B2E}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_High: Double; safecall;
    procedure Set_High(pRetVal: Double); safecall;
    function Get_HighBound: Double; safecall;
    function Get_IsReversed: WordBool; safecall;
    function Get_IsSingleValue: WordBool; safecall;
    function Get_IsNormalized: WordBool; safecall;
    function Get_Low: Double; safecall;
    procedure Set_Low(pRetVal: Double); safecall;
    function Get_LowBound: Double; safecall;
    function Get_Size: Double; safecall;
    function InRange(value: Double): WordBool; safecall;
    procedure IntersectWith(other: OleVariant); safecall;
    procedure Normalize; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property High: Double read Get_High write Set_High;
    property HighBound: Double read Get_HighBound;
    property IsReversed: WordBool read Get_IsReversed;
    property IsSingleValue: WordBool read Get_IsSingleValue;
    property IsNormalized: WordBool read Get_IsNormalized;
    property Low: Double read Get_Low write Set_Low;
    property LowBound: Double read Get_LowBound;
    property Size: Double read Get_Size;
  end;

// *********************************************************************//
// DispIntf:  _UARangeDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7AF3786A-C1B7-44E3-9DA2-7EC79A303B2E}
// *********************************************************************//
  _UARangeDisp = dispinterface
    ['{7AF3786A-C1B7-44E3-9DA2-7EC79A303B2E}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property High: Double dispid 1610743814;
    property HighBound: Double readonly dispid 1610743816;
    property IsReversed: WordBool readonly dispid 1610743817;
    property IsSingleValue: WordBool readonly dispid 1610743818;
    property IsNormalized: WordBool readonly dispid 1610743819;
    property Low: Double dispid 1610743820;
    property LowBound: Double readonly dispid 1610743822;
    property Size: Double readonly dispid 1610743823;
    function InRange(value: Double): WordBool; dispid 1610743824;
    procedure IntersectWith(other: OleVariant); dispid 1610743825;
    procedure Normalize; dispid 1610743826;
  end;

// *********************************************************************//
// DispIntf:  DEasyUAClientEvents
// Flags:     (4096) Dispatchable
// GUID:      {C93C8EFE-A670-42BE-94B0-0D71D10B47C5}
// *********************************************************************//
  DEasyUAClientEvents = dispinterface
    ['{C93C8EFE-A670-42BE-94B0-0D71D10B47C5}']
    procedure DataChangeNotification(sender0: OleVariant; 
                                     const eventArgs: _EasyUADataChangeNotificationEventArgs); dispid 1001;
    procedure EventingFailure(sender0: OleVariant; const eventArgs: _FailureEventArgs); dispid 1002;
    procedure EventNotification(sender0: OleVariant; 
                                const eventArgs: _EasyUAEventNotificationEventArgs); dispid 1003;
  end;

// *********************************************************************//
// DispIntf:  DEasyUAClientManagementEvents
// Flags:     (4096) Dispatchable
// GUID:      {06F4301F-D43B-414F-8E93-A8B96D64FA93}
// *********************************************************************//
  DEasyUAClientManagementEvents = dispinterface
    ['{06F4301F-D43B-414F-8E93-A8B96D64FA93}']
    procedure LogEntry(sender0: OleVariant; const eventArgs: _LogEntryEventArgs); dispid 1001;
  end;

// *********************************************************************//
// Interface: _EasyUAClient
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {910344C0-F2A0-42D2-A65E-F3800437F52A}
// *********************************************************************//
  _EasyUAClient = interface(IDispatch)
    ['{910344C0-F2A0-42D2-A65E-F3800437F52A}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_CustomReference: WideString; safecall;
    procedure Set_CustomReference(const pRetVal: WideString); safecall;
    function Clone: OleVariant; safecall;
    function GetService(const serviceType: _Type): OleVariant; safecall;
    function GetServiceByName(const serviceTypeName: WideString): OleVariant; safecall;
    function ValueEquals(other: OleVariant): WordBool; safecall;
    function Get_NotificationQueueCapacity: Integer; safecall;
    procedure Set_NotificationQueueCapacity(pRetVal: Integer); safecall;
    function Get_NotificationQueueIdleTimeToSleep: Integer; safecall;
    procedure Set_NotificationQueueIdleTimeToSleep(pRetVal: Integer); safecall;
    function Get_QueueNotifications: WordBool; safecall;
    procedure Set_QueueNotifications(pRetVal: WordBool); safecall;
    function Get_AliasProvider: _AliasProvider; safecall;
    procedure _Set_AliasProvider(const pRetVal: _AliasProvider); safecall;
    function Get_InstanceParameters: _EasyUAClientInstanceParameters; safecall;
    procedure _Set_InstanceParameters(const pRetVal: _EasyUAClientInstanceParameters); safecall;
    function Get_Isolated: WordBool; safecall;
    procedure Set_Isolated(pRetVal: WordBool); safecall;
    function Get_IsolatedParameters: _EasyUAClientAdaptableParameters; safecall;
    procedure _Set_IsolatedParameters(const pRetVal: _EasyUAClientAdaptableParameters); safecall;
    function Get_LicenseInfo: _StringObjectDictionary; safecall;
    function Get_PullDataChangeNotificationQueueCapacity: Integer; safecall;
    procedure Set_PullDataChangeNotificationQueueCapacity(pRetVal: Integer); safecall;
    function Get_PullEventNotificationQueueCapacity: Integer; safecall;
    procedure Set_PullEventNotificationQueueCapacity(pRetVal: Integer); safecall;
    function AsAlarmsAndConditionsClient: _EasyUAAlarmsAndConditionsClient; safecall;
    function AsCertificateManagementClient: _EasyUACertificateManagementClient; safecall;
    function AsGlobalDiscoveryClient: _EasyUAGlobalDiscoveryClient; safecall;
    function AsPublishSubscribeClient: _EasyUAPublishSubscribeClient; safecall;
    function BrowseDataNodes(const endpointDescriptorString: WideString; 
                             const nodeDescriptorString: WideString): _UANodeElementCollection; safecall;
    function BrowseDataVariables(const endpointDescriptorString: WideString; 
                                 const nodeDescriptorString: WideString): _UANodeElementCollection; safecall;
    function BrowseEventSources(const endpointDescriptorString: WideString; 
                                const nodeDescriptorString: WideString): _UANodeElementCollection; safecall;
    function BrowseList(const browseNodesArgumentsList: IList): _ElasticVector; safecall;
    function BrowseMethods(const endpointDescriptorString: WideString; 
                           const nodeDescriptorString: WideString): _UANodeElementCollection; safecall;
    function BrowseMultiple(browseNodesArgumentsArray: OleVariant): PSafeArray; safecall;
    function Browse(endpointDescriptor: OleVariant; NodeDescriptor: OleVariant; 
                    BrowseParameters: OleVariant): _UANodeElementCollection; safecall;
    function BrowseNotifiers(const endpointDescriptorString: WideString; 
                             const nodeDescriptorString: WideString): _UANodeElementCollection; safecall;
    function BrowseObjects(const endpointDescriptorString: WideString; 
                           const nodeDescriptorString: WideString): _UANodeElementCollection; safecall;
    function BrowseProperties(const endpointDescriptorString: WideString; 
                              const nodeDescriptorString: WideString): _UANodeElementCollection; safecall;
    function BrowseVariables(const endpointDescriptorString: WideString; 
                             const nodeDescriptorString: WideString): _UANodeElementCollection; safecall;
    function CallMethod(const endpointDescriptorString: WideString; 
                        const objectNodeDescriptorString: WideString; 
                        const methodNodeDescriptorString: WideString; InputArguments: OleVariant; 
                        InputTypeCodes: OleVariant): PSafeArray; safecall;
    function CallMethodList(const callArgumentsList: IList): _ElasticVector; safecall;
    function CallMultipleMethods(callArgumentsArray: OleVariant): PSafeArray; safecall;
    procedure ChangeMonitoredItemSubscription(Handle: Integer; samplingInterval: Integer); safecall;
    procedure ChangeMonitoredItemSubscriptionList(const subscriptionChangeArgumentsList: IList); safecall;
    procedure ChangeMultipleMonitoredItemSubscriptions(subscriptionChangeArgumentsArray: OleVariant); safecall;
    function Discover(discoveryQuery: OleVariant): _UADiscoveryElementCollection; safecall;
    function DiscoverLocalServers(const DiscoveryHost: WideString): _UADiscoveryElementCollection; safecall;
    function DiscoverNetworkServers(ServerCapabilityFilter: OleVariant; 
                                    const DiscoveryHost: WideString): _UADiscoveryElementCollection; safecall;
    function FindLocalApplications(discoveryUriStringArray: OleVariant; 
                                   applicationTypes: UAApplicationTypes): _UADiscoveryElementCollection; safecall;
    function GetMonitoredItemArguments(Handle: Integer): _EasyUAMonitoredItemArguments; safecall;
    function GetMonitoredItemArgumentsDictionary: _EasyUAMonitoredItemArgumentsDictionary; safecall;
    function IsKnownMonitoredItemSubscriptionHandle(Handle: Integer): WordBool; safecall;
    function PullDataChangeNotification(millisecondsTimeout: Integer): _EasyUADataChangeNotificationEventArgs; safecall;
    function PullDataChangeNotificationList(maximumCount: Integer; millisecondsTimeout: Integer): _ElasticVector; safecall;
    function PullEventNotification(millisecondsTimeout: Integer): _EasyUAEventNotificationEventArgs; safecall;
    function PullEventNotificationList(maximumCount: Integer; millisecondsTimeout: Integer): _ElasticVector; safecall;
    function PullMultipleDataChangeNotifications(maximumCount: Integer; millisecondsTimeout: Integer): PSafeArray; safecall;
    function PullMultipleEventNotifications(maximumCount: Integer; millisecondsTimeout: Integer): PSafeArray; safecall;
    function DiscoverGlobalApplications(const gdsEndpointDescriptorString: WideString; 
                                        QueryApplicationsFilter: OleVariant): _UADiscoveryElementCollection; safecall;
    function DiscoverGlobalServers(const gdsEndpointDescriptorString: WideString): _UADiscoveryElementCollection; safecall;
    function Read(const endpointDescriptorString: WideString; const nodeDescriptorString: WideString): _UAAttributeData; safecall;
    function ReadList(const readArgumentsList: IList): _ElasticVector; safecall;
    function ReadMultiple(readArgumentsArray: OleVariant): PSafeArray; safecall;
    function ReadMultipleValues(readArgumentsArray: OleVariant): PSafeArray; safecall;
    function ReadValue(const endpointDescriptorString: WideString; 
                       const nodeDescriptorString: WideString): OleVariant; safecall;
    function ReadValueList(const readArgumentsList: IList): _ElasticVector; safecall;
    procedure Reset; safecall;
    function SubscribeDataChange(const endpointDescriptorString: WideString; 
                                 const nodeDescriptorString: WideString; samplingInterval: Integer): Integer; safecall;
    function SubscribeEvent(const endpointDescriptorString: WideString; 
                            const nodeDescriptorString: WideString; samplingInterval: Integer): Integer; safecall;
    function SubscribeMonitoredItemList(const monitoredItemArgumentsList: IList): _ElasticVector; safecall;
    function SubscribeMultipleMonitoredItems(monitoredItemArgumentsArray: OleVariant): PSafeArray; safecall;
    procedure UnsubscribeAllMonitoredItems; safecall;
    procedure UnsubscribeMonitoredItem(Handle: Integer); safecall;
    procedure UnsubscribeMonitoredItemList(const handlesToUnsubscribeList: IList); safecall;
    procedure UnsubscribeMultipleMonitoredItems(handlesToUnsubscribeArray: OleVariant); safecall;
    procedure Write(const endpointDescriptorString: WideString; 
                    const nodeDescriptorString: WideString; AttributeData: OleVariant); safecall;
    function WriteList(const writeArgumentsList: IList): _ElasticVector; safecall;
    function WriteMultiple(writeArgumentsArray: OleVariant): PSafeArray; safecall;
    function WriteMultipleValues(writeValueArgumentsArray: OleVariant): PSafeArray; safecall;
    procedure WriteValue(const endpointDescriptorString: WideString; 
                         const nodeDescriptorString: WideString; value: OleVariant); safecall;
    function WriteValueList(const writeValueArgumentsList: IList): _ElasticVector; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property CustomReference: WideString read Get_CustomReference write Set_CustomReference;
    property NotificationQueueCapacity: Integer read Get_NotificationQueueCapacity write Set_NotificationQueueCapacity;
    property NotificationQueueIdleTimeToSleep: Integer read Get_NotificationQueueIdleTimeToSleep write Set_NotificationQueueIdleTimeToSleep;
    property QueueNotifications: WordBool read Get_QueueNotifications write Set_QueueNotifications;
    property AliasProvider: _AliasProvider read Get_AliasProvider write _Set_AliasProvider;
    property InstanceParameters: _EasyUAClientInstanceParameters read Get_InstanceParameters write _Set_InstanceParameters;
    property Isolated: WordBool read Get_Isolated write Set_Isolated;
    property IsolatedParameters: _EasyUAClientAdaptableParameters read Get_IsolatedParameters write _Set_IsolatedParameters;
    property LicenseInfo: _StringObjectDictionary read Get_LicenseInfo;
    property PullDataChangeNotificationQueueCapacity: Integer read Get_PullDataChangeNotificationQueueCapacity write Set_PullDataChangeNotificationQueueCapacity;
    property PullEventNotificationQueueCapacity: Integer read Get_PullEventNotificationQueueCapacity write Set_PullEventNotificationQueueCapacity;
  end;

// *********************************************************************//
// DispIntf:  _EasyUAClientDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {910344C0-F2A0-42D2-A65E-F3800437F52A}
// *********************************************************************//
  _EasyUAClientDisp = dispinterface
    ['{910344C0-F2A0-42D2-A65E-F3800437F52A}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    property CustomReference: WideString dispid 1610743813;
    function Clone: OleVariant; dispid 1610743815;
    function GetService(const serviceType: _Type): OleVariant; dispid 1610743816;
    function GetServiceByName(const serviceTypeName: WideString): OleVariant; dispid 1610743817;
    function ValueEquals(other: OleVariant): WordBool; dispid 1610743818;
    property NotificationQueueCapacity: Integer dispid 1610743819;
    property NotificationQueueIdleTimeToSleep: Integer dispid 1610743821;
    property QueueNotifications: WordBool dispid 1610743823;
    property AliasProvider: _AliasProvider dispid 1610743825;
    property InstanceParameters: _EasyUAClientInstanceParameters dispid 1610743827;
    property Isolated: WordBool dispid 1610743829;
    property IsolatedParameters: _EasyUAClientAdaptableParameters dispid 1610743831;
    property LicenseInfo: _StringObjectDictionary readonly dispid 1610743833;
    property PullDataChangeNotificationQueueCapacity: Integer dispid 1610743834;
    property PullEventNotificationQueueCapacity: Integer dispid 1610743836;
    function AsAlarmsAndConditionsClient: _EasyUAAlarmsAndConditionsClient; dispid 1610743838;
    function AsCertificateManagementClient: _EasyUACertificateManagementClient; dispid 1610743839;
    function AsGlobalDiscoveryClient: _EasyUAGlobalDiscoveryClient; dispid 1610743840;
    function AsPublishSubscribeClient: _EasyUAPublishSubscribeClient; dispid 1610743841;
    function BrowseDataNodes(const endpointDescriptorString: WideString; 
                             const nodeDescriptorString: WideString): _UANodeElementCollection; dispid 1610743842;
    function BrowseDataVariables(const endpointDescriptorString: WideString; 
                                 const nodeDescriptorString: WideString): _UANodeElementCollection; dispid 1610743843;
    function BrowseEventSources(const endpointDescriptorString: WideString; 
                                const nodeDescriptorString: WideString): _UANodeElementCollection; dispid 1610743844;
    function BrowseList(const browseNodesArgumentsList: IList): _ElasticVector; dispid 1610743845;
    function BrowseMethods(const endpointDescriptorString: WideString; 
                           const nodeDescriptorString: WideString): _UANodeElementCollection; dispid 1610743846;
    function BrowseMultiple(browseNodesArgumentsArray: OleVariant): {NOT_OLEAUTO(PSafeArray)}OleVariant; dispid 1610743847;
    function Browse(endpointDescriptor: OleVariant; NodeDescriptor: OleVariant; 
                    BrowseParameters: OleVariant): _UANodeElementCollection; dispid 1610743848;
    function BrowseNotifiers(const endpointDescriptorString: WideString; 
                             const nodeDescriptorString: WideString): _UANodeElementCollection; dispid 1610743849;
    function BrowseObjects(const endpointDescriptorString: WideString; 
                           const nodeDescriptorString: WideString): _UANodeElementCollection; dispid 1610743850;
    function BrowseProperties(const endpointDescriptorString: WideString; 
                              const nodeDescriptorString: WideString): _UANodeElementCollection; dispid 1610743851;
    function BrowseVariables(const endpointDescriptorString: WideString; 
                             const nodeDescriptorString: WideString): _UANodeElementCollection; dispid 1610743852;
    function CallMethod(const endpointDescriptorString: WideString; 
                        const objectNodeDescriptorString: WideString; 
                        const methodNodeDescriptorString: WideString; InputArguments: OleVariant; 
                        InputTypeCodes: OleVariant): {NOT_OLEAUTO(PSafeArray)}OleVariant; dispid 1610743853;
    function CallMethodList(const callArgumentsList: IList): _ElasticVector; dispid 1610743854;
    function CallMultipleMethods(callArgumentsArray: OleVariant): {NOT_OLEAUTO(PSafeArray)}OleVariant; dispid 1610743855;
    procedure ChangeMonitoredItemSubscription(Handle: Integer; samplingInterval: Integer); dispid 1610743856;
    procedure ChangeMonitoredItemSubscriptionList(const subscriptionChangeArgumentsList: IList); dispid 1610743857;
    procedure ChangeMultipleMonitoredItemSubscriptions(subscriptionChangeArgumentsArray: OleVariant); dispid 1610743858;
    function Discover(discoveryQuery: OleVariant): _UADiscoveryElementCollection; dispid 1610743859;
    function DiscoverLocalServers(const DiscoveryHost: WideString): _UADiscoveryElementCollection; dispid 1610743860;
    function DiscoverNetworkServers(ServerCapabilityFilter: OleVariant; 
                                    const DiscoveryHost: WideString): _UADiscoveryElementCollection; dispid 1610743861;
    function FindLocalApplications(discoveryUriStringArray: OleVariant; 
                                   applicationTypes: UAApplicationTypes): _UADiscoveryElementCollection; dispid 1610743862;
    function GetMonitoredItemArguments(Handle: Integer): _EasyUAMonitoredItemArguments; dispid 1610743863;
    function GetMonitoredItemArgumentsDictionary: _EasyUAMonitoredItemArgumentsDictionary; dispid 1610743864;
    function IsKnownMonitoredItemSubscriptionHandle(Handle: Integer): WordBool; dispid 1610743865;
    function PullDataChangeNotification(millisecondsTimeout: Integer): _EasyUADataChangeNotificationEventArgs; dispid 1610743866;
    function PullDataChangeNotificationList(maximumCount: Integer; millisecondsTimeout: Integer): _ElasticVector; dispid 1610743867;
    function PullEventNotification(millisecondsTimeout: Integer): _EasyUAEventNotificationEventArgs; dispid 1610743868;
    function PullEventNotificationList(maximumCount: Integer; millisecondsTimeout: Integer): _ElasticVector; dispid 1610743869;
    function PullMultipleDataChangeNotifications(maximumCount: Integer; millisecondsTimeout: Integer): {NOT_OLEAUTO(PSafeArray)}OleVariant; dispid 1610743870;
    function PullMultipleEventNotifications(maximumCount: Integer; millisecondsTimeout: Integer): {NOT_OLEAUTO(PSafeArray)}OleVariant; dispid 1610743871;
    function DiscoverGlobalApplications(const gdsEndpointDescriptorString: WideString; 
                                        QueryApplicationsFilter: OleVariant): _UADiscoveryElementCollection; dispid 1610743872;
    function DiscoverGlobalServers(const gdsEndpointDescriptorString: WideString): _UADiscoveryElementCollection; dispid 1610743873;
    function Read(const endpointDescriptorString: WideString; const nodeDescriptorString: WideString): _UAAttributeData; dispid 1610743874;
    function ReadList(const readArgumentsList: IList): _ElasticVector; dispid 1610743875;
    function ReadMultiple(readArgumentsArray: OleVariant): {NOT_OLEAUTO(PSafeArray)}OleVariant; dispid 1610743876;
    function ReadMultipleValues(readArgumentsArray: OleVariant): {NOT_OLEAUTO(PSafeArray)}OleVariant; dispid 1610743877;
    function ReadValue(const endpointDescriptorString: WideString; 
                       const nodeDescriptorString: WideString): OleVariant; dispid 1610743878;
    function ReadValueList(const readArgumentsList: IList): _ElasticVector; dispid 1610743879;
    procedure Reset; dispid 1610743880;
    function SubscribeDataChange(const endpointDescriptorString: WideString; 
                                 const nodeDescriptorString: WideString; samplingInterval: Integer): Integer; dispid 1610743881;
    function SubscribeEvent(const endpointDescriptorString: WideString; 
                            const nodeDescriptorString: WideString; samplingInterval: Integer): Integer; dispid 1610743882;
    function SubscribeMonitoredItemList(const monitoredItemArgumentsList: IList): _ElasticVector; dispid 1610743883;
    function SubscribeMultipleMonitoredItems(monitoredItemArgumentsArray: OleVariant): {NOT_OLEAUTO(PSafeArray)}OleVariant; dispid 1610743884;
    procedure UnsubscribeAllMonitoredItems; dispid 1610743885;
    procedure UnsubscribeMonitoredItem(Handle: Integer); dispid 1610743886;
    procedure UnsubscribeMonitoredItemList(const handlesToUnsubscribeList: IList); dispid 1610743887;
    procedure UnsubscribeMultipleMonitoredItems(handlesToUnsubscribeArray: OleVariant); dispid 1610743888;
    procedure Write(const endpointDescriptorString: WideString; 
                    const nodeDescriptorString: WideString; AttributeData: OleVariant); dispid 1610743889;
    function WriteList(const writeArgumentsList: IList): _ElasticVector; dispid 1610743890;
    function WriteMultiple(writeArgumentsArray: OleVariant): {NOT_OLEAUTO(PSafeArray)}OleVariant; dispid 1610743891;
    function WriteMultipleValues(writeValueArgumentsArray: OleVariant): {NOT_OLEAUTO(PSafeArray)}OleVariant; dispid 1610743892;
    procedure WriteValue(const endpointDescriptorString: WideString; 
                         const nodeDescriptorString: WideString; value: OleVariant); dispid 1610743893;
    function WriteValueList(const writeValueArgumentsList: IList): _ElasticVector; dispid 1610743894;
  end;

// *********************************************************************//
// Interface: _EasyUAClientManagement
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A1C5264B-D40E-4AB2-8A12-3AC09A4E947D}
// *********************************************************************//
  _EasyUAClientManagement = interface(IDispatch)
    ['{A1C5264B-D40E-4AB2-8A12-3AC09A4E947D}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_CustomReference: WideString; safecall;
    procedure Set_CustomReference(const pRetVal: WideString); safecall;
    function Clone: OleVariant; safecall;
    function GetService(const serviceType: _Type): OleVariant; safecall;
    function GetServiceByName(const serviceTypeName: WideString): OleVariant; safecall;
    function ValueEquals(other: OleVariant): WordBool; safecall;
    function Get_AdaptableParameters: _EasyUAClientAdaptableParameters; safecall;
    procedure _Set_AdaptableParameters(const pRetVal: _EasyUAClientAdaptableParameters); safecall;
    function Get_SharedInstance: _EasyUAClient; safecall;
    function Get_SharedParameters: _EasyUAClientSharedParameters; safecall;
    procedure _Set_SharedParameters(const pRetVal: _EasyUAClientSharedParameters); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property CustomReference: WideString read Get_CustomReference write Set_CustomReference;
    property AdaptableParameters: _EasyUAClientAdaptableParameters read Get_AdaptableParameters write _Set_AdaptableParameters;
    property SharedInstance: _EasyUAClient read Get_SharedInstance;
    property SharedParameters: _EasyUAClientSharedParameters read Get_SharedParameters write _Set_SharedParameters;
  end;

// *********************************************************************//
// DispIntf:  _EasyUAClientManagementDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A1C5264B-D40E-4AB2-8A12-3AC09A4E947D}
// *********************************************************************//
  _EasyUAClientManagementDisp = dispinterface
    ['{A1C5264B-D40E-4AB2-8A12-3AC09A4E947D}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    property CustomReference: WideString dispid 1610743813;
    function Clone: OleVariant; dispid 1610743815;
    function GetService(const serviceType: _Type): OleVariant; dispid 1610743816;
    function GetServiceByName(const serviceTypeName: WideString): OleVariant; dispid 1610743817;
    function ValueEquals(other: OleVariant): WordBool; dispid 1610743818;
    property AdaptableParameters: _EasyUAClientAdaptableParameters dispid 1610743819;
    property SharedInstance: _EasyUAClient readonly dispid 1610743821;
    property SharedParameters: _EasyUAClientSharedParameters dispid 1610743822;
  end;

// *********************************************************************//
// Interface: _UAAttributeData
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BD5F0FD1-2C0A-4735-9A4C-3321ED35C123}
// *********************************************************************//
  _UAAttributeData = interface(IDispatch)
    ['{BD5F0FD1-2C0A-4735-9A4C-3321ED35C123}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_ToString_2(const format: WideString; const formatProvider: IFormatProvider): WideString; safecall;
    function Get_ToString_3(const format: WideString): WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_HasBadStatus: WordBool; safecall;
    function Get_HasGoodStatus: WordBool; safecall;
    function Get_HasServerTimestamp: WordBool; safecall;
    function Get_HasSourceTimestamp: WordBool; safecall;
    function Get_HasUncertainStatus: WordBool; safecall;
    function Get_HasValue: WordBool; safecall;
    function Get_ServerPicoseconds: Integer; safecall;
    procedure Set_ServerPicoseconds(pRetVal: Integer); safecall;
    function Get_ServerTimestamp: TDateTime; safecall;
    procedure Set_ServerTimestamp(pRetVal: TDateTime); safecall;
    function Get_ServerTimestampDouble: Double; safecall;
    procedure Set_ServerTimestampDouble(pRetVal: Double); safecall;
    function Get_ServerTimestampLocal: TDateTime; safecall;
    procedure Set_ServerTimestampLocal(pRetVal: TDateTime); safecall;
    function Get_ServerTimestampLocalDouble: Double; safecall;
    procedure Set_ServerTimestampLocalDouble(pRetVal: Double); safecall;
    function Get_SourcePicoseconds: Integer; safecall;
    procedure Set_SourcePicoseconds(pRetVal: Integer); safecall;
    function Get_SourceTimestamp: TDateTime; safecall;
    procedure Set_SourceTimestamp(pRetVal: TDateTime); safecall;
    function Get_SourceTimestampDouble: Double; safecall;
    procedure Set_SourceTimestampDouble(pRetVal: Double); safecall;
    function Get_SourceTimestampLocal: TDateTime; safecall;
    procedure Set_SourceTimestampLocal(pRetVal: TDateTime); safecall;
    function Get_SourceTimestampLocalDouble: Double; safecall;
    procedure Set_SourceTimestampLocalDouble(pRetVal: Double); safecall;
    function Get_StatusCode: _UAStatusCode; safecall;
    procedure _Set_StatusCode(const pRetVal: _UAStatusCode); safecall;
    function Get_StatusInfo: StatusInfo; safecall;
    function Get_value: OleVariant; safecall;
    procedure _Set_value(pRetVal: OleVariant); safecall;
    function Get_ValueType: _Type; safecall;
    function Get_ValueTypeName: WideString; safecall;
    function DisplayValue: WideString; safecall;
    procedure SetValue(value: OleVariant); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property ToString_2[const format: WideString; const formatProvider: IFormatProvider]: WideString read Get_ToString_2;
    property ToString_3[const format: WideString]: WideString read Get_ToString_3;
    property HasBadStatus: WordBool read Get_HasBadStatus;
    property HasGoodStatus: WordBool read Get_HasGoodStatus;
    property HasServerTimestamp: WordBool read Get_HasServerTimestamp;
    property HasSourceTimestamp: WordBool read Get_HasSourceTimestamp;
    property HasUncertainStatus: WordBool read Get_HasUncertainStatus;
    property HasValue: WordBool read Get_HasValue;
    property ServerPicoseconds: Integer read Get_ServerPicoseconds write Set_ServerPicoseconds;
    property ServerTimestamp: TDateTime read Get_ServerTimestamp write Set_ServerTimestamp;
    property ServerTimestampDouble: Double read Get_ServerTimestampDouble write Set_ServerTimestampDouble;
    property ServerTimestampLocal: TDateTime read Get_ServerTimestampLocal write Set_ServerTimestampLocal;
    property ServerTimestampLocalDouble: Double read Get_ServerTimestampLocalDouble write Set_ServerTimestampLocalDouble;
    property SourcePicoseconds: Integer read Get_SourcePicoseconds write Set_SourcePicoseconds;
    property SourceTimestamp: TDateTime read Get_SourceTimestamp write Set_SourceTimestamp;
    property SourceTimestampDouble: Double read Get_SourceTimestampDouble write Set_SourceTimestampDouble;
    property SourceTimestampLocal: TDateTime read Get_SourceTimestampLocal write Set_SourceTimestampLocal;
    property SourceTimestampLocalDouble: Double read Get_SourceTimestampLocalDouble write Set_SourceTimestampLocalDouble;
    property StatusCode: _UAStatusCode read Get_StatusCode write _Set_StatusCode;
    property StatusInfo: StatusInfo read Get_StatusInfo;
    property value: OleVariant read Get_value write _Set_value;
    property ValueType: _Type read Get_ValueType;
    property ValueTypeName: WideString read Get_ValueTypeName;
  end;

// *********************************************************************//
// DispIntf:  _UAAttributeDataDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BD5F0FD1-2C0A-4735-9A4C-3321ED35C123}
// *********************************************************************//
  _UAAttributeDataDisp = dispinterface
    ['{BD5F0FD1-2C0A-4735-9A4C-3321ED35C123}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    property ToString_2[const format: WideString; const formatProvider: IFormatProvider]: WideString readonly dispid 1610743813;
    property ToString_3[const format: WideString]: WideString readonly dispid 1610743814;
    function Clone: OleVariant; dispid 1610743815;
    property HasBadStatus: WordBool readonly dispid 1610743816;
    property HasGoodStatus: WordBool readonly dispid 1610743817;
    property HasServerTimestamp: WordBool readonly dispid 1610743818;
    property HasSourceTimestamp: WordBool readonly dispid 1610743819;
    property HasUncertainStatus: WordBool readonly dispid 1610743820;
    property HasValue: WordBool readonly dispid 1610743821;
    property ServerPicoseconds: Integer dispid 1610743822;
    property ServerTimestamp: TDateTime dispid 1610743824;
    property ServerTimestampDouble: Double dispid 1610743826;
    property ServerTimestampLocal: TDateTime dispid 1610743828;
    property ServerTimestampLocalDouble: Double dispid 1610743830;
    property SourcePicoseconds: Integer dispid 1610743832;
    property SourceTimestamp: TDateTime dispid 1610743834;
    property SourceTimestampDouble: Double dispid 1610743836;
    property SourceTimestampLocal: TDateTime dispid 1610743838;
    property SourceTimestampLocalDouble: Double dispid 1610743840;
    property StatusCode: _UAStatusCode dispid 1610743842;
    property StatusInfo: StatusInfo readonly dispid 1610743844;
    property value: OleVariant dispid 1610743845;
    property ValueType: _Type readonly dispid 1610743847;
    property ValueTypeName: WideString readonly dispid 1610743848;
    function DisplayValue: WideString; dispid 1610743849;
    procedure SetValue(value: OleVariant); dispid 1610743850;
  end;

// *********************************************************************//
// Interface: _UACallServiceException
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5318A0D0-CBFE-407F-9ED8-49814B480370}
// *********************************************************************//
  _UACallServiceException = interface(IDispatch)
    ['{5318A0D0-CBFE-407F-9ED8-49814B480370}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_Message: WideString; safecall;
    function Get_StackTrace: WideString; safecall;
    function Get_HelpLink: WideString; safecall;
    procedure Set_HelpLink(const pRetVal: WideString); safecall;
    function Get_Source: WideString; safecall;
    procedure Set_Source(const pRetVal: WideString); safecall;
    function Get_InnerException: _Exception; safecall;
    function Get_TargetSite: _MethodBase; safecall;
    function GetBaseException: _Exception; safecall;
    procedure GetObjectData(const info: _SerializationInfo; context: StreamingContext); safecall;
    function Get_Data: _Dictionary; safecall;
    function Get_HResult: Integer; safecall;
    function Get_ErrorId: WideString; safecall;
    function Get_InternalCode: Integer; safecall;
    function Get_ServiceResult: _UAServiceResult; safecall;
    function Get_ServiceTargetSite: _MethodBase; safecall;
    function Get_InputArgumentExceptionArray: PSafeArray; safecall;
    procedure Set_InputArgumentExceptionArray(pRetVal: PSafeArray); safecall;
    procedure SetInputArgumentExceptionArray(InputArgumentExceptionArray: OleVariant); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Message: WideString read Get_Message;
    property StackTrace: WideString read Get_StackTrace;
    property HelpLink: WideString read Get_HelpLink write Set_HelpLink;
    property Source: WideString read Get_Source write Set_Source;
    property InnerException: _Exception read Get_InnerException;
    property TargetSite: _MethodBase read Get_TargetSite;
    property Data: _Dictionary read Get_Data;
    property HResult: Integer read Get_HResult;
    property ErrorId: WideString read Get_ErrorId;
    property InternalCode: Integer read Get_InternalCode;
    property ServiceResult: _UAServiceResult read Get_ServiceResult;
    property ServiceTargetSite: _MethodBase read Get_ServiceTargetSite;
    property InputArgumentExceptionArray: PSafeArray read Get_InputArgumentExceptionArray write Set_InputArgumentExceptionArray;
  end;

// *********************************************************************//
// DispIntf:  _UACallServiceExceptionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5318A0D0-CBFE-407F-9ED8-49814B480370}
// *********************************************************************//
  _UACallServiceExceptionDisp = dispinterface
    ['{5318A0D0-CBFE-407F-9ED8-49814B480370}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    property Message: WideString readonly dispid 1610743813;
    property StackTrace: WideString readonly dispid 1610743814;
    property HelpLink: WideString dispid 1610743815;
    property Source: WideString dispid 1610743817;
    property InnerException: _Exception readonly dispid 1610743819;
    property TargetSite: _MethodBase readonly dispid 1610743820;
    function GetBaseException: _Exception; dispid 1610743821;
    procedure GetObjectData(const info: _SerializationInfo; 
                            context: {NOT_OLEAUTO(StreamingContext)}OleVariant); dispid 1610743822;
    property Data: _Dictionary readonly dispid 1610743823;
    property HResult: Integer readonly dispid 1610743824;
    property ErrorId: WideString readonly dispid 1610743825;
    property InternalCode: Integer readonly dispid 1610743826;
    property ServiceResult: _UAServiceResult readonly dispid 1610743827;
    property ServiceTargetSite: _MethodBase readonly dispid 1610743828;
    property InputArgumentExceptionArray: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 1610743829;
    procedure SetInputArgumentExceptionArray(InputArgumentExceptionArray: OleVariant); dispid 1610743831;
  end;

// *********************************************************************//
// Interface: _UAMethodOutputException
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {98B7AE16-7B8E-4868-934A-B5BB38AD0485}
// *********************************************************************//
  _UAMethodOutputException = interface(IDispatch)
    ['{98B7AE16-7B8E-4868-934A-B5BB38AD0485}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_Message: WideString; safecall;
    function Get_StackTrace: WideString; safecall;
    function Get_HelpLink: WideString; safecall;
    procedure Set_HelpLink(const pRetVal: WideString); safecall;
    function Get_Source: WideString; safecall;
    procedure Set_Source(const pRetVal: WideString); safecall;
    function Get_InnerException: _Exception; safecall;
    function Get_TargetSite: _MethodBase; safecall;
    function GetBaseException: _Exception; safecall;
    procedure GetObjectData(const info: _SerializationInfo; context: StreamingContext); safecall;
    function Get_Data: _Dictionary; safecall;
    function Get_HResult: Integer; safecall;
    function Get_MethodNodeId: _UANodeId; safecall;
    function Get_ArgumentIndex: Integer; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Message: WideString read Get_Message;
    property StackTrace: WideString read Get_StackTrace;
    property HelpLink: WideString read Get_HelpLink write Set_HelpLink;
    property Source: WideString read Get_Source write Set_Source;
    property InnerException: _Exception read Get_InnerException;
    property TargetSite: _MethodBase read Get_TargetSite;
    property Data: _Dictionary read Get_Data;
    property HResult: Integer read Get_HResult;
    property MethodNodeId: _UANodeId read Get_MethodNodeId;
    property ArgumentIndex: Integer read Get_ArgumentIndex;
  end;

// *********************************************************************//
// DispIntf:  _UAMethodOutputExceptionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {98B7AE16-7B8E-4868-934A-B5BB38AD0485}
// *********************************************************************//
  _UAMethodOutputExceptionDisp = dispinterface
    ['{98B7AE16-7B8E-4868-934A-B5BB38AD0485}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    property Message: WideString readonly dispid 1610743813;
    property StackTrace: WideString readonly dispid 1610743814;
    property HelpLink: WideString dispid 1610743815;
    property Source: WideString dispid 1610743817;
    property InnerException: _Exception readonly dispid 1610743819;
    property TargetSite: _MethodBase readonly dispid 1610743820;
    function GetBaseException: _Exception; dispid 1610743821;
    procedure GetObjectData(const info: _SerializationInfo; 
                            context: {NOT_OLEAUTO(StreamingContext)}OleVariant); dispid 1610743822;
    property Data: _Dictionary readonly dispid 1610743823;
    property HResult: Integer readonly dispid 1610743824;
    property MethodNodeId: _UANodeId readonly dispid 1610743825;
    property ArgumentIndex: Integer readonly dispid 1610743826;
  end;

// *********************************************************************//
// Interface: _UAGenericObject
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {51B9880D-7CA2-4532-9099-22AB2D463604}
// *********************************************************************//
  _UAGenericObject = interface(IDispatch)
    ['{51B9880D-7CA2-4532-9099-22AB2D463604}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_DataTypeId: _UAModelNodeDescriptor; safecall;
    procedure _Set_DataTypeId(const pRetVal: _UAModelNodeDescriptor); safecall;
    function Get_genericData: _GenericData; safecall;
    procedure _Set_genericData(const pRetVal: _GenericData); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DataTypeId: _UAModelNodeDescriptor read Get_DataTypeId write _Set_DataTypeId;
    property genericData: _GenericData read Get_genericData write _Set_genericData;
  end;

// *********************************************************************//
// DispIntf:  _UAGenericObjectDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {51B9880D-7CA2-4532-9099-22AB2D463604}
// *********************************************************************//
  _UAGenericObjectDisp = dispinterface
    ['{51B9880D-7CA2-4532-9099-22AB2D463604}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property DataTypeId: _UAModelNodeDescriptor dispid 1610743814;
    property genericData: _GenericData dispid 1610743816;
  end;

// *********************************************************************//
// Interface: _UANodeBrowseFilter
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {89938C70-AB6D-4E26-9208-83A1F5E8A4AB}
// *********************************************************************//
  _UANodeBrowseFilter = interface(IDispatch)
    ['{89938C70-AB6D-4E26-9208-83A1F5E8A4AB}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_IncludeProperties: WordBool; safecall;
    procedure Set_IncludeProperties(pRetVal: WordBool); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property IncludeProperties: WordBool read Get_IncludeProperties write Set_IncludeProperties;
  end;

// *********************************************************************//
// DispIntf:  _UANodeBrowseFilterDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {89938C70-AB6D-4E26-9208-83A1F5E8A4AB}
// *********************************************************************//
  _UANodeBrowseFilterDisp = dispinterface
    ['{89938C70-AB6D-4E26-9208-83A1F5E8A4AB}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property IncludeProperties: WordBool dispid 1610743816;
  end;

// *********************************************************************//
// Interface: _UACertificateTypeElementCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BAA54122-5071-4DF4-8CA5-1CF17857C24B}
// *********************************************************************//
  _UACertificateTypeElementCollection = interface(IDispatch)
    ['{BAA54122-5071-4DF4-8CA5-1CF17857C24B}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_Item(key: OleVariant): _UACertificateTypeElement; safecall;
    function Get_Count: Integer; safecall;
    function GetEnumerator: IEnumVARIANT; safecall;
    procedure Add(Item: OleVariant); safecall;
    procedure Clear; safecall;
    function Contains(Item: OleVariant): WordBool; safecall;
    function IndexOf(Item: OleVariant): Integer; safecall;
    function Remove(key: OleVariant): WordBool; safecall;
    procedure RemoveAt(index: Integer); safecall;
    function ToList: _ElasticVector; safecall;
    function TryGetValue(key: OleVariant; out Item: OleVariant): WordBool; safecall;
    function Clone: OleVariant; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Item[key: OleVariant]: _UACertificateTypeElement read Get_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  _UACertificateTypeElementCollectionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BAA54122-5071-4DF4-8CA5-1CF17857C24B}
// *********************************************************************//
  _UACertificateTypeElementCollectionDisp = dispinterface
    ['{BAA54122-5071-4DF4-8CA5-1CF17857C24B}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 1610743812;
    property Item[key: OleVariant]: _UACertificateTypeElement readonly dispid 0; default;
    property Count: Integer readonly dispid 1610743814;
    function GetEnumerator: IEnumVARIANT; dispid -4;
    procedure Add(Item: OleVariant); dispid 1610743816;
    procedure Clear; dispid 1610743817;
    function Contains(Item: OleVariant): WordBool; dispid 1610743818;
    function IndexOf(Item: OleVariant): Integer; dispid 1610743819;
    function Remove(key: OleVariant): WordBool; dispid 1610743820;
    procedure RemoveAt(index: Integer); dispid 1610743821;
    function ToList: _ElasticVector; dispid 1610743822;
    function TryGetValue(key: OleVariant; out Item: OleVariant): WordBool; dispid 1610743823;
    function Clone: OleVariant; dispid 1610743824;
  end;

// *********************************************************************//
// Interface: _UACertificateRequestParameters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2D9D29A3-02C1-4643-A9FE-9B665CCEF2E3}
// *********************************************************************//
  _UACertificateRequestParameters = interface(IDispatch)
    ['{2D9D29A3-02C1-4643-A9FE-9B665CCEF2E3}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    function Get_certificateTypeId: _UANodeId; safecall;
    procedure _Set_certificateTypeId(const pRetVal: _UANodeId); safecall;
    function Get_FilePrivateKeyPassword: WideString; safecall;
    procedure Set_FilePrivateKeyPassword(const pRetVal: WideString); safecall;
    function Get_gdsEndpointDescriptor: _UAEndpointDescriptor; safecall;
    procedure _Set_gdsEndpointDescriptor(const pRetVal: _UAEndpointDescriptor); safecall;
    function Get_PrivateKeyFileName: WideString; safecall;
    procedure Set_PrivateKeyFileName(const pRetVal: WideString); safecall;
    function Get_privateKeyFormat: WideString; safecall;
    procedure Set_privateKeyFormat(const pRetVal: WideString); safecall;
    function Get_TryReuseExistingPrivateKey: WordBool; safecall;
    procedure Set_TryReuseExistingPrivateKey(pRetVal: WordBool); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property certificateTypeId: _UANodeId read Get_certificateTypeId write _Set_certificateTypeId;
    property FilePrivateKeyPassword: WideString read Get_FilePrivateKeyPassword write Set_FilePrivateKeyPassword;
    property gdsEndpointDescriptor: _UAEndpointDescriptor read Get_gdsEndpointDescriptor write _Set_gdsEndpointDescriptor;
    property PrivateKeyFileName: WideString read Get_PrivateKeyFileName write Set_PrivateKeyFileName;
    property privateKeyFormat: WideString read Get_privateKeyFormat write Set_privateKeyFormat;
    property TryReuseExistingPrivateKey: WordBool read Get_TryReuseExistingPrivateKey write Set_TryReuseExistingPrivateKey;
  end;

// *********************************************************************//
// DispIntf:  _UACertificateRequestParametersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2D9D29A3-02C1-4643-A9FE-9B665CCEF2E3}
// *********************************************************************//
  _UACertificateRequestParametersDisp = dispinterface
    ['{2D9D29A3-02C1-4643-A9FE-9B665CCEF2E3}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property StandardName: WideString dispid 1610743814;
    property certificateTypeId: _UANodeId dispid 1610743816;
    property FilePrivateKeyPassword: WideString dispid 1610743818;
    property gdsEndpointDescriptor: _UAEndpointDescriptor dispid 1610743820;
    property PrivateKeyFileName: WideString dispid 1610743822;
    property privateKeyFormat: WideString dispid 1610743824;
    property TryReuseExistingPrivateKey: WordBool dispid 1610743826;
  end;

// *********************************************************************//
// Interface: _UACertificateTypeElement
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A229E427-67FC-4572-8F9A-8E3669275894}
// *********************************************************************//
  _UACertificateTypeElement = interface(IDispatch)
    ['{A229E427-67FC-4572-8F9A-8E3669275894}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_BaseCertificateTypeId: _UANodeId; safecall;
    procedure _Set_BaseCertificateTypeId(const pRetVal: _UANodeId); safecall;
    function Get_certificateTypeId: _UANodeId; safecall;
    procedure _Set_certificateTypeId(const pRetVal: _UANodeId); safecall;
    function Get_DisplayName: WideString; safecall;
    procedure Set_DisplayName(const pRetVal: WideString); safecall;
    function Get_DisplayText: WideString; safecall;
    function Get_IsAbstract: WordBool; safecall;
    procedure Set_IsAbstract(pRetVal: WordBool); safecall;
    function Get_MinimumRssKeySize: Integer; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property BaseCertificateTypeId: _UANodeId read Get_BaseCertificateTypeId write _Set_BaseCertificateTypeId;
    property certificateTypeId: _UANodeId read Get_certificateTypeId write _Set_certificateTypeId;
    property DisplayName: WideString read Get_DisplayName write Set_DisplayName;
    property DisplayText: WideString read Get_DisplayText;
    property IsAbstract: WordBool read Get_IsAbstract write Set_IsAbstract;
    property MinimumRssKeySize: Integer read Get_MinimumRssKeySize;
  end;

// *********************************************************************//
// DispIntf:  _UACertificateTypeElementDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A229E427-67FC-4572-8F9A-8E3669275894}
// *********************************************************************//
  _UACertificateTypeElementDisp = dispinterface
    ['{A229E427-67FC-4572-8F9A-8E3669275894}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property BaseCertificateTypeId: _UANodeId dispid 1610743814;
    property certificateTypeId: _UANodeId dispid 1610743816;
    property DisplayName: WideString dispid 1610743818;
    property DisplayText: WideString readonly dispid 1610743820;
    property IsAbstract: WordBool dispid 1610743821;
    property MinimumRssKeySize: Integer readonly dispid 1610743823;
  end;

// *********************************************************************//
// Interface: _UACertificateArguments
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {CB255BA0-8B5C-4BBE-9A86-98FF964C36A5}
// *********************************************************************//
  _UACertificateArguments = interface(IDispatch)
    ['{CB255BA0-8B5C-4BBE-9A86-98FF964C36A5}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_State: OleVariant; safecall;
    procedure _Set_State(pRetVal: OleVariant); safecall;
    function MemberwiseClone: _OperationArguments; safecall;
    procedure SetState(State: OleVariant); safecall;
    function Get_certificateSubId: WideString; safecall;
    procedure Set_certificateSubId(const pRetVal: WideString); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property State: OleVariant read Get_State write _Set_State;
    property certificateSubId: WideString read Get_certificateSubId write Set_certificateSubId;
  end;

// *********************************************************************//
// DispIntf:  _UACertificateArgumentsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {CB255BA0-8B5C-4BBE-9A86-98FF964C36A5}
// *********************************************************************//
  _UACertificateArgumentsDisp = dispinterface
    ['{CB255BA0-8B5C-4BBE-9A86-98FF964C36A5}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property State: OleVariant dispid 1610743814;
    function MemberwiseClone: _OperationArguments; dispid 1610743816;
    procedure SetState(State: OleVariant); dispid 1610743817;
    property certificateSubId: WideString dispid 1610743818;
  end;

// *********************************************************************//
// Interface: _UAValidateCertificateArguments
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {52EA37D5-94AA-4EB9-9159-AF32E5D3C766}
// *********************************************************************//
  _UAValidateCertificateArguments = interface(IDispatch)
    ['{52EA37D5-94AA-4EB9-9159-AF32E5D3C766}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_State: OleVariant; safecall;
    procedure _Set_State(pRetVal: OleVariant); safecall;
    function MemberwiseClone: _OperationArguments; safecall;
    procedure SetState(State: OleVariant); safecall;
    function Get_certificateSubId: WideString; safecall;
    procedure Set_certificateSubId(const pRetVal: WideString); safecall;
    function Get_Parameters: _CertificateGenerationParameters; safecall;
    procedure _Set_Parameters(const pRetVal: _CertificateGenerationParameters); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property State: OleVariant read Get_State write _Set_State;
    property certificateSubId: WideString read Get_certificateSubId write Set_certificateSubId;
    property Parameters: _CertificateGenerationParameters read Get_Parameters write _Set_Parameters;
  end;

// *********************************************************************//
// DispIntf:  _UAValidateCertificateArgumentsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {52EA37D5-94AA-4EB9-9159-AF32E5D3C766}
// *********************************************************************//
  _UAValidateCertificateArgumentsDisp = dispinterface
    ['{52EA37D5-94AA-4EB9-9159-AF32E5D3C766}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property State: OleVariant dispid 1610743814;
    function MemberwiseClone: _OperationArguments; dispid 1610743816;
    procedure SetState(State: OleVariant); dispid 1610743817;
    property certificateSubId: WideString dispid 1610743818;
    property Parameters: _CertificateGenerationParameters dispid 1610743820;
  end;

// *********************************************************************//
// Interface: _UAExportCertificateArguments
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {256110C5-CB3E-4FE6-9C0D-BBE67C1FE56D}
// *********************************************************************//
  _UAExportCertificateArguments = interface(IDispatch)
    ['{256110C5-CB3E-4FE6-9C0D-BBE67C1FE56D}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_State: OleVariant; safecall;
    procedure _Set_State(pRetVal: OleVariant); safecall;
    function MemberwiseClone: _OperationArguments; safecall;
    procedure SetState(State: OleVariant); safecall;
    function Get_certificateSubId: WideString; safecall;
    procedure Set_certificateSubId(const pRetVal: WideString); safecall;
    function Get_filePath: WideString; safecall;
    procedure Set_filePath(const pRetVal: WideString); safecall;
    function Get_newPrivateKeyPassword: WideString; safecall;
    procedure Set_newPrivateKeyPassword(const pRetVal: WideString); safecall;
    function Get_PkiFileFormat: PkiFileFormat; safecall;
    procedure Set_PkiFileFormat(pRetVal: PkiFileFormat); safecall;
    function Get_WithPrivateKey: WordBool; safecall;
    procedure Set_WithPrivateKey(pRetVal: WordBool); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property State: OleVariant read Get_State write _Set_State;
    property certificateSubId: WideString read Get_certificateSubId write Set_certificateSubId;
    property filePath: WideString read Get_filePath write Set_filePath;
    property newPrivateKeyPassword: WideString read Get_newPrivateKeyPassword write Set_newPrivateKeyPassword;
    property PkiFileFormat: PkiFileFormat read Get_PkiFileFormat write Set_PkiFileFormat;
    property WithPrivateKey: WordBool read Get_WithPrivateKey write Set_WithPrivateKey;
  end;

// *********************************************************************//
// DispIntf:  _UAExportCertificateArgumentsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {256110C5-CB3E-4FE6-9C0D-BBE67C1FE56D}
// *********************************************************************//
  _UAExportCertificateArgumentsDisp = dispinterface
    ['{256110C5-CB3E-4FE6-9C0D-BBE67C1FE56D}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property State: OleVariant dispid 1610743814;
    function MemberwiseClone: _OperationArguments; dispid 1610743816;
    procedure SetState(State: OleVariant); dispid 1610743817;
    property certificateSubId: WideString dispid 1610743818;
    property filePath: WideString dispid 1610743820;
    property newPrivateKeyPassword: WideString dispid 1610743822;
    property PkiFileFormat: PkiFileFormat dispid 1610743824;
    property WithPrivateKey: WordBool dispid 1610743826;
  end;

// *********************************************************************//
// Interface: _UAIngestCertificateArguments
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F863E242-D441-426F-89A1-E74949181DB0}
// *********************************************************************//
  _UAIngestCertificateArguments = interface(IDispatch)
    ['{F863E242-D441-426F-89A1-E74949181DB0}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_State: OleVariant; safecall;
    procedure _Set_State(pRetVal: OleVariant); safecall;
    function MemberwiseClone: _OperationArguments; safecall;
    procedure SetState(State: OleVariant); safecall;
    function Get_certificateSubId: WideString; safecall;
    procedure Set_certificateSubId(const pRetVal: WideString); safecall;
    function Get_newPrivateKeyPassword: WideString; safecall;
    procedure Set_newPrivateKeyPassword(const pRetVal: WideString); safecall;
    function Get_SetNewPassword: WordBool; safecall;
    procedure Set_SetNewPassword(pRetVal: WordBool); safecall;
    function Get_updateTrustedPeerCertificates: WordBool; safecall;
    procedure Set_updateTrustedPeerCertificates(pRetVal: WordBool); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property State: OleVariant read Get_State write _Set_State;
    property certificateSubId: WideString read Get_certificateSubId write Set_certificateSubId;
    property newPrivateKeyPassword: WideString read Get_newPrivateKeyPassword write Set_newPrivateKeyPassword;
    property SetNewPassword: WordBool read Get_SetNewPassword write Set_SetNewPassword;
    property updateTrustedPeerCertificates: WordBool read Get_updateTrustedPeerCertificates write Set_updateTrustedPeerCertificates;
  end;

// *********************************************************************//
// DispIntf:  _UAIngestCertificateArgumentsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F863E242-D441-426F-89A1-E74949181DB0}
// *********************************************************************//
  _UAIngestCertificateArgumentsDisp = dispinterface
    ['{F863E242-D441-426F-89A1-E74949181DB0}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property State: OleVariant dispid 1610743814;
    function MemberwiseClone: _OperationArguments; dispid 1610743816;
    procedure SetState(State: OleVariant); dispid 1610743817;
    property certificateSubId: WideString dispid 1610743818;
    property newPrivateKeyPassword: WideString dispid 1610743820;
    property SetNewPassword: WordBool dispid 1610743822;
    property updateTrustedPeerCertificates: WordBool dispid 1610743824;
  end;

// *********************************************************************//
// Interface: _UAObtainCertificateArguments
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DED308CF-6087-4FA9-ABE7-4884279C1576}
// *********************************************************************//
  _UAObtainCertificateArguments = interface(IDispatch)
    ['{DED308CF-6087-4FA9-ABE7-4884279C1576}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_State: OleVariant; safecall;
    procedure _Set_State(pRetVal: OleVariant); safecall;
    function MemberwiseClone: _OperationArguments; safecall;
    procedure SetState(State: OleVariant); safecall;
    function Get_certificateSubId: WideString; safecall;
    procedure Set_certificateSubId(const pRetVal: WideString); safecall;
    function Get_newPrivateKeyPassword: WideString; safecall;
    procedure Set_newPrivateKeyPassword(const pRetVal: WideString); safecall;
    function Get_SetNewPassword: WordBool; safecall;
    procedure Set_SetNewPassword(pRetVal: WordBool); safecall;
    function Get_updateTrustedPeerCertificates: WordBool; safecall;
    procedure Set_updateTrustedPeerCertificates(pRetVal: WordBool); safecall;
    function Get_HostNames: _StringCollection; safecall;
    procedure _Set_HostNames(const pRetVal: _StringCollection); safecall;
    function Get_HostNamesString: WideString; safecall;
    procedure Set_HostNamesString(const pRetVal: WideString); safecall;
    function Get_Parameters: _UACertificateRequestParameters; safecall;
    procedure _Set_Parameters(const pRetVal: _UACertificateRequestParameters); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property State: OleVariant read Get_State write _Set_State;
    property certificateSubId: WideString read Get_certificateSubId write Set_certificateSubId;
    property newPrivateKeyPassword: WideString read Get_newPrivateKeyPassword write Set_newPrivateKeyPassword;
    property SetNewPassword: WordBool read Get_SetNewPassword write Set_SetNewPassword;
    property updateTrustedPeerCertificates: WordBool read Get_updateTrustedPeerCertificates write Set_updateTrustedPeerCertificates;
    property HostNames: _StringCollection read Get_HostNames write _Set_HostNames;
    property HostNamesString: WideString read Get_HostNamesString write Set_HostNamesString;
    property Parameters: _UACertificateRequestParameters read Get_Parameters write _Set_Parameters;
  end;

// *********************************************************************//
// DispIntf:  _UAObtainCertificateArgumentsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DED308CF-6087-4FA9-ABE7-4884279C1576}
// *********************************************************************//
  _UAObtainCertificateArgumentsDisp = dispinterface
    ['{DED308CF-6087-4FA9-ABE7-4884279C1576}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property State: OleVariant dispid 1610743814;
    function MemberwiseClone: _OperationArguments; dispid 1610743816;
    procedure SetState(State: OleVariant); dispid 1610743817;
    property certificateSubId: WideString dispid 1610743818;
    property newPrivateKeyPassword: WideString dispid 1610743820;
    property SetNewPassword: WordBool dispid 1610743822;
    property updateTrustedPeerCertificates: WordBool dispid 1610743824;
    property HostNames: _StringCollection dispid 1610743826;
    property HostNamesString: WideString dispid 1610743828;
    property Parameters: _UACertificateRequestParameters dispid 1610743830;
  end;

// *********************************************************************//
// DispIntf:  DEasyUAClientServerApplicationEvents
// Flags:     (4096) Dispatchable
// GUID:      {EC6416F4-BEEB-4DB9-A698-22626D5ACFF1}
// *********************************************************************//
  DEasyUAClientServerApplicationEvents = dispinterface
    ['{EC6416F4-BEEB-4DB9-A698-22626D5ACFF1}']
    procedure PrivateKeyPasswordChanged(sender0: OleVariant; const eventArgs: _DataEventArgs); dispid 1001;
  end;

// *********************************************************************//
// Interface: _EasyUAApplication
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BACB537A-2156-4EC0-A9DB-495830D16CF7}
// *********************************************************************//
  _EasyUAApplication = interface(IDispatch)
    ['{BACB537A-2156-4EC0-A9DB-495830D16CF7}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_CustomReference: WideString; safecall;
    procedure Set_CustomReference(const pRetVal: WideString); safecall;
    function Clone: OleVariant; safecall;
    function GetService(const serviceType: _Type): OleVariant; safecall;
    function GetServiceByName(const serviceTypeName: WideString): OleVariant; safecall;
    function ValueEquals(other: OleVariant): WordBool; safecall;
    function Get_ApplicationIdDictionary: _StringUANodeIdReadOnlyDictionary; safecall;
    function Get_ApplicationStoreGroup: IUnknown; safecall;
    function Get_CertificateGenerationParameters: _CertificateGenerationParameters; safecall;
    function Get_CertificateRequestParameters: _UACertificateRequestParameters; safecall;
    function Get_HostNames: _StringCollection; safecall;
    function Get_SupportsGds: WordBool; safecall;
    function AssureOwnCertificate(createOwnCertificateArguments: OleVariant): WordBool; safecall;
    procedure CreateOwnCertificate(createOwnCertificateArguments: OleVariant); safecall;
    procedure ExportApplicationConfiguration(const stream: _Stream); safecall;
    procedure ExportApplicationConfigurationToFile(const filePath: WideString); safecall;
    procedure ExportOwnCertificateToFile(exportCertificateArguments: OleVariant); safecall;
    procedure ExportRegisteredApplication(const stream: _Stream); safecall;
    procedure ExportRegisteredApplicationToFile(const filePath: WideString); safecall;
    procedure ExportSecuredApplication(const stream: _Stream); safecall;
    procedure ExportSecuredApplicationToFile(const filePath: WideString); safecall;
    function FindGdsRegistrations(gdsEndpointDescriptor: OleVariant): _UANodeIdUAApplicationElementReadOnlyDictionary; safecall;
    function FindOwnCertificate(const certificateSubId: WideString): _PkiCertificate; safecall;
    function GetApplicationElement: _UAApplicationElement; safecall;
    function GetApplicationId(gdsEndpointDescriptor: OleVariant): _UANodeId; safecall;
    function GetCertificateSubjectName(const certificateSubId: WideString): WideString; safecall;
    function GetCertificateSubjectNameDictionary: _StringStringDictionary; safecall;
    function GetEffectiveApplicationManifest: _UAApplicationManifest; safecall;
    function GetEffectiveHostNames(alternateHostNames: OleVariant): _StringCollection; safecall;
    function GetPrivateKeyPasswordStrength(const certificateSubId: WideString): Single; safecall;
    function HasOwnCertificate(const certificateSubId: WideString): WordBool; safecall;
    function HasPrivateKeyPassword(const certificateSubId: WideString): WordBool; safecall;
    procedure ImportOwnCertificateFromFile(importCertificateArguments: OleVariant); safecall;
    function ListCertificateSubIds: _StringSet; safecall;
    function ListCertificateTypeElements(gdsEndpointDescriptor: OleVariant; 
                                         applicationStoreKind: PkiApplicationStoreKind): _UACertificateTypeElementCollection; safecall;
    function ObtainNewCertificate(Arguments: OleVariant): _PkiCertificate; safecall;
    function ProtectOrUnprotectOwnCertificate(const certificateSubId: WideString; 
                                              const newPrivateKeyPassword: WideString): WordBool; safecall;
    procedure ProtectOwnCertificate(const newPrivateKeyPassword: WideString); safecall;
    function RefreshTrustLists(gdsEndpointDescriptor: OleVariant; updateGdsRegistration: WordBool): UATrustListMasks; safecall;
    function RegisterToGds(gdsEndpointDescriptor: OleVariant): _UANodeId; safecall;
    function RemoveOwnCertificates(const certificateSubIdPattern: WideString; mustExist: WordBool; 
                                   updateTrustedPeerCertificates: WordBool): Integer; safecall;
    procedure RemovePrivateKeyPassword(const certificateSubId: WideString); safecall;
    procedure SetPrivateKeyPassword(const certificateSubId: WideString; 
                                    const privateKeyPassword: WideString); safecall;
    procedure UnprotectOwnCertificate; safecall;
    procedure UnregisterFromGds(gdsEndpointDescriptor: OleVariant); safecall;
    function updateGdsRegistration(gdsEndpointDescriptor: OleVariant): _UANodeId; safecall;
    procedure ValidateOwnCertificate(certificateGenerationArguments: OleVariant); safecall;
    function Get_ApplicationParameters: _UAClientServerApplicationParameters; safecall;
    procedure _Set_ApplicationParameters(const pRetVal: _UAClientServerApplicationParameters); safecall;
    function Get_SerializeSharedData: WordBool; safecall;
    procedure Set_SerializeSharedData(pRetVal: WordBool); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property CustomReference: WideString read Get_CustomReference write Set_CustomReference;
    property ApplicationIdDictionary: _StringUANodeIdReadOnlyDictionary read Get_ApplicationIdDictionary;
    property ApplicationStoreGroup: IUnknown read Get_ApplicationStoreGroup;
    property CertificateGenerationParameters: _CertificateGenerationParameters read Get_CertificateGenerationParameters;
    property CertificateRequestParameters: _UACertificateRequestParameters read Get_CertificateRequestParameters;
    property HostNames: _StringCollection read Get_HostNames;
    property SupportsGds: WordBool read Get_SupportsGds;
    property ApplicationParameters: _UAClientServerApplicationParameters read Get_ApplicationParameters write _Set_ApplicationParameters;
    property SerializeSharedData: WordBool read Get_SerializeSharedData write Set_SerializeSharedData;
  end;

// *********************************************************************//
// DispIntf:  _EasyUAApplicationDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BACB537A-2156-4EC0-A9DB-495830D16CF7}
// *********************************************************************//
  _EasyUAApplicationDisp = dispinterface
    ['{BACB537A-2156-4EC0-A9DB-495830D16CF7}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    property CustomReference: WideString dispid 1610743813;
    function Clone: OleVariant; dispid 1610743815;
    function GetService(const serviceType: _Type): OleVariant; dispid 1610743816;
    function GetServiceByName(const serviceTypeName: WideString): OleVariant; dispid 1610743817;
    function ValueEquals(other: OleVariant): WordBool; dispid 1610743818;
    property ApplicationIdDictionary: _StringUANodeIdReadOnlyDictionary readonly dispid 1610743819;
    property ApplicationStoreGroup: IUnknown readonly dispid 1610743820;
    property CertificateGenerationParameters: _CertificateGenerationParameters readonly dispid 1610743821;
    property CertificateRequestParameters: _UACertificateRequestParameters readonly dispid 1610743822;
    property HostNames: _StringCollection readonly dispid 1610743823;
    property SupportsGds: WordBool readonly dispid 1610743824;
    function AssureOwnCertificate(createOwnCertificateArguments: OleVariant): WordBool; dispid 1610743825;
    procedure CreateOwnCertificate(createOwnCertificateArguments: OleVariant); dispid 1610743826;
    procedure ExportApplicationConfiguration(const stream: _Stream); dispid 1610743827;
    procedure ExportApplicationConfigurationToFile(const filePath: WideString); dispid 1610743828;
    procedure ExportOwnCertificateToFile(exportCertificateArguments: OleVariant); dispid 1610743829;
    procedure ExportRegisteredApplication(const stream: _Stream); dispid 1610743830;
    procedure ExportRegisteredApplicationToFile(const filePath: WideString); dispid 1610743831;
    procedure ExportSecuredApplication(const stream: _Stream); dispid 1610743832;
    procedure ExportSecuredApplicationToFile(const filePath: WideString); dispid 1610743833;
    function FindGdsRegistrations(gdsEndpointDescriptor: OleVariant): _UANodeIdUAApplicationElementReadOnlyDictionary; dispid 1610743834;
    function FindOwnCertificate(const certificateSubId: WideString): _PkiCertificate; dispid 1610743835;
    function GetApplicationElement: _UAApplicationElement; dispid 1610743836;
    function GetApplicationId(gdsEndpointDescriptor: OleVariant): _UANodeId; dispid 1610743837;
    function GetCertificateSubjectName(const certificateSubId: WideString): WideString; dispid 1610743838;
    function GetCertificateSubjectNameDictionary: _StringStringDictionary; dispid 1610743839;
    function GetEffectiveApplicationManifest: _UAApplicationManifest; dispid 1610743840;
    function GetEffectiveHostNames(alternateHostNames: OleVariant): _StringCollection; dispid 1610743841;
    function GetPrivateKeyPasswordStrength(const certificateSubId: WideString): Single; dispid 1610743842;
    function HasOwnCertificate(const certificateSubId: WideString): WordBool; dispid 1610743843;
    function HasPrivateKeyPassword(const certificateSubId: WideString): WordBool; dispid 1610743844;
    procedure ImportOwnCertificateFromFile(importCertificateArguments: OleVariant); dispid 1610743845;
    function ListCertificateSubIds: _StringSet; dispid 1610743846;
    function ListCertificateTypeElements(gdsEndpointDescriptor: OleVariant; 
                                         applicationStoreKind: PkiApplicationStoreKind): _UACertificateTypeElementCollection; dispid 1610743847;
    function ObtainNewCertificate(Arguments: OleVariant): _PkiCertificate; dispid 1610743848;
    function ProtectOrUnprotectOwnCertificate(const certificateSubId: WideString; 
                                              const newPrivateKeyPassword: WideString): WordBool; dispid 1610743849;
    procedure ProtectOwnCertificate(const newPrivateKeyPassword: WideString); dispid 1610743850;
    function RefreshTrustLists(gdsEndpointDescriptor: OleVariant; updateGdsRegistration: WordBool): UATrustListMasks; dispid 1610743851;
    function RegisterToGds(gdsEndpointDescriptor: OleVariant): _UANodeId; dispid 1610743852;
    function RemoveOwnCertificates(const certificateSubIdPattern: WideString; mustExist: WordBool; 
                                   updateTrustedPeerCertificates: WordBool): Integer; dispid 1610743853;
    procedure RemovePrivateKeyPassword(const certificateSubId: WideString); dispid 1610743854;
    procedure SetPrivateKeyPassword(const certificateSubId: WideString; 
                                    const privateKeyPassword: WideString); dispid 1610743855;
    procedure UnprotectOwnCertificate; dispid 1610743856;
    procedure UnregisterFromGds(gdsEndpointDescriptor: OleVariant); dispid 1610743857;
    function updateGdsRegistration(gdsEndpointDescriptor: OleVariant): _UANodeId; dispid 1610743858;
    procedure ValidateOwnCertificate(certificateGenerationArguments: OleVariant); dispid 1610743859;
    property ApplicationParameters: _UAClientServerApplicationParameters dispid 1610743860;
    property SerializeSharedData: WordBool dispid 1610743862;
  end;

// *********************************************************************//
// Interface: _UAAssureCertificateArguments
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A43AD8D1-11BD-4F9B-AC57-0CF9A4984AFC}
// *********************************************************************//
  _UAAssureCertificateArguments = interface(IDispatch)
    ['{A43AD8D1-11BD-4F9B-AC57-0CF9A4984AFC}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_State: OleVariant; safecall;
    procedure _Set_State(pRetVal: OleVariant); safecall;
    function MemberwiseClone: _OperationArguments; safecall;
    procedure SetState(State: OleVariant); safecall;
    function Get_certificateSubId: WideString; safecall;
    procedure Set_certificateSubId(const pRetVal: WideString); safecall;
    function Get_Parameters: _CertificateGenerationParameters; safecall;
    procedure _Set_Parameters(const pRetVal: _CertificateGenerationParameters); safecall;
    function Get_updateTrustedPeerCertificates: WordBool; safecall;
    procedure Set_updateTrustedPeerCertificates(pRetVal: WordBool); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property State: OleVariant read Get_State write _Set_State;
    property certificateSubId: WideString read Get_certificateSubId write Set_certificateSubId;
    property Parameters: _CertificateGenerationParameters read Get_Parameters write _Set_Parameters;
    property updateTrustedPeerCertificates: WordBool read Get_updateTrustedPeerCertificates write Set_updateTrustedPeerCertificates;
  end;

// *********************************************************************//
// DispIntf:  _UAAssureCertificateArgumentsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A43AD8D1-11BD-4F9B-AC57-0CF9A4984AFC}
// *********************************************************************//
  _UAAssureCertificateArgumentsDisp = dispinterface
    ['{A43AD8D1-11BD-4F9B-AC57-0CF9A4984AFC}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property State: OleVariant dispid 1610743814;
    function MemberwiseClone: _OperationArguments; dispid 1610743816;
    procedure SetState(State: OleVariant); dispid 1610743817;
    property certificateSubId: WideString dispid 1610743818;
    property Parameters: _CertificateGenerationParameters dispid 1610743820;
    property updateTrustedPeerCertificates: WordBool dispid 1610743822;
  end;

// *********************************************************************//
// Interface: _UACreateCertificateArguments
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {51F1EA7A-6F62-4756-A3CD-3183D0DE84B3}
// *********************************************************************//
  _UACreateCertificateArguments = interface(IDispatch)
    ['{51F1EA7A-6F62-4756-A3CD-3183D0DE84B3}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_State: OleVariant; safecall;
    procedure _Set_State(pRetVal: OleVariant); safecall;
    function MemberwiseClone: _OperationArguments; safecall;
    procedure SetState(State: OleVariant); safecall;
    function Get_certificateSubId: WideString; safecall;
    procedure Set_certificateSubId(const pRetVal: WideString); safecall;
    function Get_Parameters: _CertificateGenerationParameters; safecall;
    procedure _Set_Parameters(const pRetVal: _CertificateGenerationParameters); safecall;
    function Get_updateTrustedPeerCertificates: WordBool; safecall;
    procedure Set_updateTrustedPeerCertificates(pRetVal: WordBool); safecall;
    function Get_HostNames: _StringCollection; safecall;
    procedure _Set_HostNames(const pRetVal: _StringCollection); safecall;
    function Get_HostNamesString: WideString; safecall;
    procedure Set_HostNamesString(const pRetVal: WideString); safecall;
    function Get_MustNotExist: WordBool; safecall;
    procedure Set_MustNotExist(pRetVal: WordBool); safecall;
    function Get_newPrivateKeyPassword: WideString; safecall;
    procedure Set_newPrivateKeyPassword(const pRetVal: WideString); safecall;
    function Get_SetNewPassword: WordBool; safecall;
    procedure Set_SetNewPassword(pRetVal: WordBool); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property State: OleVariant read Get_State write _Set_State;
    property certificateSubId: WideString read Get_certificateSubId write Set_certificateSubId;
    property Parameters: _CertificateGenerationParameters read Get_Parameters write _Set_Parameters;
    property updateTrustedPeerCertificates: WordBool read Get_updateTrustedPeerCertificates write Set_updateTrustedPeerCertificates;
    property HostNames: _StringCollection read Get_HostNames write _Set_HostNames;
    property HostNamesString: WideString read Get_HostNamesString write Set_HostNamesString;
    property MustNotExist: WordBool read Get_MustNotExist write Set_MustNotExist;
    property newPrivateKeyPassword: WideString read Get_newPrivateKeyPassword write Set_newPrivateKeyPassword;
    property SetNewPassword: WordBool read Get_SetNewPassword write Set_SetNewPassword;
  end;

// *********************************************************************//
// DispIntf:  _UACreateCertificateArgumentsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {51F1EA7A-6F62-4756-A3CD-3183D0DE84B3}
// *********************************************************************//
  _UACreateCertificateArgumentsDisp = dispinterface
    ['{51F1EA7A-6F62-4756-A3CD-3183D0DE84B3}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property State: OleVariant dispid 1610743814;
    function MemberwiseClone: _OperationArguments; dispid 1610743816;
    procedure SetState(State: OleVariant); dispid 1610743817;
    property certificateSubId: WideString dispid 1610743818;
    property Parameters: _CertificateGenerationParameters dispid 1610743820;
    property updateTrustedPeerCertificates: WordBool dispid 1610743822;
    property HostNames: _StringCollection dispid 1610743824;
    property HostNamesString: WideString dispid 1610743826;
    property MustNotExist: WordBool dispid 1610743828;
    property newPrivateKeyPassword: WideString dispid 1610743830;
    property SetNewPassword: WordBool dispid 1610743832;
  end;

// *********************************************************************//
// Interface: _UAImportCertificateArguments
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {CBD68FFD-F371-4719-9C6B-52D280FFD8CC}
// *********************************************************************//
  _UAImportCertificateArguments = interface(IDispatch)
    ['{CBD68FFD-F371-4719-9C6B-52D280FFD8CC}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_State: OleVariant; safecall;
    procedure _Set_State(pRetVal: OleVariant); safecall;
    function MemberwiseClone: _OperationArguments; safecall;
    procedure SetState(State: OleVariant); safecall;
    function Get_certificateSubId: WideString; safecall;
    procedure Set_certificateSubId(const pRetVal: WideString); safecall;
    function Get_newPrivateKeyPassword: WideString; safecall;
    procedure Set_newPrivateKeyPassword(const pRetVal: WideString); safecall;
    function Get_SetNewPassword: WordBool; safecall;
    procedure Set_SetNewPassword(pRetVal: WordBool); safecall;
    function Get_updateTrustedPeerCertificates: WordBool; safecall;
    procedure Set_updateTrustedPeerCertificates(pRetVal: WordBool); safecall;
    function Get_filePath: WideString; safecall;
    procedure Set_filePath(const pRetVal: WideString); safecall;
    function Get_OldPrivateKeyPassword: WideString; safecall;
    procedure Set_OldPrivateKeyPassword(const pRetVal: WideString); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property State: OleVariant read Get_State write _Set_State;
    property certificateSubId: WideString read Get_certificateSubId write Set_certificateSubId;
    property newPrivateKeyPassword: WideString read Get_newPrivateKeyPassword write Set_newPrivateKeyPassword;
    property SetNewPassword: WordBool read Get_SetNewPassword write Set_SetNewPassword;
    property updateTrustedPeerCertificates: WordBool read Get_updateTrustedPeerCertificates write Set_updateTrustedPeerCertificates;
    property filePath: WideString read Get_filePath write Set_filePath;
    property OldPrivateKeyPassword: WideString read Get_OldPrivateKeyPassword write Set_OldPrivateKeyPassword;
  end;

// *********************************************************************//
// DispIntf:  _UAImportCertificateArgumentsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {CBD68FFD-F371-4719-9C6B-52D280FFD8CC}
// *********************************************************************//
  _UAImportCertificateArgumentsDisp = dispinterface
    ['{CBD68FFD-F371-4719-9C6B-52D280FFD8CC}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property State: OleVariant dispid 1610743814;
    function MemberwiseClone: _OperationArguments; dispid 1610743816;
    procedure SetState(State: OleVariant); dispid 1610743817;
    property certificateSubId: WideString dispid 1610743818;
    property newPrivateKeyPassword: WideString dispid 1610743820;
    property SetNewPassword: WordBool dispid 1610743822;
    property updateTrustedPeerCertificates: WordBool dispid 1610743824;
    property filePath: WideString dispid 1610743826;
    property OldPrivateKeyPassword: WideString dispid 1610743828;
  end;

// *********************************************************************//
// Interface: _UABaseEventObject
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {58D1F42B-5E0F-43F9-9A4F-CDEE95DC922F}
// *********************************************************************//
  _UABaseEventObject = interface(IDispatch)
    ['{58D1F42B-5E0F-43F9-9A4F-CDEE95DC922F}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_eventId: PSafeArray; safecall;
    function Get_EventType: _UANodeId; safecall;
    function Get_LocalTime: _UATimeZoneData; safecall;
    function Get_Message: WideString; safecall;
    function Get_NodeId: _UANodeId; safecall;
    function Get_ReceiveTime: TDateTime; safecall;
    function Get_ReceiveTimeDouble: Double; safecall;
    function Get_Severity: Integer; safecall;
    function Get_SourceName: WideString; safecall;
    function Get_SourceNode: _UANodeId; safecall;
    function Get_Time: TDateTime; safecall;
    function Get_TimeDouble: Double; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property eventId: PSafeArray read Get_eventId;
    property EventType: _UANodeId read Get_EventType;
    property LocalTime: _UATimeZoneData read Get_LocalTime;
    property Message: WideString read Get_Message;
    property NodeId: _UANodeId read Get_NodeId;
    property ReceiveTime: TDateTime read Get_ReceiveTime;
    property ReceiveTimeDouble: Double read Get_ReceiveTimeDouble;
    property Severity: Integer read Get_Severity;
    property SourceName: WideString read Get_SourceName;
    property SourceNode: _UANodeId read Get_SourceNode;
    property Time: TDateTime read Get_Time;
    property TimeDouble: Double read Get_TimeDouble;
  end;

// *********************************************************************//
// DispIntf:  _UABaseEventObjectDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {58D1F42B-5E0F-43F9-9A4F-CDEE95DC922F}
// *********************************************************************//
  _UABaseEventObjectDisp = dispinterface
    ['{58D1F42B-5E0F-43F9-9A4F-CDEE95DC922F}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property eventId: {NOT_OLEAUTO(PSafeArray)}OleVariant readonly dispid 1610743814;
    property EventType: _UANodeId readonly dispid 1610743815;
    property LocalTime: _UATimeZoneData readonly dispid 1610743816;
    property Message: WideString readonly dispid 1610743817;
    property NodeId: _UANodeId readonly dispid 1610743818;
    property ReceiveTime: TDateTime readonly dispid 1610743819;
    property ReceiveTimeDouble: Double readonly dispid 1610743820;
    property Severity: Integer readonly dispid 1610743821;
    property SourceName: WideString readonly dispid 1610743822;
    property SourceNode: _UANodeId readonly dispid 1610743823;
    property Time: TDateTime readonly dispid 1610743824;
    property TimeDouble: Double readonly dispid 1610743825;
  end;

// *********************************************************************//
// Interface: _EasyUAAlarmsAndConditionsClient
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E1916D61-718B-41E2-9F77-D012769D29E6}
// *********************************************************************//
  _EasyUAAlarmsAndConditionsClient = interface(IDispatch)
    ['{E1916D61-718B-41E2-9F77-D012769D29E6}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_CustomReference: WideString; safecall;
    procedure Set_CustomReference(const pRetVal: WideString); safecall;
    function Clone: OleVariant; safecall;
    function GetService(const serviceType: _Type): OleVariant; safecall;
    function GetServiceByName(const serviceTypeName: WideString): OleVariant; safecall;
    function ValueEquals(other: OleVariant): WordBool; safecall;
    function Get_ClientSelector: _EasyUAClientSelector; safecall;
    procedure _Set_ClientSelector(const pRetVal: _EasyUAClientSelector); safecall;
    function Get_IsDerived: WordBool; safecall;
    function AsClient: _EasyUAClient; safecall;
    procedure Acknowledge(endpointDescriptor: OleVariant; 
                          objectOrConditionNodeDescriptor: OleVariant; eventId: OleVariant; 
                          const comment: WideString); safecall;
    procedure AddComment(endpointDescriptor: OleVariant; 
                         objectOrConditionNodeDescriptor: OleVariant; eventId: OleVariant; 
                         const comment: WideString); safecall;
    procedure Confirm(endpointDescriptor: OleVariant; objectOrConditionNodeDescriptor: OleVariant; 
                      eventId: OleVariant; const comment: WideString); safecall;
    procedure Disable(endpointDescriptor: OleVariant; objectOrConditionNodeDescriptor: OleVariant); safecall;
    procedure Enable(endpointDescriptor: OleVariant; objectOrConditionNodeDescriptor: OleVariant); safecall;
    procedure OneShotShelve(endpointDescriptor: OleVariant; 
                            objectOrConditionNodeDescriptor: OleVariant); safecall;
    procedure Respond(endpointDescriptor: OleVariant; objectOrConditionNodeDescriptor: OleVariant; 
                      selectedResponse: Integer); safecall;
    procedure TimedShelve(endpointDescriptor: OleVariant; 
                          objectOrConditionNodeDescriptor: OleVariant; 
                          millisecondsShelvingTime: Double); safecall;
    procedure Unshelve(endpointDescriptor: OleVariant; objectOrConditionNodeDescriptor: OleVariant); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property CustomReference: WideString read Get_CustomReference write Set_CustomReference;
    property ClientSelector: _EasyUAClientSelector read Get_ClientSelector write _Set_ClientSelector;
    property IsDerived: WordBool read Get_IsDerived;
  end;

// *********************************************************************//
// DispIntf:  _EasyUAAlarmsAndConditionsClientDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E1916D61-718B-41E2-9F77-D012769D29E6}
// *********************************************************************//
  _EasyUAAlarmsAndConditionsClientDisp = dispinterface
    ['{E1916D61-718B-41E2-9F77-D012769D29E6}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    property CustomReference: WideString dispid 1610743813;
    function Clone: OleVariant; dispid 1610743815;
    function GetService(const serviceType: _Type): OleVariant; dispid 1610743816;
    function GetServiceByName(const serviceTypeName: WideString): OleVariant; dispid 1610743817;
    function ValueEquals(other: OleVariant): WordBool; dispid 1610743818;
    property ClientSelector: _EasyUAClientSelector dispid 1610743819;
    property IsDerived: WordBool readonly dispid 1610743821;
    function AsClient: _EasyUAClient; dispid 1610743822;
    procedure Acknowledge(endpointDescriptor: OleVariant; 
                          objectOrConditionNodeDescriptor: OleVariant; eventId: OleVariant; 
                          const comment: WideString); dispid 1610743823;
    procedure AddComment(endpointDescriptor: OleVariant; 
                         objectOrConditionNodeDescriptor: OleVariant; eventId: OleVariant; 
                         const comment: WideString); dispid 1610743824;
    procedure Confirm(endpointDescriptor: OleVariant; objectOrConditionNodeDescriptor: OleVariant; 
                      eventId: OleVariant; const comment: WideString); dispid 1610743825;
    procedure Disable(endpointDescriptor: OleVariant; objectOrConditionNodeDescriptor: OleVariant); dispid 1610743826;
    procedure Enable(endpointDescriptor: OleVariant; objectOrConditionNodeDescriptor: OleVariant); dispid 1610743827;
    procedure OneShotShelve(endpointDescriptor: OleVariant; 
                            objectOrConditionNodeDescriptor: OleVariant); dispid 1610743828;
    procedure Respond(endpointDescriptor: OleVariant; objectOrConditionNodeDescriptor: OleVariant; 
                      selectedResponse: Integer); dispid 1610743829;
    procedure TimedShelve(endpointDescriptor: OleVariant; 
                          objectOrConditionNodeDescriptor: OleVariant; 
                          millisecondsShelvingTime: Double); dispid 1610743830;
    procedure Unshelve(endpointDescriptor: OleVariant; objectOrConditionNodeDescriptor: OleVariant); dispid 1610743831;
  end;

// *********************************************************************//
// Interface: _UAApplicationManifest
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2C6D6170-BDF2-4932-BDBF-B82E8E8CC6B6}
// *********************************************************************//
  _UAApplicationManifest = interface(IDispatch)
    ['{2C6D6170-BDF2-4932-BDBF-B82E8E8CC6B6}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_applicationName: WideString; safecall;
    procedure Set_applicationName(const pRetVal: WideString); safecall;
    function Get_ApplicationType: UAApplicationTypes; safecall;
    procedure Set_ApplicationType(pRetVal: UAApplicationTypes); safecall;
    function Get_applicationUriString: WideString; safecall;
    procedure Set_applicationUriString(const pRetVal: WideString); safecall;
    function Get_DiscoveryUriString: WideString; safecall;
    procedure Set_DiscoveryUriString(const pRetVal: WideString); safecall;
    function Get_DiscoveryUriStrings: _StringCollection; safecall;
    procedure _Set_DiscoveryUriStrings(const pRetVal: _StringCollection); safecall;
    function Get_productUriString: WideString; safecall;
    procedure Set_productUriString(const pRetVal: WideString); safecall;
    function Get_serverCapabilities: _StringCollection; safecall;
    procedure _Set_serverCapabilities(const pRetVal: _StringCollection); safecall;
    function Get_ServerCapabilitySet: _StringSet; safecall;
    function ToUAEndpointDescriptor: _UAEndpointDescriptor; safecall;
    function Get_CountryName: WideString; safecall;
    procedure Set_CountryName(const pRetVal: WideString); safecall;
    function Get_HttpsIssuerStorePath: WideString; safecall;
    procedure Set_HttpsIssuerStorePath(const pRetVal: WideString); safecall;
    function Get_HttpsTrustedStorePath: WideString; safecall;
    procedure Set_HttpsTrustedStorePath(const pRetVal: WideString); safecall;
    function Get_InstanceCertificateSubject: WideString; safecall;
    procedure Set_InstanceCertificateSubject(const pRetVal: WideString); safecall;
    function Get_InstanceIssuerStorePath: WideString; safecall;
    procedure Set_InstanceIssuerStorePath(const pRetVal: WideString); safecall;
    function Get_InstanceOwnStorePath: WideString; safecall;
    procedure Set_InstanceOwnStorePath(const pRetVal: WideString); safecall;
    function Get_InstanceTrustedStorePath: WideString; safecall;
    procedure Set_InstanceTrustedStorePath(const pRetVal: WideString); safecall;
    function Get_LocalityName: WideString; safecall;
    procedure Set_LocalityName(const pRetVal: WideString); safecall;
    function Get_OrganizationName: WideString; safecall;
    procedure Set_OrganizationName(const pRetVal: WideString); safecall;
    function Get_OrganizationalUnitName: WideString; safecall;
    procedure Set_OrganizationalUnitName(const pRetVal: WideString); safecall;
    function Get_RejectedStorePath: WideString; safecall;
    procedure Set_RejectedStorePath(const pRetVal: WideString); safecall;
    function Get_StateOrProvinceName: WideString; safecall;
    procedure Set_StateOrProvinceName(const pRetVal: WideString); safecall;
    function Get_UserIssuerStorePath: WideString; safecall;
    procedure Set_UserIssuerStorePath(const pRetVal: WideString); safecall;
    function Get_UserTrustedStorePath: WideString; safecall;
    procedure Set_UserTrustedStorePath(const pRetVal: WideString); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property applicationName: WideString read Get_applicationName write Set_applicationName;
    property ApplicationType: UAApplicationTypes read Get_ApplicationType write Set_ApplicationType;
    property applicationUriString: WideString read Get_applicationUriString write Set_applicationUriString;
    property DiscoveryUriString: WideString read Get_DiscoveryUriString write Set_DiscoveryUriString;
    property DiscoveryUriStrings: _StringCollection read Get_DiscoveryUriStrings write _Set_DiscoveryUriStrings;
    property productUriString: WideString read Get_productUriString write Set_productUriString;
    property serverCapabilities: _StringCollection read Get_serverCapabilities write _Set_serverCapabilities;
    property ServerCapabilitySet: _StringSet read Get_ServerCapabilitySet;
    property CountryName: WideString read Get_CountryName write Set_CountryName;
    property HttpsIssuerStorePath: WideString read Get_HttpsIssuerStorePath write Set_HttpsIssuerStorePath;
    property HttpsTrustedStorePath: WideString read Get_HttpsTrustedStorePath write Set_HttpsTrustedStorePath;
    property InstanceCertificateSubject: WideString read Get_InstanceCertificateSubject write Set_InstanceCertificateSubject;
    property InstanceIssuerStorePath: WideString read Get_InstanceIssuerStorePath write Set_InstanceIssuerStorePath;
    property InstanceOwnStorePath: WideString read Get_InstanceOwnStorePath write Set_InstanceOwnStorePath;
    property InstanceTrustedStorePath: WideString read Get_InstanceTrustedStorePath write Set_InstanceTrustedStorePath;
    property LocalityName: WideString read Get_LocalityName write Set_LocalityName;
    property OrganizationName: WideString read Get_OrganizationName write Set_OrganizationName;
    property OrganizationalUnitName: WideString read Get_OrganizationalUnitName write Set_OrganizationalUnitName;
    property RejectedStorePath: WideString read Get_RejectedStorePath write Set_RejectedStorePath;
    property StateOrProvinceName: WideString read Get_StateOrProvinceName write Set_StateOrProvinceName;
    property UserIssuerStorePath: WideString read Get_UserIssuerStorePath write Set_UserIssuerStorePath;
    property UserTrustedStorePath: WideString read Get_UserTrustedStorePath write Set_UserTrustedStorePath;
  end;

// *********************************************************************//
// DispIntf:  _UAApplicationManifestDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2C6D6170-BDF2-4932-BDBF-B82E8E8CC6B6}
// *********************************************************************//
  _UAApplicationManifestDisp = dispinterface
    ['{2C6D6170-BDF2-4932-BDBF-B82E8E8CC6B6}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property applicationName: WideString dispid 1610743814;
    property ApplicationType: UAApplicationTypes dispid 1610743816;
    property applicationUriString: WideString dispid 1610743818;
    property DiscoveryUriString: WideString dispid 1610743820;
    property DiscoveryUriStrings: _StringCollection dispid 1610743822;
    property productUriString: WideString dispid 1610743824;
    property serverCapabilities: _StringCollection dispid 1610743826;
    property ServerCapabilitySet: _StringSet readonly dispid 1610743828;
    function ToUAEndpointDescriptor: _UAEndpointDescriptor; dispid 1610743829;
    property CountryName: WideString dispid 1610743830;
    property HttpsIssuerStorePath: WideString dispid 1610743832;
    property HttpsTrustedStorePath: WideString dispid 1610743834;
    property InstanceCertificateSubject: WideString dispid 1610743836;
    property InstanceIssuerStorePath: WideString dispid 1610743838;
    property InstanceOwnStorePath: WideString dispid 1610743840;
    property InstanceTrustedStorePath: WideString dispid 1610743842;
    property LocalityName: WideString dispid 1610743844;
    property OrganizationName: WideString dispid 1610743846;
    property OrganizationalUnitName: WideString dispid 1610743848;
    property RejectedStorePath: WideString dispid 1610743850;
    property StateOrProvinceName: WideString dispid 1610743852;
    property UserIssuerStorePath: WideString dispid 1610743854;
    property UserTrustedStorePath: WideString dispid 1610743856;
  end;

// *********************************************************************//
// Interface: _UANodeElementCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F0541F57-231E-4A80-83A2-23DA5BF73140}
// *********************************************************************//
  _UANodeElementCollection = interface(IDispatch)
    ['{F0541F57-231E-4A80-83A2-23DA5BF73140}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_Item(index: Integer): _UANodeElement; safecall;
    procedure _Set_Item(index: Integer; const pRetVal: _UANodeElement); safecall;
    function Get_Count: Integer; safecall;
    function GetEnumerator: IEnumVARIANT; safecall;
    procedure Add(Item: OleVariant); safecall;
    procedure Clear; safecall;
    function Contains(Item: OleVariant): WordBool; safecall;
    function IndexOf(Item: OleVariant): Integer; safecall;
    procedure Insert(index: Integer; Item: OleVariant); safecall;
    function Remove(Item: OleVariant): WordBool; safecall;
    procedure RemoveAt(index: Integer); safecall;
    function Clone: OleVariant; safecall;
    property ToString: WideString read Get_ToString;
    property Item[index: Integer]: _UANodeElement read Get_Item write _Set_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  _UANodeElementCollectionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F0541F57-231E-4A80-83A2-23DA5BF73140}
// *********************************************************************//
  _UANodeElementCollectionDisp = dispinterface
    ['{F0541F57-231E-4A80-83A2-23DA5BF73140}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property Item[index: Integer]: _UANodeElement dispid 0; default;
    property Count: Integer readonly dispid 1610743814;
    function GetEnumerator: IEnumVARIANT; dispid -4;
    procedure Add(Item: OleVariant); dispid 1610743816;
    procedure Clear; dispid 1610743817;
    function Contains(Item: OleVariant): WordBool; dispid 1610743818;
    function IndexOf(Item: OleVariant): Integer; dispid 1610743819;
    procedure Insert(index: Integer; Item: OleVariant); dispid 1610743820;
    function Remove(Item: OleVariant): WordBool; dispid 1610743821;
    procedure RemoveAt(index: Integer); dispid 1610743822;
    function Clone: OleVariant; dispid 1610743823;
  end;

// *********************************************************************//
// Interface: _UANodeIdCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6334ED0F-0CD9-4580-9716-41447B458F85}
// *********************************************************************//
  _UANodeIdCollection = interface(IDispatch)
    ['{6334ED0F-0CD9-4580-9716-41447B458F85}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_Item(index: Integer): _UANodeId; safecall;
    procedure _Set_Item(index: Integer; const pRetVal: _UANodeId); safecall;
    function Get_Count: Integer; safecall;
    function GetEnumerator: IEnumVARIANT; safecall;
    procedure Add(Item: OleVariant); safecall;
    procedure Clear; safecall;
    function Contains(Item: OleVariant): WordBool; safecall;
    function IndexOf(Item: OleVariant): Integer; safecall;
    procedure Insert(index: Integer; Item: OleVariant); safecall;
    function Remove(Item: OleVariant): WordBool; safecall;
    procedure RemoveAt(index: Integer); safecall;
    property ToString: WideString read Get_ToString;
    property Item[index: Integer]: _UANodeId read Get_Item write _Set_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  _UANodeIdCollectionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6334ED0F-0CD9-4580-9716-41447B458F85}
// *********************************************************************//
  _UANodeIdCollectionDisp = dispinterface
    ['{6334ED0F-0CD9-4580-9716-41447B458F85}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property Item[index: Integer]: _UANodeId dispid 0; default;
    property Count: Integer readonly dispid 1610743814;
    function GetEnumerator: IEnumVARIANT; dispid -4;
    procedure Add(Item: OleVariant); dispid 1610743816;
    procedure Clear; dispid 1610743817;
    function Contains(Item: OleVariant): WordBool; dispid 1610743818;
    function IndexOf(Item: OleVariant): Integer; dispid 1610743819;
    procedure Insert(index: Integer; Item: OleVariant); dispid 1610743820;
    function Remove(Item: OleVariant): WordBool; dispid 1610743821;
    procedure RemoveAt(index: Integer); dispid 1610743822;
  end;

// *********************************************************************//
// Interface: _UANodeIdSet
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6AAF2015-1F72-43F4-A301-7590BF3FA4A1}
// *********************************************************************//
  _UANodeIdSet = interface(IDispatch)
    ['{6AAF2015-1F72-43F4-A301-7590BF3FA4A1}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_Count: Integer; safecall;
    function Add(Item: OleVariant): WordBool; safecall;
    function GetEnumerator: IEnumVARIANT; safecall;
    procedure Clear; safecall;
    function Contains(Item: OleVariant): WordBool; safecall;
    function Remove(Item: OleVariant): WordBool; safecall;
    procedure UnionWith(other: OleVariant); safecall;
    procedure IntersectWith(other: OleVariant); safecall;
    procedure ExceptWith(other: OleVariant); safecall;
    procedure SymmetricExceptWith(other: OleVariant); safecall;
    function IsSubsetOf(other: OleVariant): WordBool; safecall;
    function IsSupersetOf(other: OleVariant): WordBool; safecall;
    function IsProperSupersetOf(other: OleVariant): WordBool; safecall;
    function IsProperSubsetOf(other: OleVariant): WordBool; safecall;
    function Overlaps(other: OleVariant): WordBool; safecall;
    function SetEquals(other: OleVariant): WordBool; safecall;
    procedure TrimExcess; safecall;
    function TryGetValue(equalValue: OleVariant; out actualValue: OleVariant): WordBool; safecall;
    property ToString: WideString read Get_ToString;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  _UANodeIdSetDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6AAF2015-1F72-43F4-A301-7590BF3FA4A1}
// *********************************************************************//
  _UANodeIdSetDisp = dispinterface
    ['{6AAF2015-1F72-43F4-A301-7590BF3FA4A1}']
    property ToString: WideString readonly dispid 0;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property Count: Integer readonly dispid 1610743812;
    function Add(Item: OleVariant): WordBool; dispid 1610743813;
    function GetEnumerator: IEnumVARIANT; dispid -4;
    procedure Clear; dispid 1610743815;
    function Contains(Item: OleVariant): WordBool; dispid 1610743816;
    function Remove(Item: OleVariant): WordBool; dispid 1610743817;
    procedure UnionWith(other: OleVariant); dispid 1610743818;
    procedure IntersectWith(other: OleVariant); dispid 1610743819;
    procedure ExceptWith(other: OleVariant); dispid 1610743820;
    procedure SymmetricExceptWith(other: OleVariant); dispid 1610743821;
    function IsSubsetOf(other: OleVariant): WordBool; dispid 1610743822;
    function IsSupersetOf(other: OleVariant): WordBool; dispid 1610743823;
    function IsProperSupersetOf(other: OleVariant): WordBool; dispid 1610743824;
    function IsProperSubsetOf(other: OleVariant): WordBool; dispid 1610743825;
    function Overlaps(other: OleVariant): WordBool; dispid 1610743826;
    function SetEquals(other: OleVariant): WordBool; dispid 1610743827;
    procedure TrimExcess; dispid 1610743828;
    function TryGetValue(equalValue: OleVariant; out actualValue: OleVariant): WordBool; dispid 1610743829;
  end;

// *********************************************************************//
// Interface: _UAQualifiedNameCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {41932E02-2889-404A-B769-6557B74B6B87}
// *********************************************************************//
  _UAQualifiedNameCollection = interface(IDispatch)
    ['{41932E02-2889-404A-B769-6557B74B6B87}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_Item(index: Integer): _UAQualifiedName; safecall;
    procedure _Set_Item(index: Integer; const pRetVal: _UAQualifiedName); safecall;
    function Get_Count: Integer; safecall;
    function GetEnumerator: IEnumVARIANT; safecall;
    procedure Add(Item: OleVariant); safecall;
    procedure Clear; safecall;
    function Contains(Item: OleVariant): WordBool; safecall;
    function IndexOf(Item: OleVariant): Integer; safecall;
    procedure Insert(index: Integer; Item: OleVariant); safecall;
    function Remove(Item: OleVariant): WordBool; safecall;
    procedure RemoveAt(index: Integer); safecall;
    property ToString: WideString read Get_ToString;
    property Item[index: Integer]: _UAQualifiedName read Get_Item write _Set_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  _UAQualifiedNameCollectionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {41932E02-2889-404A-B769-6557B74B6B87}
// *********************************************************************//
  _UAQualifiedNameCollectionDisp = dispinterface
    ['{41932E02-2889-404A-B769-6557B74B6B87}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property Item[index: Integer]: _UAQualifiedName dispid 0; default;
    property Count: Integer readonly dispid 1610743814;
    function GetEnumerator: IEnumVARIANT; dispid -4;
    procedure Add(Item: OleVariant); dispid 1610743816;
    procedure Clear; dispid 1610743817;
    function Contains(Item: OleVariant): WordBool; dispid 1610743818;
    function IndexOf(Item: OleVariant): Integer; dispid 1610743819;
    procedure Insert(index: Integer; Item: OleVariant); dispid 1610743820;
    function Remove(Item: OleVariant): WordBool; dispid 1610743821;
    procedure RemoveAt(index: Integer); dispid 1610743822;
  end;

// *********************************************************************//
// Interface: _UAQualifiedNameSet
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D97A1F7A-7BA0-46E8-BE95-C685AE94F3C5}
// *********************************************************************//
  _UAQualifiedNameSet = interface(IDispatch)
    ['{D97A1F7A-7BA0-46E8-BE95-C685AE94F3C5}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_Count: Integer; safecall;
    function Add(Item: OleVariant): WordBool; safecall;
    function GetEnumerator: IEnumVARIANT; safecall;
    procedure Clear; safecall;
    function Contains(Item: OleVariant): WordBool; safecall;
    function Remove(Item: OleVariant): WordBool; safecall;
    procedure UnionWith(other: OleVariant); safecall;
    procedure IntersectWith(other: OleVariant); safecall;
    procedure ExceptWith(other: OleVariant); safecall;
    procedure SymmetricExceptWith(other: OleVariant); safecall;
    function IsSubsetOf(other: OleVariant): WordBool; safecall;
    function IsSupersetOf(other: OleVariant): WordBool; safecall;
    function IsProperSupersetOf(other: OleVariant): WordBool; safecall;
    function IsProperSubsetOf(other: OleVariant): WordBool; safecall;
    function Overlaps(other: OleVariant): WordBool; safecall;
    function SetEquals(other: OleVariant): WordBool; safecall;
    procedure TrimExcess; safecall;
    function TryGetValue(equalValue: OleVariant; out actualValue: OleVariant): WordBool; safecall;
    property ToString: WideString read Get_ToString;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  _UAQualifiedNameSetDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D97A1F7A-7BA0-46E8-BE95-C685AE94F3C5}
// *********************************************************************//
  _UAQualifiedNameSetDisp = dispinterface
    ['{D97A1F7A-7BA0-46E8-BE95-C685AE94F3C5}']
    property ToString: WideString readonly dispid 0;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property Count: Integer readonly dispid 1610743812;
    function Add(Item: OleVariant): WordBool; dispid 1610743813;
    function GetEnumerator: IEnumVARIANT; dispid -4;
    procedure Clear; dispid 1610743815;
    function Contains(Item: OleVariant): WordBool; dispid 1610743816;
    function Remove(Item: OleVariant): WordBool; dispid 1610743817;
    procedure UnionWith(other: OleVariant); dispid 1610743818;
    procedure IntersectWith(other: OleVariant); dispid 1610743819;
    procedure ExceptWith(other: OleVariant); dispid 1610743820;
    procedure SymmetricExceptWith(other: OleVariant); dispid 1610743821;
    function IsSubsetOf(other: OleVariant): WordBool; dispid 1610743822;
    function IsSupersetOf(other: OleVariant): WordBool; dispid 1610743823;
    function IsProperSupersetOf(other: OleVariant): WordBool; dispid 1610743824;
    function IsProperSubsetOf(other: OleVariant): WordBool; dispid 1610743825;
    function Overlaps(other: OleVariant): WordBool; dispid 1610743826;
    function SetEquals(other: OleVariant): WordBool; dispid 1610743827;
    procedure TrimExcess; dispid 1610743828;
    function TryGetValue(equalValue: OleVariant; out actualValue: OleVariant): WordBool; dispid 1610743829;
  end;

// *********************************************************************//
// Interface: _UANamespaceQualified
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3183FB7B-4A61-4AE6-99DA-5D458F9E4C8E}
// *********************************************************************//
  _UANamespaceQualified = interface(IDispatch)
    ['{3183FB7B-4A61-4AE6-99DA-5D458F9E4C8E}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_IsStandard: WordBool; safecall;
    function Get_NamespaceIndex: Integer; safecall;
    procedure Set_NamespaceIndex(pRetVal: Integer); safecall;
    function Get_NamespaceUriString: WideString; safecall;
    procedure Set_NamespaceUriString(const pRetVal: WideString); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property IsStandard: WordBool read Get_IsStandard;
    property NamespaceIndex: Integer read Get_NamespaceIndex write Set_NamespaceIndex;
    property NamespaceUriString: WideString read Get_NamespaceUriString write Set_NamespaceUriString;
  end;

// *********************************************************************//
// DispIntf:  _UANamespaceQualifiedDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3183FB7B-4A61-4AE6-99DA-5D458F9E4C8E}
// *********************************************************************//
  _UANamespaceQualifiedDisp = dispinterface
    ['{3183FB7B-4A61-4AE6-99DA-5D458F9E4C8E}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property IsStandard: WordBool readonly dispid 1610743814;
    property NamespaceIndex: Integer dispid 1610743815;
    property NamespaceUriString: WideString dispid 1610743817;
  end;

// *********************************************************************//
// Interface: _UAQualifiedName
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C33E897C-F0F5-4ADD-B836-1904602FF0CF}
// *********************************************************************//
  _UAQualifiedName = interface(IDispatch)
    ['{C33E897C-F0F5-4ADD-B836-1904602FF0CF}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_IsStandard: WordBool; safecall;
    function Get_NamespaceIndex: Integer; safecall;
    procedure Set_NamespaceIndex(pRetVal: Integer); safecall;
    function Get_NamespaceUriString: WideString; safecall;
    procedure Set_NamespaceUriString(const pRetVal: WideString); safecall;
    function Get_expandedText: WideString; safecall;
    procedure Set_expandedText(const pRetVal: WideString); safecall;
    function Get_IsNull: WordBool; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function format(const DefaultNamespaceUriString: WideString): WideString; safecall;
    function Match(other: OleVariant): WordBool; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property IsStandard: WordBool read Get_IsStandard;
    property NamespaceIndex: Integer read Get_NamespaceIndex write Set_NamespaceIndex;
    property NamespaceUriString: WideString read Get_NamespaceUriString write Set_NamespaceUriString;
    property expandedText: WideString read Get_expandedText write Set_expandedText;
    property IsNull: WordBool read Get_IsNull;
    property Name: WideString read Get_Name write Set_Name;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
  end;

// *********************************************************************//
// DispIntf:  _UAQualifiedNameDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C33E897C-F0F5-4ADD-B836-1904602FF0CF}
// *********************************************************************//
  _UAQualifiedNameDisp = dispinterface
    ['{C33E897C-F0F5-4ADD-B836-1904602FF0CF}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property IsStandard: WordBool readonly dispid 1610743814;
    property NamespaceIndex: Integer dispid 1610743815;
    property NamespaceUriString: WideString dispid 1610743817;
    property expandedText: WideString dispid 1610743819;
    property IsNull: WordBool readonly dispid 1610743821;
    property Name: WideString dispid 1610743822;
    function format(const DefaultNamespaceUriString: WideString): WideString; dispid 1610743824;
    function Match(other: OleVariant): WordBool; dispid 1610743825;
    property StandardName: WideString dispid 1610743826;
  end;

// *********************************************************************//
// Interface: _UANodeElement
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6D3A4DCC-A15C-43B6-9472-3BF8339144E9}
// *********************************************************************//
  _UANodeElement = interface(IDispatch)
    ['{6D3A4DCC-A15C-43B6-9472-3BF8339144E9}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_BrowseName: _UAQualifiedName; safecall;
    procedure _Set_BrowseName(const pRetVal: _UAQualifiedName); safecall;
    function Get_browsePath: _UABrowsePath; safecall;
    procedure _Set_browsePath(const pRetVal: _UABrowsePath); safecall;
    function Get_NodeId: _UANodeId; safecall;
    procedure _Set_NodeId(const pRetVal: _UANodeId); safecall;
    function Get_IsForward: WordBool; safecall;
    procedure Set_IsForward(pRetVal: WordBool); safecall;
    function Get_DisplayName: WideString; safecall;
    procedure Set_DisplayName(const pRetVal: WideString); safecall;
    function Get_NodeClass: UANodeClass; safecall;
    procedure Set_NodeClass(pRetVal: UANodeClass); safecall;
    function Get_ReferenceTypeId: _UANodeId; safecall;
    procedure _Set_ReferenceTypeId(const pRetVal: _UANodeId); safecall;
    function Get_TypeDefinition: _UANodeId; safecall;
    procedure _Set_TypeDefinition(const pRetVal: _UANodeId); safecall;
    function ToUANodeDescriptor: _UANodeDescriptor; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property BrowseName: _UAQualifiedName read Get_BrowseName write _Set_BrowseName;
    property browsePath: _UABrowsePath read Get_browsePath write _Set_browsePath;
    property NodeId: _UANodeId read Get_NodeId write _Set_NodeId;
    property IsForward: WordBool read Get_IsForward write Set_IsForward;
    property DisplayName: WideString read Get_DisplayName write Set_DisplayName;
    property NodeClass: UANodeClass read Get_NodeClass write Set_NodeClass;
    property ReferenceTypeId: _UANodeId read Get_ReferenceTypeId write _Set_ReferenceTypeId;
    property TypeDefinition: _UANodeId read Get_TypeDefinition write _Set_TypeDefinition;
  end;

// *********************************************************************//
// DispIntf:  _UANodeElementDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6D3A4DCC-A15C-43B6-9472-3BF8339144E9}
// *********************************************************************//
  _UANodeElementDisp = dispinterface
    ['{6D3A4DCC-A15C-43B6-9472-3BF8339144E9}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property BrowseName: _UAQualifiedName dispid 1610743814;
    property browsePath: _UABrowsePath dispid 1610743816;
    property NodeId: _UANodeId dispid 1610743818;
    property IsForward: WordBool dispid 1610743820;
    property DisplayName: WideString dispid 1610743822;
    property NodeClass: UANodeClass dispid 1610743824;
    property ReferenceTypeId: _UANodeId dispid 1610743826;
    property TypeDefinition: _UANodeId dispid 1610743828;
    function ToUANodeDescriptor: _UANodeDescriptor; dispid 1610743830;
  end;

// *********************************************************************//
// Interface: _UANodeIdFormatException
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {44629368-6947-4DF4-A2AC-B6B4D1D69117}
// *********************************************************************//
  _UANodeIdFormatException = interface(IDispatch)
    ['{44629368-6947-4DF4-A2AC-B6B4D1D69117}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_Message: WideString; safecall;
    function Get_StackTrace: WideString; safecall;
    function Get_HelpLink: WideString; safecall;
    procedure Set_HelpLink(const pRetVal: WideString); safecall;
    function Get_Source: WideString; safecall;
    procedure Set_Source(const pRetVal: WideString); safecall;
    function Get_InnerException: _Exception; safecall;
    function Get_TargetSite: _MethodBase; safecall;
    function GetBaseException: _Exception; safecall;
    procedure GetObjectData(const info: _SerializationInfo; context: StreamingContext); safecall;
    function Get_Data: _Dictionary; safecall;
    function Get_HResult: Integer; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Message: WideString read Get_Message;
    property StackTrace: WideString read Get_StackTrace;
    property HelpLink: WideString read Get_HelpLink write Set_HelpLink;
    property Source: WideString read Get_Source write Set_Source;
    property InnerException: _Exception read Get_InnerException;
    property TargetSite: _MethodBase read Get_TargetSite;
    property Data: _Dictionary read Get_Data;
    property HResult: Integer read Get_HResult;
  end;

// *********************************************************************//
// DispIntf:  _UANodeIdFormatExceptionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {44629368-6947-4DF4-A2AC-B6B4D1D69117}
// *********************************************************************//
  _UANodeIdFormatExceptionDisp = dispinterface
    ['{44629368-6947-4DF4-A2AC-B6B4D1D69117}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    property Message: WideString readonly dispid 1610743813;
    property StackTrace: WideString readonly dispid 1610743814;
    property HelpLink: WideString dispid 1610743815;
    property Source: WideString dispid 1610743817;
    property InnerException: _Exception readonly dispid 1610743819;
    property TargetSite: _MethodBase readonly dispid 1610743820;
    function GetBaseException: _Exception; dispid 1610743821;
    procedure GetObjectData(const info: _SerializationInfo; 
                            context: {NOT_OLEAUTO(StreamingContext)}OleVariant); dispid 1610743822;
    property Data: _Dictionary readonly dispid 1610743823;
    property HResult: Integer readonly dispid 1610743824;
  end;

// *********************************************************************//
// Interface: _UAQualifiedNameFormatException
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1A3F1A78-2F42-4BD7-924F-55771EFB5E57}
// *********************************************************************//
  _UAQualifiedNameFormatException = interface(IDispatch)
    ['{1A3F1A78-2F42-4BD7-924F-55771EFB5E57}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Get_Message: WideString; safecall;
    function Get_StackTrace: WideString; safecall;
    function Get_HelpLink: WideString; safecall;
    procedure Set_HelpLink(const pRetVal: WideString); safecall;
    function Get_Source: WideString; safecall;
    procedure Set_Source(const pRetVal: WideString); safecall;
    function Get_InnerException: _Exception; safecall;
    function Get_TargetSite: _MethodBase; safecall;
    function GetBaseException: _Exception; safecall;
    procedure GetObjectData(const info: _SerializationInfo; context: StreamingContext); safecall;
    function Get_Data: _Dictionary; safecall;
    function Get_HResult: Integer; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Message: WideString read Get_Message;
    property StackTrace: WideString read Get_StackTrace;
    property HelpLink: WideString read Get_HelpLink write Set_HelpLink;
    property Source: WideString read Get_Source write Set_Source;
    property InnerException: _Exception read Get_InnerException;
    property TargetSite: _MethodBase read Get_TargetSite;
    property Data: _Dictionary read Get_Data;
    property HResult: Integer read Get_HResult;
  end;

// *********************************************************************//
// DispIntf:  _UAQualifiedNameFormatExceptionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1A3F1A78-2F42-4BD7-924F-55771EFB5E57}
// *********************************************************************//
  _UAQualifiedNameFormatExceptionDisp = dispinterface
    ['{1A3F1A78-2F42-4BD7-924F-55771EFB5E57}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    property Message: WideString readonly dispid 1610743813;
    property StackTrace: WideString readonly dispid 1610743814;
    property HelpLink: WideString dispid 1610743815;
    property Source: WideString dispid 1610743817;
    property InnerException: _Exception readonly dispid 1610743819;
    property TargetSite: _MethodBase readonly dispid 1610743820;
    function GetBaseException: _Exception; dispid 1610743821;
    procedure GetObjectData(const info: _SerializationInfo; 
                            context: {NOT_OLEAUTO(StreamingContext)}OleVariant); dispid 1610743822;
    property Data: _Dictionary readonly dispid 1610743823;
    property HResult: Integer readonly dispid 1610743824;
  end;

// *********************************************************************//
// Interface: _UANodeIdParser
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4A66442A-68A8-4FCD-BB63-F4DA1BC8CE2A}
// *********************************************************************//
  _UANodeIdParser = interface(IDispatch)
    ['{4A66442A-68A8-4FCD-BB63-F4DA1BC8CE2A}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_DefaultNamespaceUriString: WideString; safecall;
    procedure Set_DefaultNamespaceUriString(const pRetVal: WideString); safecall;
    function Parse(const s: WideString; requireNamespace: WordBool): _UANodeId; safecall;
    function TryParse(const s: WideString; requireNamespace: WordBool; out NodeId: OleVariant): _StringParsingError; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DefaultNamespaceUriString: WideString read Get_DefaultNamespaceUriString write Set_DefaultNamespaceUriString;
  end;

// *********************************************************************//
// DispIntf:  _UANodeIdParserDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4A66442A-68A8-4FCD-BB63-F4DA1BC8CE2A}
// *********************************************************************//
  _UANodeIdParserDisp = dispinterface
    ['{4A66442A-68A8-4FCD-BB63-F4DA1BC8CE2A}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property DefaultNamespaceUriString: WideString dispid 1610743814;
    function Parse(const s: WideString; requireNamespace: WordBool): _UANodeId; dispid 1610743816;
    function TryParse(const s: WideString; requireNamespace: WordBool; out NodeId: OleVariant): _StringParsingError; dispid 1610743817;
  end;

// *********************************************************************//
// Interface: _UAQualifiedNameParser
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {17B3E4AF-76E9-440D-8B76-117E574F0574}
// *********************************************************************//
  _UAQualifiedNameParser = interface(IDispatch)
    ['{17B3E4AF-76E9-440D-8B76-117E574F0574}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_DefaultNamespaceUriString: WideString; safecall;
    procedure Set_DefaultNamespaceUriString(const pRetVal: WideString); safecall;
    function Parse(const expandedText: WideString): _UAQualifiedName; safecall;
    function TryParse(const s: WideString; out qualifiedName: OleVariant): _StringParsingError; safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DefaultNamespaceUriString: WideString read Get_DefaultNamespaceUriString write Set_DefaultNamespaceUriString;
  end;

// *********************************************************************//
// DispIntf:  _UAQualifiedNameParserDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {17B3E4AF-76E9-440D-8B76-117E574F0574}
// *********************************************************************//
  _UAQualifiedNameParserDisp = dispinterface
    ['{17B3E4AF-76E9-440D-8B76-117E574F0574}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property DefaultNamespaceUriString: WideString dispid 1610743814;
    function Parse(const expandedText: WideString): _UAQualifiedName; dispid 1610743816;
    function TryParse(const s: WideString; out qualifiedName: OleVariant): _StringParsingError; dispid 1610743817;
  end;

// *********************************************************************//
// Interface: _UANodeId
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {888C25BD-F172-47AC-81C6-4451F084C995}
// *********************************************************************//
  _UANodeId = interface(IDispatch)
    ['{888C25BD-F172-47AC-81C6-4451F084C995}']
    function Get_ToString: WideString; safecall;
    function Equals(obj: OleVariant): WordBool; safecall;
    function GetHashCode: Integer; safecall;
    function GetType: _Type; safecall;
    function Get_DisplayString: WideString; safecall;
    function Clone: OleVariant; safecall;
    function Get_IsStandard: WordBool; safecall;
    function Get_NamespaceIndex: Integer; safecall;
    procedure Set_NamespaceIndex(pRetVal: Integer); safecall;
    function Get_NamespaceUriString: WideString; safecall;
    procedure Set_NamespaceUriString(const pRetVal: WideString); safecall;
    function Get_expandedText: WideString; safecall;
    procedure Set_expandedText(const pRetVal: WideString); safecall;
    function Get_GuidIdentifier: TGUID; safecall;
    procedure Set_GuidIdentifier(pRetVal: TGUID); safecall;
    function Get_GuidIdentifierString: WideString; safecall;
    procedure Set_GuidIdentifierString(const pRetVal: WideString); safecall;
    function Get_identifier: OleVariant; safecall;
    procedure _Set_identifier(pRetVal: OleVariant); safecall;
    function Get_IsNull: WordBool; safecall;
    function Get_NodeIdType: UANodeIdType; safecall;
    procedure Set_NodeIdType(pRetVal: UANodeIdType); safecall;
    function Get_NumericIdentifier: Integer; safecall;
    procedure Set_NumericIdentifier(pRetVal: Integer); safecall;
    function Get_OpaqueIdentifier: PSafeArray; safecall;
    procedure Set_OpaqueIdentifier(pRetVal: PSafeArray); safecall;
    function Get_StringIdentifier: WideString; safecall;
    procedure Set_StringIdentifier(const pRetVal: WideString); safecall;
    function format(const DefaultNamespaceUriString: WideString; useStandardNames: WordBool): WideString; safecall;
    function Match(other: OleVariant): WordBool; safecall;
    procedure SetIdentifier(identifier: OleVariant); safecall;
    procedure SetOpaqueIdentifier(var OpaqueIdentifier: PSafeArray); safecall;
    function ToBrowsePath: _UABrowsePath; safecall;
    function ToUABuiltInType: UABuiltInType; safecall;
    function Get_StandardName: WideString; safecall;
    procedure Set_StandardName(const pRetVal: WideString); safecall;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property IsStandard: WordBool read Get_IsStandard;
    property NamespaceIndex: Integer read Get_NamespaceIndex write Set_NamespaceIndex;
    property NamespaceUriString: WideString read Get_NamespaceUriString write Set_NamespaceUriString;
    property expandedText: WideString read Get_expandedText write Set_expandedText;
    property GuidIdentifier: TGUID read Get_GuidIdentifier write Set_GuidIdentifier;
    property GuidIdentifierString: WideString read Get_GuidIdentifierString write Set_GuidIdentifierString;
    property identifier: OleVariant read Get_identifier write _Set_identifier;
    property IsNull: WordBool read Get_IsNull;
    property NodeIdType: UANodeIdType read Get_NodeIdType write Set_NodeIdType;
    property NumericIdentifier: Integer read Get_NumericIdentifier write Set_NumericIdentifier;
    property OpaqueIdentifier: PSafeArray read Get_OpaqueIdentifier write Set_OpaqueIdentifier;
    property StringIdentifier: WideString read Get_StringIdentifier write Set_StringIdentifier;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
  end;

// *********************************************************************//
// DispIntf:  _UANodeIdDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {888C25BD-F172-47AC-81C6-4451F084C995}
// *********************************************************************//
  _UANodeIdDisp = dispinterface
    ['{888C25BD-F172-47AC-81C6-4451F084C995}']
    property ToString: WideString readonly dispid 1610743808;
    function Equals(obj: OleVariant): WordBool; dispid 1610743809;
    function GetHashCode: Integer; dispid 1610743810;
    function GetType: _Type; dispid 1610743811;
    property DisplayString: WideString readonly dispid 0;
    function Clone: OleVariant; dispid 1610743813;
    property IsStandard: WordBool readonly dispid 1610743814;
    property NamespaceIndex: Integer dispid 1610743815;
    property NamespaceUriString: WideString dispid 1610743817;
    property expandedText: WideString dispid 1610743819;
    property GuidIdentifier: {NOT_OLEAUTO(TGUID)}OleVariant dispid 1610743821;
    property GuidIdentifierString: WideString dispid 1610743823;
    property identifier: OleVariant dispid 1610743825;
    property IsNull: WordBool readonly dispid 1610743827;
    property NodeIdType: UANodeIdType dispid 1610743828;
    property NumericIdentifier: Integer dispid 1610743830;
    property OpaqueIdentifier: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 1610743832;
    property StringIdentifier: WideString dispid 1610743834;
    function format(const DefaultNamespaceUriString: WideString; useStandardNames: WordBool): WideString; dispid 1610743836;
    function Match(other: OleVariant): WordBool; dispid 1610743837;
    procedure SetIdentifier(identifier: OleVariant); dispid 1610743838;
    procedure SetOpaqueIdentifier(var OpaqueIdentifier: {NOT_OLEAUTO(PSafeArray)}OleVariant); dispid 1610743839;
    function ToBrowsePath: _UABrowsePath; dispid 1610743840;
    function ToUABuiltInType: UABuiltInType; dispid 1610743841;
    property StandardName: WideString dispid 1610743842;
  end;

// *********************************************************************//
// The Class CoUADataValue provides a Create and CreateRemote method to          
// create instances of the default interface _UADataValue exposed by              
// the CoClass UADataValue. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUADataValue = class
    class function Create: _UADataValue;
    class function CreateRemote(const MachineName: string): _UADataValue;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUADataValue
// Help String      : A class that stores the value, together with status code and timestamps.
// Default Interface: _UADataValue
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUADataValue = class(TOleServer)
  private
    FIntf: _UADataValue;
    function GetDefaultInterface: _UADataValue;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_ToString_2(const format: WideString; const formatProvider: IFormatProvider): WideString;
    function Get_ToString_3(const format: WideString): WideString;
    function Get_HasBadStatus: WordBool;
    function Get_HasGoodStatus: WordBool;
    function Get_HasServerTimestamp: WordBool;
    function Get_HasSourceTimestamp: WordBool;
    function Get_HasUncertainStatus: WordBool;
    function Get_HasValue: WordBool;
    function Get_ServerPicoseconds: Integer;
    procedure Set_ServerPicoseconds(pRetVal: Integer);
    function Get_ServerTimestamp: TDateTime;
    procedure Set_ServerTimestamp(pRetVal: TDateTime);
    function Get_ServerTimestampDouble: Double;
    procedure Set_ServerTimestampDouble(pRetVal: Double);
    function Get_ServerTimestampLocal: TDateTime;
    procedure Set_ServerTimestampLocal(pRetVal: TDateTime);
    function Get_ServerTimestampLocalDouble: Double;
    procedure Set_ServerTimestampLocalDouble(pRetVal: Double);
    function Get_SourcePicoseconds: Integer;
    procedure Set_SourcePicoseconds(pRetVal: Integer);
    function Get_SourceTimestamp: TDateTime;
    procedure Set_SourceTimestamp(pRetVal: TDateTime);
    function Get_SourceTimestampDouble: Double;
    procedure Set_SourceTimestampDouble(pRetVal: Double);
    function Get_SourceTimestampLocal: TDateTime;
    procedure Set_SourceTimestampLocal(pRetVal: TDateTime);
    function Get_SourceTimestampLocalDouble: Double;
    procedure Set_SourceTimestampLocalDouble(pRetVal: Double);
    function Get_StatusCode: _UAStatusCode;
    procedure _Set_StatusCode(const pRetVal: _UAStatusCode);
    function Get_StatusInfo: StatusInfo;
    function Get_value: OleVariant;
    procedure _Set_value(pRetVal: OleVariant);
    function Get_ValueType: _Type;
    function Get_ValueTypeName: WideString;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UADataValue);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function DisplayValue: WideString;
    procedure SetValue(value: OleVariant);
    property DefaultInterface: _UADataValue read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property ToString_2[const format: WideString; const formatProvider: IFormatProvider]: WideString read Get_ToString_2;
    property ToString_3[const format: WideString]: WideString read Get_ToString_3;
    property HasBadStatus: WordBool read Get_HasBadStatus;
    property HasGoodStatus: WordBool read Get_HasGoodStatus;
    property HasServerTimestamp: WordBool read Get_HasServerTimestamp;
    property HasSourceTimestamp: WordBool read Get_HasSourceTimestamp;
    property HasUncertainStatus: WordBool read Get_HasUncertainStatus;
    property HasValue: WordBool read Get_HasValue;
    property StatusCode: _UAStatusCode read Get_StatusCode write _Set_StatusCode;
    property StatusInfo: StatusInfo read Get_StatusInfo;
    property value: OleVariant read Get_value write _Set_value;
    property ValueType: _Type read Get_ValueType;
    property ValueTypeName: WideString read Get_ValueTypeName;
    property ServerPicoseconds: Integer read Get_ServerPicoseconds write Set_ServerPicoseconds;
    property ServerTimestamp: TDateTime read Get_ServerTimestamp write Set_ServerTimestamp;
    property ServerTimestampDouble: Double read Get_ServerTimestampDouble write Set_ServerTimestampDouble;
    property ServerTimestampLocal: TDateTime read Get_ServerTimestampLocal write Set_ServerTimestampLocal;
    property ServerTimestampLocalDouble: Double read Get_ServerTimestampLocalDouble write Set_ServerTimestampLocalDouble;
    property SourcePicoseconds: Integer read Get_SourcePicoseconds write Set_SourcePicoseconds;
    property SourceTimestamp: TDateTime read Get_SourceTimestamp write Set_SourceTimestamp;
    property SourceTimestampDouble: Double read Get_SourceTimestampDouble write Set_SourceTimestampDouble;
    property SourceTimestampLocal: TDateTime read Get_SourceTimestampLocal write Set_SourceTimestampLocal;
    property SourceTimestampLocalDouble: Double read Get_SourceTimestampLocalDouble write Set_SourceTimestampLocalDouble;
  published
  end;

// *********************************************************************//
// The Class CoUAResultException provides a Create and CreateRemote method to          
// create instances of the default interface _UAResultException exposed by              
// the CoClass UAResultException. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAResultException = class
    class function Create: _UAResultException;
    class function CreateRemote(const MachineName: string): _UAResultException;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAResultException
// Help String      : The exception that is thrown when an OPC UA result (return value or an argument) was not expected for the requested operation.
// Default Interface: _UAResultException
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAResultException = class(TOleServer)
  private
    FIntf: _UAResultException;
    function GetDefaultInterface: _UAResultException;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_Message: WideString;
    function Get_StackTrace: WideString;
    function Get_HelpLink: WideString;
    procedure Set_HelpLink(const pRetVal: WideString);
    function Get_Source: WideString;
    procedure Set_Source(const pRetVal: WideString);
    function Get_InnerException: _Exception;
    function Get_TargetSite: _MethodBase;
    function Get_Data: _Dictionary;
    function Get_HResult: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAResultException);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function GetBaseException: _Exception;
    procedure GetObjectData(const info: _SerializationInfo; context: StreamingContext);
    property DefaultInterface: _UAResultException read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Message: WideString read Get_Message;
    property StackTrace: WideString read Get_StackTrace;
    property InnerException: _Exception read Get_InnerException;
    property TargetSite: _MethodBase read Get_TargetSite;
    property Data: _Dictionary read Get_Data;
    property HResult: Integer read Get_HResult;
    property HelpLink: WideString read Get_HelpLink write Set_HelpLink;
    property Source: WideString read Get_Source write Set_Source;
  published
  end;

// *********************************************************************//
// The Class CoUAServiceException provides a Create and CreateRemote method to          
// create instances of the default interface _UAServiceException exposed by              
// the CoClass UAServiceException. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAServiceException = class
    class function Create: _UAServiceException;
    class function CreateRemote(const MachineName: string): _UAServiceException;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAServiceException
// Help String      : An exception thrown when a UA defined error occurs.
// Default Interface: _UAServiceException
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TUAServiceException = class(TOleServer)
  private
    FIntf: _UAServiceException;
    function GetDefaultInterface: _UAServiceException;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_Message: WideString;
    function Get_StackTrace: WideString;
    function Get_HelpLink: WideString;
    procedure Set_HelpLink(const pRetVal: WideString);
    function Get_Source: WideString;
    procedure Set_Source(const pRetVal: WideString);
    function Get_InnerException: _Exception;
    function Get_TargetSite: _MethodBase;
    function Get_Data: _Dictionary;
    function Get_HResult: Integer;
    function Get_ErrorId: WideString;
    function Get_InternalCode: Integer;
    function Get_ServiceResult: _UAServiceResult;
    function Get_ServiceTargetSite: _MethodBase;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAServiceException);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function GetBaseException: _Exception;
    procedure GetObjectData(const info: _SerializationInfo; context: StreamingContext);
    property DefaultInterface: _UAServiceException read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Message: WideString read Get_Message;
    property StackTrace: WideString read Get_StackTrace;
    property InnerException: _Exception read Get_InnerException;
    property TargetSite: _MethodBase read Get_TargetSite;
    property Data: _Dictionary read Get_Data;
    property HResult: Integer read Get_HResult;
    property ErrorId: WideString read Get_ErrorId;
    property InternalCode: Integer read Get_InternalCode;
    property ServiceResult: _UAServiceResult read Get_ServiceResult;
    property ServiceTargetSite: _MethodBase read Get_ServiceTargetSite;
    property HelpLink: WideString read Get_HelpLink write Set_HelpLink;
    property Source: WideString read Get_Source write Set_Source;
  published
  end;

// *********************************************************************//
// The Class CoComEasyUAClientConnectionControl provides a Create and CreateRemote method to          
// create instances of the default interface _EasyUAClientConnectionControl exposed by              
// the CoClass ComEasyUAClientConnectionControl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoComEasyUAClientConnectionControl = class
    class function Create: _EasyUAClientConnectionControl;
    class function CreateRemote(const MachineName: string): _EasyUAClientConnectionControl;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TComEasyUAClientConnectionControl
// Help String      : COM object that provides methods to control the OPC UA client connections to the server.
// Default Interface: _EasyUAClientConnectionControl
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TComEasyUAClientConnectionControl = class(TOleServer)
  private
    FIntf: _EasyUAClientConnectionControl;
    function GetDefaultInterface: _EasyUAClientConnectionControl;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _EasyUAClientConnectionControl);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function LockConnection(endpointDescriptor: OleVariant): Integer;
    procedure UnlockConnection(lockHandle: Integer);
    property DefaultInterface: _EasyUAClientConnectionControl read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
  published
  end;

// *********************************************************************//
// The Class CoComEasyUAClientNodeRegistration provides a Create and CreateRemote method to          
// create instances of the default interface _EasyUAClientNodeRegistration exposed by              
// the CoClass ComEasyUAClientNodeRegistration. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoComEasyUAClientNodeRegistration = class
    class function Create: _EasyUAClientNodeRegistration;
    class function CreateRemote(const MachineName: string): _EasyUAClientNodeRegistration;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TComEasyUAClientNodeRegistration
// Help String      : COM object that provides methods to register repeatedly accessed nodes.
// Default Interface: _EasyUAClientNodeRegistration
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TComEasyUAClientNodeRegistration = class(TOleServer)
  private
    FIntf: _EasyUAClientNodeRegistration;
    function GetDefaultInterface: _EasyUAClientNodeRegistration;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _EasyUAClientNodeRegistration);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function RegisterMultipleNodes(nodeArgumentsArray: OleVariant): PSafeArray;
    function RegisterNode(const endpointDescriptorString: WideString; 
                          const nodeDescriptorString: WideString): Integer;
    procedure UnregisterMultipleNodes(handlesToUnregisterArray: OleVariant);
    procedure UnregisterNode(registrationHandle: Integer);
    property DefaultInterface: _EasyUAClientNodeRegistration read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
  published
  end;

// *********************************************************************//
// The Class CoUAPubSubHeader provides a Create and CreateRemote method to          
// create instances of the default interface _UAPubSubHeader exposed by              
// the CoClass UAPubSubHeader. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAPubSubHeader = class
    class function Create: _UAPubSubHeader;
    class function CreateRemote(const MachineName: string): _UAPubSubHeader;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAPubSubHeader
// Help String      : Contains header information of the received PubSub message.
// Default Interface: _UAPubSubHeader
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAPubSubHeader = class(TOleServer)
  private
    FIntf: _UAPubSubHeader;
    function GetDefaultInterface: _UAPubSubHeader;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_DataSetWriterId: Integer;
    procedure Set_DataSetWriterId(pRetVal: Integer);
    function Get_DataSetWriterName: WideString;
    procedure Set_DataSetWriterName(const pRetVal: WideString);
    function Get_HasDataSetWriterId: WordBool;
    function Get_HasDataSetWriterName: WordBool;
    function Get_HasPublisherId: WordBool;
    function Get_HasWriterGroupId: WordBool;
    function Get_HasWriterGroupName: WordBool;
    function Get_PublisherId: _UAPublisherId;
    procedure _Set_PublisherId(const pRetVal: _UAPublisherId);
    function Get_WriterGroupId: Integer;
    procedure Set_WriterGroupId(pRetVal: Integer);
    function Get_WriterGroupName: WideString;
    procedure Set_WriterGroupName(const pRetVal: WideString);
    function Get_Compressed: WordBool;
    procedure Set_Compressed(pRetVal: WordBool);
    function Get_ConfigurationVersion: _UAConfigurationVersion;
    procedure _Set_ConfigurationVersion(const pRetVal: _UAConfigurationVersion);
    function Get_DataSetClassId: TGUID;
    procedure Set_DataSetClassId(pRetVal: TGUID);
    function Get_DataSetClassIdString: WideString;
    procedure Set_DataSetClassIdString(const pRetVal: WideString);
    function Get_Encrypted: WordBool;
    procedure Set_Encrypted(pRetVal: WordBool);
    function Get_HasConfigurationVersion: WordBool;
    function Get_HasDataSetClassId: WordBool;
    function Get_HasOrigin: WordBool;
    function Get_MessageMappingName: WideString;
    procedure Set_MessageMappingName(const pRetVal: WideString);
    function Get_Origin: OleVariant;
    procedure _Set_Origin(pRetVal: OleVariant);
    function Get_Retain: WordBool;
    procedure Set_Retain(pRetVal: WordBool);
    function Get_Signed: WordBool;
    procedure Set_Signed(pRetVal: WordBool);
    function Get_TransportMappingName: WideString;
    procedure Set_TransportMappingName(const pRetVal: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAPubSubHeader);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function CompareTo(other: OleVariant): Integer;
    procedure SetOrigin(value: OleVariant);
    property DefaultInterface: _UAPubSubHeader read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property HasDataSetWriterId: WordBool read Get_HasDataSetWriterId;
    property HasDataSetWriterName: WordBool read Get_HasDataSetWriterName;
    property HasPublisherId: WordBool read Get_HasPublisherId;
    property HasWriterGroupId: WordBool read Get_HasWriterGroupId;
    property HasWriterGroupName: WordBool read Get_HasWriterGroupName;
    property PublisherId: _UAPublisherId read Get_PublisherId write _Set_PublisherId;
    property ConfigurationVersion: _UAConfigurationVersion read Get_ConfigurationVersion write _Set_ConfigurationVersion;
    property HasConfigurationVersion: WordBool read Get_HasConfigurationVersion;
    property HasDataSetClassId: WordBool read Get_HasDataSetClassId;
    property HasOrigin: WordBool read Get_HasOrigin;
    property Origin: OleVariant read Get_Origin write _Set_Origin;
    property DataSetWriterId: Integer read Get_DataSetWriterId write Set_DataSetWriterId;
    property DataSetWriterName: WideString read Get_DataSetWriterName write Set_DataSetWriterName;
    property WriterGroupId: Integer read Get_WriterGroupId write Set_WriterGroupId;
    property WriterGroupName: WideString read Get_WriterGroupName write Set_WriterGroupName;
    property Compressed: WordBool read Get_Compressed write Set_Compressed;
    property DataSetClassId: TGUID read Get_DataSetClassId write Set_DataSetClassId;
    property DataSetClassIdString: WideString read Get_DataSetClassIdString write Set_DataSetClassIdString;
    property Encrypted: WordBool read Get_Encrypted write Set_Encrypted;
    property MessageMappingName: WideString read Get_MessageMappingName write Set_MessageMappingName;
    property Retain: WordBool read Get_Retain write Set_Retain;
    property Signed: WordBool read Get_Signed write Set_Signed;
    property TransportMappingName: WideString read Get_TransportMappingName write Set_TransportMappingName;
  published
  end;

// *********************************************************************//
// The Class CoUAPubSubLocators provides a Create and CreateRemote method to          
// create instances of the default interface _UAPubSubLocators exposed by              
// the CoClass UAPubSubLocators. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAPubSubLocators = class
    class function Create: _UAPubSubLocators;
    class function CreateRemote(const MachineName: string): _UAPubSubLocators;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAPubSubLocators
// Help String      : Contains PubSub locator information.
// Default Interface: _UAPubSubLocators
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAPubSubLocators = class(TOleServer)
  private
    FIntf: _UAPubSubLocators;
    function GetDefaultInterface: _UAPubSubLocators;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_DataSetWriterId: Integer;
    procedure Set_DataSetWriterId(pRetVal: Integer);
    function Get_DataSetWriterName: WideString;
    procedure Set_DataSetWriterName(const pRetVal: WideString);
    function Get_HasDataSetWriterId: WordBool;
    function Get_HasDataSetWriterName: WordBool;
    function Get_HasPublisherId: WordBool;
    function Get_HasWriterGroupId: WordBool;
    function Get_HasWriterGroupName: WordBool;
    function Get_PublisherId: _UAPublisherId;
    procedure _Set_PublisherId(const pRetVal: _UAPublisherId);
    function Get_WriterGroupId: Integer;
    procedure Set_WriterGroupId(pRetVal: Integer);
    function Get_WriterGroupName: WideString;
    procedure Set_WriterGroupName(const pRetVal: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAPubSubLocators);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function CompareTo(other: OleVariant): Integer;
    property DefaultInterface: _UAPubSubLocators read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property HasDataSetWriterId: WordBool read Get_HasDataSetWriterId;
    property HasDataSetWriterName: WordBool read Get_HasDataSetWriterName;
    property HasPublisherId: WordBool read Get_HasPublisherId;
    property HasWriterGroupId: WordBool read Get_HasWriterGroupId;
    property HasWriterGroupName: WordBool read Get_HasWriterGroupName;
    property PublisherId: _UAPublisherId read Get_PublisherId write _Set_PublisherId;
    property DataSetWriterId: Integer read Get_DataSetWriterId write Set_DataSetWriterId;
    property DataSetWriterName: WideString read Get_DataSetWriterName write Set_DataSetWriterName;
    property WriterGroupId: Integer read Get_WriterGroupId write Set_WriterGroupId;
    property WriterGroupName: WideString read Get_WriterGroupName write Set_WriterGroupName;
  published
  end;

// *********************************************************************//
// The Class CoUASubscribeDataSetArguments provides a Create and CreateRemote method to          
// create instances of the default interface _UASubscribeDataSetArguments exposed by              
// the CoClass UASubscribeDataSetArguments. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUASubscribeDataSetArguments = class
    class function Create: _UASubscribeDataSetArguments;
    class function CreateRemote(const MachineName: string): _UASubscribeDataSetArguments;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUASubscribeDataSetArguments
// Help String      : Holds all arguments needed to subscribe to a dataset in OPC UA PubSub.
// Default Interface: _UASubscribeDataSetArguments
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUASubscribeDataSetArguments = class(TOleServer)
  private
    FIntf: _UASubscribeDataSetArguments;
    function GetDefaultInterface: _UASubscribeDataSetArguments;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_State: OleVariant;
    procedure _Set_State(pRetVal: OleVariant);
    function Get_DataSetSubscriptionDescriptor: _UADataSetSubscriptionDescriptor;
    procedure _Set_DataSetSubscriptionDescriptor(const pRetVal: _UADataSetSubscriptionDescriptor);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UASubscribeDataSetArguments);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function MemberwiseClone: _OperationArguments;
    procedure SetState(State: OleVariant);
    property DefaultInterface: _UASubscribeDataSetArguments read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property State: OleVariant read Get_State write _Set_State;
    property DataSetSubscriptionDescriptor: _UADataSetSubscriptionDescriptor read Get_DataSetSubscriptionDescriptor write _Set_DataSetSubscriptionDescriptor;
  published
  end;

// *********************************************************************//
// The Class CoEasyUADataSetSubscriptionChangeArguments provides a Create and CreateRemote method to          
// create instances of the default interface _EasyUADataSetSubscriptionChangeArguments exposed by              
// the CoClass EasyUADataSetSubscriptionChangeArguments. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEasyUADataSetSubscriptionChangeArguments = class
    class function Create: _EasyUADataSetSubscriptionChangeArguments;
    class function CreateRemote(const MachineName: string): _EasyUADataSetSubscriptionChangeArguments;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TEasyUADataSetSubscriptionChangeArguments
// Help String      : Contains arguments describing how the OPC-UA dataset subscription should be changed.
// Default Interface: _EasyUADataSetSubscriptionChangeArguments
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TEasyUADataSetSubscriptionChangeArguments = class(TOleServer)
  private
    FIntf: _EasyUADataSetSubscriptionChangeArguments;
    function GetDefaultInterface: _EasyUADataSetSubscriptionChangeArguments;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_State: OleVariant;
    procedure _Set_State(pRetVal: OleVariant);
    function Get_Handle: Integer;
    procedure Set_Handle(pRetVal: Integer);
    function Get_Filter: _UASubscribeDataSetFilter;
    procedure _Set_Filter(const pRetVal: _UASubscribeDataSetFilter);
    function Get_DataSetMetaData: _UADataSetMetaData;
    procedure _Set_DataSetMetaData(const pRetVal: _UADataSetMetaData);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _EasyUADataSetSubscriptionChangeArguments);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function MemberwiseClone: _OperationArguments;
    procedure SetState(State: OleVariant);
    property DefaultInterface: _EasyUADataSetSubscriptionChangeArguments read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property State: OleVariant read Get_State write _Set_State;
    property Filter: _UASubscribeDataSetFilter read Get_Filter write _Set_Filter;
    property DataSetMetaData: _UADataSetMetaData read Get_DataSetMetaData write _Set_DataSetMetaData;
    property Handle: Integer read Get_Handle write Set_Handle;
  published
  end;

// *********************************************************************//
// The Class CoEasyUADataSetMessageEventArgs provides a Create and CreateRemote method to          
// create instances of the default interface _EasyUADataSetMessageEventArgs exposed by              
// the CoClass EasyUADataSetMessageEventArgs. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEasyUADataSetMessageEventArgs = class
    class function Create: _EasyUADataSetMessageEventArgs;
    class function CreateRemote(const MachineName: string): _EasyUADataSetMessageEventArgs;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TEasyUADataSetMessageEventArgs
// Help String      : Provides data for the IEasyUASubscriber.DataSetMessage event.
// Default Interface: _EasyUADataSetMessageEventArgs
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TEasyUADataSetMessageEventArgs = class(TOleServer)
  private
    FIntf: _EasyUADataSetMessageEventArgs;
    function GetDefaultInterface: _EasyUADataSetMessageEventArgs;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_Diagnostics: _ExceptionCollection;
    procedure _Set_Diagnostics(const pRetVal: _ExceptionCollection);
    function Get_DiagnosticsCount: Integer;
    function Get_DiagnosticsSummary: WideString;
    function Get_ErrorId: WideString;
    procedure Set_ErrorId(const pRetVal: WideString);
    function Get_ErrorMessage: WideString;
    procedure Set_ErrorMessage(const pRetVal: WideString);
    function Get_ErrorMessageBrief: WideString;
    function Get_Exception: _Exception;
    procedure _Set_Exception(const pRetVal: _Exception);
    function Get_NormalizedDiagnostics: _NormalizedExceptionCollection;
    function Get_NormalizedException: _NormalizedException;
    function Get_Succeeded: WordBool;
    function Get_PubSubLocators: _UAPubSubLocators;
    procedure _Set_PubSubLocators(const pRetVal: _UAPubSubLocators);
    function Get_ResolvedDataSetSubscriptionDescriptor: _UADataSetSubscriptionDescriptor;
    procedure _Set_ResolvedDataSetSubscriptionDescriptor(const pRetVal: _UADataSetSubscriptionDescriptor);
    function Get_Arguments: _EasyUASubscribeDataSetArguments;
    procedure _Set_Arguments(const pRetVal: _EasyUASubscribeDataSetArguments);
    function Get_DataSetData: _UADataSetData;
    procedure _Set_DataSetData(const pRetVal: _UADataSetData);
    function Get_DataSetHeader: _UADataSetHeader;
    procedure _Set_DataSetHeader(const pRetVal: _UADataSetHeader);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _EasyUADataSetMessageEventArgs);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function MemberwiseClone: _OperationEventArgs;
    function ToLongString: WideString;
    property DefaultInterface: _EasyUADataSetMessageEventArgs read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Diagnostics: _ExceptionCollection read Get_Diagnostics write _Set_Diagnostics;
    property DiagnosticsCount: Integer read Get_DiagnosticsCount;
    property DiagnosticsSummary: WideString read Get_DiagnosticsSummary;
    property ErrorMessageBrief: WideString read Get_ErrorMessageBrief;
    property Exception: _Exception read Get_Exception write _Set_Exception;
    property NormalizedDiagnostics: _NormalizedExceptionCollection read Get_NormalizedDiagnostics;
    property NormalizedException: _NormalizedException read Get_NormalizedException;
    property Succeeded: WordBool read Get_Succeeded;
    property PubSubLocators: _UAPubSubLocators read Get_PubSubLocators write _Set_PubSubLocators;
    property ResolvedDataSetSubscriptionDescriptor: _UADataSetSubscriptionDescriptor read Get_ResolvedDataSetSubscriptionDescriptor write _Set_ResolvedDataSetSubscriptionDescriptor;
    property Arguments: _EasyUASubscribeDataSetArguments read Get_Arguments write _Set_Arguments;
    property DataSetData: _UADataSetData read Get_DataSetData write _Set_DataSetData;
    property DataSetHeader: _UADataSetHeader read Get_DataSetHeader write _Set_DataSetHeader;
    property ErrorId: WideString read Get_ErrorId write Set_ErrorId;
    property ErrorMessage: WideString read Get_ErrorMessage write Set_ErrorMessage;
  published
  end;

// *********************************************************************//
// The Class CoEasyUAResolverAccessEventArgs provides a Create and CreateRemote method to          
// create instances of the default interface _EasyUAResolverAccessEventArgs exposed by              
// the CoClass EasyUAResolverAccessEventArgs. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEasyUAResolverAccessEventArgs = class
    class function Create: _EasyUAResolverAccessEventArgs;
    class function CreateRemote(const MachineName: string): _EasyUAResolverAccessEventArgs;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TEasyUAResolverAccessEventArgs
// Help String      : Provides data for the IEasyUASubscriber.ResolverAccess event.
// Default Interface: _EasyUAResolverAccessEventArgs
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TEasyUAResolverAccessEventArgs = class(TOleServer)
  private
    FIntf: _EasyUAResolverAccessEventArgs;
    function GetDefaultInterface: _EasyUAResolverAccessEventArgs;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_Exception: _Exception;
    function Get_ResolverDescriptor: _UAPubSubResolverDescriptor;
    procedure _Set_ResolverDescriptor(const pRetVal: _UAPubSubResolverDescriptor);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _EasyUAResolverAccessEventArgs);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _EasyUAResolverAccessEventArgs read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Exception: _Exception read Get_Exception;
    property ResolverDescriptor: _UAPubSubResolverDescriptor read Get_ResolverDescriptor write _Set_ResolverDescriptor;
  published
  end;

// *********************************************************************//
// The Class CoEasyUASubscribeDataSetArgumentsDictionary provides a Create and CreateRemote method to          
// create instances of the default interface _EasyUASubscribeDataSetArgumentsDictionary exposed by              
// the CoClass EasyUASubscribeDataSetArgumentsDictionary. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEasyUASubscribeDataSetArgumentsDictionary = class
    class function Create: _EasyUASubscribeDataSetArgumentsDictionary;
    class function CreateRemote(const MachineName: string): _EasyUASubscribeDataSetArgumentsDictionary;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TEasyUASubscribeDataSetArgumentsDictionary
// Help String      : A dictionary of OPC-UA subscribe data set argument objects, keyed by data set handle.
// Default Interface: _EasyUASubscribeDataSetArgumentsDictionary
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TEasyUASubscribeDataSetArgumentsDictionary = class(TOleServer)
  private
    FIntf: _EasyUASubscribeDataSetArgumentsDictionary;
    function GetDefaultInterface: _EasyUASubscribeDataSetArgumentsDictionary;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_Item(key: Integer): _EasyUASubscribeDataSetArguments;
    procedure _Set_Item(key: Integer; const pRetVal: _EasyUASubscribeDataSetArguments);
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _EasyUASubscribeDataSetArgumentsDictionary);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function GetEnumerator: IEnumVARIANT;
    procedure Add(key: Integer; Item: OleVariant);
    procedure Clear;
    function ContainsKey(key: Integer): WordBool;
    function Remove(key: Integer): WordBool;
    function TryGetValue(key: Integer; out value: OleVariant): WordBool;
    function ContainsValue(value: OleVariant): WordBool;
    property DefaultInterface: _EasyUASubscribeDataSetArgumentsDictionary read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property Item[key: Integer]: _EasyUASubscribeDataSetArguments read Get_Item write _Set_Item; default;
    property Count: Integer read Get_Count;
  published
  end;

// *********************************************************************//
// The Class CoEasyUASubscriptionResolvedEventArgs provides a Create and CreateRemote method to          
// create instances of the default interface _EasyUASubscriptionResolvedEventArgs exposed by              
// the CoClass EasyUASubscriptionResolvedEventArgs. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEasyUASubscriptionResolvedEventArgs = class
    class function Create: _EasyUASubscriptionResolvedEventArgs;
    class function CreateRemote(const MachineName: string): _EasyUASubscriptionResolvedEventArgs;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TEasyUASubscriptionResolvedEventArgs
// Help String      : Provides data for the IEasyUASubscriber.SubscriptionResolved event.
// Default Interface: _EasyUASubscriptionResolvedEventArgs
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TEasyUASubscriptionResolvedEventArgs = class(TOleServer)
  private
    FIntf: _EasyUASubscriptionResolvedEventArgs;
    function GetDefaultInterface: _EasyUASubscriptionResolvedEventArgs;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_DataSetSubscriptionDescriptor: _UADataSetSubscriptionDescriptor;
    procedure _Set_DataSetSubscriptionDescriptor(const pRetVal: _UADataSetSubscriptionDescriptor);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _EasyUASubscriptionResolvedEventArgs);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _EasyUASubscriptionResolvedEventArgs read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DataSetSubscriptionDescriptor: _UADataSetSubscriptionDescriptor read Get_DataSetSubscriptionDescriptor write _Set_DataSetSubscriptionDescriptor;
  published
  end;

// *********************************************************************//
// The Class CoEasyUASubscribeDataSetArguments provides a Create and CreateRemote method to          
// create instances of the default interface _EasyUASubscribeDataSetArguments exposed by              
// the CoClass EasyUASubscribeDataSetArguments. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEasyUASubscribeDataSetArguments = class
    class function Create: _EasyUASubscribeDataSetArguments;
    class function CreateRemote(const MachineName: string): _EasyUASubscribeDataSetArguments;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TEasyUASubscribeDataSetArguments
// Help String      : Holds all arguments needed to subscribe to a dataset in OPC UA PubSub, possibly including a callback method.
// Default Interface: _EasyUASubscribeDataSetArguments
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TEasyUASubscribeDataSetArguments = class(TOleServer)
  private
    FIntf: _EasyUASubscribeDataSetArguments;
    function GetDefaultInterface: _EasyUASubscribeDataSetArguments;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_State: OleVariant;
    procedure _Set_State(pRetVal: OleVariant);
    function Get_DataSetSubscriptionDescriptor: _UADataSetSubscriptionDescriptor;
    procedure _Set_DataSetSubscriptionDescriptor(const pRetVal: _UADataSetSubscriptionDescriptor);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _EasyUASubscribeDataSetArguments);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function MemberwiseClone: _OperationArguments;
    procedure SetState(State: OleVariant);
    property DefaultInterface: _EasyUASubscribeDataSetArguments read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property State: OleVariant read Get_State write _Set_State;
    property DataSetSubscriptionDescriptor: _UADataSetSubscriptionDescriptor read Get_DataSetSubscriptionDescriptor write _Set_DataSetSubscriptionDescriptor;
  published
  end;

// *********************************************************************//
// The Class CoUAPublishSubscribeElement provides a Create and CreateRemote method to          
// create instances of the default interface _UAPublishSubscribeElement exposed by              
// the CoClass UAPublishSubscribeElement. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAPublishSubscribeElement = class
    class function Create: _UAPublishSubscribeElement;
    class function CreateRemote(const MachineName: string): _UAPublishSubscribeElement;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAPublishSubscribeElement
// Help String      : Represents a publish-subscribe object element in the PubSub information model.
// Default Interface: _UAPublishSubscribeElement
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAPublishSubscribeElement = class(TOleServer)
  private
    FIntf: _UAPublishSubscribeElement;
    function GetDefaultInterface: _UAPublishSubscribeElement;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_SupportedTransportProfileUriStringSet: _StringSet;
    procedure _Set_SupportedTransportProfileUriStringSet(const pRetVal: _StringSet);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAPublishSubscribeElement);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UAPublishSubscribeElement read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property SupportedTransportProfileUriStringSet: _StringSet read Get_SupportedTransportProfileUriStringSet write _Set_SupportedTransportProfileUriStringSet;
  published
  end;

// *********************************************************************//
// The Class CoUAPublisherSubscriberAdaptableParameters provides a Create and CreateRemote method to          
// create instances of the default interface _UAPublisherSubscriberAdaptableParameters exposed by              
// the CoClass UAPublisherSubscriberAdaptableParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAPublisherSubscriberAdaptableParameters = class
    class function Create: _UAPublisherSubscriberAdaptableParameters;
    class function CreateRemote(const MachineName: string): _UAPublisherSubscriberAdaptableParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAPublisherSubscriberAdaptableParameters
// Help String      : Values that differentiate the OPC-UA subscribers.
// Default Interface: _UAPublisherSubscriberAdaptableParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAPublisherSubscriberAdaptableParameters = class(TOleServer)
  private
    FIntf: _UAPublisherSubscriberAdaptableParameters;
    function GetDefaultInterface: _UAPublisherSubscriberAdaptableParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_ManagedSecurityGroupParameters: _ManagedSecurityGroupParameters;
    procedure _Set_ManagedSecurityGroupParameters(const pRetVal: _ManagedSecurityGroupParameters);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAPublisherSubscriberAdaptableParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    procedure Reset;
    property DefaultInterface: _UAPublisherSubscriberAdaptableParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property ManagedSecurityGroupParameters: _ManagedSecurityGroupParameters read Get_ManagedSecurityGroupParameters write _Set_ManagedSecurityGroupParameters;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
  published
  end;

// *********************************************************************//
// The Class CoUAPubSubResolverParameters provides a Create and CreateRemote method to          
// create instances of the default interface _UAPubSubResolverParameters exposed by              
// the CoClass UAPubSubResolverParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAPubSubResolverParameters = class
    class function Create: _UAPubSubResolverParameters;
    class function CreateRemote(const MachineName: string): _UAPubSubResolverParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAPubSubResolverParameters
// Help String      : Contains parameters for the OPC UA PubSub resolver.
// Default Interface: _UAPubSubResolverParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAPubSubResolverParameters = class(TOleServer)
  private
    FIntf: _UAPubSubResolverParameters;
    function GetDefaultInterface: _UAPubSubResolverParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_ConfigurationResolutionParameters: _UAPublisherConfigurationResolutionParameters;
    procedure _Set_ConfigurationResolutionParameters(const pRetVal: _UAPublisherConfigurationResolutionParameters);
    function Get_PublisherEndpointResolverParameters: _UAPublisherEndpointResolverParameters;
    procedure _Set_PublisherEndpointResolverParameters(const pRetVal: _UAPublisherEndpointResolverParameters);
    function Get_PublisherFileResourceResolverParameters: _PeriodicResolverParameters;
    procedure _Set_PublisherFileResourceResolverParameters(const pRetVal: _PeriodicResolverParameters);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAPubSubResolverParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UAPubSubResolverParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property ConfigurationResolutionParameters: _UAPublisherConfigurationResolutionParameters read Get_ConfigurationResolutionParameters write _Set_ConfigurationResolutionParameters;
    property PublisherEndpointResolverParameters: _UAPublisherEndpointResolverParameters read Get_PublisherEndpointResolverParameters write _Set_PublisherEndpointResolverParameters;
    property PublisherFileResourceResolverParameters: _PeriodicResolverParameters read Get_PublisherFileResourceResolverParameters write _Set_PublisherFileResourceResolverParameters;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
  published
  end;

// *********************************************************************//
// The Class CoEasyUASubscriberInstanceParameters provides a Create and CreateRemote method to          
// create instances of the default interface _EasyUASubscriberInstanceParameters exposed by              
// the CoClass EasyUASubscriberInstanceParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEasyUASubscriberInstanceParameters = class
    class function Create: _EasyUASubscriberInstanceParameters;
    class function CreateRemote(const MachineName: string): _EasyUASubscriberInstanceParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TEasyUASubscriberInstanceParameters
// Help String      : Contains parameters that influence the behavior of just this instance of the OPC-UA subscriber component.
// Default Interface: _EasyUASubscriberInstanceParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TEasyUASubscriberInstanceParameters = class(TOleServer)
  private
    FIntf: _EasyUASubscriberInstanceParameters;
    function GetDefaultInterface: _EasyUASubscriberInstanceParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_PluginConfigurations: _ConfigurationPartCollection;
    procedure _Set_PluginConfigurations(const pRetVal: _ConfigurationPartCollection);
    function Get_PluginSetups: _PluginSetupCollection;
    procedure _Set_PluginSetups(const pRetVal: _PluginSetupCollection);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _EasyUASubscriberInstanceParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    procedure Reset;
    property DefaultInterface: _EasyUASubscriberInstanceParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property PluginConfigurations: _ConfigurationPartCollection read Get_PluginConfigurations write _Set_PluginConfigurations;
    property PluginSetups: _PluginSetupCollection read Get_PluginSetups write _Set_PluginSetups;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
  published
  end;

// *********************************************************************//
// The Class CoEasyUASubscriberSharedParameters provides a Create and CreateRemote method to          
// create instances of the default interface _EasyUASubscriberSharedParameters exposed by              
// the CoClass EasyUASubscriberSharedParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEasyUASubscriberSharedParameters = class
    class function Create: _EasyUASubscriberSharedParameters;
    class function CreateRemote(const MachineName: string): _EasyUASubscriberSharedParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TEasyUASubscriberSharedParameters
// Help String      : Parameters that are always shared by all instances of the OPC-UA subscriber component.
// Default Interface: _EasyUASubscriberSharedParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TEasyUASubscriberSharedParameters = class(TOleServer)
  private
    FIntf: _EasyUASubscriberSharedParameters;
    function GetDefaultInterface: _EasyUASubscriberSharedParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_PluginConfigurations: _ConfigurationPartCollection;
    procedure _Set_PluginConfigurations(const pRetVal: _ConfigurationPartCollection);
    function Get_PluginSetups: _PluginSetupCollection;
    procedure _Set_PluginSetups(const pRetVal: _PluginSetupCollection);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _EasyUASubscriberSharedParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    procedure Reset;
    property DefaultInterface: _EasyUASubscriberSharedParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property PluginConfigurations: _ConfigurationPartCollection read Get_PluginConfigurations write _Set_PluginConfigurations;
    property PluginSetups: _PluginSetupCollection read Get_PluginSetups write _Set_PluginSetups;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
  published
  end;

// *********************************************************************//
// The Class CoUAPublisherConfigurationResolutionParameters provides a Create and CreateRemote method to          
// create instances of the default interface _UAPublisherConfigurationResolutionParameters exposed by              
// the CoClass UAPublisherConfigurationResolutionParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAPublisherConfigurationResolutionParameters = class
    class function Create: _UAPublisherConfigurationResolutionParameters;
    class function CreateRemote(const MachineName: string): _UAPublisherConfigurationResolutionParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAPublisherConfigurationResolutionParameters
// Help String      : Represents parameters for the OPC UA PubSub publisher configuration resolution.
// Default Interface: _UAPublisherConfigurationResolutionParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAPublisherConfigurationResolutionParameters = class(TOleServer)
  private
    FIntf: _UAPublisherConfigurationResolutionParameters;
    function GetDefaultInterface: _UAPublisherConfigurationResolutionParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_MessageReceiveTimeoutFactor: Double;
    procedure Set_MessageReceiveTimeoutFactor(pRetVal: Double);
    function Get_MessageReceiveTimeoutIncrease: Double;
    procedure Set_MessageReceiveTimeoutIncrease(pRetVal: Double);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAPublisherConfigurationResolutionParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UAPublisherConfigurationResolutionParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property MessageReceiveTimeoutFactor: Double read Get_MessageReceiveTimeoutFactor write Set_MessageReceiveTimeoutFactor;
    property MessageReceiveTimeoutIncrease: Double read Get_MessageReceiveTimeoutIncrease write Set_MessageReceiveTimeoutIncrease;
  published
  end;

// *********************************************************************//
// The Class CoUAPublisherEndpointResolverParameters provides a Create and CreateRemote method to          
// create instances of the default interface _UAPublisherEndpointResolverParameters exposed by              
// the CoClass UAPublisherEndpointResolverParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAPublisherEndpointResolverParameters = class
    class function Create: _UAPublisherEndpointResolverParameters;
    class function CreateRemote(const MachineName: string): _UAPublisherEndpointResolverParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAPublisherEndpointResolverParameters
// Help String      : Contains parameters for the OPC UA publisher endpoint resolver object.
// Default Interface: _UAPublisherEndpointResolverParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAPublisherEndpointResolverParameters = class(TOleServer)
  private
    FIntf: _UAPublisherEndpointResolverParameters;
    function GetDefaultInterface: _UAPublisherEndpointResolverParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_FailureRetrialDelay: Integer;
    procedure Set_FailureRetrialDelay(pRetVal: Integer);
    function Get_MaximumWaitDelay: Integer;
    procedure Set_MaximumWaitDelay(pRetVal: Integer);
    function Get_SuccessRetrialDelay: Integer;
    procedure Set_SuccessRetrialDelay(pRetVal: Integer);
    function Get_pubSubConfigurationAccessMethod: UAPubSubConfigurationAccessMethod;
    procedure Set_pubSubConfigurationAccessMethod(pRetVal: UAPubSubConfigurationAccessMethod);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAPublisherEndpointResolverParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UAPublisherEndpointResolverParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property FailureRetrialDelay: Integer read Get_FailureRetrialDelay write Set_FailureRetrialDelay;
    property MaximumWaitDelay: Integer read Get_MaximumWaitDelay write Set_MaximumWaitDelay;
    property SuccessRetrialDelay: Integer read Get_SuccessRetrialDelay write Set_SuccessRetrialDelay;
    property pubSubConfigurationAccessMethod: UAPubSubConfigurationAccessMethod read Get_pubSubConfigurationAccessMethod write Set_pubSubConfigurationAccessMethod;
  published
  end;

// *********************************************************************//
// The Class CoEasyUASubscriberAdaptableParameters provides a Create and CreateRemote method to          
// create instances of the default interface _EasyUASubscriberAdaptableParameters exposed by              
// the CoClass EasyUASubscriberAdaptableParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEasyUASubscriberAdaptableParameters = class
    class function Create: _EasyUASubscriberAdaptableParameters;
    class function CreateRemote(const MachineName: string): _EasyUASubscriberAdaptableParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TEasyUASubscriberAdaptableParameters
// Help String      : Adaptable parameters for isolated or non-isolated OPC-UA subscriber objects.
// Default Interface: _EasyUASubscriberAdaptableParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TEasyUASubscriberAdaptableParameters = class(TOleServer)
  private
    FIntf: _EasyUASubscriberAdaptableParameters;
    function GetDefaultInterface: _EasyUASubscriberAdaptableParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_ManagedSecurityGroupParameters: _ManagedSecurityGroupParameters;
    procedure _Set_ManagedSecurityGroupParameters(const pRetVal: _ManagedSecurityGroupParameters);
    function Get_ResolverParameters: _EasyUAPubSubResolverParameters;
    procedure _Set_ResolverParameters(const pRetVal: _EasyUAPubSubResolverParameters);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _EasyUASubscriberAdaptableParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    procedure Reset;
    property DefaultInterface: _EasyUASubscriberAdaptableParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property ManagedSecurityGroupParameters: _ManagedSecurityGroupParameters read Get_ManagedSecurityGroupParameters write _Set_ManagedSecurityGroupParameters;
    property ResolverParameters: _EasyUAPubSubResolverParameters read Get_ResolverParameters write _Set_ResolverParameters;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
  published
  end;

// *********************************************************************//
// The Class CoEasyUAPubSubResolverParameters provides a Create and CreateRemote method to          
// create instances of the default interface _EasyUAPubSubResolverParameters exposed by              
// the CoClass EasyUAPubSubResolverParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEasyUAPubSubResolverParameters = class
    class function Create: _EasyUAPubSubResolverParameters;
    class function CreateRemote(const MachineName: string): _EasyUAPubSubResolverParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TEasyUAPubSubResolverParameters
// Help String      : Contains OPC UA PubSub resolver implementation parameters.
// Default Interface: _EasyUAPubSubResolverParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TEasyUAPubSubResolverParameters = class(TOleServer)
  private
    FIntf: _EasyUAPubSubResolverParameters;
    function GetDefaultInterface: _EasyUAPubSubResolverParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_ConfigurationResolutionParameters: _UAPublisherConfigurationResolutionParameters;
    procedure _Set_ConfigurationResolutionParameters(const pRetVal: _UAPublisherConfigurationResolutionParameters);
    function Get_PublisherEndpointResolverParameters: _UAPublisherEndpointResolverParameters;
    procedure _Set_PublisherEndpointResolverParameters(const pRetVal: _UAPublisherEndpointResolverParameters);
    function Get_PublisherFileResourceResolverParameters: _PeriodicResolverParameters;
    procedure _Set_PublisherFileResourceResolverParameters(const pRetVal: _PeriodicResolverParameters);
    function Get_ClientSelector: _EasyUAClientSelector;
    procedure _Set_ClientSelector(const pRetVal: _EasyUAClientSelector);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _EasyUAPubSubResolverParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _EasyUAPubSubResolverParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property ConfigurationResolutionParameters: _UAPublisherConfigurationResolutionParameters read Get_ConfigurationResolutionParameters write _Set_ConfigurationResolutionParameters;
    property PublisherEndpointResolverParameters: _UAPublisherEndpointResolverParameters read Get_PublisherEndpointResolverParameters write _Set_PublisherEndpointResolverParameters;
    property PublisherFileResourceResolverParameters: _PeriodicResolverParameters read Get_PublisherFileResourceResolverParameters write _Set_PublisherFileResourceResolverParameters;
    property ClientSelector: _EasyUAClientSelector read Get_ClientSelector write _Set_ClientSelector;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
  published
  end;

// *********************************************************************//
// The Class CoUAPublishedDataSetElement provides a Create and CreateRemote method to          
// create instances of the default interface _UAPublishedDataSetElement exposed by              
// the CoClass UAPublishedDataSetElement. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAPublishedDataSetElement = class
    class function Create: _UAPublishedDataSetElement;
    class function CreateRemote(const MachineName: string): _UAPublishedDataSetElement;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAPublishedDataSetElement
// Help String      : Represents a published dataset element in the PubSub configuration.
// Default Interface: _UAPublishedDataSetElement
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAPublishedDataSetElement = class(TOleServer)
  private
    FIntf: _UAPublishedDataSetElement;
    function GetDefaultInterface: _UAPublishedDataSetElement;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_ConfigurationVersion: _UAConfigurationVersion;
    procedure _Set_ConfigurationVersion(const pRetVal: _UAConfigurationVersion);
    function Get_DataSetClassId: TGUID;
    procedure Set_DataSetClassId(pRetVal: TGUID);
    function Get_DataSetClassIdString: WideString;
    procedure Set_DataSetClassIdString(const pRetVal: WideString);
    function Get_DataSetMetaData: _UADataSetMetaData;
    procedure _Set_DataSetMetaData(const pRetVal: _UADataSetMetaData);
    function Get_ExtensionFieldValueDictionary: _UAKeyValueDictionary;
    procedure _Set_ExtensionFieldValueDictionary(const pRetVal: _UAKeyValueDictionary);
    function Get_HasDataSetClassId: WordBool;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAPublishedDataSetElement);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UAPublishedDataSetElement read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property ConfigurationVersion: _UAConfigurationVersion read Get_ConfigurationVersion write _Set_ConfigurationVersion;
    property DataSetMetaData: _UADataSetMetaData read Get_DataSetMetaData write _Set_DataSetMetaData;
    property ExtensionFieldValueDictionary: _UAKeyValueDictionary read Get_ExtensionFieldValueDictionary write _Set_ExtensionFieldValueDictionary;
    property HasDataSetClassId: WordBool read Get_HasDataSetClassId;
    property DataSetClassId: TGUID read Get_DataSetClassId write Set_DataSetClassId;
    property DataSetClassIdString: WideString read Get_DataSetClassIdString write Set_DataSetClassIdString;
    property Name: WideString read Get_Name write Set_Name;
  published
  end;

// *********************************************************************//
// The Class CoUAPubSubConfigurationElement provides a Create and CreateRemote method to          
// create instances of the default interface _UAPubSubConfigurationElement exposed by              
// the CoClass UAPubSubConfigurationElement. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAPubSubConfigurationElement = class
    class function Create: _UAPubSubConfigurationElement;
    class function CreateRemote(const MachineName: string): _UAPubSubConfigurationElement;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAPubSubConfigurationElement
// Help String      : An element that represents the PubSub configuration.
// Default Interface: _UAPubSubConfigurationElement
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAPubSubConfigurationElement = class(TOleServer)
  private
    FIntf: _UAPubSubConfigurationElement;
    function GetDefaultInterface: _UAPubSubConfigurationElement;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_Enabled: WordBool;
    procedure Set_Enabled(pRetVal: WordBool);
    function Get_SecurityKeyServices: _UADiscoveryElementCollection;
    procedure _Set_SecurityKeyServices(const pRetVal: _UADiscoveryElementCollection);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAPubSubConfigurationElement);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UAPubSubConfigurationElement read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property SecurityKeyServices: _UADiscoveryElementCollection read Get_SecurityKeyServices write _Set_SecurityKeyServices;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
  published
  end;

// *********************************************************************//
// The Class CoUAPubSubConnectionElement provides a Create and CreateRemote method to          
// create instances of the default interface _UAPubSubConnectionElement exposed by              
// the CoClass UAPubSubConnectionElement. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAPubSubConnectionElement = class
    class function Create: _UAPubSubConnectionElement;
    class function CreateRemote(const MachineName: string): _UAPubSubConnectionElement;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAPubSubConnectionElement
// Help String      : Represents a PubSub connection element in the PubSub configuration.
// Default Interface: _UAPubSubConnectionElement
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAPubSubConnectionElement = class(TOleServer)
  private
    FIntf: _UAPubSubConnectionElement;
    function GetDefaultInterface: _UAPubSubConnectionElement;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_CustomPropertyValueDictionary: _UAKeyValueDictionary;
    procedure _Set_CustomPropertyValueDictionary(const pRetVal: _UAKeyValueDictionary);
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_Enabled: WordBool;
    procedure Set_Enabled(pRetVal: WordBool);
    function Get_NetworkAddress: _NetworkAddress;
    procedure _Set_NetworkAddress(const pRetVal: _NetworkAddress);
    function Get_PublisherId: _UAPublisherId;
    procedure _Set_PublisherId(const pRetVal: _UAPublisherId);
    function Get_TransportParameters: _UAConnectionTransportParameters;
    procedure _Set_TransportParameters(const pRetVal: _UAConnectionTransportParameters);
    function Get_TransportProfileUriString: WideString;
    procedure Set_TransportProfileUriString(const pRetVal: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAPubSubConnectionElement);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function ToUAPubSubConnectionDescriptor: _UAPubSubConnectionDescriptor;
    property DefaultInterface: _UAPubSubConnectionElement read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property CustomPropertyValueDictionary: _UAKeyValueDictionary read Get_CustomPropertyValueDictionary write _Set_CustomPropertyValueDictionary;
    property NetworkAddress: _NetworkAddress read Get_NetworkAddress write _Set_NetworkAddress;
    property PublisherId: _UAPublisherId read Get_PublisherId write _Set_PublisherId;
    property TransportParameters: _UAConnectionTransportParameters read Get_TransportParameters write _Set_TransportParameters;
    property Name: WideString read Get_Name write Set_Name;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property TransportProfileUriString: WideString read Get_TransportProfileUriString write Set_TransportProfileUriString;
  published
  end;

// *********************************************************************//
// The Class CoUAConnectionTransportParameters provides a Create and CreateRemote method to          
// create instances of the default interface _UAConnectionTransportParameters exposed by              
// the CoClass UAConnectionTransportParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAConnectionTransportParameters = class
    class function Create: _UAConnectionTransportParameters;
    class function CreateRemote(const MachineName: string): _UAConnectionTransportParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAConnectionTransportParameters
// Help String      : An abstract base type for transport mapping specific PubSub connection parameters.
// Default Interface: _UAConnectionTransportParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAConnectionTransportParameters = class(TOleServer)
  private
    FIntf: _UAConnectionTransportParameters;
    function GetDefaultInterface: _UAConnectionTransportParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAConnectionTransportParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UAConnectionTransportParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
  published
  end;

// *********************************************************************//
// The Class CoUAConfigurationVersion provides a Create and CreateRemote method to          
// create instances of the default interface _UAConfigurationVersion exposed by              
// the CoClass UAConfigurationVersion. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAConfigurationVersion = class
    class function Create: _UAConfigurationVersion;
    class function CreateRemote(const MachineName: string): _UAConfigurationVersion;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAConfigurationVersion
// Help String      : Indicates configuration changes in the information published for a dataset.
// Default Interface: _UAConfigurationVersion
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAConfigurationVersion = class(TOleServer)
  private
    FIntf: _UAConfigurationVersion;
    function GetDefaultInterface: _UAConfigurationVersion;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_IsNull: WordBool;
    function Get_MajorVersionDateTime: TDateTime;
    procedure Set_MajorVersionDateTime(pRetVal: TDateTime);
    function Get_MajorVersionDateTimeLocal: TDateTime;
    procedure Set_MajorVersionDateTimeLocal(pRetVal: TDateTime);
    function Get_MajorVersionTime: Int64;
    procedure Set_MajorVersionTime(pRetVal: Int64);
    function Get_MinorVersionDateTime: TDateTime;
    procedure Set_MinorVersionDateTime(pRetVal: TDateTime);
    function Get_MinorVersionDateTimeLocal: TDateTime;
    procedure Set_MinorVersionDateTimeLocal(pRetVal: TDateTime);
    function Get_MinorVersionTime: Int64;
    procedure Set_MinorVersionTime(pRetVal: Int64);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAConfigurationVersion);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UAConfigurationVersion read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property IsNull: WordBool read Get_IsNull;
    property MajorVersionDateTime: TDateTime read Get_MajorVersionDateTime write Set_MajorVersionDateTime;
    property MajorVersionDateTimeLocal: TDateTime read Get_MajorVersionDateTimeLocal write Set_MajorVersionDateTimeLocal;
    property MajorVersionTime: Int64 read Get_MajorVersionTime write Set_MajorVersionTime;
    property MinorVersionDateTime: TDateTime read Get_MinorVersionDateTime write Set_MinorVersionDateTime;
    property MinorVersionDateTimeLocal: TDateTime read Get_MinorVersionDateTimeLocal write Set_MinorVersionDateTimeLocal;
    property MinorVersionTime: Int64 read Get_MinorVersionTime write Set_MinorVersionTime;
  published
  end;

// *********************************************************************//
// The Class CoUABrokerConnectionTransportParameters provides a Create and CreateRemote method to          
// create instances of the default interface _UABrokerConnectionTransportParameters exposed by              
// the CoClass UABrokerConnectionTransportParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUABrokerConnectionTransportParameters = class
    class function Create: _UABrokerConnectionTransportParameters;
    class function CreateRemote(const MachineName: string): _UABrokerConnectionTransportParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUABrokerConnectionTransportParameters
// Help String      : Represents the broker specific transport mapping parameters for the PubSub connection.
// Default Interface: _UABrokerConnectionTransportParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUABrokerConnectionTransportParameters = class(TOleServer)
  private
    FIntf: _UABrokerConnectionTransportParameters;
    function GetDefaultInterface: _UABrokerConnectionTransportParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_AuthenticationProfileUriString: WideString;
    procedure Set_AuthenticationProfileUriString(const pRetVal: WideString);
    function Get_ResourceUriString: WideString;
    procedure Set_ResourceUriString(const pRetVal: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UABrokerConnectionTransportParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UABrokerConnectionTransportParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property AuthenticationProfileUriString: WideString read Get_AuthenticationProfileUriString write Set_AuthenticationProfileUriString;
    property ResourceUriString: WideString read Get_ResourceUriString write Set_ResourceUriString;
  published
  end;

// *********************************************************************//
// The Class CoUADatagramConnectionTransportParameters provides a Create and CreateRemote method to          
// create instances of the default interface _UADatagramConnectionTransportParameters exposed by              
// the CoClass UADatagramConnectionTransportParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUADatagramConnectionTransportParameters = class
    class function Create: _UADatagramConnectionTransportParameters;
    class function CreateRemote(const MachineName: string): _UADatagramConnectionTransportParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUADatagramConnectionTransportParameters
// Help String      : Represents the configuration parameters for the datagram transport protocol specific settings of PubSub connections.
// Default Interface: _UADatagramConnectionTransportParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUADatagramConnectionTransportParameters = class(TOleServer)
  private
    FIntf: _UADatagramConnectionTransportParameters;
    function GetDefaultInterface: _UADatagramConnectionTransportParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_DiscoveryNetworkAddress: _NetworkAddress;
    procedure _Set_DiscoveryNetworkAddress(const pRetVal: _NetworkAddress);
    function Get_DiscoveryResourceAddress: _ResourceAddress;
    procedure _Set_DiscoveryResourceAddress(const pRetVal: _ResourceAddress);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UADatagramConnectionTransportParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UADatagramConnectionTransportParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DiscoveryNetworkAddress: _NetworkAddress read Get_DiscoveryNetworkAddress write _Set_DiscoveryNetworkAddress;
    property DiscoveryResourceAddress: _ResourceAddress read Get_DiscoveryResourceAddress write _Set_DiscoveryResourceAddress;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
  published
  end;

// *********************************************************************//
// The Class CoUADatagramWriterGroupTransportParameters provides a Create and CreateRemote method to          
// create instances of the default interface _UADatagramWriterGroupTransportParameters exposed by              
// the CoClass UADatagramWriterGroupTransportParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUADatagramWriterGroupTransportParameters = class
    class function Create: _UADatagramWriterGroupTransportParameters;
    class function CreateRemote(const MachineName: string): _UADatagramWriterGroupTransportParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUADatagramWriterGroupTransportParameters
// Help String      : Represents the datagram specific transport mapping parameters for writer groups.
// Default Interface: _UADatagramWriterGroupTransportParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUADatagramWriterGroupTransportParameters = class(TOleServer)
  private
    FIntf: _UADatagramWriterGroupTransportParameters;
    function GetDefaultInterface: _UADatagramWriterGroupTransportParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_Address: _NetworkAddress;
    procedure _Set_Address(const pRetVal: _NetworkAddress);
    function Get_MessageRepeatCount: Byte;
    procedure Set_MessageRepeatCount(pRetVal: Byte);
    function Get_MessageRepeatDelay: Double;
    procedure Set_MessageRepeatDelay(pRetVal: Double);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UADatagramWriterGroupTransportParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UADatagramWriterGroupTransportParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Address: _NetworkAddress read Get_Address write _Set_Address;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property MessageRepeatCount: Byte read Get_MessageRepeatCount write Set_MessageRepeatCount;
    property MessageRepeatDelay: Double read Get_MessageRepeatDelay write Set_MessageRepeatDelay;
  published
  end;

// *********************************************************************//
// The Class CoUADataSetFolderData provides a Create and CreateRemote method to          
// create instances of the default interface _UADataSetFolderData exposed by              
// the CoClass UADataSetFolderData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUADataSetFolderData = class
    class function Create: _UADataSetFolderData;
    class function CreateRemote(const MachineName: string): _UADataSetFolderData;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUADataSetFolderData
// Help String      : Used to organize the published datasets in a tree of folders.
// Default Interface: _UADataSetFolderData
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUADataSetFolderData = class(TOleServer)
  private
    FIntf: _UADataSetFolderData;
    function GetDefaultInterface: _UADataSetFolderData;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_PublishedDataSets: _UAPublishedDataSetDataCollection;
    function Get_Subfolders: _UADataSetFolderDataCollection;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UADataSetFolderData);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UADataSetFolderData read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property PublishedDataSets: _UAPublishedDataSetDataCollection read Get_PublishedDataSets;
    property Subfolders: _UADataSetFolderDataCollection read Get_Subfolders;
    property Name: WideString read Get_Name write Set_Name;
  published
  end;

// *********************************************************************//
// The Class CoUADataSetFolderDataCollection provides a Create and CreateRemote method to          
// create instances of the default interface _UADataSetFolderDataCollection exposed by              
// the CoClass UADataSetFolderDataCollection. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUADataSetFolderDataCollection = class
    class function Create: _UADataSetFolderDataCollection;
    class function CreateRemote(const MachineName: string): _UADataSetFolderDataCollection;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUADataSetFolderDataCollection
// Help String      : A collection of OPC-UA dataset folders.
// Default Interface: _UADataSetFolderDataCollection
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUADataSetFolderDataCollection = class(TOleServer)
  private
    FIntf: _UADataSetFolderDataCollection;
    function GetDefaultInterface: _UADataSetFolderDataCollection;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_Item(const key: WideString): _UADataSetFolderData;
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UADataSetFolderDataCollection);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function GetEnumerator: IEnumVARIANT;
    procedure Add(Item: OleVariant);
    procedure Clear;
    function Contains(Item: OleVariant): WordBool;
    function IndexOf(Item: OleVariant): Integer;
    function Remove(const key: WideString): WordBool;
    procedure RemoveAt(index: Integer);
    function ToList: _ElasticVector;
    function TryGetValue(const key: WideString; out Item: OleVariant): WordBool;
    function Clone: OleVariant;
    property DefaultInterface: _UADataSetFolderDataCollection read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Item[const key: WideString]: _UADataSetFolderData read Get_Item; default;
    property Count: Integer read Get_Count;
  published
  end;

// *********************************************************************//
// The Class CoUADataSetReaderMessageParameters provides a Create and CreateRemote method to          
// create instances of the default interface _UADataSetReaderMessageParameters exposed by              
// the CoClass UADataSetReaderMessageParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUADataSetReaderMessageParameters = class
    class function Create: _UADataSetReaderMessageParameters;
    class function CreateRemote(const MachineName: string): _UADataSetReaderMessageParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUADataSetReaderMessageParameters
// Help String      : An abstract base type for message mapping specific dataset reader parameters.
// Default Interface: _UADataSetReaderMessageParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUADataSetReaderMessageParameters = class(TOleServer)
  private
    FIntf: _UADataSetReaderMessageParameters;
    function GetDefaultInterface: _UADataSetReaderMessageParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UADataSetReaderMessageParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UADataSetReaderMessageParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
  published
  end;

// *********************************************************************//
// The Class CoUABrokerDataSetReaderTransportParameters provides a Create and CreateRemote method to          
// create instances of the default interface _UABrokerDataSetReaderTransportParameters exposed by              
// the CoClass UABrokerDataSetReaderTransportParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUABrokerDataSetReaderTransportParameters = class
    class function Create: _UABrokerDataSetReaderTransportParameters;
    class function CreateRemote(const MachineName: string): _UABrokerDataSetReaderTransportParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUABrokerDataSetReaderTransportParameters
// Help String      : Represents the broker specific transport mapping parameters for dataset writers.
// Default Interface: _UABrokerDataSetReaderTransportParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUABrokerDataSetReaderTransportParameters = class(TOleServer)
  private
    FIntf: _UABrokerDataSetReaderTransportParameters;
    function GetDefaultInterface: _UABrokerDataSetReaderTransportParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_AuthenticationProfileUriString: WideString;
    procedure Set_AuthenticationProfileUriString(const pRetVal: WideString);
    function Get_MetaDataQueueName: WideString;
    procedure Set_MetaDataQueueName(const pRetVal: WideString);
    function Get_QueueName: WideString;
    procedure Set_QueueName(const pRetVal: WideString);
    function Get_RequestedDeliveryGuarantee: UABrokerTransportQualityOfService;
    procedure Set_RequestedDeliveryGuarantee(pRetVal: UABrokerTransportQualityOfService);
    function Get_ResourceUriString: WideString;
    procedure Set_ResourceUriString(const pRetVal: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UABrokerDataSetReaderTransportParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UABrokerDataSetReaderTransportParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property AuthenticationProfileUriString: WideString read Get_AuthenticationProfileUriString write Set_AuthenticationProfileUriString;
    property MetaDataQueueName: WideString read Get_MetaDataQueueName write Set_MetaDataQueueName;
    property QueueName: WideString read Get_QueueName write Set_QueueName;
    property RequestedDeliveryGuarantee: UABrokerTransportQualityOfService read Get_RequestedDeliveryGuarantee write Set_RequestedDeliveryGuarantee;
    property ResourceUriString: WideString read Get_ResourceUriString write Set_ResourceUriString;
  published
  end;

// *********************************************************************//
// The Class CoUADataSetWriterDataCollection provides a Create and CreateRemote method to          
// create instances of the default interface _UADataSetWriterDataCollection exposed by              
// the CoClass UADataSetWriterDataCollection. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUADataSetWriterDataCollection = class
    class function Create: _UADataSetWriterDataCollection;
    class function CreateRemote(const MachineName: string): _UADataSetWriterDataCollection;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUADataSetWriterDataCollection
// Help String      : A collection of OPC-UA dataset writers.
// Default Interface: _UADataSetWriterDataCollection
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUADataSetWriterDataCollection = class(TOleServer)
  private
    FIntf: _UADataSetWriterDataCollection;
    function GetDefaultInterface: _UADataSetWriterDataCollection;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_Item(const key: WideString): _UADataSetWriterData;
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UADataSetWriterDataCollection);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function GetEnumerator: IEnumVARIANT;
    procedure Add(Item: OleVariant);
    procedure Clear;
    function Contains(Item: OleVariant): WordBool;
    function IndexOf(Item: OleVariant): Integer;
    function Remove(const key: WideString): WordBool;
    procedure RemoveAt(index: Integer);
    function ToList: _ElasticVector;
    function TryGetValue(const key: WideString; out Item: OleVariant): WordBool;
    function Clone: OleVariant;
    property DefaultInterface: _UADataSetWriterDataCollection read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Item[const key: WideString]: _UADataSetWriterData read Get_Item; default;
    property Count: Integer read Get_Count;
  published
  end;

// *********************************************************************//
// The Class CoUADataSetWriterElement provides a Create and CreateRemote method to          
// create instances of the default interface _UADataSetWriterElement exposed by              
// the CoClass UADataSetWriterElement. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUADataSetWriterElement = class
    class function Create: _UADataSetWriterElement;
    class function CreateRemote(const MachineName: string): _UADataSetWriterElement;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUADataSetWriterElement
// Help String      : Represents a dataset writer element in the PubSub configuration.
// Default Interface: _UADataSetWriterElement
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUADataSetWriterElement = class(TOleServer)
  private
    FIntf: _UADataSetWriterElement;
    function GetDefaultInterface: _UADataSetWriterElement;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_CustomPropertyValueDictionary: _UAKeyValueDictionary;
    procedure _Set_CustomPropertyValueDictionary(const pRetVal: _UAKeyValueDictionary);
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_Enabled: WordBool;
    procedure Set_Enabled(pRetVal: WordBool);
    function Get_DataSetFieldContentMask: UADataSetFieldContentMask;
    procedure Set_DataSetFieldContentMask(pRetVal: UADataSetFieldContentMask);
    function Get_DataSetWriterId: Integer;
    procedure Set_DataSetWriterId(pRetVal: Integer);
    function Get_KeyFrameCount: Int64;
    procedure Set_KeyFrameCount(pRetVal: Int64);
    function Get_KeyFrameCountInt32: Integer;
    procedure Set_KeyFrameCountInt32(pRetVal: Integer);
    function Get_MessageParameters: _UADataSetWriterMessageParameters;
    procedure _Set_MessageParameters(const pRetVal: _UADataSetWriterMessageParameters);
    function Get_PublishedDataSetName: WideString;
    procedure Set_PublishedDataSetName(const pRetVal: WideString);
    function Get_TransportParameters: _UADataSetWriterTransportParameters;
    procedure _Set_TransportParameters(const pRetVal: _UADataSetWriterTransportParameters);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UADataSetWriterElement);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function ToUADataSetWriterDescriptor: _UADataSetWriterDescriptor;
    property DefaultInterface: _UADataSetWriterElement read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property CustomPropertyValueDictionary: _UAKeyValueDictionary read Get_CustomPropertyValueDictionary write _Set_CustomPropertyValueDictionary;
    property MessageParameters: _UADataSetWriterMessageParameters read Get_MessageParameters write _Set_MessageParameters;
    property TransportParameters: _UADataSetWriterTransportParameters read Get_TransportParameters write _Set_TransportParameters;
    property Name: WideString read Get_Name write Set_Name;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property DataSetFieldContentMask: UADataSetFieldContentMask read Get_DataSetFieldContentMask write Set_DataSetFieldContentMask;
    property DataSetWriterId: Integer read Get_DataSetWriterId write Set_DataSetWriterId;
    property KeyFrameCount: Int64 read Get_KeyFrameCount write Set_KeyFrameCount;
    property KeyFrameCountInt32: Integer read Get_KeyFrameCountInt32 write Set_KeyFrameCountInt32;
    property PublishedDataSetName: WideString read Get_PublishedDataSetName write Set_PublishedDataSetName;
  published
  end;

// *********************************************************************//
// The Class CoUADataSetWriterLocator provides a Create and CreateRemote method to          
// create instances of the default interface _UADataSetWriterLocator exposed by              
// the CoClass UADataSetWriterLocator. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUADataSetWriterLocator = class
    class function Create: _UADataSetWriterLocator;
    class function CreateRemote(const MachineName: string): _UADataSetWriterLocator;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUADataSetWriterLocator
// Help String      : Contains names of objects that specify the location of the dataset in the PubSub configuration.
// Default Interface: _UADataSetWriterLocator
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUADataSetWriterLocator = class(TOleServer)
  private
    FIntf: _UADataSetWriterLocator;
    function GetDefaultInterface: _UADataSetWriterLocator;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_DataSetWriterName: WideString;
    procedure Set_DataSetWriterName(const pRetVal: WideString);
    function Get_PubSubConnectionName: WideString;
    procedure Set_PubSubConnectionName(const pRetVal: WideString);
    function Get_WriterGroupName: WideString;
    procedure Set_WriterGroupName(const pRetVal: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UADataSetWriterLocator);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UADataSetWriterLocator read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DataSetWriterName: WideString read Get_DataSetWriterName write Set_DataSetWriterName;
    property PubSubConnectionName: WideString read Get_PubSubConnectionName write Set_PubSubConnectionName;
    property WriterGroupName: WideString read Get_WriterGroupName write Set_WriterGroupName;
  published
  end;

// *********************************************************************//
// The Class CoUABrokerDataSetWriterTransportParameters provides a Create and CreateRemote method to          
// create instances of the default interface _UABrokerDataSetWriterTransportParameters exposed by              
// the CoClass UABrokerDataSetWriterTransportParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUABrokerDataSetWriterTransportParameters = class
    class function Create: _UABrokerDataSetWriterTransportParameters;
    class function CreateRemote(const MachineName: string): _UABrokerDataSetWriterTransportParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUABrokerDataSetWriterTransportParameters
// Help String      : Represents the broker specific transport mapping parameters for dataset writers.
// Default Interface: _UABrokerDataSetWriterTransportParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUABrokerDataSetWriterTransportParameters = class(TOleServer)
  private
    FIntf: _UABrokerDataSetWriterTransportParameters;
    function GetDefaultInterface: _UABrokerDataSetWriterTransportParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_AuthenticationProfileUriString: WideString;
    procedure Set_AuthenticationProfileUriString(const pRetVal: WideString);
    function Get_MetaDataQueueName: WideString;
    procedure Set_MetaDataQueueName(const pRetVal: WideString);
    function Get_MetaDataUpdateTime: Double;
    procedure Set_MetaDataUpdateTime(pRetVal: Double);
    function Get_QueueName: WideString;
    procedure Set_QueueName(const pRetVal: WideString);
    function Get_RequestedDeliveryGuarantee: UABrokerTransportQualityOfService;
    procedure Set_RequestedDeliveryGuarantee(pRetVal: UABrokerTransportQualityOfService);
    function Get_ResourceUriString: WideString;
    procedure Set_ResourceUriString(const pRetVal: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UABrokerDataSetWriterTransportParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UABrokerDataSetWriterTransportParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property AuthenticationProfileUriString: WideString read Get_AuthenticationProfileUriString write Set_AuthenticationProfileUriString;
    property MetaDataQueueName: WideString read Get_MetaDataQueueName write Set_MetaDataQueueName;
    property MetaDataUpdateTime: Double read Get_MetaDataUpdateTime write Set_MetaDataUpdateTime;
    property QueueName: WideString read Get_QueueName write Set_QueueName;
    property RequestedDeliveryGuarantee: UABrokerTransportQualityOfService read Get_RequestedDeliveryGuarantee write Set_RequestedDeliveryGuarantee;
    property ResourceUriString: WideString read Get_ResourceUriString write Set_ResourceUriString;
  published
  end;

// *********************************************************************//
// The Class CoUAFieldMetaDataCollection provides a Create and CreateRemote method to          
// create instances of the default interface _UAFieldMetaDataCollection exposed by              
// the CoClass UAFieldMetaDataCollection. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAFieldMetaDataCollection = class
    class function Create: _UAFieldMetaDataCollection;
    class function CreateRemote(const MachineName: string): _UAFieldMetaDataCollection;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAFieldMetaDataCollection
// Help String      : A collection of OPC-UA field metadata.
// Default Interface: _UAFieldMetaDataCollection
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAFieldMetaDataCollection = class(TOleServer)
  private
    FIntf: _UAFieldMetaDataCollection;
    function GetDefaultInterface: _UAFieldMetaDataCollection;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_Item(index: Integer): _UAFieldMetaData;
    procedure _Set_Item(index: Integer; const pRetVal: _UAFieldMetaData);
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAFieldMetaDataCollection);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function GetEnumerator: IEnumVARIANT;
    procedure Add(Item: OleVariant);
    procedure Clear;
    function Contains(Item: OleVariant): WordBool;
    function IndexOf(Item: OleVariant): Integer;
    procedure Insert(index: Integer; Item: OleVariant);
    function Remove(Item: OleVariant): WordBool;
    procedure RemoveAt(index: Integer);
    function Clone: OleVariant;
    property DefaultInterface: _UAFieldMetaDataCollection read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property Item[index: Integer]: _UAFieldMetaData read Get_Item write _Set_Item; default;
    property Count: Integer read Get_Count;
  published
  end;

// *********************************************************************//
// The Class CoUAJsonDataSetReaderMessageParameters provides a Create and CreateRemote method to          
// create instances of the default interface _UAJsonDataSetReaderMessageParameters exposed by              
// the CoClass UAJsonDataSetReaderMessageParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAJsonDataSetReaderMessageParameters = class
    class function Create: _UAJsonDataSetReaderMessageParameters;
    class function CreateRemote(const MachineName: string): _UAJsonDataSetReaderMessageParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAJsonDataSetReaderMessageParameters
// Help String      : Represents JSON message mapping specific dataset reader parameters.
// Default Interface: _UAJsonDataSetReaderMessageParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAJsonDataSetReaderMessageParameters = class(TOleServer)
  private
    FIntf: _UAJsonDataSetReaderMessageParameters;
    function GetDefaultInterface: _UAJsonDataSetReaderMessageParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_DataSetMessageContentMask: UAJsonDataSetMessageContentMask;
    procedure Set_DataSetMessageContentMask(pRetVal: UAJsonDataSetMessageContentMask);
    function Get_NetworkMessageContentMask: UAJsonNetworkMessageContentMask;
    procedure Set_NetworkMessageContentMask(pRetVal: UAJsonNetworkMessageContentMask);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAJsonDataSetReaderMessageParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UAJsonDataSetReaderMessageParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property DataSetMessageContentMask: UAJsonDataSetMessageContentMask read Get_DataSetMessageContentMask write Set_DataSetMessageContentMask;
    property NetworkMessageContentMask: UAJsonNetworkMessageContentMask read Get_NetworkMessageContentMask write Set_NetworkMessageContentMask;
  published
  end;

// *********************************************************************//
// The Class CoUAJsonDataSetWriterMessageParameters provides a Create and CreateRemote method to          
// create instances of the default interface _UAJsonDataSetWriterMessageParameters exposed by              
// the CoClass UAJsonDataSetWriterMessageParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAJsonDataSetWriterMessageParameters = class
    class function Create: _UAJsonDataSetWriterMessageParameters;
    class function CreateRemote(const MachineName: string): _UAJsonDataSetWriterMessageParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAJsonDataSetWriterMessageParameters
// Help String      : Represents JSON dataset message mapping specific dataset writer parameters.
// Default Interface: _UAJsonDataSetWriterMessageParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAJsonDataSetWriterMessageParameters = class(TOleServer)
  private
    FIntf: _UAJsonDataSetWriterMessageParameters;
    function GetDefaultInterface: _UAJsonDataSetWriterMessageParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_DataSetMessageContentMask: UAJsonDataSetMessageContentMask;
    procedure Set_DataSetMessageContentMask(pRetVal: UAJsonDataSetMessageContentMask);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAJsonDataSetWriterMessageParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UAJsonDataSetWriterMessageParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property DataSetMessageContentMask: UAJsonDataSetMessageContentMask read Get_DataSetMessageContentMask write Set_DataSetMessageContentMask;
  published
  end;

// *********************************************************************//
// The Class CoUAPublishedDataSetDataCollection provides a Create and CreateRemote method to          
// create instances of the default interface _UAPublishedDataSetDataCollection exposed by              
// the CoClass UAPublishedDataSetDataCollection. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAPublishedDataSetDataCollection = class
    class function Create: _UAPublishedDataSetDataCollection;
    class function CreateRemote(const MachineName: string): _UAPublishedDataSetDataCollection;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAPublishedDataSetDataCollection
// Help String      : A collection of OPC-UA published datasets.
// Default Interface: _UAPublishedDataSetDataCollection
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAPublishedDataSetDataCollection = class(TOleServer)
  private
    FIntf: _UAPublishedDataSetDataCollection;
    function GetDefaultInterface: _UAPublishedDataSetDataCollection;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_Item(const key: WideString): _UAPublishedDataSetData;
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAPublishedDataSetDataCollection);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function GetEnumerator: IEnumVARIANT;
    procedure Add(Item: OleVariant);
    procedure Clear;
    function Contains(Item: OleVariant): WordBool;
    function IndexOf(Item: OleVariant): Integer;
    function Remove(const key: WideString): WordBool;
    procedure RemoveAt(index: Integer);
    function ToList: _ElasticVector;
    function TryGetValue(const key: WideString; out Item: OleVariant): WordBool;
    function Clone: OleVariant;
    property DefaultInterface: _UAPublishedDataSetDataCollection read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Item[const key: WideString]: _UAPublishedDataSetData read Get_Item; default;
    property Count: Integer read Get_Count;
  published
  end;

// *********************************************************************//
// The Class CoUAPublishedDataSetData provides a Create and CreateRemote method to          
// create instances of the default interface _UAPublishedDataSetData exposed by              
// the CoClass UAPublishedDataSetData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAPublishedDataSetData = class
    class function Create: _UAPublishedDataSetData;
    class function CreateRemote(const MachineName: string): _UAPublishedDataSetData;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAPublishedDataSetData
// Help String      : Represents a published dataset in the PubSub configuration.
// Default Interface: _UAPublishedDataSetData
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAPublishedDataSetData = class(TOleServer)
  private
    FIntf: _UAPublishedDataSetData;
    function GetDefaultInterface: _UAPublishedDataSetData;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_ConfigurationVersion: _UAConfigurationVersion;
    procedure _Set_ConfigurationVersion(const pRetVal: _UAConfigurationVersion);
    function Get_DataSetClassId: TGUID;
    procedure Set_DataSetClassId(pRetVal: TGUID);
    function Get_DataSetClassIdString: WideString;
    procedure Set_DataSetClassIdString(const pRetVal: WideString);
    function Get_ExtensionFieldValueDictionary: _UAKeyValueDictionary;
    procedure _Set_ExtensionFieldValueDictionary(const pRetVal: _UAKeyValueDictionary);
    function Get_HasDataSetClassId: WordBool;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_DataSetMetaData: _UADataSetMetaData;
    procedure _Set_DataSetMetaData(const pRetVal: _UADataSetMetaData);
    function Get_DataSetSourceElement: _UAPublishedDataSetSourceElement;
    procedure _Set_DataSetSourceElement(const pRetVal: _UAPublishedDataSetSourceElement);
    function Get_DataSetFolderPath: _StringCollection;
    procedure _Set_DataSetFolderPath(const pRetVal: _StringCollection);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAPublishedDataSetData);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UAPublishedDataSetData read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property ConfigurationVersion: _UAConfigurationVersion read Get_ConfigurationVersion write _Set_ConfigurationVersion;
    property ExtensionFieldValueDictionary: _UAKeyValueDictionary read Get_ExtensionFieldValueDictionary write _Set_ExtensionFieldValueDictionary;
    property HasDataSetClassId: WordBool read Get_HasDataSetClassId;
    property DataSetMetaData: _UADataSetMetaData read Get_DataSetMetaData write _Set_DataSetMetaData;
    property DataSetSourceElement: _UAPublishedDataSetSourceElement read Get_DataSetSourceElement write _Set_DataSetSourceElement;
    property DataSetFolderPath: _StringCollection read Get_DataSetFolderPath write _Set_DataSetFolderPath;
    property DataSetClassId: TGUID read Get_DataSetClassId write Set_DataSetClassId;
    property DataSetClassIdString: WideString read Get_DataSetClassIdString write Set_DataSetClassIdString;
    property Name: WideString read Get_Name write Set_Name;
  published
  end;

// *********************************************************************//
// The Class CoUAPublishedDataItemsElement provides a Create and CreateRemote method to          
// create instances of the default interface _UAPublishedDataItemsElement exposed by              
// the CoClass UAPublishedDataItemsElement. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAPublishedDataItemsElement = class
    class function Create: _UAPublishedDataItemsElement;
    class function CreateRemote(const MachineName: string): _UAPublishedDataItemsElement;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAPublishedDataItemsElement
// Help String      : Represents published data items element in the PubSub configuration.
// Default Interface: _UAPublishedDataItemsElement
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAPublishedDataItemsElement = class(TOleServer)
  private
    FIntf: _UAPublishedDataItemsElement;
    function GetDefaultInterface: _UAPublishedDataItemsElement;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_PublishedVariables: _UAPublishedVariableDataCollection;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAPublishedDataItemsElement);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function AsPublishedDataItemsElement: _UAPublishedDataItemsElement;
    function AsPublishedEventsElement: _UAPublishedEventsElement;
    property DefaultInterface: _UAPublishedDataItemsElement read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property PublishedVariables: _UAPublishedVariableDataCollection read Get_PublishedVariables;
  published
  end;

// *********************************************************************//
// The Class CoUAPublishedEventsElement provides a Create and CreateRemote method to          
// create instances of the default interface _UAPublishedEventsElement exposed by              
// the CoClass UAPublishedEventsElement. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAPublishedEventsElement = class
    class function Create: _UAPublishedEventsElement;
    class function CreateRemote(const MachineName: string): _UAPublishedEventsElement;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAPublishedEventsElement
// Help String      : Represents a published events element in the PubSub configuration.
// Default Interface: _UAPublishedEventsElement
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAPublishedEventsElement = class(TOleServer)
  private
    FIntf: _UAPublishedEventsElement;
    function GetDefaultInterface: _UAPublishedEventsElement;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_ContentFilter: _UAContentFilterElement;
    procedure _Set_ContentFilter(const pRetVal: _UAContentFilterElement);
    function Get_EventNotifier: _UANodeDescriptor;
    procedure _Set_EventNotifier(const pRetVal: _UANodeDescriptor);
    function Get_SelectedFields: _UASimpleAttributeOperandCollection;
    procedure _Set_SelectedFields(const pRetVal: _UASimpleAttributeOperandCollection);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAPublishedEventsElement);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function AsPublishedDataItemsElement: _UAPublishedDataItemsElement;
    function AsPublishedEventsElement: _UAPublishedEventsElement;
    property DefaultInterface: _UAPublishedEventsElement read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property ContentFilter: _UAContentFilterElement read Get_ContentFilter write _Set_ContentFilter;
    property EventNotifier: _UANodeDescriptor read Get_EventNotifier write _Set_EventNotifier;
    property SelectedFields: _UASimpleAttributeOperandCollection read Get_SelectedFields write _Set_SelectedFields;
  published
  end;

// *********************************************************************//
// The Class CoUAPublishedVariableData provides a Create and CreateRemote method to          
// create instances of the default interface _UAPublishedVariableData exposed by              
// the CoClass UAPublishedVariableData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAPublishedVariableData = class
    class function Create: _UAPublishedVariableData;
    class function CreateRemote(const MachineName: string): _UAPublishedVariableData;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAPublishedVariableData
// Help String      : Represents the configuration information for one variable.
// Default Interface: _UAPublishedVariableData
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAPublishedVariableData = class(TOleServer)
  private
    FIntf: _UAPublishedVariableData;
    function GetDefaultInterface: _UAPublishedVariableData;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_AttributeId: UAAttributeId;
    procedure Set_AttributeId(pRetVal: UAAttributeId);
    function Get_DeadbandType: UADeadbandType;
    procedure Set_DeadbandType(pRetVal: UADeadbandType);
    function Get_DeadbandValue: Double;
    procedure Set_DeadbandValue(pRetVal: Double);
    function Get_IndexRangeList: _UAIndexRangeList;
    procedure _Set_IndexRangeList(const pRetVal: _UAIndexRangeList);
    function Get_MetaDataPropertyNameSet: _UAQualifiedNameSet;
    procedure _Set_MetaDataPropertyNameSet(const pRetVal: _UAQualifiedNameSet);
    function Get_PublishedVariable: _UANodeId;
    procedure _Set_PublishedVariable(const pRetVal: _UANodeId);
    function Get_SamplingIntervalHint: Double;
    procedure Set_SamplingIntervalHint(pRetVal: Double);
    function Get_SubstituteValue: OleVariant;
    procedure _Set_SubstituteValue(pRetVal: OleVariant);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAPublishedVariableData);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    procedure SetSubstituteValue(SubstituteValue: OleVariant);
    property DefaultInterface: _UAPublishedVariableData read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property IndexRangeList: _UAIndexRangeList read Get_IndexRangeList write _Set_IndexRangeList;
    property MetaDataPropertyNameSet: _UAQualifiedNameSet read Get_MetaDataPropertyNameSet write _Set_MetaDataPropertyNameSet;
    property PublishedVariable: _UANodeId read Get_PublishedVariable write _Set_PublishedVariable;
    property SubstituteValue: OleVariant read Get_SubstituteValue write _Set_SubstituteValue;
    property AttributeId: UAAttributeId read Get_AttributeId write Set_AttributeId;
    property DeadbandType: UADeadbandType read Get_DeadbandType write Set_DeadbandType;
    property DeadbandValue: Double read Get_DeadbandValue write Set_DeadbandValue;
    property SamplingIntervalHint: Double read Get_SamplingIntervalHint write Set_SamplingIntervalHint;
  published
  end;

// *********************************************************************//
// The Class CoUAPublishedVariableDataCollection provides a Create and CreateRemote method to          
// create instances of the default interface _UAPublishedVariableDataCollection exposed by              
// the CoClass UAPublishedVariableDataCollection. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAPublishedVariableDataCollection = class
    class function Create: _UAPublishedVariableDataCollection;
    class function CreateRemote(const MachineName: string): _UAPublishedVariableDataCollection;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAPublishedVariableDataCollection
// Help String      : A collection of OPC-UA published variable configuration information.
// Default Interface: _UAPublishedVariableDataCollection
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAPublishedVariableDataCollection = class(TOleServer)
  private
    FIntf: _UAPublishedVariableDataCollection;
    function GetDefaultInterface: _UAPublishedVariableDataCollection;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_Item(index: Integer): _UAPublishedVariableData;
    procedure _Set_Item(index: Integer; const pRetVal: _UAPublishedVariableData);
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAPublishedVariableDataCollection);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function GetEnumerator: IEnumVARIANT;
    procedure Add(Item: OleVariant);
    procedure Clear;
    function Contains(Item: OleVariant): WordBool;
    function IndexOf(Item: OleVariant): Integer;
    procedure Insert(index: Integer; Item: OleVariant);
    function Remove(Item: OleVariant): WordBool;
    procedure RemoveAt(index: Integer);
    function Clone: OleVariant;
    property DefaultInterface: _UAPublishedVariableDataCollection read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property Item[index: Integer]: _UAPublishedVariableData read Get_Item write _Set_Item; default;
    property Count: Integer read Get_Count;
  published
  end;

// *********************************************************************//
// The Class CoUADataSetWriterData provides a Create and CreateRemote method to          
// create instances of the default interface _UADataSetWriterData exposed by              
// the CoClass UADataSetWriterData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUADataSetWriterData = class
    class function Create: _UADataSetWriterData;
    class function CreateRemote(const MachineName: string): _UADataSetWriterData;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUADataSetWriterData
// Help String      : Represents the dataset writer parameters.
// Default Interface: _UADataSetWriterData
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUADataSetWriterData = class(TOleServer)
  private
    FIntf: _UADataSetWriterData;
    function GetDefaultInterface: _UADataSetWriterData;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_CustomPropertyValueDictionary: _UAKeyValueDictionary;
    procedure _Set_CustomPropertyValueDictionary(const pRetVal: _UAKeyValueDictionary);
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_Enabled: WordBool;
    procedure Set_Enabled(pRetVal: WordBool);
    function Get_DataSetFieldContentMask: UADataSetFieldContentMask;
    procedure Set_DataSetFieldContentMask(pRetVal: UADataSetFieldContentMask);
    function Get_DataSetWriterId: Integer;
    procedure Set_DataSetWriterId(pRetVal: Integer);
    function Get_KeyFrameCount: Int64;
    procedure Set_KeyFrameCount(pRetVal: Int64);
    function Get_KeyFrameCountInt32: Integer;
    procedure Set_KeyFrameCountInt32(pRetVal: Integer);
    function Get_MessageParameters: _UADataSetWriterMessageParameters;
    procedure _Set_MessageParameters(const pRetVal: _UADataSetWriterMessageParameters);
    function Get_PublishedDataSetName: WideString;
    procedure Set_PublishedDataSetName(const pRetVal: WideString);
    function Get_TransportParameters: _UADataSetWriterTransportParameters;
    procedure _Set_TransportParameters(const pRetVal: _UADataSetWriterTransportParameters);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UADataSetWriterData);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function ToUADataSetWriterDescriptor: _UADataSetWriterDescriptor;
    property DefaultInterface: _UADataSetWriterData read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property CustomPropertyValueDictionary: _UAKeyValueDictionary read Get_CustomPropertyValueDictionary write _Set_CustomPropertyValueDictionary;
    property MessageParameters: _UADataSetWriterMessageParameters read Get_MessageParameters write _Set_MessageParameters;
    property TransportParameters: _UADataSetWriterTransportParameters read Get_TransportParameters write _Set_TransportParameters;
    property Name: WideString read Get_Name write Set_Name;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property DataSetFieldContentMask: UADataSetFieldContentMask read Get_DataSetFieldContentMask write Set_DataSetFieldContentMask;
    property DataSetWriterId: Integer read Get_DataSetWriterId write Set_DataSetWriterId;
    property KeyFrameCount: Int64 read Get_KeyFrameCount write Set_KeyFrameCount;
    property KeyFrameCountInt32: Integer read Get_KeyFrameCountInt32 write Set_KeyFrameCountInt32;
    property PublishedDataSetName: WideString read Get_PublishedDataSetName write Set_PublishedDataSetName;
  published
  end;

// *********************************************************************//
// The Class CoUAPubSubConfigurationData provides a Create and CreateRemote method to          
// create instances of the default interface _UAPubSubConfigurationData exposed by              
// the CoClass UAPubSubConfigurationData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAPubSubConfigurationData = class
    class function Create: _UAPubSubConfigurationData;
    class function CreateRemote(const MachineName: string): _UAPubSubConfigurationData;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAPubSubConfigurationData
// Help String      : Represents the PubSub configuration.
// Default Interface: _UAPubSubConfigurationData
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAPubSubConfigurationData = class(TOleServer)
  private
    FIntf: _UAPubSubConfigurationData;
    function GetDefaultInterface: _UAPubSubConfigurationData;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_Enabled: WordBool;
    procedure Set_Enabled(pRetVal: WordBool);
    function Get_SecurityKeyServices: _UADiscoveryElementCollection;
    procedure _Set_SecurityKeyServices(const pRetVal: _UADiscoveryElementCollection);
    function Get_Connections: _UAPubSubConnectionDataCollection;
    function Get_PublishedDataSets: _UADataSetFolderData;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAPubSubConfigurationData);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UAPubSubConfigurationData read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property SecurityKeyServices: _UADiscoveryElementCollection read Get_SecurityKeyServices write _Set_SecurityKeyServices;
    property Connections: _UAPubSubConnectionDataCollection read Get_Connections;
    property PublishedDataSets: _UADataSetFolderData read Get_PublishedDataSets;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
  published
  end;

// *********************************************************************//
// The Class CoUAPubSubConnectionDataCollection provides a Create and CreateRemote method to          
// create instances of the default interface _UAPubSubConnectionDataCollection exposed by              
// the CoClass UAPubSubConnectionDataCollection. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAPubSubConnectionDataCollection = class
    class function Create: _UAPubSubConnectionDataCollection;
    class function CreateRemote(const MachineName: string): _UAPubSubConnectionDataCollection;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAPubSubConnectionDataCollection
// Help String      : A collection of OPC-UA PubSub connections.
// Default Interface: _UAPubSubConnectionDataCollection
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAPubSubConnectionDataCollection = class(TOleServer)
  private
    FIntf: _UAPubSubConnectionDataCollection;
    function GetDefaultInterface: _UAPubSubConnectionDataCollection;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_Item(const key: WideString): _UAPubSubConnectionData;
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAPubSubConnectionDataCollection);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function GetEnumerator: IEnumVARIANT;
    procedure Add(Item: OleVariant);
    procedure Clear;
    function Contains(Item: OleVariant): WordBool;
    function IndexOf(Item: OleVariant): Integer;
    function Remove(const key: WideString): WordBool;
    procedure RemoveAt(index: Integer);
    function ToList: _ElasticVector;
    function TryGetValue(const key: WideString; out Item: OleVariant): WordBool;
    function Clone: OleVariant;
    property DefaultInterface: _UAPubSubConnectionDataCollection read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Item[const key: WideString]: _UAPubSubConnectionData read Get_Item; default;
    property Count: Integer read Get_Count;
  published
  end;

// *********************************************************************//
// The Class CoUAPubSubConnectionData provides a Create and CreateRemote method to          
// create instances of the default interface _UAPubSubConnectionData exposed by              
// the CoClass UAPubSubConnectionData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAPubSubConnectionData = class
    class function Create: _UAPubSubConnectionData;
    class function CreateRemote(const MachineName: string): _UAPubSubConnectionData;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAPubSubConnectionData
// Help String      : Represents a PubSub connection in the PubSub configuration.
// Default Interface: _UAPubSubConnectionData
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAPubSubConnectionData = class(TOleServer)
  private
    FIntf: _UAPubSubConnectionData;
    function GetDefaultInterface: _UAPubSubConnectionData;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_CustomPropertyValueDictionary: _UAKeyValueDictionary;
    procedure _Set_CustomPropertyValueDictionary(const pRetVal: _UAKeyValueDictionary);
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_Enabled: WordBool;
    procedure Set_Enabled(pRetVal: WordBool);
    function Get_NetworkAddress: _NetworkAddress;
    procedure _Set_NetworkAddress(const pRetVal: _NetworkAddress);
    function Get_PublisherId: _UAPublisherId;
    procedure _Set_PublisherId(const pRetVal: _UAPublisherId);
    function Get_TransportParameters: _UAConnectionTransportParameters;
    procedure _Set_TransportParameters(const pRetVal: _UAConnectionTransportParameters);
    function Get_TransportProfileUriString: WideString;
    procedure Set_TransportProfileUriString(const pRetVal: WideString);
    function Get_WriterGroups: _UAWriterGroupDataCollection;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAPubSubConnectionData);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function ToUAPubSubConnectionDescriptor: _UAPubSubConnectionDescriptor;
    property DefaultInterface: _UAPubSubConnectionData read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property CustomPropertyValueDictionary: _UAKeyValueDictionary read Get_CustomPropertyValueDictionary write _Set_CustomPropertyValueDictionary;
    property NetworkAddress: _NetworkAddress read Get_NetworkAddress write _Set_NetworkAddress;
    property PublisherId: _UAPublisherId read Get_PublisherId write _Set_PublisherId;
    property TransportParameters: _UAConnectionTransportParameters read Get_TransportParameters write _Set_TransportParameters;
    property WriterGroups: _UAWriterGroupDataCollection read Get_WriterGroups;
    property Name: WideString read Get_Name write Set_Name;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property TransportProfileUriString: WideString read Get_TransportProfileUriString write Set_TransportProfileUriString;
  published
  end;

// *********************************************************************//
// The Class CoUAFieldMetaData provides a Create and CreateRemote method to          
// create instances of the default interface _UAFieldMetaData exposed by              
// the CoClass UAFieldMetaData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAFieldMetaData = class
    class function Create: _UAFieldMetaData;
    class function CreateRemote(const MachineName: string): _UAFieldMetaData;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAFieldMetaData
// Help String      : Provide the metadata for a field in a dataset.
// Default Interface: _UAFieldMetaData
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAFieldMetaData = class(TOleServer)
  private
    FIntf: _UAFieldMetaData;
    function GetDefaultInterface: _UAFieldMetaData;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_CustomPropertyValueDictionary: _UAKeyValueDictionary;
    procedure _Set_CustomPropertyValueDictionary(const pRetVal: _UAKeyValueDictionary);
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_ArrayDimensions: PSafeArray;
    procedure Set_ArrayDimensions(pRetVal: PSafeArray);
    function Get_BuiltInType: UABuiltInType;
    procedure Set_BuiltInType(pRetVal: UABuiltInType);
    function Get_DataSetFieldFlags: UADataSetFieldFlags;
    procedure Set_DataSetFieldFlags(pRetVal: UADataSetFieldFlags);
    function Get_DataSetFieldId: TGUID;
    procedure Set_DataSetFieldId(pRetVal: TGUID);
    function Get_DataSetFieldIdString: WideString;
    procedure Set_DataSetFieldIdString(const pRetVal: WideString);
    function Get_DataTypeId: _UANodeId;
    procedure _Set_DataTypeId(const pRetVal: _UANodeId);
    function Get_Description: WideString;
    procedure Set_Description(const pRetVal: WideString);
    function Get_MaximumStringLength: Int64;
    procedure Set_MaximumStringLength(pRetVal: Int64);
    function Get_MaximumStringLengthInt32: Integer;
    procedure Set_MaximumStringLengthInt32(pRetVal: Integer);
    function Get_ValueRank: Integer;
    procedure Set_ValueRank(pRetVal: Integer);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAFieldMetaData);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    procedure SetArrayDimensions(var value: PSafeArray);
    property DefaultInterface: _UAFieldMetaData read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property CustomPropertyValueDictionary: _UAKeyValueDictionary read Get_CustomPropertyValueDictionary write _Set_CustomPropertyValueDictionary;
    property DataTypeId: _UANodeId read Get_DataTypeId write _Set_DataTypeId;
    property Name: WideString read Get_Name write Set_Name;
    property ArrayDimensions: PSafeArray read Get_ArrayDimensions write Set_ArrayDimensions;
    property BuiltInType: UABuiltInType read Get_BuiltInType write Set_BuiltInType;
    property DataSetFieldFlags: UADataSetFieldFlags read Get_DataSetFieldFlags write Set_DataSetFieldFlags;
    property DataSetFieldId: TGUID read Get_DataSetFieldId write Set_DataSetFieldId;
    property DataSetFieldIdString: WideString read Get_DataSetFieldIdString write Set_DataSetFieldIdString;
    property Description: WideString read Get_Description write Set_Description;
    property MaximumStringLength: Int64 read Get_MaximumStringLength write Set_MaximumStringLength;
    property MaximumStringLengthInt32: Integer read Get_MaximumStringLengthInt32 write Set_MaximumStringLengthInt32;
    property ValueRank: Integer read Get_ValueRank write Set_ValueRank;
  published
  end;

// *********************************************************************//
// The Class CoUAUadpDataSetReaderMessageParameters provides a Create and CreateRemote method to          
// create instances of the default interface _UAUadpDataSetReaderMessageParameters exposed by              
// the CoClass UAUadpDataSetReaderMessageParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAUadpDataSetReaderMessageParameters = class
    class function Create: _UAUadpDataSetReaderMessageParameters;
    class function CreateRemote(const MachineName: string): _UAUadpDataSetReaderMessageParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAUadpDataSetReaderMessageParameters
// Help String      : Represents UADP message mapping specific dataset reader parameters.
// Default Interface: _UAUadpDataSetReaderMessageParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAUadpDataSetReaderMessageParameters = class(TOleServer)
  private
    FIntf: _UAUadpDataSetReaderMessageParameters;
    function GetDefaultInterface: _UAUadpDataSetReaderMessageParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_DataSetClassId: TGUID;
    procedure Set_DataSetClassId(pRetVal: TGUID);
    function Get_DataSetClassIdString: WideString;
    procedure Set_DataSetClassIdString(const pRetVal: WideString);
    function Get_DataSetMessageContentMask: UAUadpDataSetMessageContentMask;
    procedure Set_DataSetMessageContentMask(pRetVal: UAUadpDataSetMessageContentMask);
    function Get_DataSetOffset: Integer;
    procedure Set_DataSetOffset(pRetVal: Integer);
    function Get_GroupVersion: Int64;
    procedure Set_GroupVersion(pRetVal: Int64);
    function Get_GroupVersionDateTime: TDateTime;
    procedure Set_GroupVersionDateTime(pRetVal: TDateTime);
    function Get_GroupVersionInt32: Integer;
    procedure Set_GroupVersionInt32(pRetVal: Integer);
    function Get_NetworkMessageContentMask: UAUadpNetworkMessageContentMask;
    procedure Set_NetworkMessageContentMask(pRetVal: UAUadpNetworkMessageContentMask);
    function Get_NetworkMessageNumber: Integer;
    procedure Set_NetworkMessageNumber(pRetVal: Integer);
    function Get_ProcessingOffset: Double;
    procedure Set_ProcessingOffset(pRetVal: Double);
    function Get_PublishingInterval: Double;
    procedure Set_PublishingInterval(pRetVal: Double);
    function Get_ReceiveOffset: Double;
    procedure Set_ReceiveOffset(pRetVal: Double);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAUadpDataSetReaderMessageParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UAUadpDataSetReaderMessageParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property DataSetClassId: TGUID read Get_DataSetClassId write Set_DataSetClassId;
    property DataSetClassIdString: WideString read Get_DataSetClassIdString write Set_DataSetClassIdString;
    property DataSetMessageContentMask: UAUadpDataSetMessageContentMask read Get_DataSetMessageContentMask write Set_DataSetMessageContentMask;
    property DataSetOffset: Integer read Get_DataSetOffset write Set_DataSetOffset;
    property GroupVersion: Int64 read Get_GroupVersion write Set_GroupVersion;
    property GroupVersionDateTime: TDateTime read Get_GroupVersionDateTime write Set_GroupVersionDateTime;
    property GroupVersionInt32: Integer read Get_GroupVersionInt32 write Set_GroupVersionInt32;
    property NetworkMessageContentMask: UAUadpNetworkMessageContentMask read Get_NetworkMessageContentMask write Set_NetworkMessageContentMask;
    property NetworkMessageNumber: Integer read Get_NetworkMessageNumber write Set_NetworkMessageNumber;
    property ProcessingOffset: Double read Get_ProcessingOffset write Set_ProcessingOffset;
    property PublishingInterval: Double read Get_PublishingInterval write Set_PublishingInterval;
    property ReceiveOffset: Double read Get_ReceiveOffset write Set_ReceiveOffset;
  published
  end;

// *********************************************************************//
// The Class CoUAUadpDataSetWriterMessageParameters provides a Create and CreateRemote method to          
// create instances of the default interface _UAUadpDataSetWriterMessageParameters exposed by              
// the CoClass UAUadpDataSetWriterMessageParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAUadpDataSetWriterMessageParameters = class
    class function Create: _UAUadpDataSetWriterMessageParameters;
    class function CreateRemote(const MachineName: string): _UAUadpDataSetWriterMessageParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAUadpDataSetWriterMessageParameters
// Help String      : Represents UADP dataset message mapping specific dataset writer parameters.
// Default Interface: _UAUadpDataSetWriterMessageParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAUadpDataSetWriterMessageParameters = class(TOleServer)
  private
    FIntf: _UAUadpDataSetWriterMessageParameters;
    function GetDefaultInterface: _UAUadpDataSetWriterMessageParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_ConfiguredSize: Integer;
    procedure Set_ConfiguredSize(pRetVal: Integer);
    function Get_DataSetMessageContentMask: UAUadpDataSetMessageContentMask;
    procedure Set_DataSetMessageContentMask(pRetVal: UAUadpDataSetMessageContentMask);
    function Get_DataSetOffset: Integer;
    procedure Set_DataSetOffset(pRetVal: Integer);
    function Get_NetworkMessageNumber: Integer;
    procedure Set_NetworkMessageNumber(pRetVal: Integer);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAUadpDataSetWriterMessageParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UAUadpDataSetWriterMessageParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property ConfiguredSize: Integer read Get_ConfiguredSize write Set_ConfiguredSize;
    property DataSetMessageContentMask: UAUadpDataSetMessageContentMask read Get_DataSetMessageContentMask write Set_DataSetMessageContentMask;
    property DataSetOffset: Integer read Get_DataSetOffset write Set_DataSetOffset;
    property NetworkMessageNumber: Integer read Get_NetworkMessageNumber write Set_NetworkMessageNumber;
  published
  end;

// *********************************************************************//
// The Class CoUAUadpWriterGroupMessageParameters provides a Create and CreateRemote method to          
// create instances of the default interface _UAUadpWriterGroupMessageParameters exposed by              
// the CoClass UAUadpWriterGroupMessageParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAUadpWriterGroupMessageParameters = class
    class function Create: _UAUadpWriterGroupMessageParameters;
    class function CreateRemote(const MachineName: string): _UAUadpWriterGroupMessageParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAUadpWriterGroupMessageParameters
// Help String      : Represents the UADP network message mapping specific writer group parameters.
// Default Interface: _UAUadpWriterGroupMessageParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAUadpWriterGroupMessageParameters = class(TOleServer)
  private
    FIntf: _UAUadpWriterGroupMessageParameters;
    function GetDefaultInterface: _UAUadpWriterGroupMessageParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_DataSetOrdering: UADataSetOrdering;
    procedure Set_DataSetOrdering(pRetVal: UADataSetOrdering);
    function Get_GroupVersion: Int64;
    procedure Set_GroupVersion(pRetVal: Int64);
    function Get_GroupVersionDateTime: TDateTime;
    procedure Set_GroupVersionDateTime(pRetVal: TDateTime);
    function Get_GroupVersionInt32: Integer;
    procedure Set_GroupVersionInt32(pRetVal: Integer);
    function Get_NetworkMessageContentMask: UAUadpNetworkMessageContentMask;
    procedure Set_NetworkMessageContentMask(pRetVal: UAUadpNetworkMessageContentMask);
    function Get_PublishingOffset: Double;
    procedure Set_PublishingOffset(pRetVal: Double);
    function Get_PublishingOffsets: PSafeArray;
    procedure Set_PublishingOffsets(pRetVal: PSafeArray);
    function Get_SamplingOffset: Double;
    procedure Set_SamplingOffset(pRetVal: Double);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAUadpWriterGroupMessageParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    procedure SetPublishingOffsets(var value: PSafeArray);
    property DefaultInterface: _UAUadpWriterGroupMessageParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property DataSetOrdering: UADataSetOrdering read Get_DataSetOrdering write Set_DataSetOrdering;
    property GroupVersion: Int64 read Get_GroupVersion write Set_GroupVersion;
    property GroupVersionDateTime: TDateTime read Get_GroupVersionDateTime write Set_GroupVersionDateTime;
    property GroupVersionInt32: Integer read Get_GroupVersionInt32 write Set_GroupVersionInt32;
    property NetworkMessageContentMask: UAUadpNetworkMessageContentMask read Get_NetworkMessageContentMask write Set_NetworkMessageContentMask;
    property PublishingOffset: Double read Get_PublishingOffset write Set_PublishingOffset;
    property PublishingOffsets: PSafeArray read Get_PublishingOffsets write Set_PublishingOffsets;
    property SamplingOffset: Double read Get_SamplingOffset write Set_SamplingOffset;
  published
  end;

// *********************************************************************//
// The Class CoUAWriterGroupData provides a Create and CreateRemote method to          
// create instances of the default interface _UAWriterGroupData exposed by              
// the CoClass UAWriterGroupData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAWriterGroupData = class
    class function Create: _UAWriterGroupData;
    class function CreateRemote(const MachineName: string): _UAWriterGroupData;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAWriterGroupData
// Help String      : Represents a writer group in the PubSub configuration.
// Default Interface: _UAWriterGroupData
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAWriterGroupData = class(TOleServer)
  private
    FIntf: _UAWriterGroupData;
    function GetDefaultInterface: _UAWriterGroupData;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_CustomPropertyValueDictionary: _UAKeyValueDictionary;
    procedure _Set_CustomPropertyValueDictionary(const pRetVal: _UAKeyValueDictionary);
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_Enabled: WordBool;
    procedure Set_Enabled(pRetVal: WordBool);
    function Get_MaximumNetworkMessageSize: Int64;
    procedure Set_MaximumNetworkMessageSize(pRetVal: Int64);
    function Get_MaximumNetworkMessageSizeInt32: Integer;
    procedure Set_MaximumNetworkMessageSizeInt32(pRetVal: Integer);
    function Get_securityGroupId: WideString;
    procedure Set_securityGroupId(const pRetVal: WideString);
    function Get_SecurityKeyServices: _UADiscoveryElementCollection;
    procedure _Set_SecurityKeyServices(const pRetVal: _UADiscoveryElementCollection);
    function Get_SecurityMode: UAMessageSecurityModes;
    procedure Set_SecurityMode(pRetVal: UAMessageSecurityModes);
    function Get_HeaderLayoutUriString: WideString;
    procedure Set_HeaderLayoutUriString(const pRetVal: WideString);
    function Get_KeepAliveTime: Double;
    procedure Set_KeepAliveTime(pRetVal: Double);
    function Get_LocaleIds: _StringCollection;
    procedure _Set_LocaleIds(const pRetVal: _StringCollection);
    function Get_MessageParameters: _UAWriterGroupMessageParameters;
    procedure _Set_MessageParameters(const pRetVal: _UAWriterGroupMessageParameters);
    function Get_Priority: Byte;
    procedure Set_Priority(pRetVal: Byte);
    function Get_PublishingInterval: Double;
    procedure Set_PublishingInterval(pRetVal: Double);
    function Get_TransportParameters: _UAWriterGroupTransportParameters;
    procedure _Set_TransportParameters(const pRetVal: _UAWriterGroupTransportParameters);
    function Get_WriterGroupId: Integer;
    procedure Set_WriterGroupId(pRetVal: Integer);
    function Get_DataSetWriters: _UADataSetWriterDataCollection;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAWriterGroupData);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function ToUAWriterGroupDescriptor: _UAWriterGroupDescriptor;
    property DefaultInterface: _UAWriterGroupData read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property CustomPropertyValueDictionary: _UAKeyValueDictionary read Get_CustomPropertyValueDictionary write _Set_CustomPropertyValueDictionary;
    property SecurityKeyServices: _UADiscoveryElementCollection read Get_SecurityKeyServices write _Set_SecurityKeyServices;
    property LocaleIds: _StringCollection read Get_LocaleIds write _Set_LocaleIds;
    property MessageParameters: _UAWriterGroupMessageParameters read Get_MessageParameters write _Set_MessageParameters;
    property TransportParameters: _UAWriterGroupTransportParameters read Get_TransportParameters write _Set_TransportParameters;
    property DataSetWriters: _UADataSetWriterDataCollection read Get_DataSetWriters;
    property Name: WideString read Get_Name write Set_Name;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property MaximumNetworkMessageSize: Int64 read Get_MaximumNetworkMessageSize write Set_MaximumNetworkMessageSize;
    property MaximumNetworkMessageSizeInt32: Integer read Get_MaximumNetworkMessageSizeInt32 write Set_MaximumNetworkMessageSizeInt32;
    property securityGroupId: WideString read Get_securityGroupId write Set_securityGroupId;
    property SecurityMode: UAMessageSecurityModes read Get_SecurityMode write Set_SecurityMode;
    property HeaderLayoutUriString: WideString read Get_HeaderLayoutUriString write Set_HeaderLayoutUriString;
    property KeepAliveTime: Double read Get_KeepAliveTime write Set_KeepAliveTime;
    property Priority: Byte read Get_Priority write Set_Priority;
    property PublishingInterval: Double read Get_PublishingInterval write Set_PublishingInterval;
    property WriterGroupId: Integer read Get_WriterGroupId write Set_WriterGroupId;
  published
  end;

// *********************************************************************//
// The Class CoUAWriterGroupDataCollection provides a Create and CreateRemote method to          
// create instances of the default interface _UAWriterGroupDataCollection exposed by              
// the CoClass UAWriterGroupDataCollection. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAWriterGroupDataCollection = class
    class function Create: _UAWriterGroupDataCollection;
    class function CreateRemote(const MachineName: string): _UAWriterGroupDataCollection;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAWriterGroupDataCollection
// Help String      : A collection of OPC-UA writer groups.
// Default Interface: _UAWriterGroupDataCollection
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAWriterGroupDataCollection = class(TOleServer)
  private
    FIntf: _UAWriterGroupDataCollection;
    function GetDefaultInterface: _UAWriterGroupDataCollection;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_Item(const key: WideString): _UAWriterGroupData;
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAWriterGroupDataCollection);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function GetEnumerator: IEnumVARIANT;
    procedure Add(Item: OleVariant);
    procedure Clear;
    function Contains(Item: OleVariant): WordBool;
    function IndexOf(Item: OleVariant): Integer;
    function Remove(const key: WideString): WordBool;
    procedure RemoveAt(index: Integer);
    function ToList: _ElasticVector;
    function TryGetValue(const key: WideString; out Item: OleVariant): WordBool;
    function Clone: OleVariant;
    property DefaultInterface: _UAWriterGroupDataCollection read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Item[const key: WideString]: _UAWriterGroupData read Get_Item; default;
    property Count: Integer read Get_Count;
  published
  end;

// *********************************************************************//
// The Class CoUAWriterGroupElement provides a Create and CreateRemote method to          
// create instances of the default interface _UAWriterGroupElement exposed by              
// the CoClass UAWriterGroupElement. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAWriterGroupElement = class
    class function Create: _UAWriterGroupElement;
    class function CreateRemote(const MachineName: string): _UAWriterGroupElement;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAWriterGroupElement
// Help String      : Represents a writer group element in the PubSub configuration.
// Default Interface: _UAWriterGroupElement
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAWriterGroupElement = class(TOleServer)
  private
    FIntf: _UAWriterGroupElement;
    function GetDefaultInterface: _UAWriterGroupElement;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_CustomPropertyValueDictionary: _UAKeyValueDictionary;
    procedure _Set_CustomPropertyValueDictionary(const pRetVal: _UAKeyValueDictionary);
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_Enabled: WordBool;
    procedure Set_Enabled(pRetVal: WordBool);
    function Get_MaximumNetworkMessageSize: Int64;
    procedure Set_MaximumNetworkMessageSize(pRetVal: Int64);
    function Get_MaximumNetworkMessageSizeInt32: Integer;
    procedure Set_MaximumNetworkMessageSizeInt32(pRetVal: Integer);
    function Get_securityGroupId: WideString;
    procedure Set_securityGroupId(const pRetVal: WideString);
    function Get_SecurityKeyServices: _UADiscoveryElementCollection;
    procedure _Set_SecurityKeyServices(const pRetVal: _UADiscoveryElementCollection);
    function Get_SecurityMode: UAMessageSecurityModes;
    procedure Set_SecurityMode(pRetVal: UAMessageSecurityModes);
    function Get_HeaderLayoutUriString: WideString;
    procedure Set_HeaderLayoutUriString(const pRetVal: WideString);
    function Get_KeepAliveTime: Double;
    procedure Set_KeepAliveTime(pRetVal: Double);
    function Get_LocaleIds: _StringCollection;
    procedure _Set_LocaleIds(const pRetVal: _StringCollection);
    function Get_MessageParameters: _UAWriterGroupMessageParameters;
    procedure _Set_MessageParameters(const pRetVal: _UAWriterGroupMessageParameters);
    function Get_Priority: Byte;
    procedure Set_Priority(pRetVal: Byte);
    function Get_PublishingInterval: Double;
    procedure Set_PublishingInterval(pRetVal: Double);
    function Get_TransportParameters: _UAWriterGroupTransportParameters;
    procedure _Set_TransportParameters(const pRetVal: _UAWriterGroupTransportParameters);
    function Get_WriterGroupId: Integer;
    procedure Set_WriterGroupId(pRetVal: Integer);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAWriterGroupElement);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function ToUAWriterGroupDescriptor: _UAWriterGroupDescriptor;
    property DefaultInterface: _UAWriterGroupElement read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property CustomPropertyValueDictionary: _UAKeyValueDictionary read Get_CustomPropertyValueDictionary write _Set_CustomPropertyValueDictionary;
    property SecurityKeyServices: _UADiscoveryElementCollection read Get_SecurityKeyServices write _Set_SecurityKeyServices;
    property LocaleIds: _StringCollection read Get_LocaleIds write _Set_LocaleIds;
    property MessageParameters: _UAWriterGroupMessageParameters read Get_MessageParameters write _Set_MessageParameters;
    property TransportParameters: _UAWriterGroupTransportParameters read Get_TransportParameters write _Set_TransportParameters;
    property Name: WideString read Get_Name write Set_Name;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property MaximumNetworkMessageSize: Int64 read Get_MaximumNetworkMessageSize write Set_MaximumNetworkMessageSize;
    property MaximumNetworkMessageSizeInt32: Integer read Get_MaximumNetworkMessageSizeInt32 write Set_MaximumNetworkMessageSizeInt32;
    property securityGroupId: WideString read Get_securityGroupId write Set_securityGroupId;
    property SecurityMode: UAMessageSecurityModes read Get_SecurityMode write Set_SecurityMode;
    property HeaderLayoutUriString: WideString read Get_HeaderLayoutUriString write Set_HeaderLayoutUriString;
    property KeepAliveTime: Double read Get_KeepAliveTime write Set_KeepAliveTime;
    property Priority: Byte read Get_Priority write Set_Priority;
    property PublishingInterval: Double read Get_PublishingInterval write Set_PublishingInterval;
    property WriterGroupId: Integer read Get_WriterGroupId write Set_WriterGroupId;
  published
  end;

// *********************************************************************//
// The Class CoUAJsonWriterGroupMessageParameters provides a Create and CreateRemote method to          
// create instances of the default interface _UAJsonWriterGroupMessageParameters exposed by              
// the CoClass UAJsonWriterGroupMessageParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAJsonWriterGroupMessageParameters = class
    class function Create: _UAJsonWriterGroupMessageParameters;
    class function CreateRemote(const MachineName: string): _UAJsonWriterGroupMessageParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAJsonWriterGroupMessageParameters
// Help String      : Represents the JSON network message mapping specific writer group parameters.
// Default Interface: _UAJsonWriterGroupMessageParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAJsonWriterGroupMessageParameters = class(TOleServer)
  private
    FIntf: _UAJsonWriterGroupMessageParameters;
    function GetDefaultInterface: _UAJsonWriterGroupMessageParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_NetworkMessageContentMask: UAJsonNetworkMessageContentMask;
    procedure Set_NetworkMessageContentMask(pRetVal: UAJsonNetworkMessageContentMask);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAJsonWriterGroupMessageParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UAJsonWriterGroupMessageParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property NetworkMessageContentMask: UAJsonNetworkMessageContentMask read Get_NetworkMessageContentMask write Set_NetworkMessageContentMask;
  published
  end;

// *********************************************************************//
// The Class CoUABrokerWriterGroupTransportParameters provides a Create and CreateRemote method to          
// create instances of the default interface _UABrokerWriterGroupTransportParameters exposed by              
// the CoClass UABrokerWriterGroupTransportParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUABrokerWriterGroupTransportParameters = class
    class function Create: _UABrokerWriterGroupTransportParameters;
    class function CreateRemote(const MachineName: string): _UABrokerWriterGroupTransportParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUABrokerWriterGroupTransportParameters
// Help String      : Represent the broker specific transport mapping parameters for writer groups.
// Default Interface: _UABrokerWriterGroupTransportParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUABrokerWriterGroupTransportParameters = class(TOleServer)
  private
    FIntf: _UABrokerWriterGroupTransportParameters;
    function GetDefaultInterface: _UABrokerWriterGroupTransportParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_AuthenticationProfileUriString: WideString;
    procedure Set_AuthenticationProfileUriString(const pRetVal: WideString);
    function Get_QueueName: WideString;
    procedure Set_QueueName(const pRetVal: WideString);
    function Get_RequestedDeliveryGuarantee: UABrokerTransportQualityOfService;
    procedure Set_RequestedDeliveryGuarantee(pRetVal: UABrokerTransportQualityOfService);
    function Get_ResourceUriString: WideString;
    procedure Set_ResourceUriString(const pRetVal: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UABrokerWriterGroupTransportParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UABrokerWriterGroupTransportParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property AuthenticationProfileUriString: WideString read Get_AuthenticationProfileUriString write Set_AuthenticationProfileUriString;
    property QueueName: WideString read Get_QueueName write Set_QueueName;
    property RequestedDeliveryGuarantee: UABrokerTransportQualityOfService read Get_RequestedDeliveryGuarantee write Set_RequestedDeliveryGuarantee;
    property ResourceUriString: WideString read Get_ResourceUriString write Set_ResourceUriString;
  published
  end;

// *********************************************************************//
// The Class CoEasyUASubscriberSelector provides a Create and CreateRemote method to          
// create instances of the default interface _EasyUASubscriberSelector exposed by              
// the CoClass EasyUASubscriberSelector. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEasyUASubscriberSelector = class
    class function Create: _EasyUASubscriberSelector;
    class function CreateRemote(const MachineName: string): _EasyUASubscriberSelector;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TEasyUASubscriberSelector
// Help String      : Describes how to select the EasyUASubscriber object.
// Default Interface: _EasyUASubscriberSelector
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TEasyUASubscriberSelector = class(TOleServer)
  private
    FIntf: _EasyUASubscriberSelector;
    function GetDefaultInterface: _EasyUASubscriberSelector;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_Differentiator: WideString;
    procedure Set_Differentiator(const pRetVal: WideString);
    function Get_InstanceParameters: _EasyUASubscriberInstanceParameters;
    procedure _Set_InstanceParameters(const pRetVal: _EasyUASubscriberInstanceParameters);
    function Get_Isolated: WordBool;
    procedure Set_Isolated(pRetVal: WordBool);
    function Get_IsolatedParameters: _EasyUASubscriberAdaptableParameters;
    procedure _Set_IsolatedParameters(const pRetVal: _EasyUASubscriberAdaptableParameters);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _EasyUASubscriberSelector);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    procedure Reset;
    property DefaultInterface: _EasyUASubscriberSelector read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property InstanceParameters: _EasyUASubscriberInstanceParameters read Get_InstanceParameters write _Set_InstanceParameters;
    property IsolatedParameters: _EasyUASubscriberAdaptableParameters read Get_IsolatedParameters write _Set_IsolatedParameters;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property Differentiator: WideString read Get_Differentiator write Set_Differentiator;
    property Isolated: WordBool read Get_Isolated write Set_Isolated;
  published
  end;

// *********************************************************************//
// The Class CoUADataSetFieldData provides a Create and CreateRemote method to          
// create instances of the default interface _UADataSetFieldData exposed by              
// the CoClass UADataSetFieldData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUADataSetFieldData = class
    class function Create: _UADataSetFieldData;
    class function CreateRemote(const MachineName: string): _UADataSetFieldData;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUADataSetFieldData
// Help String      : Contains data about the received dataset field.
// Default Interface: _UADataSetFieldData
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUADataSetFieldData = class(TOleServer)
  private
    FIntf: _UADataSetFieldData;
    function GetDefaultInterface: _UADataSetFieldData;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_ToString_2(const format: WideString; const formatProvider: IFormatProvider): WideString;
    function Get_ToString_3(const format: WideString): WideString;
    function Get_HasBadStatus: WordBool;
    function Get_HasGoodStatus: WordBool;
    function Get_HasServerTimestamp: WordBool;
    function Get_HasSourceTimestamp: WordBool;
    function Get_HasUncertainStatus: WordBool;
    function Get_HasValue: WordBool;
    function Get_ServerPicoseconds: Integer;
    procedure Set_ServerPicoseconds(pRetVal: Integer);
    function Get_ServerTimestamp: TDateTime;
    procedure Set_ServerTimestamp(pRetVal: TDateTime);
    function Get_ServerTimestampDouble: Double;
    procedure Set_ServerTimestampDouble(pRetVal: Double);
    function Get_ServerTimestampLocal: TDateTime;
    procedure Set_ServerTimestampLocal(pRetVal: TDateTime);
    function Get_ServerTimestampLocalDouble: Double;
    procedure Set_ServerTimestampLocalDouble(pRetVal: Double);
    function Get_SourcePicoseconds: Integer;
    procedure Set_SourcePicoseconds(pRetVal: Integer);
    function Get_SourceTimestamp: TDateTime;
    procedure Set_SourceTimestamp(pRetVal: TDateTime);
    function Get_SourceTimestampDouble: Double;
    procedure Set_SourceTimestampDouble(pRetVal: Double);
    function Get_SourceTimestampLocal: TDateTime;
    procedure Set_SourceTimestampLocal(pRetVal: TDateTime);
    function Get_SourceTimestampLocalDouble: Double;
    procedure Set_SourceTimestampLocalDouble(pRetVal: Double);
    function Get_StatusCode: _UAStatusCode;
    procedure _Set_StatusCode(const pRetVal: _UAStatusCode);
    function Get_StatusInfo: StatusInfo;
    function Get_value: OleVariant;
    procedure _Set_value(pRetVal: OleVariant);
    function Get_ValueType: _Type;
    function Get_ValueTypeName: WideString;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UADataSetFieldData);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function DisplayValue: WideString;
    procedure SetValue(value: OleVariant);
    property DefaultInterface: _UADataSetFieldData read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property ToString_2[const format: WideString; const formatProvider: IFormatProvider]: WideString read Get_ToString_2;
    property ToString_3[const format: WideString]: WideString read Get_ToString_3;
    property HasBadStatus: WordBool read Get_HasBadStatus;
    property HasGoodStatus: WordBool read Get_HasGoodStatus;
    property HasServerTimestamp: WordBool read Get_HasServerTimestamp;
    property HasSourceTimestamp: WordBool read Get_HasSourceTimestamp;
    property HasUncertainStatus: WordBool read Get_HasUncertainStatus;
    property HasValue: WordBool read Get_HasValue;
    property StatusCode: _UAStatusCode read Get_StatusCode write _Set_StatusCode;
    property StatusInfo: StatusInfo read Get_StatusInfo;
    property value: OleVariant read Get_value write _Set_value;
    property ValueType: _Type read Get_ValueType;
    property ValueTypeName: WideString read Get_ValueTypeName;
    property ServerPicoseconds: Integer read Get_ServerPicoseconds write Set_ServerPicoseconds;
    property ServerTimestamp: TDateTime read Get_ServerTimestamp write Set_ServerTimestamp;
    property ServerTimestampDouble: Double read Get_ServerTimestampDouble write Set_ServerTimestampDouble;
    property ServerTimestampLocal: TDateTime read Get_ServerTimestampLocal write Set_ServerTimestampLocal;
    property ServerTimestampLocalDouble: Double read Get_ServerTimestampLocalDouble write Set_ServerTimestampLocalDouble;
    property SourcePicoseconds: Integer read Get_SourcePicoseconds write Set_SourcePicoseconds;
    property SourceTimestamp: TDateTime read Get_SourceTimestamp write Set_SourceTimestamp;
    property SourceTimestampDouble: Double read Get_SourceTimestampDouble write Set_SourceTimestampDouble;
    property SourceTimestampLocal: TDateTime read Get_SourceTimestampLocal write Set_SourceTimestampLocal;
    property SourceTimestampLocalDouble: Double read Get_SourceTimestampLocalDouble write Set_SourceTimestampLocalDouble;
  published
  end;

// *********************************************************************//
// The Class CoUADataSetSubscriptionDescriptor provides a Create and CreateRemote method to          
// create instances of the default interface _UADataSetSubscriptionDescriptor exposed by              
// the CoClass UADataSetSubscriptionDescriptor. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUADataSetSubscriptionDescriptor = class
    class function Create: _UADataSetSubscriptionDescriptor;
    class function CreateRemote(const MachineName: string): _UADataSetSubscriptionDescriptor;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUADataSetSubscriptionDescriptor
// Help String      : Contains information needed to subscribe to a dataset.
// Default Interface: _UADataSetSubscriptionDescriptor
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUADataSetSubscriptionDescriptor = class(TOleServer)
  private
    FIntf: _UADataSetSubscriptionDescriptor;
    function GetDefaultInterface: _UADataSetSubscriptionDescriptor;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_AliasName: WideString;
    procedure Set_AliasName(const pRetVal: WideString);
    function Get_IsAliased: WordBool;
    function Get_AllowsResolution: WordBool;
    function Get_assumeTopicTree: WordBool;
    procedure Set_assumeTopicTree(pRetVal: WordBool);
    function Get_CommunicationParameters: _UASubscriberCommunicationParameters;
    procedure _Set_CommunicationParameters(const pRetVal: _UASubscriberCommunicationParameters);
    function Get_ConnectionDescriptor: _UAPubSubConnectionDescriptor;
    procedure _Set_ConnectionDescriptor(const pRetVal: _UAPubSubConnectionDescriptor);
    function Get_DataSetMetaData: _UADataSetMetaData;
    procedure _Set_DataSetMetaData(const pRetVal: _UADataSetMetaData);
    function Get_EffectiveAssumeTopicTree: WordBool;
    function Get_EffectiveMessageReceiveTimeout: Double;
    function Get_EffectiveSecurityMode: UAMessageSecurityModes;
    function Get_Filter: _UASubscribeDataSetFilter;
    procedure _Set_Filter(const pRetVal: _UASubscribeDataSetFilter);
    function Get_FilterIsStrictlyPhysical: WordBool;
    function Get_FilterRequiresResolution: WordBool;
    function Get_HasConnectionDescriptor: WordBool;
    function Get_HasDataSetMetaData: WordBool;
    function Get_HasPublishedDataSet: WordBool;
    function Get_InferredMessageReceiveTimeout: Double;
    function Get_InferredSecurityMode: UAMessageSecurityModes;
    function Get_IsNull: WordBool;
    function Get_IsStrictlyPhysical: WordBool;
    function Get_PublishedDataSetName: WideString;
    procedure Set_PublishedDataSetName(const pRetVal: WideString);
    function Get_RequiresResolution: WordBool;
    function Get_ResolverDescriptor: _UAPubSubResolverDescriptor;
    procedure _Set_ResolverDescriptor(const pRetVal: _UAPubSubResolverDescriptor);
    function Get_TopicPrefixHead: WideString;
    procedure Set_TopicPrefixHead(const pRetVal: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UADataSetSubscriptionDescriptor);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    procedure Logicalize(force: WordBool);
    procedure Physicalize(force: WordBool);
    property DefaultInterface: _UADataSetSubscriptionDescriptor read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property IsAliased: WordBool read Get_IsAliased;
    property AllowsResolution: WordBool read Get_AllowsResolution;
    property CommunicationParameters: _UASubscriberCommunicationParameters read Get_CommunicationParameters write _Set_CommunicationParameters;
    property ConnectionDescriptor: _UAPubSubConnectionDescriptor read Get_ConnectionDescriptor write _Set_ConnectionDescriptor;
    property DataSetMetaData: _UADataSetMetaData read Get_DataSetMetaData write _Set_DataSetMetaData;
    property EffectiveAssumeTopicTree: WordBool read Get_EffectiveAssumeTopicTree;
    property EffectiveMessageReceiveTimeout: Double read Get_EffectiveMessageReceiveTimeout;
    property EffectiveSecurityMode: UAMessageSecurityModes read Get_EffectiveSecurityMode;
    property Filter: _UASubscribeDataSetFilter read Get_Filter write _Set_Filter;
    property FilterIsStrictlyPhysical: WordBool read Get_FilterIsStrictlyPhysical;
    property FilterRequiresResolution: WordBool read Get_FilterRequiresResolution;
    property HasConnectionDescriptor: WordBool read Get_HasConnectionDescriptor;
    property HasDataSetMetaData: WordBool read Get_HasDataSetMetaData;
    property HasPublishedDataSet: WordBool read Get_HasPublishedDataSet;
    property InferredMessageReceiveTimeout: Double read Get_InferredMessageReceiveTimeout;
    property InferredSecurityMode: UAMessageSecurityModes read Get_InferredSecurityMode;
    property IsNull: WordBool read Get_IsNull;
    property IsStrictlyPhysical: WordBool read Get_IsStrictlyPhysical;
    property RequiresResolution: WordBool read Get_RequiresResolution;
    property ResolverDescriptor: _UAPubSubResolverDescriptor read Get_ResolverDescriptor write _Set_ResolverDescriptor;
    property AliasName: WideString read Get_AliasName write Set_AliasName;
    property assumeTopicTree: WordBool read Get_assumeTopicTree write Set_assumeTopicTree;
    property PublishedDataSetName: WideString read Get_PublishedDataSetName write Set_PublishedDataSetName;
    property TopicPrefixHead: WideString read Get_TopicPrefixHead write Set_TopicPrefixHead;
  published
  end;

// *********************************************************************//
// The Class CoUADataSetWriterDescriptor provides a Create and CreateRemote method to          
// create instances of the default interface _UADataSetWriterDescriptor exposed by              
// the CoClass UADataSetWriterDescriptor. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUADataSetWriterDescriptor = class
    class function Create: _UADataSetWriterDescriptor;
    class function CreateRemote(const MachineName: string): _UADataSetWriterDescriptor;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUADataSetWriterDescriptor
// Help String      : Descriptor for a dataset writer (using a physical Id, or logical name).
// Default Interface: _UADataSetWriterDescriptor
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUADataSetWriterDescriptor = class(TOleServer)
  private
    FIntf: _UADataSetWriterDescriptor;
    function GetDefaultInterface: _UADataSetWriterDescriptor;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_CustomPropertyValueDictionary: _UAKeyValueDictionary;
    procedure _Set_CustomPropertyValueDictionary(const pRetVal: _UAKeyValueDictionary);
    function Get_HasName: WordBool;
    function Get_IsNull: WordBool;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_DataSetWriterId: Integer;
    procedure Set_DataSetWriterId(pRetVal: Integer);
    function Get_HasDataSetWriterId: WordBool;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UADataSetWriterDescriptor);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function IsStrictlyPhysical(const TransportProfileUriString: WideString; 
                                assumeTopicTree: WordBool): WordBool;
    procedure Physicalize(const TransportProfileUriString: WideString; assumeTopicTree: WordBool; 
                          force: WordBool);
    function RequiresResolution(const TransportProfileUriString: WideString; 
                                assumeTopicTree: WordBool): WordBool;
    procedure Logicalize;
    property DefaultInterface: _UADataSetWriterDescriptor read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property CustomPropertyValueDictionary: _UAKeyValueDictionary read Get_CustomPropertyValueDictionary write _Set_CustomPropertyValueDictionary;
    property HasName: WordBool read Get_HasName;
    property IsNull: WordBool read Get_IsNull;
    property HasDataSetWriterId: WordBool read Get_HasDataSetWriterId;
    property Name: WideString read Get_Name write Set_Name;
    property DataSetWriterId: Integer read Get_DataSetWriterId write Set_DataSetWriterId;
  published
  end;

// *********************************************************************//
// The Class CoUAGuidDataSetFieldDataDictionary provides a Create and CreateRemote method to          
// create instances of the default interface _UAGuidDataSetFieldDataDictionary exposed by              
// the CoClass UAGuidDataSetFieldDataDictionary. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAGuidDataSetFieldDataDictionary = class
    class function Create: _UAGuidDataSetFieldDataDictionary;
    class function CreateRemote(const MachineName: string): _UAGuidDataSetFieldDataDictionary;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAGuidDataSetFieldDataDictionary
// Help String      : A dictionary of OPC UA dataset field data objects, keyed by the dataset field Id (a GUID).
// Default Interface: _UAGuidDataSetFieldDataDictionary
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAGuidDataSetFieldDataDictionary = class(TOleServer)
  private
    FIntf: _UAGuidDataSetFieldDataDictionary;
    function GetDefaultInterface: _UAGuidDataSetFieldDataDictionary;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_Item(key: OleVariant): _UADataSetFieldData;
    procedure _Set_Item(key: OleVariant; const pRetVal: _UADataSetFieldData);
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAGuidDataSetFieldDataDictionary);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function GetEnumerator: IEnumVARIANT;
    procedure Add(key: OleVariant; Item: OleVariant);
    procedure Clear;
    function ContainsKey(key: OleVariant): WordBool;
    function Remove(key: OleVariant): WordBool;
    function TryGetValue(key: OleVariant; out value: OleVariant): WordBool;
    function ContainsValue(value: OleVariant): WordBool;
    property DefaultInterface: _UAGuidDataSetFieldDataDictionary read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property Item[key: OleVariant]: _UADataSetFieldData read Get_Item write _Set_Item; default;
    property Count: Integer read Get_Count;
  published
  end;

// *********************************************************************//
// The Class CoUAPublisherId provides a Create and CreateRemote method to          
// create instances of the default interface _UAPublisherId exposed by              
// the CoClass UAPublisherId. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAPublisherId = class
    class function Create: _UAPublisherId;
    class function CreateRemote(const MachineName: string): _UAPublisherId;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAPublisherId
// Help String      : A unique identifier for a publisher within a message oriented middleware.
// Default Interface: _UAPublisherId
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAPublisherId = class(TOleServer)
  private
    FIntf: _UAPublisherId;
    function GetDefaultInterface: _UAPublisherId;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_ExternalValue: OleVariant;
    procedure _Set_ExternalValue(pRetVal: OleVariant);
    function Get_InternalValue: OleVariant;
    procedure _Set_InternalValue(pRetVal: OleVariant);
    function Get_IsNull: WordBool;
    function Get_IsNumericType: WordBool;
    function Get_NumericIdentifier: TDecimal;
    function Get_NumericIdentifierString: WideString;
    function Get_NumericIdentifierUInt64: Largeuint;
    function Get_PublisherIdType: UAPublisherIdType;
    procedure Set_PublisherIdType(pRetVal: UAPublisherIdType);
    function Get_StringIdentifier: WideString;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAPublisherId);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function CompareTo(other: OleVariant): Integer;
    procedure Reset;
    procedure SetByteIdentifier(byteIdentifier: Byte);
    procedure SetExternalValue(ExternalValue: OleVariant);
    procedure SetIdentifier(PublisherIdType: UAPublisherIdType; identifier: OleVariant);
    procedure SetInternalValue(InternalValue: OleVariant);
    procedure SetStringIdentifier(const StringIdentifier: WideString);
    procedure SetUInt16Identifier(uint16Identifier: Integer);
    procedure SetUInt32Identifier(uint32Identifier: Int64);
    procedure SetUInt64Identifier(uint64Identifier: TDecimal);
    property DefaultInterface: _UAPublisherId read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property ExternalValue: OleVariant read Get_ExternalValue write _Set_ExternalValue;
    property InternalValue: OleVariant read Get_InternalValue write _Set_InternalValue;
    property IsNull: WordBool read Get_IsNull;
    property IsNumericType: WordBool read Get_IsNumericType;
    property NumericIdentifier: TDecimal read Get_NumericIdentifier;
    property NumericIdentifierString: WideString read Get_NumericIdentifierString;
    property NumericIdentifierUInt64: Largeuint read Get_NumericIdentifierUInt64;
    property StringIdentifier: WideString read Get_StringIdentifier;
    property PublisherIdType: UAPublisherIdType read Get_PublisherIdType write Set_PublisherIdType;
  published
  end;

// *********************************************************************//
// The Class CoUAPubSubCommunicationParameters provides a Create and CreateRemote method to          
// create instances of the default interface _UAPubSubCommunicationParameters exposed by              
// the CoClass UAPubSubCommunicationParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAPubSubCommunicationParameters = class
    class function Create: _UAPubSubCommunicationParameters;
    class function CreateRemote(const MachineName: string): _UAPubSubCommunicationParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAPubSubCommunicationParameters
// Help String      : Represents communication parameters for OPC UA publisher or subscriber.
// Default Interface: _UAPubSubCommunicationParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAPubSubCommunicationParameters = class(TOleServer)
  private
    FIntf: _UAPubSubCommunicationParameters;
    function GetDefaultInterface: _UAPubSubCommunicationParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_DataSetFieldContentMask: UADataSetFieldContentMask;
    procedure Set_DataSetFieldContentMask(pRetVal: UADataSetFieldContentMask);
    function Get_ManagedSecurityGroupParameters: _ManagedSecurityGroupParameters;
    procedure _Set_ManagedSecurityGroupParameters(const pRetVal: _ManagedSecurityGroupParameters);
    function Get_MaximumNetworkMessageSize: Int64;
    procedure Set_MaximumNetworkMessageSize(pRetVal: Int64);
    function Get_MaximumNetworkMessageSizeInt32: Integer;
    procedure Set_MaximumNetworkMessageSizeInt32(pRetVal: Integer);
    function Get_securityGroupId: WideString;
    procedure Set_securityGroupId(const pRetVal: WideString);
    function Get_SecurityKeyServices: _UAEndpointDescriptorCollection;
    procedure _Set_SecurityKeyServices(const pRetVal: _UAEndpointDescriptorCollection);
    function Get_SecurityKeyServiceTemplate: _UAEndpointDescriptor;
    procedure _Set_SecurityKeyServiceTemplate(const pRetVal: _UAEndpointDescriptor);
    function Get_SecurityMode: UAMessageSecurityModes;
    procedure Set_SecurityMode(pRetVal: UAMessageSecurityModes);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAPubSubCommunicationParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UAPubSubCommunicationParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property ManagedSecurityGroupParameters: _ManagedSecurityGroupParameters read Get_ManagedSecurityGroupParameters write _Set_ManagedSecurityGroupParameters;
    property SecurityKeyServices: _UAEndpointDescriptorCollection read Get_SecurityKeyServices write _Set_SecurityKeyServices;
    property SecurityKeyServiceTemplate: _UAEndpointDescriptor read Get_SecurityKeyServiceTemplate write _Set_SecurityKeyServiceTemplate;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property DataSetFieldContentMask: UADataSetFieldContentMask read Get_DataSetFieldContentMask write Set_DataSetFieldContentMask;
    property MaximumNetworkMessageSize: Int64 read Get_MaximumNetworkMessageSize write Set_MaximumNetworkMessageSize;
    property MaximumNetworkMessageSizeInt32: Integer read Get_MaximumNetworkMessageSizeInt32 write Set_MaximumNetworkMessageSizeInt32;
    property securityGroupId: WideString read Get_securityGroupId write Set_securityGroupId;
    property SecurityMode: UAMessageSecurityModes read Get_SecurityMode write Set_SecurityMode;
  published
  end;

// *********************************************************************//
// The Class CoUAPubSubConnectionDescriptor provides a Create and CreateRemote method to          
// create instances of the default interface _UAPubSubConnectionDescriptor exposed by              
// the CoClass UAPubSubConnectionDescriptor. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAPubSubConnectionDescriptor = class
    class function Create: _UAPubSubConnectionDescriptor;
    class function CreateRemote(const MachineName: string): _UAPubSubConnectionDescriptor;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAPubSubConnectionDescriptor
// Help String      : Descriptor for a PubSub connection (using physical parameters, or logical name).
// Default Interface: _UAPubSubConnectionDescriptor
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAPubSubConnectionDescriptor = class(TOleServer)
  private
    FIntf: _UAPubSubConnectionDescriptor;
    function GetDefaultInterface: _UAPubSubConnectionDescriptor;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_CustomPropertyValueDictionary: _UAKeyValueDictionary;
    procedure _Set_CustomPropertyValueDictionary(const pRetVal: _UAKeyValueDictionary);
    function Get_HasName: WordBool;
    function Get_IsNull: WordBool;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_BrokerConnectionTransportParameters: _UABrokerConnectionTransportParameters;
    procedure _Set_BrokerConnectionTransportParameters(const pRetVal: _UABrokerConnectionTransportParameters);
    function Get_ConnectionTransportParameters: _UAConnectionTransportParameters;
    procedure _Set_ConnectionTransportParameters(const pRetVal: _UAConnectionTransportParameters);
    function Get_DatagramConnectionTransportParameters: _UADatagramConnectionTransportParameters;
    procedure _Set_DatagramConnectionTransportParameters(const pRetVal: _UADatagramConnectionTransportParameters);
    function Get_EffectiveConnectionTransportParameters: _UAConnectionTransportParameters;
    function Get_EffectiveTransportProfileUriString: WideString;
    function Get_HasNetworkAddress: WordBool;
    function Get_ImpliedTransportProfileUriString: WideString;
    function Get_InferredTransportProfileUriString: WideString;
    function Get_NetworkAddress: _NetworkAddress;
    procedure _Set_NetworkAddress(const pRetVal: _NetworkAddress);
    function Get_ResourceAddress: _ResourceAddress;
    procedure _Set_ResourceAddress(const pRetVal: _ResourceAddress);
    function Get_TransportProfileName: WideString;
    procedure Set_TransportProfileName(const pRetVal: WideString);
    function Get_TransportProfileUriString: WideString;
    procedure Set_TransportProfileUriString(const pRetVal: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAPubSubConnectionDescriptor);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function IsStrictlyPhysical(const TransportProfileUriString: WideString; 
                                assumeTopicTree: WordBool): WordBool;
    procedure Physicalize(const TransportProfileUriString: WideString; assumeTopicTree: WordBool; 
                          force: WordBool);
    function RequiresResolution(const TransportProfileUriString: WideString; 
                                assumeTopicTree: WordBool): WordBool;
    procedure Logicalize;
    procedure UseEthernetCaptureFile(const captureFileName: WideString);
    procedure UseUdpCaptureFile(const captureFileName: WideString);
    property DefaultInterface: _UAPubSubConnectionDescriptor read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property CustomPropertyValueDictionary: _UAKeyValueDictionary read Get_CustomPropertyValueDictionary write _Set_CustomPropertyValueDictionary;
    property HasName: WordBool read Get_HasName;
    property IsNull: WordBool read Get_IsNull;
    property BrokerConnectionTransportParameters: _UABrokerConnectionTransportParameters read Get_BrokerConnectionTransportParameters write _Set_BrokerConnectionTransportParameters;
    property ConnectionTransportParameters: _UAConnectionTransportParameters read Get_ConnectionTransportParameters write _Set_ConnectionTransportParameters;
    property DatagramConnectionTransportParameters: _UADatagramConnectionTransportParameters read Get_DatagramConnectionTransportParameters write _Set_DatagramConnectionTransportParameters;
    property EffectiveConnectionTransportParameters: _UAConnectionTransportParameters read Get_EffectiveConnectionTransportParameters;
    property EffectiveTransportProfileUriString: WideString read Get_EffectiveTransportProfileUriString;
    property HasNetworkAddress: WordBool read Get_HasNetworkAddress;
    property ImpliedTransportProfileUriString: WideString read Get_ImpliedTransportProfileUriString;
    property InferredTransportProfileUriString: WideString read Get_InferredTransportProfileUriString;
    property NetworkAddress: _NetworkAddress read Get_NetworkAddress write _Set_NetworkAddress;
    property ResourceAddress: _ResourceAddress read Get_ResourceAddress write _Set_ResourceAddress;
    property Name: WideString read Get_Name write Set_Name;
    property TransportProfileName: WideString read Get_TransportProfileName write Set_TransportProfileName;
    property TransportProfileUriString: WideString read Get_TransportProfileUriString write Set_TransportProfileUriString;
  published
  end;

// *********************************************************************//
// The Class CoUADataSetHeader provides a Create and CreateRemote method to          
// create instances of the default interface _UADataSetHeader exposed by              
// the CoClass UADataSetHeader. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUADataSetHeader = class
    class function Create: _UADataSetHeader;
    class function CreateRemote(const MachineName: string): _UADataSetHeader;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUADataSetHeader
// Help String      : Contains header information of the received dataset message.
// Default Interface: _UADataSetHeader
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUADataSetHeader = class(TOleServer)
  private
    FIntf: _UADataSetHeader;
    function GetDefaultInterface: _UADataSetHeader;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_DataSetWriterId: Integer;
    procedure Set_DataSetWriterId(pRetVal: Integer);
    function Get_DataSetWriterName: WideString;
    procedure Set_DataSetWriterName(const pRetVal: WideString);
    function Get_HasDataSetWriterId: WordBool;
    function Get_HasDataSetWriterName: WordBool;
    function Get_HasPublisherId: WordBool;
    function Get_HasWriterGroupId: WordBool;
    function Get_HasWriterGroupName: WordBool;
    function Get_PublisherId: _UAPublisherId;
    procedure _Set_PublisherId(const pRetVal: _UAPublisherId);
    function Get_WriterGroupId: Integer;
    procedure Set_WriterGroupId(pRetVal: Integer);
    function Get_WriterGroupName: WideString;
    procedure Set_WriterGroupName(const pRetVal: WideString);
    function Get_Compressed: WordBool;
    procedure Set_Compressed(pRetVal: WordBool);
    function Get_ConfigurationVersion: _UAConfigurationVersion;
    procedure _Set_ConfigurationVersion(const pRetVal: _UAConfigurationVersion);
    function Get_DataSetClassId: TGUID;
    procedure Set_DataSetClassId(pRetVal: TGUID);
    function Get_DataSetClassIdString: WideString;
    procedure Set_DataSetClassIdString(const pRetVal: WideString);
    function Get_Encrypted: WordBool;
    procedure Set_Encrypted(pRetVal: WordBool);
    function Get_HasConfigurationVersion: WordBool;
    function Get_HasDataSetClassId: WordBool;
    function Get_HasOrigin: WordBool;
    function Get_MessageMappingName: WideString;
    procedure Set_MessageMappingName(const pRetVal: WideString);
    function Get_Origin: OleVariant;
    procedure _Set_Origin(pRetVal: OleVariant);
    function Get_Retain: WordBool;
    procedure Set_Retain(pRetVal: WordBool);
    function Get_Signed: WordBool;
    procedure Set_Signed(pRetVal: WordBool);
    function Get_TransportMappingName: WideString;
    procedure Set_TransportMappingName(const pRetVal: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UADataSetHeader);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function CompareTo(other: OleVariant): Integer;
    procedure SetOrigin(value: OleVariant);
    property DefaultInterface: _UADataSetHeader read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property HasDataSetWriterId: WordBool read Get_HasDataSetWriterId;
    property HasDataSetWriterName: WordBool read Get_HasDataSetWriterName;
    property HasPublisherId: WordBool read Get_HasPublisherId;
    property HasWriterGroupId: WordBool read Get_HasWriterGroupId;
    property HasWriterGroupName: WordBool read Get_HasWriterGroupName;
    property PublisherId: _UAPublisherId read Get_PublisherId write _Set_PublisherId;
    property ConfigurationVersion: _UAConfigurationVersion read Get_ConfigurationVersion write _Set_ConfigurationVersion;
    property HasConfigurationVersion: WordBool read Get_HasConfigurationVersion;
    property HasDataSetClassId: WordBool read Get_HasDataSetClassId;
    property HasOrigin: WordBool read Get_HasOrigin;
    property Origin: OleVariant read Get_Origin write _Set_Origin;
    property DataSetWriterId: Integer read Get_DataSetWriterId write Set_DataSetWriterId;
    property DataSetWriterName: WideString read Get_DataSetWriterName write Set_DataSetWriterName;
    property WriterGroupId: Integer read Get_WriterGroupId write Set_WriterGroupId;
    property WriterGroupName: WideString read Get_WriterGroupName write Set_WriterGroupName;
    property Compressed: WordBool read Get_Compressed write Set_Compressed;
    property DataSetClassId: TGUID read Get_DataSetClassId write Set_DataSetClassId;
    property DataSetClassIdString: WideString read Get_DataSetClassIdString write Set_DataSetClassIdString;
    property Encrypted: WordBool read Get_Encrypted write Set_Encrypted;
    property MessageMappingName: WideString read Get_MessageMappingName write Set_MessageMappingName;
    property Retain: WordBool read Get_Retain write Set_Retain;
    property Signed: WordBool read Get_Signed write Set_Signed;
    property TransportMappingName: WideString read Get_TransportMappingName write Set_TransportMappingName;
  published
  end;

// *********************************************************************//
// The Class CoUADataSetData provides a Create and CreateRemote method to          
// create instances of the default interface _UADataSetData exposed by              
// the CoClass UADataSetData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUADataSetData = class
    class function Create: _UADataSetData;
    class function CreateRemote(const MachineName: string): _UADataSetData;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUADataSetData
// Help String      : Contains data about the received dataset message.
// Default Interface: _UADataSetData
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUADataSetData = class(TOleServer)
  private
    FIntf: _UADataSetData;
    function GetDefaultInterface: _UADataSetData;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_DataSetWriterId: Integer;
    procedure Set_DataSetWriterId(pRetVal: Integer);
    function Get_DataSetWriterName: WideString;
    procedure Set_DataSetWriterName(const pRetVal: WideString);
    function Get_HasDataSetWriterId: WordBool;
    function Get_HasDataSetWriterName: WordBool;
    function Get_HasPublisherId: WordBool;
    function Get_HasWriterGroupId: WordBool;
    function Get_HasWriterGroupName: WordBool;
    function Get_PublisherId: _UAPublisherId;
    procedure _Set_PublisherId(const pRetVal: _UAPublisherId);
    function Get_WriterGroupId: Integer;
    procedure Set_WriterGroupId(pRetVal: Integer);
    function Get_WriterGroupName: WideString;
    procedure Set_WriterGroupName(const pRetVal: WideString);
    function Get_Compressed: WordBool;
    procedure Set_Compressed(pRetVal: WordBool);
    function Get_ConfigurationVersion: _UAConfigurationVersion;
    procedure _Set_ConfigurationVersion(const pRetVal: _UAConfigurationVersion);
    function Get_DataSetClassId: TGUID;
    procedure Set_DataSetClassId(pRetVal: TGUID);
    function Get_DataSetClassIdString: WideString;
    procedure Set_DataSetClassIdString(const pRetVal: WideString);
    function Get_Encrypted: WordBool;
    procedure Set_Encrypted(pRetVal: WordBool);
    function Get_HasConfigurationVersion: WordBool;
    function Get_HasDataSetClassId: WordBool;
    function Get_HasOrigin: WordBool;
    function Get_MessageMappingName: WideString;
    procedure Set_MessageMappingName(const pRetVal: WideString);
    function Get_Origin: OleVariant;
    procedure _Set_Origin(pRetVal: OleVariant);
    function Get_Retain: WordBool;
    procedure Set_Retain(pRetVal: WordBool);
    function Get_Signed: WordBool;
    procedure Set_Signed(pRetVal: WordBool);
    function Get_TransportMappingName: WideString;
    procedure Set_TransportMappingName(const pRetVal: WideString);
    function Get_DataSetMetaData: _UADataSetMetaData;
    procedure _Set_DataSetMetaData(const pRetVal: _UADataSetMetaData);
    function Get_FieldDataDictionary: _UAStringDataSetFieldDataDictionary;
    procedure _Set_FieldDataDictionary(const pRetVal: _UAStringDataSetFieldDataDictionary);
    function Get_FieldDataDictionaryById: _UAGuidDataSetFieldDataDictionary;
    procedure _Set_FieldDataDictionaryById(const pRetVal: _UAGuidDataSetFieldDataDictionary);
    function Get_HasDataSetMetaData: WordBool;
    function Get_HasTimestamp: WordBool;
    function Get_IsData: WordBool;
    procedure Set_IsData(pRetVal: WordBool);
    function Get_IsEvent: WordBool;
    procedure Set_IsEvent(pRetVal: WordBool);
    function Get_Picoseconds: Integer;
    procedure Set_Picoseconds(pRetVal: Integer);
    function Get_StatusCode: _UAStatusCode;
    procedure _Set_StatusCode(const pRetVal: _UAStatusCode);
    function Get_Timestamp: TDateTime;
    procedure Set_Timestamp(pRetVal: TDateTime);
    function Get_TimestampDouble: Double;
    procedure Set_TimestampDouble(pRetVal: Double);
    function Get_TimestampLocal: TDateTime;
    procedure Set_TimestampLocal(pRetVal: TDateTime);
    function Get_TimestampLocalDouble: Double;
    procedure Set_TimestampLocalDouble(pRetVal: Double);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UADataSetData);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function CompareTo(other: OleVariant): Integer;
    procedure SetOrigin(value: OleVariant);
    function GetDataSetTypeString: WideString;
    property DefaultInterface: _UADataSetData read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property HasDataSetWriterId: WordBool read Get_HasDataSetWriterId;
    property HasDataSetWriterName: WordBool read Get_HasDataSetWriterName;
    property HasPublisherId: WordBool read Get_HasPublisherId;
    property HasWriterGroupId: WordBool read Get_HasWriterGroupId;
    property HasWriterGroupName: WordBool read Get_HasWriterGroupName;
    property PublisherId: _UAPublisherId read Get_PublisherId write _Set_PublisherId;
    property ConfigurationVersion: _UAConfigurationVersion read Get_ConfigurationVersion write _Set_ConfigurationVersion;
    property HasConfigurationVersion: WordBool read Get_HasConfigurationVersion;
    property HasDataSetClassId: WordBool read Get_HasDataSetClassId;
    property HasOrigin: WordBool read Get_HasOrigin;
    property Origin: OleVariant read Get_Origin write _Set_Origin;
    property DataSetMetaData: _UADataSetMetaData read Get_DataSetMetaData write _Set_DataSetMetaData;
    property FieldDataDictionary: _UAStringDataSetFieldDataDictionary read Get_FieldDataDictionary write _Set_FieldDataDictionary;
    property FieldDataDictionaryById: _UAGuidDataSetFieldDataDictionary read Get_FieldDataDictionaryById write _Set_FieldDataDictionaryById;
    property HasDataSetMetaData: WordBool read Get_HasDataSetMetaData;
    property HasTimestamp: WordBool read Get_HasTimestamp;
    property StatusCode: _UAStatusCode read Get_StatusCode write _Set_StatusCode;
    property DataSetWriterId: Integer read Get_DataSetWriterId write Set_DataSetWriterId;
    property DataSetWriterName: WideString read Get_DataSetWriterName write Set_DataSetWriterName;
    property WriterGroupId: Integer read Get_WriterGroupId write Set_WriterGroupId;
    property WriterGroupName: WideString read Get_WriterGroupName write Set_WriterGroupName;
    property Compressed: WordBool read Get_Compressed write Set_Compressed;
    property DataSetClassId: TGUID read Get_DataSetClassId write Set_DataSetClassId;
    property DataSetClassIdString: WideString read Get_DataSetClassIdString write Set_DataSetClassIdString;
    property Encrypted: WordBool read Get_Encrypted write Set_Encrypted;
    property MessageMappingName: WideString read Get_MessageMappingName write Set_MessageMappingName;
    property Retain: WordBool read Get_Retain write Set_Retain;
    property Signed: WordBool read Get_Signed write Set_Signed;
    property TransportMappingName: WideString read Get_TransportMappingName write Set_TransportMappingName;
    property IsData: WordBool read Get_IsData write Set_IsData;
    property IsEvent: WordBool read Get_IsEvent write Set_IsEvent;
    property Picoseconds: Integer read Get_Picoseconds write Set_Picoseconds;
    property Timestamp: TDateTime read Get_Timestamp write Set_Timestamp;
    property TimestampDouble: Double read Get_TimestampDouble write Set_TimestampDouble;
    property TimestampLocal: TDateTime read Get_TimestampLocal write Set_TimestampLocal;
    property TimestampLocalDouble: Double read Get_TimestampLocalDouble write Set_TimestampLocalDouble;
  published
  end;

// *********************************************************************//
// The Class CoUADataSetFieldDescriptor provides a Create and CreateRemote method to          
// create instances of the default interface _UADataSetFieldDescriptor exposed by              
// the CoClass UADataSetFieldDescriptor. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUADataSetFieldDescriptor = class
    class function Create: _UADataSetFieldDescriptor;
    class function CreateRemote(const MachineName: string): _UADataSetFieldDescriptor;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUADataSetFieldDescriptor
// Help String      : Descriptor for a dataset field (using a dataset field Id, or field name).
// Default Interface: _UADataSetFieldDescriptor
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUADataSetFieldDescriptor = class(TOleServer)
  private
    FIntf: _UADataSetFieldDescriptor;
    function GetDefaultInterface: _UADataSetFieldDescriptor;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_CustomPropertyValueDictionary: _UAKeyValueDictionary;
    procedure _Set_CustomPropertyValueDictionary(const pRetVal: _UAKeyValueDictionary);
    function Get_HasName: WordBool;
    function Get_IsNull: WordBool;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_DataSetFieldId: TGUID;
    procedure Set_DataSetFieldId(pRetVal: TGUID);
    function Get_DataSetFieldIdString: WideString;
    procedure Set_DataSetFieldIdString(const pRetVal: WideString);
    function Get_HasDataSetFieldId: WordBool;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UADataSetFieldDescriptor);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function IsStrictlyPhysical(const TransportProfileUriString: WideString; 
                                assumeTopicTree: WordBool): WordBool;
    procedure Physicalize(const TransportProfileUriString: WideString; assumeTopicTree: WordBool; 
                          force: WordBool);
    function RequiresResolution(const TransportProfileUriString: WideString; 
                                assumeTopicTree: WordBool): WordBool;
    procedure Logicalize;
    property DefaultInterface: _UADataSetFieldDescriptor read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property CustomPropertyValueDictionary: _UAKeyValueDictionary read Get_CustomPropertyValueDictionary write _Set_CustomPropertyValueDictionary;
    property HasName: WordBool read Get_HasName;
    property IsNull: WordBool read Get_IsNull;
    property HasDataSetFieldId: WordBool read Get_HasDataSetFieldId;
    property Name: WideString read Get_Name write Set_Name;
    property DataSetFieldId: TGUID read Get_DataSetFieldId write Set_DataSetFieldId;
    property DataSetFieldIdString: WideString read Get_DataSetFieldIdString write Set_DataSetFieldIdString;
  published
  end;

// *********************************************************************//
// The Class CoUAPubSubResolverDescriptor provides a Create and CreateRemote method to          
// create instances of the default interface _UAPubSubResolverDescriptor exposed by              
// the CoClass UAPubSubResolverDescriptor. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAPubSubResolverDescriptor = class
    class function Create: _UAPubSubResolverDescriptor;
    class function CreateRemote(const MachineName: string): _UAPubSubResolverDescriptor;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAPubSubResolverDescriptor
// Help String      : Describes how the PubSub logical information should be resolved to physical.
// Default Interface: _UAPubSubResolverDescriptor
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAPubSubResolverDescriptor = class(TOleServer)
  private
    FIntf: _UAPubSubResolverDescriptor;
    function GetDefaultInterface: _UAPubSubResolverDescriptor;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_IsNull: WordBool;
    function Get_PublisherEndpointDescriptor: _UAEndpointDescriptor;
    procedure _Set_PublisherEndpointDescriptor(const pRetVal: _UAEndpointDescriptor);
    function Get_PublisherFileResourceDescriptor: _ResourceDescriptor;
    procedure _Set_PublisherFileResourceDescriptor(const pRetVal: _ResourceDescriptor);
    function Get_ResolverKind: UAPubSubResolverKind;
    procedure Set_ResolverKind(pRetVal: UAPubSubResolverKind);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAPubSubResolverDescriptor);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UAPubSubResolverDescriptor read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property IsNull: WordBool read Get_IsNull;
    property PublisherEndpointDescriptor: _UAEndpointDescriptor read Get_PublisherEndpointDescriptor write _Set_PublisherEndpointDescriptor;
    property PublisherFileResourceDescriptor: _ResourceDescriptor read Get_PublisherFileResourceDescriptor write _Set_PublisherFileResourceDescriptor;
    property ResolverKind: UAPubSubResolverKind read Get_ResolverKind write Set_ResolverKind;
  published
  end;

// *********************************************************************//
// The Class CoUAStringDataSetFieldDataDictionary provides a Create and CreateRemote method to          
// create instances of the default interface _UAStringDataSetFieldDataDictionary exposed by              
// the CoClass UAStringDataSetFieldDataDictionary. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAStringDataSetFieldDataDictionary = class
    class function Create: _UAStringDataSetFieldDataDictionary;
    class function CreateRemote(const MachineName: string): _UAStringDataSetFieldDataDictionary;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAStringDataSetFieldDataDictionary
// Help String      : A dictionary of OPC UA dataset field data objects, keyed by the field name.
// Default Interface: _UAStringDataSetFieldDataDictionary
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAStringDataSetFieldDataDictionary = class(TOleServer)
  private
    FIntf: _UAStringDataSetFieldDataDictionary;
    function GetDefaultInterface: _UAStringDataSetFieldDataDictionary;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_Item(key: OleVariant): _UADataSetFieldData;
    procedure _Set_Item(key: OleVariant; const pRetVal: _UADataSetFieldData);
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAStringDataSetFieldDataDictionary);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function GetEnumerator: IEnumVARIANT;
    procedure Add(key: OleVariant; Item: OleVariant);
    procedure Clear;
    function ContainsKey(key: OleVariant): WordBool;
    function Remove(key: OleVariant): WordBool;
    function TryGetValue(key: OleVariant; out value: OleVariant): WordBool;
    function ContainsValue(value: OleVariant): WordBool;
    property DefaultInterface: _UAStringDataSetFieldDataDictionary read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property Item[key: OleVariant]: _UADataSetFieldData read Get_Item write _Set_Item; default;
    property Count: Integer read Get_Count;
  published
  end;

// *********************************************************************//
// The Class CoUASubscribeDataSetFilter provides a Create and CreateRemote method to          
// create instances of the default interface _UASubscribeDataSetFilter exposed by              
// the CoClass UASubscribeDataSetFilter. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUASubscribeDataSetFilter = class
    class function Create: _UASubscribeDataSetFilter;
    class function CreateRemote(const MachineName: string): _UASubscribeDataSetFilter;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUASubscribeDataSetFilter
// Help String      : Specifies how the incoming PubSub messages should be filtered before being delivered to the application.
// Default Interface: _UASubscribeDataSetFilter
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUASubscribeDataSetFilter = class(TOleServer)
  private
    FIntf: _UASubscribeDataSetFilter;
    function GetDefaultInterface: _UASubscribeDataSetFilter;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_AllowDataMessages: WordBool;
    procedure Set_AllowDataMessages(pRetVal: WordBool);
    function Get_AllowEventMessages: WordBool;
    procedure Set_AllowEventMessages(pRetVal: WordBool);
    function Get_DataSetWriterDescriptor: _UADataSetWriterDescriptor;
    procedure _Set_DataSetWriterDescriptor(const pRetVal: _UADataSetWriterDescriptor);
    function Get_HasDataSetWriterDescriptor: WordBool;
    function Get_HasOriginPattern: WordBool;
    function Get_HasPublisherId: WordBool;
    function Get_HasRequiredFieldValues: WordBool;
    function Get_HasWriterGroupDescriptor: WordBool;
    function Get_OriginPattern: WideString;
    procedure Set_OriginPattern(const pRetVal: WideString);
    function Get_PublisherId: _UAPublisherId;
    procedure _Set_PublisherId(const pRetVal: _UAPublisherId);
    function Get_RequiredFieldValueDictionary: _StringObjectDictionary;
    procedure _Set_RequiredFieldValueDictionary(const pRetVal: _StringObjectDictionary);
    function Get_WriterGroupDescriptor: _UAWriterGroupDescriptor;
    procedure _Set_WriterGroupDescriptor(const pRetVal: _UAWriterGroupDescriptor);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UASubscribeDataSetFilter);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function IsStrictlyPhysical(const TransportProfileUriString: WideString; 
                                assumeTopicTree: WordBool): WordBool;
    procedure Logicalize;
    procedure Physicalize(const TransportProfileUriString: WideString; assumeTopicTree: WordBool; 
                          force: WordBool);
    procedure PhysicalizeRequiredFieldValues(const TransportProfileUriString: WideString; 
                                             force: WordBool);
    function RequiredFieldValuesAreStrictlyPhysical(const TransportProfileUriString: WideString): WordBool;
    function RequiredFieldValuesRequireResolution(const TransportProfileUriString: WideString): WordBool;
    function RequiresResolution(const TransportProfileUriString: WideString; 
                                assumeTopicTree: WordBool): WordBool;
    property DefaultInterface: _UASubscribeDataSetFilter read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DataSetWriterDescriptor: _UADataSetWriterDescriptor read Get_DataSetWriterDescriptor write _Set_DataSetWriterDescriptor;
    property HasDataSetWriterDescriptor: WordBool read Get_HasDataSetWriterDescriptor;
    property HasOriginPattern: WordBool read Get_HasOriginPattern;
    property HasPublisherId: WordBool read Get_HasPublisherId;
    property HasRequiredFieldValues: WordBool read Get_HasRequiredFieldValues;
    property HasWriterGroupDescriptor: WordBool read Get_HasWriterGroupDescriptor;
    property PublisherId: _UAPublisherId read Get_PublisherId write _Set_PublisherId;
    property RequiredFieldValueDictionary: _StringObjectDictionary read Get_RequiredFieldValueDictionary write _Set_RequiredFieldValueDictionary;
    property WriterGroupDescriptor: _UAWriterGroupDescriptor read Get_WriterGroupDescriptor write _Set_WriterGroupDescriptor;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property AllowDataMessages: WordBool read Get_AllowDataMessages write Set_AllowDataMessages;
    property AllowEventMessages: WordBool read Get_AllowEventMessages write Set_AllowEventMessages;
    property OriginPattern: WideString read Get_OriginPattern write Set_OriginPattern;
  published
  end;

// *********************************************************************//
// The Class CoUASubscriberCommunicationParameters provides a Create and CreateRemote method to          
// create instances of the default interface _UASubscriberCommunicationParameters exposed by              
// the CoClass UASubscriberCommunicationParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUASubscriberCommunicationParameters = class
    class function Create: _UASubscriberCommunicationParameters;
    class function CreateRemote(const MachineName: string): _UASubscriberCommunicationParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUASubscriberCommunicationParameters
// Help String      : Represents communication parameters for an OPC UA subscriber.
// Default Interface: _UASubscriberCommunicationParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUASubscriberCommunicationParameters = class(TOleServer)
  private
    FIntf: _UASubscriberCommunicationParameters;
    function GetDefaultInterface: _UASubscriberCommunicationParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_DataSetFieldContentMask: UADataSetFieldContentMask;
    procedure Set_DataSetFieldContentMask(pRetVal: UADataSetFieldContentMask);
    function Get_ManagedSecurityGroupParameters: _ManagedSecurityGroupParameters;
    procedure _Set_ManagedSecurityGroupParameters(const pRetVal: _ManagedSecurityGroupParameters);
    function Get_MaximumNetworkMessageSize: Int64;
    procedure Set_MaximumNetworkMessageSize(pRetVal: Int64);
    function Get_MaximumNetworkMessageSizeInt32: Integer;
    procedure Set_MaximumNetworkMessageSizeInt32(pRetVal: Integer);
    function Get_securityGroupId: WideString;
    procedure Set_securityGroupId(const pRetVal: WideString);
    function Get_SecurityKeyServices: _UAEndpointDescriptorCollection;
    procedure _Set_SecurityKeyServices(const pRetVal: _UAEndpointDescriptorCollection);
    function Get_SecurityKeyServiceTemplate: _UAEndpointDescriptor;
    procedure _Set_SecurityKeyServiceTemplate(const pRetVal: _UAEndpointDescriptor);
    function Get_SecurityMode: UAMessageSecurityModes;
    procedure Set_SecurityMode(pRetVal: UAMessageSecurityModes);
    function Get_BrokerDataSetReaderTransportParameters: _UABrokerDataSetReaderTransportParameters;
    procedure _Set_BrokerDataSetReaderTransportParameters(const pRetVal: _UABrokerDataSetReaderTransportParameters);
    function Get_JsonDataSetReaderMessageParameters: _UAJsonDataSetReaderMessageParameters;
    procedure _Set_JsonDataSetReaderMessageParameters(const pRetVal: _UAJsonDataSetReaderMessageParameters);
    function Get_MessageReceiveTimeout: Double;
    procedure Set_MessageReceiveTimeout(pRetVal: Double);
    function Get_UadpDataSetReaderMessageParameters: _UAUadpDataSetReaderMessageParameters;
    procedure _Set_UadpDataSetReaderMessageParameters(const pRetVal: _UAUadpDataSetReaderMessageParameters);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UASubscriberCommunicationParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UASubscriberCommunicationParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property ManagedSecurityGroupParameters: _ManagedSecurityGroupParameters read Get_ManagedSecurityGroupParameters write _Set_ManagedSecurityGroupParameters;
    property SecurityKeyServices: _UAEndpointDescriptorCollection read Get_SecurityKeyServices write _Set_SecurityKeyServices;
    property SecurityKeyServiceTemplate: _UAEndpointDescriptor read Get_SecurityKeyServiceTemplate write _Set_SecurityKeyServiceTemplate;
    property BrokerDataSetReaderTransportParameters: _UABrokerDataSetReaderTransportParameters read Get_BrokerDataSetReaderTransportParameters write _Set_BrokerDataSetReaderTransportParameters;
    property JsonDataSetReaderMessageParameters: _UAJsonDataSetReaderMessageParameters read Get_JsonDataSetReaderMessageParameters write _Set_JsonDataSetReaderMessageParameters;
    property UadpDataSetReaderMessageParameters: _UAUadpDataSetReaderMessageParameters read Get_UadpDataSetReaderMessageParameters write _Set_UadpDataSetReaderMessageParameters;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property DataSetFieldContentMask: UADataSetFieldContentMask read Get_DataSetFieldContentMask write Set_DataSetFieldContentMask;
    property MaximumNetworkMessageSize: Int64 read Get_MaximumNetworkMessageSize write Set_MaximumNetworkMessageSize;
    property MaximumNetworkMessageSizeInt32: Integer read Get_MaximumNetworkMessageSizeInt32 write Set_MaximumNetworkMessageSizeInt32;
    property securityGroupId: WideString read Get_securityGroupId write Set_securityGroupId;
    property SecurityMode: UAMessageSecurityModes read Get_SecurityMode write Set_SecurityMode;
    property MessageReceiveTimeout: Double read Get_MessageReceiveTimeout write Set_MessageReceiveTimeout;
  published
  end;

// *********************************************************************//
// The Class CoUAWriterGroupDescriptor provides a Create and CreateRemote method to          
// create instances of the default interface _UAWriterGroupDescriptor exposed by              
// the CoClass UAWriterGroupDescriptor. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAWriterGroupDescriptor = class
    class function Create: _UAWriterGroupDescriptor;
    class function CreateRemote(const MachineName: string): _UAWriterGroupDescriptor;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAWriterGroupDescriptor
// Help String      : Descriptor for a writer group (using physical Id, or logical name).
// Default Interface: _UAWriterGroupDescriptor
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAWriterGroupDescriptor = class(TOleServer)
  private
    FIntf: _UAWriterGroupDescriptor;
    function GetDefaultInterface: _UAWriterGroupDescriptor;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_CustomPropertyValueDictionary: _UAKeyValueDictionary;
    procedure _Set_CustomPropertyValueDictionary(const pRetVal: _UAKeyValueDictionary);
    function Get_HasName: WordBool;
    function Get_IsNull: WordBool;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_HasWriterGroupId: WordBool;
    function Get_WriterGroupId: Integer;
    procedure Set_WriterGroupId(pRetVal: Integer);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAWriterGroupDescriptor);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function IsStrictlyPhysical(const TransportProfileUriString: WideString; 
                                assumeTopicTree: WordBool): WordBool;
    procedure Physicalize(const TransportProfileUriString: WideString; assumeTopicTree: WordBool; 
                          force: WordBool);
    function RequiresResolution(const TransportProfileUriString: WideString; 
                                assumeTopicTree: WordBool): WordBool;
    procedure Logicalize;
    property DefaultInterface: _UAWriterGroupDescriptor read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property CustomPropertyValueDictionary: _UAKeyValueDictionary read Get_CustomPropertyValueDictionary write _Set_CustomPropertyValueDictionary;
    property HasName: WordBool read Get_HasName;
    property IsNull: WordBool read Get_IsNull;
    property HasWriterGroupId: WordBool read Get_HasWriterGroupId;
    property Name: WideString read Get_Name write Set_Name;
    property WriterGroupId: Integer read Get_WriterGroupId write Set_WriterGroupId;
  published
  end;

// *********************************************************************//
// The Class CoUAOptimizerPluginParameters provides a Create and CreateRemote method to          
// create instances of the default interface _UAOptimizerPluginParameters exposed by              
// the CoClass UAOptimizerPluginParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAOptimizerPluginParameters = class
    class function Create: _UAOptimizerPluginParameters;
    class function CreateRemote(const MachineName: string): _UAOptimizerPluginParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAOptimizerPluginParameters
// Help String      : Contains parameters for OPC-UA Optimizer plug-in.
// Default Interface: _UAOptimizerPluginParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAOptimizerPluginParameters = class(TOleServer)
  private
    FIntf: _UAOptimizerPluginParameters;
    function GetDefaultInterface: _UAOptimizerPluginParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_EnableRequestMerging: WordBool;
    procedure Set_EnableRequestMerging(pRetVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAOptimizerPluginParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UAOptimizerPluginParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property EnableRequestMerging: WordBool read Get_EnableRequestMerging write Set_EnableRequestMerging;
  published
  end;

// *********************************************************************//
// The Class CoUAClientServerTables provides a Create and CreateRemote method to          
// create instances of the default interface _UAServerTables exposed by              
// the CoClass UAClientServerTables. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAClientServerTables = class
    class function Create: _UAServerTables;
    class function CreateRemote(const MachineName: string): _UAServerTables;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAClientServerTables
// Help String      : Provides access to OPC UA server tables via a client.
// Default Interface: _UAServerTables
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TUAClientServerTables = class(TOleServer)
  private
    FIntf: _UAServerTables;
    function GetDefaultInterface: _UAServerTables;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAServerTables);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function GetNamespaceTable(endpointDescriptor: OleVariant): _ValueResult;
    property DefaultInterface: _UAServerTables read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
  published
  end;

// *********************************************************************//
// The Class CoEasyUAClientComplexData provides a Create and CreateRemote method to          
// create instances of the default interface _EasyUAClientComplexData exposed by              
// the CoClass EasyUAClientComplexData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEasyUAClientComplexData = class
    class function Create: _EasyUAClientComplexData;
    class function CreateRemote(const MachineName: string): _EasyUAClientComplexData;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TEasyUAClientComplexData
// Help String      : Infrastructure. OPC UA client complex data implementation.
// Default Interface: _EasyUAClientComplexData
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TEasyUAClientComplexData = class(TOleServer)
  private
    FIntf: _EasyUAClientComplexData;
    function GetDefaultInterface: _EasyUAClientComplexData;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_DataTypeDefinitionProvider: _UADataTypeDefinitionProvider;
    function Get_DataTypeDictionaryProvider: _UADataTypeDictionaryProvider;
    function Get_DataTypeModelProvider: _UADataTypeModelProvider;
    function Get_ServerTables: _UAServerTables;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _EasyUAClientComplexData);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function FindDataTypeEncodingId(encodingNodeElementCollection: OleVariant; 
                                    extensionObjectType: UAExtensionObjectType): _ValueResult;
    function FindDataTypeSystem(encodingName: OleVariant): _UADataTypeSystem;
    function ResolveDataType(DataTypeId: OleVariant; encodingName: OleVariant): _ValueResult;
    function ResolveDataTypes(dataTypeIdList: OleVariant; encodingName: OleVariant): PSafeArray;
    property DefaultInterface: _EasyUAClientComplexData read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DataTypeDefinitionProvider: _UADataTypeDefinitionProvider read Get_DataTypeDefinitionProvider;
    property DataTypeDictionaryProvider: _UADataTypeDictionaryProvider read Get_DataTypeDictionaryProvider;
    property DataTypeModelProvider: _UADataTypeModelProvider read Get_DataTypeModelProvider;
    property ServerTables: _UAServerTables read Get_ServerTables;
  published
  end;

// *********************************************************************//
// The Class CoUAComplexDataSubscriberPluginParameters provides a Create and CreateRemote method to          
// create instances of the default interface _UAComplexDataSubscriberPluginParameters exposed by              
// the CoClass UAComplexDataSubscriberPluginParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAComplexDataSubscriberPluginParameters = class
    class function Create: _UAComplexDataSubscriberPluginParameters;
    class function CreateRemote(const MachineName: string): _UAComplexDataSubscriberPluginParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAComplexDataSubscriberPluginParameters
// Help String      : Contains parameters for OPC UA Complex Data Subscriber plug-in.
// Default Interface: _UAComplexDataSubscriberPluginParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAComplexDataSubscriberPluginParameters = class(TOleServer)
  private
    FIntf: _UAComplexDataSubscriberPluginParameters;
    function GetDefaultInterface: _UAComplexDataSubscriberPluginParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_TryResolveMissingDataTypeEncodingIds: WordBool;
    procedure Set_TryResolveMissingDataTypeEncodingIds(pRetVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAComplexDataSubscriberPluginParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UAComplexDataSubscriberPluginParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property TryResolveMissingDataTypeEncodingIds: WordBool read Get_TryResolveMissingDataTypeEncodingIds write Set_TryResolveMissingDataTypeEncodingIds;
  published
  end;

// *********************************************************************//
// The Class CoUAIndexRangeListFormatException provides a Create and CreateRemote method to          
// create instances of the default interface _UAIndexRangeListFormatException exposed by              
// the CoClass UAIndexRangeListFormatException. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAIndexRangeListFormatException = class
    class function Create: _UAIndexRangeListFormatException;
    class function CreateRemote(const MachineName: string): _UAIndexRangeListFormatException;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAIndexRangeListFormatException
// Help String      : The exception that is thrown when the string format of the OPC-UA index range list is incorrect.
// Default Interface: _UAIndexRangeListFormatException
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TUAIndexRangeListFormatException = class(TOleServer)
  private
    FIntf: _UAIndexRangeListFormatException;
    function GetDefaultInterface: _UAIndexRangeListFormatException;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_Message: WideString;
    function Get_StackTrace: WideString;
    function Get_HelpLink: WideString;
    procedure Set_HelpLink(const pRetVal: WideString);
    function Get_Source: WideString;
    procedure Set_Source(const pRetVal: WideString);
    function Get_InnerException: _Exception;
    function Get_TargetSite: _MethodBase;
    function Get_Data: _Dictionary;
    function Get_HResult: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAIndexRangeListFormatException);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function GetBaseException: _Exception;
    procedure GetObjectData(const info: _SerializationInfo; context: StreamingContext);
    property DefaultInterface: _UAIndexRangeListFormatException read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Message: WideString read Get_Message;
    property StackTrace: WideString read Get_StackTrace;
    property InnerException: _Exception read Get_InnerException;
    property TargetSite: _MethodBase read Get_TargetSite;
    property Data: _Dictionary read Get_Data;
    property HResult: Integer read Get_HResult;
    property HelpLink: WideString read Get_HelpLink write Set_HelpLink;
    property Source: WideString read Get_Source write Set_Source;
  published
  end;

// *********************************************************************//
// The Class CoUAIndexRangeListParser provides a Create and CreateRemote method to          
// create instances of the default interface _UAIndexRangeListParser exposed by              
// the CoClass UAIndexRangeListParser. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAIndexRangeListParser = class
    class function Create: _UAIndexRangeListParser;
    class function CreateRemote(const MachineName: string): _UAIndexRangeListParser;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAIndexRangeListParser
// Help String      : A parser for OPC-UA index range lists.
// Default Interface: _UAIndexRangeListParser
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAIndexRangeListParser = class(TOleServer)
  private
    FIntf: _UAIndexRangeListParser;
    function GetDefaultInterface: _UAIndexRangeListParser;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAIndexRangeListParser);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Parse(const formattedText: WideString): _UAIndexRangeList;
    function TryParse(const s: WideString; out IndexRangeList: OleVariant): _StringParsingError;
    property DefaultInterface: _UAIndexRangeListParser read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
  published
  end;

// *********************************************************************//
// The Class CoUANodeArguments provides a Create and CreateRemote method to          
// create instances of the default interface _UANodeArguments exposed by              
// the CoClass UANodeArguments. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUANodeArguments = class
    class function Create: _UANodeArguments;
    class function CreateRemote(const MachineName: string): _UANodeArguments;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUANodeArguments
// Help String      : Holds all arguments needed to specify a node in an OPC-UA server.
// Default Interface: _UANodeArguments
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUANodeArguments = class(TOleServer)
  private
    FIntf: _UANodeArguments;
    function GetDefaultInterface: _UANodeArguments;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_State: OleVariant;
    procedure _Set_State(pRetVal: OleVariant);
    function Get_endpointDescriptor: _UAEndpointDescriptor;
    procedure _Set_endpointDescriptor(const pRetVal: _UAEndpointDescriptor);
    function Get_NodeDescriptor: _UANodeDescriptor;
    procedure _Set_NodeDescriptor(const pRetVal: _UANodeDescriptor);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UANodeArguments);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function MemberwiseClone: _OperationArguments;
    procedure SetState(State: OleVariant);
    property DefaultInterface: _UANodeArguments read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property State: OleVariant read Get_State write _Set_State;
    property endpointDescriptor: _UAEndpointDescriptor read Get_endpointDescriptor write _Set_endpointDescriptor;
    property NodeDescriptor: _UANodeDescriptor read Get_NodeDescriptor write _Set_NodeDescriptor;
  published
  end;

// *********************************************************************//
// The Class CoEasyUADataChangeNotificationEventArgs provides a Create and CreateRemote method to          
// create instances of the default interface _EasyUADataChangeNotificationEventArgs exposed by              
// the CoClass EasyUADataChangeNotificationEventArgs. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEasyUADataChangeNotificationEventArgs = class
    class function Create: _EasyUADataChangeNotificationEventArgs;
    class function CreateRemote(const MachineName: string): _EasyUADataChangeNotificationEventArgs;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TEasyUADataChangeNotificationEventArgs
// Help String      : Provides data for the EasyUAClient.DataChangeNotification event.
// Default Interface: _EasyUADataChangeNotificationEventArgs
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TEasyUADataChangeNotificationEventArgs = class(TOleServer)
  private
    FIntf: _EasyUADataChangeNotificationEventArgs;
    function GetDefaultInterface: _EasyUADataChangeNotificationEventArgs;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_Diagnostics: _ExceptionCollection;
    procedure _Set_Diagnostics(const pRetVal: _ExceptionCollection);
    function Get_DiagnosticsCount: Integer;
    function Get_DiagnosticsSummary: WideString;
    function Get_ErrorId: WideString;
    procedure Set_ErrorId(const pRetVal: WideString);
    function Get_ErrorMessage: WideString;
    procedure Set_ErrorMessage(const pRetVal: WideString);
    function Get_ErrorMessageBrief: WideString;
    function Get_Exception: _Exception;
    procedure _Set_Exception(const pRetVal: _Exception);
    function Get_NormalizedDiagnostics: _NormalizedExceptionCollection;
    function Get_NormalizedException: _NormalizedException;
    function Get_Succeeded: WordBool;
    function Get_Arguments: _EasyUAMonitoredItemArguments;
    procedure _Set_Arguments(const pRetVal: _EasyUAMonitoredItemArguments);
    function Get_AttributeData: _UAAttributeData;
    procedure _Set_AttributeData(const pRetVal: _UAAttributeData);
    function Get_StatusInfo: StatusInfo;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _EasyUADataChangeNotificationEventArgs);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function MemberwiseClone: _OperationEventArgs;
    function ToLongString: WideString;
    property DefaultInterface: _EasyUADataChangeNotificationEventArgs read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Diagnostics: _ExceptionCollection read Get_Diagnostics write _Set_Diagnostics;
    property DiagnosticsCount: Integer read Get_DiagnosticsCount;
    property DiagnosticsSummary: WideString read Get_DiagnosticsSummary;
    property ErrorMessageBrief: WideString read Get_ErrorMessageBrief;
    property Exception: _Exception read Get_Exception write _Set_Exception;
    property NormalizedDiagnostics: _NormalizedExceptionCollection read Get_NormalizedDiagnostics;
    property NormalizedException: _NormalizedException read Get_NormalizedException;
    property Succeeded: WordBool read Get_Succeeded;
    property Arguments: _EasyUAMonitoredItemArguments read Get_Arguments write _Set_Arguments;
    property AttributeData: _UAAttributeData read Get_AttributeData write _Set_AttributeData;
    property StatusInfo: StatusInfo read Get_StatusInfo;
    property ErrorId: WideString read Get_ErrorId write Set_ErrorId;
    property ErrorMessage: WideString read Get_ErrorMessage write Set_ErrorMessage;
  published
  end;

// *********************************************************************//
// The Class CoEasyUAEventNotificationEventArgs provides a Create and CreateRemote method to          
// create instances of the default interface _EasyUAEventNotificationEventArgs exposed by              
// the CoClass EasyUAEventNotificationEventArgs. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEasyUAEventNotificationEventArgs = class
    class function Create: _EasyUAEventNotificationEventArgs;
    class function CreateRemote(const MachineName: string): _EasyUAEventNotificationEventArgs;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TEasyUAEventNotificationEventArgs
// Help String      : Provides data for the EasyUAClient.EventNotification event.
// Default Interface: _EasyUAEventNotificationEventArgs
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TEasyUAEventNotificationEventArgs = class(TOleServer)
  private
    FIntf: _EasyUAEventNotificationEventArgs;
    function GetDefaultInterface: _EasyUAEventNotificationEventArgs;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_Diagnostics: _ExceptionCollection;
    procedure _Set_Diagnostics(const pRetVal: _ExceptionCollection);
    function Get_DiagnosticsCount: Integer;
    function Get_DiagnosticsSummary: WideString;
    function Get_ErrorId: WideString;
    procedure Set_ErrorId(const pRetVal: WideString);
    function Get_ErrorMessage: WideString;
    procedure Set_ErrorMessage(const pRetVal: WideString);
    function Get_ErrorMessageBrief: WideString;
    function Get_Exception: _Exception;
    procedure _Set_Exception(const pRetVal: _Exception);
    function Get_NormalizedDiagnostics: _NormalizedExceptionCollection;
    function Get_NormalizedException: _NormalizedException;
    function Get_Succeeded: WordBool;
    function Get_Arguments: _EasyUAMonitoredItemArguments;
    procedure _Set_Arguments(const pRetVal: _EasyUAMonitoredItemArguments);
    function Get_EventData: _UAEventData;
    procedure _Set_EventData(const pRetVal: _UAEventData);
    function Get_Refresh: WordBool;
    procedure Set_Refresh(pRetVal: WordBool);
    function Get_RefreshComplete: WordBool;
    procedure Set_RefreshComplete(pRetVal: WordBool);
    function Get_RefreshInitiated: WordBool;
    procedure Set_RefreshInitiated(pRetVal: WordBool);
    function Get_StatusInfo: StatusInfo;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _EasyUAEventNotificationEventArgs);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function MemberwiseClone: _OperationEventArgs;
    function ToLongString: WideString;
    property DefaultInterface: _EasyUAEventNotificationEventArgs read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Diagnostics: _ExceptionCollection read Get_Diagnostics write _Set_Diagnostics;
    property DiagnosticsCount: Integer read Get_DiagnosticsCount;
    property DiagnosticsSummary: WideString read Get_DiagnosticsSummary;
    property ErrorMessageBrief: WideString read Get_ErrorMessageBrief;
    property Exception: _Exception read Get_Exception write _Set_Exception;
    property NormalizedDiagnostics: _NormalizedExceptionCollection read Get_NormalizedDiagnostics;
    property NormalizedException: _NormalizedException read Get_NormalizedException;
    property Succeeded: WordBool read Get_Succeeded;
    property Arguments: _EasyUAMonitoredItemArguments read Get_Arguments write _Set_Arguments;
    property EventData: _UAEventData read Get_EventData write _Set_EventData;
    property StatusInfo: StatusInfo read Get_StatusInfo;
    property ErrorId: WideString read Get_ErrorId write Set_ErrorId;
    property ErrorMessage: WideString read Get_ErrorMessage write Set_ErrorMessage;
    property Refresh: WordBool read Get_Refresh write Set_Refresh;
    property RefreshComplete: WordBool read Get_RefreshComplete write Set_RefreshComplete;
    property RefreshInitiated: WordBool read Get_RefreshInitiated write Set_RefreshInitiated;
  published
  end;

// *********************************************************************//
// The Class CoEasyUAMonitoredItemArgumentsDictionary provides a Create and CreateRemote method to          
// create instances of the default interface _EasyUAMonitoredItemArgumentsDictionary exposed by              
// the CoClass EasyUAMonitoredItemArgumentsDictionary. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEasyUAMonitoredItemArgumentsDictionary = class
    class function Create: _EasyUAMonitoredItemArgumentsDictionary;
    class function CreateRemote(const MachineName: string): _EasyUAMonitoredItemArgumentsDictionary;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TEasyUAMonitoredItemArgumentsDictionary
// Help String      : A dictionary of OPC-UA monitored item argument objects, keyed by monitored item handle.
// Default Interface: _EasyUAMonitoredItemArgumentsDictionary
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TEasyUAMonitoredItemArgumentsDictionary = class(TOleServer)
  private
    FIntf: _EasyUAMonitoredItemArgumentsDictionary;
    function GetDefaultInterface: _EasyUAMonitoredItemArgumentsDictionary;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_Item(key: Integer): _EasyUAMonitoredItemArguments;
    procedure _Set_Item(key: Integer; const pRetVal: _EasyUAMonitoredItemArguments);
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _EasyUAMonitoredItemArgumentsDictionary);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function GetEnumerator: IEnumVARIANT;
    procedure Add(key: Integer; Item: OleVariant);
    procedure Clear;
    function ContainsKey(key: Integer): WordBool;
    function Remove(key: Integer): WordBool;
    function TryGetValue(key: Integer; out value: OleVariant): WordBool;
    function ContainsValue(value: OleVariant): WordBool;
    property DefaultInterface: _EasyUAMonitoredItemArgumentsDictionary read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property Item[key: Integer]: _EasyUAMonitoredItemArguments read Get_Item write _Set_Item; default;
    property Count: Integer read Get_Count;
  published
  end;

// *********************************************************************//
// The Class CoEasyUAServerConditionChangedEventArgs provides a Create and CreateRemote method to          
// create instances of the default interface _EasyUAServerConditionChangedEventArgs exposed by              
// the CoClass EasyUAServerConditionChangedEventArgs. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEasyUAServerConditionChangedEventArgs = class
    class function Create: _EasyUAServerConditionChangedEventArgs;
    class function CreateRemote(const MachineName: string): _EasyUAServerConditionChangedEventArgs;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TEasyUAServerConditionChangedEventArgs
// Help String      : Provides data for the EasyUAClient.ServerConditionChanged event.
// Default Interface: _EasyUAServerConditionChangedEventArgs
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TEasyUAServerConditionChangedEventArgs = class(TOleServer)
  private
    FIntf: _EasyUAServerConditionChangedEventArgs;
    function GetDefaultInterface: _EasyUAServerConditionChangedEventArgs;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_Diagnostics: _ExceptionCollection;
    procedure _Set_Diagnostics(const pRetVal: _ExceptionCollection);
    function Get_DiagnosticsCount: Integer;
    function Get_DiagnosticsSummary: WideString;
    function Get_ErrorId: WideString;
    procedure Set_ErrorId(const pRetVal: WideString);
    function Get_ErrorMessage: WideString;
    procedure Set_ErrorMessage(const pRetVal: WideString);
    function Get_ErrorMessageBrief: WideString;
    function Get_Exception: _Exception;
    procedure _Set_Exception(const pRetVal: _Exception);
    function Get_NormalizedDiagnostics: _NormalizedExceptionCollection;
    function Get_NormalizedException: _NormalizedException;
    function Get_Succeeded: WordBool;
    function Get_ConnectionState: ConnectionState;
    procedure Set_ConnectionState(pRetVal: ConnectionState);
    function Get_IsConnected: WordBool;
    function Get_RetrialDelay: Integer;
    procedure Set_RetrialDelay(pRetVal: Integer);
    function Get_Statistics: _ConnectedConditionStatistics;
    procedure _Set_Statistics(const pRetVal: _ConnectedConditionStatistics);
    function Get_StatusInfo: StatusInfo;
    function Get_endpointDescriptor: _UAEndpointDescriptor;
    procedure _Set_endpointDescriptor(const pRetVal: _UAEndpointDescriptor);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _EasyUAServerConditionChangedEventArgs);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function MemberwiseClone: _OperationEventArgs;
    function ToLongString: WideString;
    property DefaultInterface: _EasyUAServerConditionChangedEventArgs read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Diagnostics: _ExceptionCollection read Get_Diagnostics write _Set_Diagnostics;
    property DiagnosticsCount: Integer read Get_DiagnosticsCount;
    property DiagnosticsSummary: WideString read Get_DiagnosticsSummary;
    property ErrorMessageBrief: WideString read Get_ErrorMessageBrief;
    property Exception: _Exception read Get_Exception write _Set_Exception;
    property NormalizedDiagnostics: _NormalizedExceptionCollection read Get_NormalizedDiagnostics;
    property NormalizedException: _NormalizedException read Get_NormalizedException;
    property Succeeded: WordBool read Get_Succeeded;
    property IsConnected: WordBool read Get_IsConnected;
    property Statistics: _ConnectedConditionStatistics read Get_Statistics write _Set_Statistics;
    property StatusInfo: StatusInfo read Get_StatusInfo;
    property endpointDescriptor: _UAEndpointDescriptor read Get_endpointDescriptor write _Set_endpointDescriptor;
    property ErrorId: WideString read Get_ErrorId write Set_ErrorId;
    property ErrorMessage: WideString read Get_ErrorMessage write Set_ErrorMessage;
    property ConnectionState: ConnectionState read Get_ConnectionState write Set_ConnectionState;
    property RetrialDelay: Integer read Get_RetrialDelay write Set_RetrialDelay;
  published
  end;

// *********************************************************************//
// The Class CoEasyUASubscriptionChangeArguments provides a Create and CreateRemote method to          
// create instances of the default interface _EasyUASubscriptionChangeArguments exposed by              
// the CoClass EasyUASubscriptionChangeArguments. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEasyUASubscriptionChangeArguments = class
    class function Create: _EasyUASubscriptionChangeArguments;
    class function CreateRemote(const MachineName: string): _EasyUASubscriptionChangeArguments;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TEasyUASubscriptionChangeArguments
// Help String      : Contains arguments describing how the OPC-UA monitoring item subscription should be changed.
// Default Interface: _EasyUASubscriptionChangeArguments
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TEasyUASubscriptionChangeArguments = class(TOleServer)
  private
    FIntf: _EasyUASubscriptionChangeArguments;
    function GetDefaultInterface: _EasyUASubscriptionChangeArguments;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_State: OleVariant;
    procedure _Set_State(pRetVal: OleVariant);
    function Get_Handle: Integer;
    procedure Set_Handle(pRetVal: Integer);
    function Get_AutoConditionRefresh: WordBool;
    procedure Set_AutoConditionRefresh(pRetVal: WordBool);
    function Get_MonitoringParameters: _UAMonitoringParameters;
    procedure _Set_MonitoringParameters(const pRetVal: _UAMonitoringParameters);
    function Get_SubscriptionParameters: _UASubscriptionParameters;
    procedure _Set_SubscriptionParameters(const pRetVal: _UASubscriptionParameters);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _EasyUASubscriptionChangeArguments);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function MemberwiseClone: _OperationArguments;
    procedure SetState(State: OleVariant);
    property DefaultInterface: _EasyUASubscriptionChangeArguments read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property State: OleVariant read Get_State write _Set_State;
    property MonitoringParameters: _UAMonitoringParameters read Get_MonitoringParameters write _Set_MonitoringParameters;
    property SubscriptionParameters: _UASubscriptionParameters read Get_SubscriptionParameters write _Set_SubscriptionParameters;
    property Handle: Integer read Get_Handle write Set_Handle;
    property AutoConditionRefresh: WordBool read Get_AutoConditionRefresh write Set_AutoConditionRefresh;
  published
  end;

// *********************************************************************//
// The Class CoUAAttributeArguments provides a Create and CreateRemote method to          
// create instances of the default interface _UAAttributeArguments exposed by              
// the CoClass UAAttributeArguments. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAAttributeArguments = class
    class function Create: _UAAttributeArguments;
    class function CreateRemote(const MachineName: string): _UAAttributeArguments;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAAttributeArguments
// Help String      : Holds all arguments needed to specify a node together with its attribute in an OPC-UA server.
// Default Interface: _UAAttributeArguments
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAAttributeArguments = class(TOleServer)
  private
    FIntf: _UAAttributeArguments;
    function GetDefaultInterface: _UAAttributeArguments;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_State: OleVariant;
    procedure _Set_State(pRetVal: OleVariant);
    function Get_endpointDescriptor: _UAEndpointDescriptor;
    procedure _Set_endpointDescriptor(const pRetVal: _UAEndpointDescriptor);
    function Get_NodeDescriptor: _UANodeDescriptor;
    procedure _Set_NodeDescriptor(const pRetVal: _UANodeDescriptor);
    function Get_AttributeId: UAAttributeId;
    procedure Set_AttributeId(pRetVal: UAAttributeId);
    function Get_IndexRangeList: _UAIndexRangeList;
    procedure _Set_IndexRangeList(const pRetVal: _UAIndexRangeList);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAAttributeArguments);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function MemberwiseClone: _OperationArguments;
    procedure SetState(State: OleVariant);
    property DefaultInterface: _UAAttributeArguments read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property State: OleVariant read Get_State write _Set_State;
    property endpointDescriptor: _UAEndpointDescriptor read Get_endpointDescriptor write _Set_endpointDescriptor;
    property NodeDescriptor: _UANodeDescriptor read Get_NodeDescriptor write _Set_NodeDescriptor;
    property IndexRangeList: _UAIndexRangeList read Get_IndexRangeList write _Set_IndexRangeList;
    property AttributeId: UAAttributeId read Get_AttributeId write Set_AttributeId;
  published
  end;

// *********************************************************************//
// The Class CoUAAttributeDataResult provides a Create and CreateRemote method to          
// create instances of the default interface _UAAttributeDataResult exposed by              
// the CoClass UAAttributeDataResult. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAAttributeDataResult = class
    class function Create: _UAAttributeDataResult;
    class function CreateRemote(const MachineName: string): _UAAttributeDataResult;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAAttributeDataResult
// Help String      : Holds result of a Read operation, i.e. the data obtained for an attribute of a node in OPC-UA Server's address space.
// Default Interface: _UAAttributeDataResult
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAAttributeDataResult = class(TOleServer)
  private
    FIntf: _UAAttributeDataResult;
    function GetDefaultInterface: _UAAttributeDataResult;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_ToString_2(const format: WideString; const formatProvider: IFormatProvider): WideString;
    function Get_ToString_3(const format: WideString): WideString;
    function Get_Diagnostics: _ExceptionCollection;
    procedure _Set_Diagnostics(const pRetVal: _ExceptionCollection);
    function Get_DiagnosticsCount: Integer;
    function Get_DiagnosticsSummary: WideString;
    function Get_ErrorId: WideString;
    procedure Set_ErrorId(const pRetVal: WideString);
    function Get_ErrorMessage: WideString;
    procedure Set_ErrorMessage(const pRetVal: WideString);
    function Get_ErrorMessageBrief: WideString;
    function Get_Exception: _Exception;
    procedure _Set_Exception(const pRetVal: _Exception);
    function Get_NormalizedDiagnostics: _NormalizedExceptionCollection;
    function Get_NormalizedException: _NormalizedException;
    function Get_State: OleVariant;
    procedure _Set_State(pRetVal: OleVariant);
    function Get_Succeeded: WordBool;
    function Get_AttributeData: _UAAttributeData;
    procedure _Set_AttributeData(const pRetVal: _UAAttributeData);
    function Get_StatusInfo: StatusInfo;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAAttributeDataResult);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function MemberwiseClone: _OperationResult;
    procedure SetState(State: OleVariant);
    procedure ThrowIfFailed;
    property DefaultInterface: _UAAttributeDataResult read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property ToString_2[const format: WideString; const formatProvider: IFormatProvider]: WideString read Get_ToString_2;
    property ToString_3[const format: WideString]: WideString read Get_ToString_3;
    property Diagnostics: _ExceptionCollection read Get_Diagnostics write _Set_Diagnostics;
    property DiagnosticsCount: Integer read Get_DiagnosticsCount;
    property DiagnosticsSummary: WideString read Get_DiagnosticsSummary;
    property ErrorMessageBrief: WideString read Get_ErrorMessageBrief;
    property Exception: _Exception read Get_Exception write _Set_Exception;
    property NormalizedDiagnostics: _NormalizedExceptionCollection read Get_NormalizedDiagnostics;
    property NormalizedException: _NormalizedException read Get_NormalizedException;
    property State: OleVariant read Get_State write _Set_State;
    property Succeeded: WordBool read Get_Succeeded;
    property AttributeData: _UAAttributeData read Get_AttributeData write _Set_AttributeData;
    property StatusInfo: StatusInfo read Get_StatusInfo;
    property ErrorId: WideString read Get_ErrorId write Set_ErrorId;
    property ErrorMessage: WideString read Get_ErrorMessage write Set_ErrorMessage;
  published
  end;

// *********************************************************************//
// The Class CoUABrowseArguments provides a Create and CreateRemote method to          
// create instances of the default interface _UABrowseArguments exposed by              
// the CoClass UABrowseArguments. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUABrowseArguments = class
    class function Create: _UABrowseArguments;
    class function CreateRemote(const MachineName: string): _UABrowseArguments;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUABrowseArguments
// Help String      : Holds arguments needed to browse OPC UA server nodes.
// Default Interface: _UABrowseArguments
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUABrowseArguments = class(TOleServer)
  private
    FIntf: _UABrowseArguments;
    function GetDefaultInterface: _UABrowseArguments;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_State: OleVariant;
    procedure _Set_State(pRetVal: OleVariant);
    function Get_endpointDescriptor: _UAEndpointDescriptor;
    procedure _Set_endpointDescriptor(const pRetVal: _UAEndpointDescriptor);
    function Get_NodeDescriptor: _UANodeDescriptor;
    procedure _Set_NodeDescriptor(const pRetVal: _UANodeDescriptor);
    function Get_BrowseParameters: _UABrowseParameters;
    procedure _Set_BrowseParameters(const pRetVal: _UABrowseParameters);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UABrowseArguments);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function MemberwiseClone: _OperationArguments;
    procedure SetState(State: OleVariant);
    property DefaultInterface: _UABrowseArguments read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property State: OleVariant read Get_State write _Set_State;
    property endpointDescriptor: _UAEndpointDescriptor read Get_endpointDescriptor write _Set_endpointDescriptor;
    property NodeDescriptor: _UANodeDescriptor read Get_NodeDescriptor write _Set_NodeDescriptor;
    property BrowseParameters: _UABrowseParameters read Get_BrowseParameters write _Set_BrowseParameters;
  published
  end;

// *********************************************************************//
// The Class CoUACallArguments provides a Create and CreateRemote method to          
// create instances of the default interface _UACallArguments exposed by              
// the CoClass UACallArguments. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUACallArguments = class
    class function Create: _UACallArguments;
    class function CreateRemote(const MachineName: string): _UACallArguments;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUACallArguments
// Help String      : Holds all arguments needed to call a method in an OPC-UA server.
// Default Interface: _UACallArguments
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUACallArguments = class(TOleServer)
  private
    FIntf: _UACallArguments;
    function GetDefaultInterface: _UACallArguments;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_State: OleVariant;
    procedure _Set_State(pRetVal: OleVariant);
    function Get_endpointDescriptor: _UAEndpointDescriptor;
    procedure _Set_endpointDescriptor(const pRetVal: _UAEndpointDescriptor);
    function Get_NodeDescriptor: _UANodeDescriptor;
    procedure _Set_NodeDescriptor(const pRetVal: _UANodeDescriptor);
    function Get_InputArguments: PSafeArray;
    procedure Set_InputArguments(pRetVal: PSafeArray);
    function Get_InputTypeCodes: OleVariant;
    procedure _Set_InputTypeCodes(pRetVal: OleVariant);
    function Get_InputTypeFullNames: OleVariant;
    procedure _Set_InputTypeFullNames(pRetVal: OleVariant);
    function Get_InputTypes: OleVariant;
    procedure _Set_InputTypes(pRetVal: OleVariant);
    function Get_MethodNodeDescriptor: _UANodeDescriptor;
    procedure _Set_MethodNodeDescriptor(const pRetVal: _UANodeDescriptor);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UACallArguments);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function MemberwiseClone: _OperationArguments;
    procedure SetState(State: OleVariant);
    procedure SetInputArguments(InputArguments: OleVariant);
    procedure SetInputTypeCodes(InputTypeCodes: OleVariant);
    procedure SetInputTypeFullNames(var InputTypeFullNames: PSafeArray);
    procedure SetInputTypes(var InputTypes: PSafeArray);
    property DefaultInterface: _UACallArguments read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property State: OleVariant read Get_State write _Set_State;
    property endpointDescriptor: _UAEndpointDescriptor read Get_endpointDescriptor write _Set_endpointDescriptor;
    property NodeDescriptor: _UANodeDescriptor read Get_NodeDescriptor write _Set_NodeDescriptor;
    property InputTypeCodes: OleVariant read Get_InputTypeCodes write _Set_InputTypeCodes;
    property InputTypeFullNames: OleVariant read Get_InputTypeFullNames write _Set_InputTypeFullNames;
    property InputTypes: OleVariant read Get_InputTypes write _Set_InputTypes;
    property MethodNodeDescriptor: _UANodeDescriptor read Get_MethodNodeDescriptor write _Set_MethodNodeDescriptor;
    property InputArguments: PSafeArray read Get_InputArguments write Set_InputArguments;
  published
  end;

// *********************************************************************//
// The Class CoUAException provides a Create and CreateRemote method to          
// create instances of the default interface _UAException exposed by              
// the CoClass UAException. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAException = class
    class function Create: _UAException;
    class function CreateRemote(const MachineName: string): _UAException;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAException
// Help String      : Exceptions arising from OPC-UA (Unified Architecture) operations.
// Default Interface: _UAException
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TUAException = class(TOleServer)
  private
    FIntf: _UAException;
    function GetDefaultInterface: _UAException;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_Message: WideString;
    function Get_StackTrace: WideString;
    function Get_HelpLink: WideString;
    procedure Set_HelpLink(const pRetVal: WideString);
    function Get_Source: WideString;
    procedure Set_Source(const pRetVal: WideString);
    function Get_InnerException: _Exception;
    function Get_TargetSite: _MethodBase;
    function Get_Data: _Dictionary;
    function Get_HResult: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAException);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function GetBaseException: _Exception;
    procedure GetObjectData(const info: _SerializationInfo; context: StreamingContext);
    property DefaultInterface: _UAException read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Message: WideString read Get_Message;
    property StackTrace: WideString read Get_StackTrace;
    property InnerException: _Exception read Get_InnerException;
    property TargetSite: _MethodBase read Get_TargetSite;
    property Data: _Dictionary read Get_Data;
    property HResult: Integer read Get_HResult;
    property HelpLink: WideString read Get_HelpLink write Set_HelpLink;
    property Source: WideString read Get_Source write Set_Source;
  published
  end;

// *********************************************************************//
// The Class CoUALogicalException provides a Create and CreateRemote method to          
// create instances of the default interface _UALogicalException exposed by              
// the CoClass UALogicalException. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUALogicalException = class
    class function Create: _UALogicalException;
    class function CreateRemote(const MachineName: string): _UALogicalException;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUALogicalException
// Help String      : OPC UA exceptions that indicate logical errors in operations.
// Default Interface: _UALogicalException
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TUALogicalException = class(TOleServer)
  private
    FIntf: _UALogicalException;
    function GetDefaultInterface: _UALogicalException;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_Message: WideString;
    function Get_StackTrace: WideString;
    function Get_HelpLink: WideString;
    procedure Set_HelpLink(const pRetVal: WideString);
    function Get_Source: WideString;
    procedure Set_Source(const pRetVal: WideString);
    function Get_InnerException: _Exception;
    function Get_TargetSite: _MethodBase;
    function Get_Data: _Dictionary;
    function Get_HResult: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UALogicalException);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function GetBaseException: _Exception;
    procedure GetObjectData(const info: _SerializationInfo; context: StreamingContext);
    property DefaultInterface: _UALogicalException read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Message: WideString read Get_Message;
    property StackTrace: WideString read Get_StackTrace;
    property InnerException: _Exception read Get_InnerException;
    property TargetSite: _MethodBase read Get_TargetSite;
    property Data: _Dictionary read Get_Data;
    property HResult: Integer read Get_HResult;
    property HelpLink: WideString read Get_HelpLink write Set_HelpLink;
    property Source: WideString read Get_Source write Set_Source;
  published
  end;

// *********************************************************************//
// The Class CoUAMonitoredItemArguments provides a Create and CreateRemote method to          
// create instances of the default interface _UAMonitoredItemArguments exposed by              
// the CoClass UAMonitoredItemArguments. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAMonitoredItemArguments = class
    class function Create: _UAMonitoredItemArguments;
    class function CreateRemote(const MachineName: string): _UAMonitoredItemArguments;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAMonitoredItemArguments
// Help String      : Holds all arguments needed to subscribe to a monitored item in an OPC-UA server.
// Default Interface: _UAMonitoredItemArguments
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAMonitoredItemArguments = class(TOleServer)
  private
    FIntf: _UAMonitoredItemArguments;
    function GetDefaultInterface: _UAMonitoredItemArguments;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_State: OleVariant;
    procedure _Set_State(pRetVal: OleVariant);
    function Get_endpointDescriptor: _UAEndpointDescriptor;
    procedure _Set_endpointDescriptor(const pRetVal: _UAEndpointDescriptor);
    function Get_NodeDescriptor: _UANodeDescriptor;
    procedure _Set_NodeDescriptor(const pRetVal: _UANodeDescriptor);
    function Get_AttributeId: UAAttributeId;
    procedure Set_AttributeId(pRetVal: UAAttributeId);
    function Get_IndexRangeList: _UAIndexRangeList;
    procedure _Set_IndexRangeList(const pRetVal: _UAIndexRangeList);
    function Get_AutoConditionRefresh: WordBool;
    procedure Set_AutoConditionRefresh(pRetVal: WordBool);
    function Get_MonitoringParameters: _UAMonitoringParameters;
    procedure _Set_MonitoringParameters(const pRetVal: _UAMonitoringParameters);
    function Get_SubscriptionParameters: _UASubscriptionParameters;
    procedure _Set_SubscriptionParameters(const pRetVal: _UASubscriptionParameters);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAMonitoredItemArguments);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function MemberwiseClone: _OperationArguments;
    procedure SetState(State: OleVariant);
    property DefaultInterface: _UAMonitoredItemArguments read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property State: OleVariant read Get_State write _Set_State;
    property endpointDescriptor: _UAEndpointDescriptor read Get_endpointDescriptor write _Set_endpointDescriptor;
    property NodeDescriptor: _UANodeDescriptor read Get_NodeDescriptor write _Set_NodeDescriptor;
    property IndexRangeList: _UAIndexRangeList read Get_IndexRangeList write _Set_IndexRangeList;
    property MonitoringParameters: _UAMonitoringParameters read Get_MonitoringParameters write _Set_MonitoringParameters;
    property SubscriptionParameters: _UASubscriptionParameters read Get_SubscriptionParameters write _Set_SubscriptionParameters;
    property AttributeId: UAAttributeId read Get_AttributeId write Set_AttributeId;
    property AutoConditionRefresh: WordBool read Get_AutoConditionRefresh write Set_AutoConditionRefresh;
  published
  end;

// *********************************************************************//
// The Class CoEasyUAMonitoredItemArguments provides a Create and CreateRemote method to          
// create instances of the default interface _EasyUAMonitoredItemArguments exposed by              
// the CoClass EasyUAMonitoredItemArguments. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEasyUAMonitoredItemArguments = class
    class function Create: _EasyUAMonitoredItemArguments;
    class function CreateRemote(const MachineName: string): _EasyUAMonitoredItemArguments;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TEasyUAMonitoredItemArguments
// Help String      : Holds all arguments needed to subscribe to a monitored item in an OPC-UA server, possibly including a callback method.
// Default Interface: _EasyUAMonitoredItemArguments
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TEasyUAMonitoredItemArguments = class(TOleServer)
  private
    FIntf: _EasyUAMonitoredItemArguments;
    function GetDefaultInterface: _EasyUAMonitoredItemArguments;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_State: OleVariant;
    procedure _Set_State(pRetVal: OleVariant);
    function Get_endpointDescriptor: _UAEndpointDescriptor;
    procedure _Set_endpointDescriptor(const pRetVal: _UAEndpointDescriptor);
    function Get_NodeDescriptor: _UANodeDescriptor;
    procedure _Set_NodeDescriptor(const pRetVal: _UANodeDescriptor);
    function Get_AttributeId: UAAttributeId;
    procedure Set_AttributeId(pRetVal: UAAttributeId);
    function Get_IndexRangeList: _UAIndexRangeList;
    procedure _Set_IndexRangeList(const pRetVal: _UAIndexRangeList);
    function Get_AutoConditionRefresh: WordBool;
    procedure Set_AutoConditionRefresh(pRetVal: WordBool);
    function Get_MonitoringParameters: _UAMonitoringParameters;
    procedure _Set_MonitoringParameters(const pRetVal: _UAMonitoringParameters);
    function Get_SubscriptionParameters: _UASubscriptionParameters;
    procedure _Set_SubscriptionParameters(const pRetVal: _UASubscriptionParameters);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _EasyUAMonitoredItemArguments);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function MemberwiseClone: _OperationArguments;
    procedure SetState(State: OleVariant);
    property DefaultInterface: _EasyUAMonitoredItemArguments read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property State: OleVariant read Get_State write _Set_State;
    property endpointDescriptor: _UAEndpointDescriptor read Get_endpointDescriptor write _Set_endpointDescriptor;
    property NodeDescriptor: _UANodeDescriptor read Get_NodeDescriptor write _Set_NodeDescriptor;
    property IndexRangeList: _UAIndexRangeList read Get_IndexRangeList write _Set_IndexRangeList;
    property MonitoringParameters: _UAMonitoringParameters read Get_MonitoringParameters write _Set_MonitoringParameters;
    property SubscriptionParameters: _UASubscriptionParameters read Get_SubscriptionParameters write _Set_SubscriptionParameters;
    property AttributeId: UAAttributeId read Get_AttributeId write Set_AttributeId;
    property AutoConditionRefresh: WordBool read Get_AutoConditionRefresh write Set_AutoConditionRefresh;
  published
  end;

// *********************************************************************//
// The Class CoUANodeElementCollectionResult provides a Create and CreateRemote method to          
// create instances of the default interface _UANodeElementCollectionResult exposed by              
// the CoClass UANodeElementCollectionResult. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUANodeElementCollectionResult = class
    class function Create: _UANodeElementCollectionResult;
    class function CreateRemote(const MachineName: string): _UANodeElementCollectionResult;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUANodeElementCollectionResult
// Help String      : Holds result of a Browse operation, i.e. the node elements obtained by browsing a node in OPC-UA Server's address space.
// Default Interface: _UANodeElementCollectionResult
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUANodeElementCollectionResult = class(TOleServer)
  private
    FIntf: _UANodeElementCollectionResult;
    function GetDefaultInterface: _UANodeElementCollectionResult;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_ToString_2(const format: WideString; const formatProvider: IFormatProvider): WideString;
    function Get_ToString_3(const format: WideString): WideString;
    function Get_Diagnostics: _ExceptionCollection;
    procedure _Set_Diagnostics(const pRetVal: _ExceptionCollection);
    function Get_DiagnosticsCount: Integer;
    function Get_DiagnosticsSummary: WideString;
    function Get_ErrorId: WideString;
    procedure Set_ErrorId(const pRetVal: WideString);
    function Get_ErrorMessage: WideString;
    procedure Set_ErrorMessage(const pRetVal: WideString);
    function Get_ErrorMessageBrief: WideString;
    function Get_Exception: _Exception;
    procedure _Set_Exception(const pRetVal: _Exception);
    function Get_NormalizedDiagnostics: _NormalizedExceptionCollection;
    function Get_NormalizedException: _NormalizedException;
    function Get_State: OleVariant;
    procedure _Set_State(pRetVal: OleVariant);
    function Get_Succeeded: WordBool;
    function Get_RegularizedValue: OleVariant;
    function Get_value: _UANodeElementCollection;
    procedure _Set_value(const pRetVal: _UANodeElementCollection);
    function Get_ValueType: _Type;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UANodeElementCollectionResult);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function MemberwiseClone: _OperationResult;
    procedure SetState(State: OleVariant);
    procedure ThrowIfFailed;
    procedure SetValue(value: OleVariant);
    property DefaultInterface: _UANodeElementCollectionResult read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property ToString_2[const format: WideString; const formatProvider: IFormatProvider]: WideString read Get_ToString_2;
    property ToString_3[const format: WideString]: WideString read Get_ToString_3;
    property Diagnostics: _ExceptionCollection read Get_Diagnostics write _Set_Diagnostics;
    property DiagnosticsCount: Integer read Get_DiagnosticsCount;
    property DiagnosticsSummary: WideString read Get_DiagnosticsSummary;
    property ErrorMessageBrief: WideString read Get_ErrorMessageBrief;
    property Exception: _Exception read Get_Exception write _Set_Exception;
    property NormalizedDiagnostics: _NormalizedExceptionCollection read Get_NormalizedDiagnostics;
    property NormalizedException: _NormalizedException read Get_NormalizedException;
    property State: OleVariant read Get_State write _Set_State;
    property Succeeded: WordBool read Get_Succeeded;
    property RegularizedValue: OleVariant read Get_RegularizedValue;
    property value: _UANodeElementCollection read Get_value write _Set_value;
    property ValueType: _Type read Get_ValueType;
    property ErrorId: WideString read Get_ErrorId write Set_ErrorId;
    property ErrorMessage: WideString read Get_ErrorMessage write Set_ErrorMessage;
  published
  end;

// *********************************************************************//
// The Class CoUAReadArguments provides a Create and CreateRemote method to          
// create instances of the default interface _UAReadArguments exposed by              
// the CoClass UAReadArguments. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAReadArguments = class
    class function Create: _UAReadArguments;
    class function CreateRemote(const MachineName: string): _UAReadArguments;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAReadArguments
// Help String      : Holds all arguments needed to read from an OPC-UA server.
// Default Interface: _UAReadArguments
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAReadArguments = class(TOleServer)
  private
    FIntf: _UAReadArguments;
    function GetDefaultInterface: _UAReadArguments;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_State: OleVariant;
    procedure _Set_State(pRetVal: OleVariant);
    function Get_endpointDescriptor: _UAEndpointDescriptor;
    procedure _Set_endpointDescriptor(const pRetVal: _UAEndpointDescriptor);
    function Get_NodeDescriptor: _UANodeDescriptor;
    procedure _Set_NodeDescriptor(const pRetVal: _UANodeDescriptor);
    function Get_AttributeId: UAAttributeId;
    procedure Set_AttributeId(pRetVal: UAAttributeId);
    function Get_IndexRangeList: _UAIndexRangeList;
    procedure _Set_IndexRangeList(const pRetVal: _UAIndexRangeList);
    function Get_ReadParameters: _UAReadParameters;
    procedure _Set_ReadParameters(const pRetVal: _UAReadParameters);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAReadArguments);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function MemberwiseClone: _OperationArguments;
    procedure SetState(State: OleVariant);
    property DefaultInterface: _UAReadArguments read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property State: OleVariant read Get_State write _Set_State;
    property endpointDescriptor: _UAEndpointDescriptor read Get_endpointDescriptor write _Set_endpointDescriptor;
    property NodeDescriptor: _UANodeDescriptor read Get_NodeDescriptor write _Set_NodeDescriptor;
    property IndexRangeList: _UAIndexRangeList read Get_IndexRangeList write _Set_IndexRangeList;
    property ReadParameters: _UAReadParameters read Get_ReadParameters write _Set_ReadParameters;
    property AttributeId: UAAttributeId read Get_AttributeId write Set_AttributeId;
  published
  end;

// *********************************************************************//
// The Class CoUAWriteArguments provides a Create and CreateRemote method to          
// create instances of the default interface _UAWriteArguments exposed by              
// the CoClass UAWriteArguments. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAWriteArguments = class
    class function Create: _UAWriteArguments;
    class function CreateRemote(const MachineName: string): _UAWriteArguments;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAWriteArguments
// Help String      : Holds all arguments needed to write into an OPC-UA server.
// Default Interface: _UAWriteArguments
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAWriteArguments = class(TOleServer)
  private
    FIntf: _UAWriteArguments;
    function GetDefaultInterface: _UAWriteArguments;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_State: OleVariant;
    procedure _Set_State(pRetVal: OleVariant);
    function Get_endpointDescriptor: _UAEndpointDescriptor;
    procedure _Set_endpointDescriptor(const pRetVal: _UAEndpointDescriptor);
    function Get_NodeDescriptor: _UANodeDescriptor;
    procedure _Set_NodeDescriptor(const pRetVal: _UANodeDescriptor);
    function Get_AttributeId: UAAttributeId;
    procedure Set_AttributeId(pRetVal: UAAttributeId);
    function Get_IndexRangeList: _UAIndexRangeList;
    procedure _Set_IndexRangeList(const pRetVal: _UAIndexRangeList);
    function Get_AttributeType: _Type;
    function Get_ValueType: _Type;
    procedure _Set_ValueType(const pRetVal: _Type);
    function Get_ValueTypeFullName: WideString;
    procedure Set_ValueTypeFullName(const pRetVal: WideString);
    function Get_ValueTypeCode: TypeCode;
    procedure Set_ValueTypeCode(pRetVal: TypeCode);
    function Get_AttributeData: _UAAttributeData;
    procedure _Set_AttributeData(const pRetVal: _UAAttributeData);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAWriteArguments);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function MemberwiseClone: _OperationArguments;
    procedure SetState(State: OleVariant);
    property DefaultInterface: _UAWriteArguments read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property State: OleVariant read Get_State write _Set_State;
    property endpointDescriptor: _UAEndpointDescriptor read Get_endpointDescriptor write _Set_endpointDescriptor;
    property NodeDescriptor: _UANodeDescriptor read Get_NodeDescriptor write _Set_NodeDescriptor;
    property IndexRangeList: _UAIndexRangeList read Get_IndexRangeList write _Set_IndexRangeList;
    property AttributeType: _Type read Get_AttributeType;
    property ValueType: _Type read Get_ValueType write _Set_ValueType;
    property AttributeData: _UAAttributeData read Get_AttributeData write _Set_AttributeData;
    property AttributeId: UAAttributeId read Get_AttributeId write Set_AttributeId;
    property ValueTypeFullName: WideString read Get_ValueTypeFullName write Set_ValueTypeFullName;
    property ValueTypeCode: TypeCode read Get_ValueTypeCode write Set_ValueTypeCode;
  published
  end;

// *********************************************************************//
// The Class CoUAWriteResult provides a Create and CreateRemote method to          
// create instances of the default interface _UAWriteResult exposed by              
// the CoClass UAWriteResult. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAWriteResult = class
    class function Create: _UAWriteResult;
    class function CreateRemote(const MachineName: string): _UAWriteResult;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAWriteResult
// Help String      : Holds result of an OPC-UA Write operation.
// Default Interface: _UAWriteResult
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAWriteResult = class(TOleServer)
  private
    FIntf: _UAWriteResult;
    function GetDefaultInterface: _UAWriteResult;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_ToString_2(const format: WideString; const formatProvider: IFormatProvider): WideString;
    function Get_ToString_3(const format: WideString): WideString;
    function Get_Diagnostics: _ExceptionCollection;
    procedure _Set_Diagnostics(const pRetVal: _ExceptionCollection);
    function Get_DiagnosticsCount: Integer;
    function Get_DiagnosticsSummary: WideString;
    function Get_ErrorId: WideString;
    procedure Set_ErrorId(const pRetVal: WideString);
    function Get_ErrorMessage: WideString;
    procedure Set_ErrorMessage(const pRetVal: WideString);
    function Get_ErrorMessageBrief: WideString;
    function Get_Exception: _Exception;
    procedure _Set_Exception(const pRetVal: _Exception);
    function Get_NormalizedDiagnostics: _NormalizedExceptionCollection;
    function Get_NormalizedException: _NormalizedException;
    function Get_State: OleVariant;
    procedure _Set_State(pRetVal: OleVariant);
    function Get_Succeeded: WordBool;
    function Get_Clamped: WordBool;
    procedure Set_Clamped(pRetVal: WordBool);
    function Get_CompletesAsynchronously: WordBool;
    procedure Set_CompletesAsynchronously(pRetVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAWriteResult);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function MemberwiseClone: _OperationResult;
    procedure SetState(State: OleVariant);
    procedure ThrowIfFailed;
    property DefaultInterface: _UAWriteResult read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property ToString_2[const format: WideString; const formatProvider: IFormatProvider]: WideString read Get_ToString_2;
    property ToString_3[const format: WideString]: WideString read Get_ToString_3;
    property Diagnostics: _ExceptionCollection read Get_Diagnostics write _Set_Diagnostics;
    property DiagnosticsCount: Integer read Get_DiagnosticsCount;
    property DiagnosticsSummary: WideString read Get_DiagnosticsSummary;
    property ErrorMessageBrief: WideString read Get_ErrorMessageBrief;
    property Exception: _Exception read Get_Exception write _Set_Exception;
    property NormalizedDiagnostics: _NormalizedExceptionCollection read Get_NormalizedDiagnostics;
    property NormalizedException: _NormalizedException read Get_NormalizedException;
    property State: OleVariant read Get_State write _Set_State;
    property Succeeded: WordBool read Get_Succeeded;
    property ErrorId: WideString read Get_ErrorId write Set_ErrorId;
    property ErrorMessage: WideString read Get_ErrorMessage write Set_ErrorMessage;
    property Clamped: WordBool read Get_Clamped write Set_Clamped;
    property CompletesAsynchronously: WordBool read Get_CompletesAsynchronously write Set_CompletesAsynchronously;
  published
  end;

// *********************************************************************//
// The Class CoUAWriteValueArguments provides a Create and CreateRemote method to          
// create instances of the default interface _UAWriteValueArguments exposed by              
// the CoClass UAWriteValueArguments. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAWriteValueArguments = class
    class function Create: _UAWriteValueArguments;
    class function CreateRemote(const MachineName: string): _UAWriteValueArguments;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAWriteValueArguments
// Help String      : Holds all arguments needed to write a value into an OPC-UA server.
// Default Interface: _UAWriteValueArguments
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAWriteValueArguments = class(TOleServer)
  private
    FIntf: _UAWriteValueArguments;
    function GetDefaultInterface: _UAWriteValueArguments;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_State: OleVariant;
    procedure _Set_State(pRetVal: OleVariant);
    function Get_endpointDescriptor: _UAEndpointDescriptor;
    procedure _Set_endpointDescriptor(const pRetVal: _UAEndpointDescriptor);
    function Get_NodeDescriptor: _UANodeDescriptor;
    procedure _Set_NodeDescriptor(const pRetVal: _UANodeDescriptor);
    function Get_AttributeId: UAAttributeId;
    procedure Set_AttributeId(pRetVal: UAAttributeId);
    function Get_IndexRangeList: _UAIndexRangeList;
    procedure _Set_IndexRangeList(const pRetVal: _UAIndexRangeList);
    function Get_AttributeType: _Type;
    function Get_ValueType: _Type;
    procedure _Set_ValueType(const pRetVal: _Type);
    function Get_ValueTypeFullName: WideString;
    procedure Set_ValueTypeFullName(const pRetVal: WideString);
    function Get_ValueTypeCode: TypeCode;
    procedure Set_ValueTypeCode(pRetVal: TypeCode);
    function Get_value: OleVariant;
    procedure _Set_value(pRetVal: OleVariant);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAWriteValueArguments);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function MemberwiseClone: _OperationArguments;
    procedure SetState(State: OleVariant);
    procedure SetValue(value: OleVariant);
    property DefaultInterface: _UAWriteValueArguments read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property State: OleVariant read Get_State write _Set_State;
    property endpointDescriptor: _UAEndpointDescriptor read Get_endpointDescriptor write _Set_endpointDescriptor;
    property NodeDescriptor: _UANodeDescriptor read Get_NodeDescriptor write _Set_NodeDescriptor;
    property IndexRangeList: _UAIndexRangeList read Get_IndexRangeList write _Set_IndexRangeList;
    property AttributeType: _Type read Get_AttributeType;
    property ValueType: _Type read Get_ValueType write _Set_ValueType;
    property value: OleVariant read Get_value write _Set_value;
    property AttributeId: UAAttributeId read Get_AttributeId write Set_AttributeId;
    property ValueTypeFullName: WideString read Get_ValueTypeFullName write Set_ValueTypeFullName;
    property ValueTypeCode: TypeCode read Get_ValueTypeCode write Set_ValueTypeCode;
  published
  end;

// *********************************************************************//
// The Class CoUABrowsePathFormatException provides a Create and CreateRemote method to          
// create instances of the default interface _UABrowsePathFormatException exposed by              
// the CoClass UABrowsePathFormatException. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUABrowsePathFormatException = class
    class function Create: _UABrowsePathFormatException;
    class function CreateRemote(const MachineName: string): _UABrowsePathFormatException;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUABrowsePathFormatException
// Help String      : Indicates an error in the string form of the OPC-UA browse path.
// Default Interface: _UABrowsePathFormatException
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TUABrowsePathFormatException = class(TOleServer)
  private
    FIntf: _UABrowsePathFormatException;
    function GetDefaultInterface: _UABrowsePathFormatException;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_Message: WideString;
    function Get_StackTrace: WideString;
    function Get_HelpLink: WideString;
    procedure Set_HelpLink(const pRetVal: WideString);
    function Get_Source: WideString;
    procedure Set_Source(const pRetVal: WideString);
    function Get_InnerException: _Exception;
    function Get_TargetSite: _MethodBase;
    function Get_Data: _Dictionary;
    function Get_HResult: Integer;
    function Get_ErrorId: WideString;
    function Get_FormatError: _StringParsingError;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UABrowsePathFormatException);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function GetBaseException: _Exception;
    procedure GetObjectData(const info: _SerializationInfo; context: StreamingContext);
    property DefaultInterface: _UABrowsePathFormatException read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Message: WideString read Get_Message;
    property StackTrace: WideString read Get_StackTrace;
    property InnerException: _Exception read Get_InnerException;
    property TargetSite: _MethodBase read Get_TargetSite;
    property Data: _Dictionary read Get_Data;
    property HResult: Integer read Get_HResult;
    property ErrorId: WideString read Get_ErrorId;
    property FormatError: _StringParsingError read Get_FormatError;
    property HelpLink: WideString read Get_HelpLink write Set_HelpLink;
    property Source: WideString read Get_Source write Set_Source;
  published
  end;

// *********************************************************************//
// The Class CoUABrowsePathParser provides a Create and CreateRemote method to          
// create instances of the default interface _UABrowsePathParser exposed by              
// the CoClass UABrowsePathParser. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUABrowsePathParser = class
    class function Create: _UABrowsePathParser;
    class function CreateRemote(const MachineName: string): _UABrowsePathParser;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUABrowsePathParser
// Help String      : A parser for OPC-UA absolute and relative browse paths.
// Default Interface: _UABrowsePathParser
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUABrowsePathParser = class(TOleServer)
  private
    FIntf: _UABrowsePathParser;
    function GetDefaultInterface: _UABrowsePathParser;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_BasePath: _UABrowsePath;
    procedure _Set_BasePath(const pRetVal: _UABrowsePath);
    function Get_DefaultNamespaceUriString: WideString;
    procedure Set_DefaultNamespaceUriString(const pRetVal: WideString);
    function Get_ParsingFlags: UABrowsePathParsingFlags;
    procedure Set_ParsingFlags(pRetVal: UABrowsePathParsingFlags);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UABrowsePathParser);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function IsAbsolute(const value: WideString): WordBool;
    function Parse(const value: WideString): _UABrowsePath;
    function ParseRelative(const value: WideString): _UABrowsePathElementCollection;
    function TryParse(const value: WideString; out browsePath: OleVariant): _StringParsingError;
    function TryParseRelative(const value: WideString; browsePathElementCollection: OleVariant): _StringParsingError;
    property DefaultInterface: _UABrowsePathParser read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property BasePath: _UABrowsePath read Get_BasePath write _Set_BasePath;
    property DefaultNamespaceUriString: WideString read Get_DefaultNamespaceUriString write Set_DefaultNamespaceUriString;
    property ParsingFlags: UABrowsePathParsingFlags read Get_ParsingFlags write Set_ParsingFlags;
  published
  end;

// *********************************************************************//
// The Class CoUABrowsePath provides a Create and CreateRemote method to          
// create instances of the default interface _UABrowsePath exposed by              
// the CoClass UABrowsePath. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUABrowsePath = class
    class function Create: _UABrowsePath;
    class function CreateRemote(const MachineName: string): _UABrowsePath;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUABrowsePath
// Help String      : OPC-UA absolute browse path. A starting node, and sequence of browse path elements that denotes a path from the starting node in the OPC-UA address space.
// Default Interface: _UABrowsePath
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUABrowsePath = class(TOleServer)
  private
    FIntf: _UABrowsePath;
    function GetDefaultInterface: _UABrowsePath;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_Elements: _UABrowsePathElementCollection;
    procedure _Set_Elements(const pRetVal: _UABrowsePathElementCollection);
    function Get_StartingNodeDescriptor: _UANodeDescriptor;
    procedure _Set_StartingNodeDescriptor(const pRetVal: _UANodeDescriptor);
    function Get_StartingNodeId: _UANodeId;
    procedure _Set_StartingNodeId(const pRetVal: _UANodeId);
    function Get_IsEmpty: WordBool;
    function Get_IsNull: WordBool;
    function Get_Length: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UABrowsePath);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    procedure AppendElement(element: OleVariant);
    procedure AppendRelative(more: OleVariant);
    procedure Combine(const more: WideString; const DefaultNamespaceUriString: WideString);
    function Flatten: _UABrowsePath;
    function format(const DefaultNamespaceUriString: WideString): WideString;
    function GetLastElement: _UABrowsePathElement;
    function ToUANodeDescriptor: _UANodeDescriptor;
    function TryAppendRelative(ParsingFlags: UABrowsePathParsingFlags; const more: WideString; 
                               const DefaultNamespaceUriString: WideString): _StringParsingError;
    function TryCombine(ParsingFlags: UABrowsePathParsingFlags; const more: WideString; 
                        const DefaultNamespaceUriString: WideString): _StringParsingError;
    property DefaultInterface: _UABrowsePath read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Elements: _UABrowsePathElementCollection read Get_Elements write _Set_Elements;
    property StartingNodeDescriptor: _UANodeDescriptor read Get_StartingNodeDescriptor write _Set_StartingNodeDescriptor;
    property StartingNodeId: _UANodeId read Get_StartingNodeId write _Set_StartingNodeId;
    property IsEmpty: WordBool read Get_IsEmpty;
    property IsNull: WordBool read Get_IsNull;
    property Length: Integer read Get_Length;
  published
  end;

// *********************************************************************//
// The Class CoUABrowsePathElement provides a Create and CreateRemote method to          
// create instances of the default interface _UABrowsePathElement exposed by              
// the CoClass UABrowsePathElement. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUABrowsePathElement = class
    class function Create: _UABrowsePathElement;
    class function CreateRemote(const MachineName: string): _UABrowsePathElement;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUABrowsePathElement
// Help String      : Represents an element in the OPC-UA browse path.
// Default Interface: _UABrowsePathElement
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUABrowsePathElement = class(TOleServer)
  private
    FIntf: _UABrowsePathElement;
    function GetDefaultInterface: _UABrowsePathElement;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_ElementType: UABrowsePathElementType;
    procedure Set_ElementType(pRetVal: UABrowsePathElementType);
    function Get_IncludeSubtypes: WordBool;
    procedure Set_IncludeSubtypes(pRetVal: WordBool);
    function Get_IsConfigured: WordBool;
    function Get_IsNull: WordBool;
    function Get_IsSimple: WordBool;
    function Get_ReferenceIsInverse: WordBool;
    function Get_ReferenceTypeImplied: WordBool;
    function Get_ReferenceTypeId: _UANodeId;
    procedure _Set_ReferenceTypeId(const pRetVal: _UANodeId);
    function Get_TargetName: _UAQualifiedName;
    procedure _Set_TargetName(const pRetVal: _UAQualifiedName);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UABrowsePathElement);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function format(const DefaultNamespaceUriString: WideString): WideString;
    property DefaultInterface: _UABrowsePathElement read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property IsConfigured: WordBool read Get_IsConfigured;
    property IsNull: WordBool read Get_IsNull;
    property IsSimple: WordBool read Get_IsSimple;
    property ReferenceIsInverse: WordBool read Get_ReferenceIsInverse;
    property ReferenceTypeImplied: WordBool read Get_ReferenceTypeImplied;
    property ReferenceTypeId: _UANodeId read Get_ReferenceTypeId write _Set_ReferenceTypeId;
    property TargetName: _UAQualifiedName read Get_TargetName write _Set_TargetName;
    property ElementType: UABrowsePathElementType read Get_ElementType write Set_ElementType;
    property IncludeSubtypes: WordBool read Get_IncludeSubtypes write Set_IncludeSubtypes;
  published
  end;

// *********************************************************************//
// The Class CoUABrowsePathElementCollection provides a Create and CreateRemote method to          
// create instances of the default interface _UABrowsePathElementCollection exposed by              
// the CoClass UABrowsePathElementCollection. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUABrowsePathElementCollection = class
    class function Create: _UABrowsePathElementCollection;
    class function CreateRemote(const MachineName: string): _UABrowsePathElementCollection;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUABrowsePathElementCollection
// Help String      : A collection of browse path elements.
// Default Interface: _UABrowsePathElementCollection
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUABrowsePathElementCollection = class(TOleServer)
  private
    FIntf: _UABrowsePathElementCollection;
    function GetDefaultInterface: _UABrowsePathElementCollection;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_Item(index: Integer): _UABrowsePathElement;
    procedure _Set_Item(index: Integer; const pRetVal: _UABrowsePathElement);
    function Get_Count: Integer;
    function Get_IsSimple: WordBool;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UABrowsePathElementCollection);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function GetEnumerator: IEnumVARIANT;
    procedure Add(Item: OleVariant);
    procedure Clear;
    function Contains(Item: OleVariant): WordBool;
    function IndexOf(Item: OleVariant): Integer;
    procedure Insert(index: Integer; Item: OleVariant);
    function Remove(Item: OleVariant): WordBool;
    procedure RemoveAt(index: Integer);
    function CommonPrefix(collection2: OleVariant): _UABrowsePathElementCollection;
    function CommonPrefixLength(collection2: OleVariant): Integer;
    function format(const DefaultNamespaceUriString: WideString): WideString;
    function IsPrefix(prefix: OleVariant): WordBool;
    function ToUAQualifiedNameCollection: _UAQualifiedNameCollection;
    property DefaultInterface: _UABrowsePathElementCollection read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property Item[index: Integer]: _UABrowsePathElement read Get_Item write _Set_Item; default;
    property Count: Integer read Get_Count;
    property IsSimple: WordBool read Get_IsSimple;
  published
  end;

// *********************************************************************//
// The Class CoUAModelClientException provides a Create and CreateRemote method to          
// create instances of the default interface _Exception2 exposed by              
// the CoClass UAModelClientException. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAModelClientException = class
    class function Create: _Exception2;
    class function CreateRemote(const MachineName: string): _Exception2;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAModelClientException
// Help String      : An exception arising in OPC-UA model client.
// Default Interface: _Exception2
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAModelClientException = class(TOleServer)
  private
    FIntf: _Exception2;
    function GetDefaultInterface: _Exception2;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_Message: WideString;
    function Get_StackTrace: WideString;
    function Get_HelpLink: WideString;
    procedure Set_HelpLink(const pRetVal: WideString);
    function Get_Source: WideString;
    procedure Set_Source(const pRetVal: WideString);
    function Get_InnerException: _Exception;
    function Get_TargetSite: _MethodBase;
    function Get_Data: _Dictionary;
    function Get_HResult: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Exception2);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function GetBaseException: _Exception;
    procedure GetObjectData(const Info: _SerializationInfo; context: StreamingContext);
    property DefaultInterface: _Exception2 read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Message: WideString read Get_Message;
    property StackTrace: WideString read Get_StackTrace;
    property InnerException: _Exception read Get_InnerException;
    property TargetSite: _MethodBase read Get_TargetSite;
    property Data: _Dictionary read Get_Data;
    property HResult: Integer read Get_HResult;
    property HelpLink: WideString read Get_HelpLink write Set_HelpLink;
    property Source: WideString read Get_Source write Set_Source;
  published
  end;

// *********************************************************************//
// The Class CoUAModellingException provides a Create and CreateRemote method to          
// create instances of the default interface _Exception2 exposed by              
// the CoClass UAModellingException. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAModellingException = class
    class function Create: _Exception2;
    class function CreateRemote(const MachineName: string): _Exception2;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAModellingException
// Help String      : An exception in OPC-UA modelling.
// Default Interface: _Exception2
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAModellingException = class(TOleServer)
  private
    FIntf: _Exception2;
    function GetDefaultInterface: _Exception2;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_Message: WideString;
    function Get_StackTrace: WideString;
    function Get_HelpLink: WideString;
    procedure Set_HelpLink(const pRetVal: WideString);
    function Get_Source: WideString;
    procedure Set_Source(const pRetVal: WideString);
    function Get_InnerException: _Exception;
    function Get_TargetSite: _MethodBase;
    function Get_Data: _Dictionary;
    function Get_HResult: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _Exception2);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function GetBaseException: _Exception;
    procedure GetObjectData(const Info: _SerializationInfo; context: StreamingContext);
    property DefaultInterface: _Exception2 read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Message: WideString read Get_Message;
    property StackTrace: WideString read Get_StackTrace;
    property InnerException: _Exception read Get_InnerException;
    property TargetSite: _MethodBase read Get_TargetSite;
    property Data: _Dictionary read Get_Data;
    property HResult: Integer read Get_HResult;
    property HelpLink: WideString read Get_HelpLink write Set_HelpLink;
    property Source: WideString read Get_Source write Set_Source;
  published
  end;

// *********************************************************************//
// The Class CoUAModelNodeDescriptor provides a Create and CreateRemote method to          
// create instances of the default interface _UAModelNodeDescriptor exposed by              
// the CoClass UAModelNodeDescriptor. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAModelNodeDescriptor = class
    class function Create: _UAModelNodeDescriptor;
    class function CreateRemote(const MachineName: string): _UAModelNodeDescriptor;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAModelNodeDescriptor
// Help String      : Identifies a node in OPC UA information model.
// Default Interface: _UAModelNodeDescriptor
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAModelNodeDescriptor = class(TOleServer)
  private
    FIntf: _UAModelNodeDescriptor;
    function GetDefaultInterface: _UAModelNodeDescriptor;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_endpointDescriptor: _UAEndpointDescriptor;
    procedure _Set_endpointDescriptor(const pRetVal: _UAEndpointDescriptor);
    function Get_IsNull: WordBool;
    function Get_NodeDescriptor: _UANodeDescriptor;
    procedure _Set_NodeDescriptor(const pRetVal: _UANodeDescriptor);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAModelNodeDescriptor);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UAModelNodeDescriptor read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property endpointDescriptor: _UAEndpointDescriptor read Get_endpointDescriptor write _Set_endpointDescriptor;
    property IsNull: WordBool read Get_IsNull;
    property NodeDescriptor: _UANodeDescriptor read Get_NodeDescriptor write _Set_NodeDescriptor;
  published
  end;

// *********************************************************************//
// The Class CoUACertificateGroupElement provides a Create and CreateRemote method to          
// create instances of the default interface _UACertificateGroupElement exposed by              
// the CoClass UACertificateGroupElement. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUACertificateGroupElement = class
    class function Create: _UACertificateGroupElement;
    class function CreateRemote(const MachineName: string): _UACertificateGroupElement;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUACertificateGroupElement
// Help String      : Represents a certificate group element in the Certificate Management information model.
// Default Interface: _UACertificateGroupElement
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUACertificateGroupElement = class(TOleServer)
  private
    FIntf: _UACertificateGroupElement;
    function GetDefaultInterface: _UACertificateGroupElement;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_certificateGroupId: _UANodeId;
    procedure _Set_certificateGroupId(const pRetVal: _UANodeId);
    function Get_CertificateTypeIds: _UANodeIdCollection;
    function Get_IsBuiltIn: WordBool;
    procedure Set_IsBuiltIn(pRetVal: WordBool);
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UACertificateGroupElement);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UACertificateGroupElement read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property certificateGroupId: _UANodeId read Get_certificateGroupId write _Set_certificateGroupId;
    property CertificateTypeIds: _UANodeIdCollection read Get_CertificateTypeIds;
    property IsBuiltIn: WordBool read Get_IsBuiltIn write Set_IsBuiltIn;
    property Name: WideString read Get_Name write Set_Name;
  published
  end;

// *********************************************************************//
// The Class CoUACertificateGroupElementCollection provides a Create and CreateRemote method to          
// create instances of the default interface _UACertificateGroupElementCollection exposed by              
// the CoClass UACertificateGroupElementCollection. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUACertificateGroupElementCollection = class
    class function Create: _UACertificateGroupElementCollection;
    class function CreateRemote(const MachineName: string): _UACertificateGroupElementCollection;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUACertificateGroupElementCollection
// Help String      : A collection of OPC-UA certificate groups.
// Default Interface: _UACertificateGroupElementCollection
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUACertificateGroupElementCollection = class(TOleServer)
  private
    FIntf: _UACertificateGroupElementCollection;
    function GetDefaultInterface: _UACertificateGroupElementCollection;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_Item(key: OleVariant): _UACertificateGroupElement;
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UACertificateGroupElementCollection);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function GetEnumerator: IEnumVARIANT;
    procedure Add(Item: OleVariant);
    procedure Clear;
    function Contains(Item: OleVariant): WordBool;
    function IndexOf(Item: OleVariant): Integer;
    function Remove(key: OleVariant): WordBool;
    procedure RemoveAt(index: Integer);
    function ToList: _ElasticVector;
    function TryGetValue(key: OleVariant; out Item: OleVariant): WordBool;
    function Clone: OleVariant;
    property DefaultInterface: _UACertificateGroupElementCollection read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Item[key: OleVariant]: _UACertificateGroupElement read Get_Item; default;
    property Count: Integer read Get_Count;
  published
  end;

// *********************************************************************//
// The Class CoUAAttributeOperand provides a Create and CreateRemote method to          
// create instances of the default interface _UAAttributeOperand exposed by              
// the CoClass UAAttributeOperand. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAAttributeOperand = class
    class function Create: _UAAttributeOperand;
    class function CreateRemote(const MachineName: string): _UAAttributeOperand;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAAttributeOperand
// Help String      : An operand consisting of an attribute of a node in a type, with optional relative path and alias.
// Default Interface: _UAAttributeOperand
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAAttributeOperand = class(TOleServer)
  private
    FIntf: _UAAttributeOperand;
    function GetDefaultInterface: _UAAttributeOperand;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_TotalElements: Integer;
    function Get_AliasName: WideString;
    procedure Set_AliasName(const pRetVal: WideString);
    function Get_ArgumentString: WideString;
    function Get_AttributeId: UAAttributeId;
    procedure Set_AttributeId(pRetVal: UAAttributeId);
    function Get_IndexRangeList: _UAIndexRangeList;
    procedure _Set_IndexRangeList(const pRetVal: _UAIndexRangeList);
    function Get_IsNull: WordBool;
    function Get_RelativePath: _UABrowsePathElementCollection;
    procedure _Set_RelativePath(const pRetVal: _UABrowsePathElementCollection);
    function Get_TypeId: _UANodeDescriptor;
    procedure _Set_TypeId(const pRetVal: _UANodeDescriptor);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAAttributeOperand);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UAAttributeOperand read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property TotalElements: Integer read Get_TotalElements;
    property ArgumentString: WideString read Get_ArgumentString;
    property IndexRangeList: _UAIndexRangeList read Get_IndexRangeList write _Set_IndexRangeList;
    property IsNull: WordBool read Get_IsNull;
    property RelativePath: _UABrowsePathElementCollection read Get_RelativePath write _Set_RelativePath;
    property TypeId: _UANodeDescriptor read Get_TypeId write _Set_TypeId;
    property AliasName: WideString read Get_AliasName write Set_AliasName;
    property AttributeId: UAAttributeId read Get_AttributeId write Set_AttributeId;
  published
  end;

// *********************************************************************//
// The Class CoUAContentFilterElement provides a Create and CreateRemote method to          
// create instances of the default interface _UAContentFilterElement exposed by              
// the CoClass UAContentFilterElement. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAContentFilterElement = class
    class function Create: _UAContentFilterElement;
    class function CreateRemote(const MachineName: string): _UAContentFilterElement;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAContentFilterElement
// Help String      : The filter criteria (an operator and its operands).
// Default Interface: _UAContentFilterElement
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAContentFilterElement = class(TOleServer)
  private
    FIntf: _UAContentFilterElement;
    function GetDefaultInterface: _UAContentFilterElement;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_TotalElements: Integer;
    function Get_FilterOperands: _UAFilterOperandCollection;
    procedure _Set_FilterOperands(const pRetVal: _UAFilterOperandCollection);
    function Get_FilterOperator: UAFilterOperator;
    procedure Set_FilterOperator(pRetVal: UAFilterOperator);
    function Get_IsCyclic: WordBool;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAContentFilterElement);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UAContentFilterElement read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property TotalElements: Integer read Get_TotalElements;
    property FilterOperands: _UAFilterOperandCollection read Get_FilterOperands write _Set_FilterOperands;
    property IsCyclic: WordBool read Get_IsCyclic;
    property FilterOperator: UAFilterOperator read Get_FilterOperator write Set_FilterOperator;
  published
  end;

// *********************************************************************//
// The Class CoUAFilterOperand provides a Create and CreateRemote method to          
// create instances of the default interface _UAFilterOperand exposed by              
// the CoClass UAFilterOperand. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAFilterOperand = class
    class function Create: _UAFilterOperand;
    class function CreateRemote(const MachineName: string): _UAFilterOperand;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAFilterOperand
// Help String      : Base class for different types of filter operands.
// Default Interface: _UAFilterOperand
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TUAFilterOperand = class(TOleServer)
  private
    FIntf: _UAFilterOperand;
    function GetDefaultInterface: _UAFilterOperand;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_TotalElements: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAFilterOperand);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UAFilterOperand read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property TotalElements: Integer read Get_TotalElements;
  published
  end;

// *********************************************************************//
// The Class CoUAFilterOperandCollection provides a Create and CreateRemote method to          
// create instances of the default interface _UAFilterOperandCollection exposed by              
// the CoClass UAFilterOperandCollection. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAFilterOperandCollection = class
    class function Create: _UAFilterOperandCollection;
    class function CreateRemote(const MachineName: string): _UAFilterOperandCollection;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAFilterOperandCollection
// Help String      : A collection of content filter operands.
// Default Interface: _UAFilterOperandCollection
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAFilterOperandCollection = class(TOleServer)
  private
    FIntf: _UAFilterOperandCollection;
    function GetDefaultInterface: _UAFilterOperandCollection;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_Item(index: Integer): _UAFilterOperand;
    procedure _Set_Item(index: Integer; const pRetVal: _UAFilterOperand);
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAFilterOperandCollection);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function GetEnumerator: IEnumVARIANT;
    procedure Add(Item: OleVariant);
    procedure Clear;
    function Contains(Item: OleVariant): WordBool;
    function IndexOf(Item: OleVariant): Integer;
    procedure Insert(index: Integer; Item: OleVariant);
    function Remove(Item: OleVariant): WordBool;
    procedure RemoveAt(index: Integer);
    property DefaultInterface: _UAFilterOperandCollection read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property Item[index: Integer]: _UAFilterOperand read Get_Item write _Set_Item; default;
    property Count: Integer read Get_Count;
  published
  end;

// *********************************************************************//
// The Class CoUALiteralOperand provides a Create and CreateRemote method to          
// create instances of the default interface _UALiteralOperand exposed by              
// the CoClass UALiteralOperand. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUALiteralOperand = class
    class function Create: _UALiteralOperand;
    class function CreateRemote(const MachineName: string): _UALiteralOperand;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUALiteralOperand
// Help String      : An operand consisting of a literal value.
// Default Interface: _UALiteralOperand
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUALiteralOperand = class(TOleServer)
  private
    FIntf: _UALiteralOperand;
    function GetDefaultInterface: _UALiteralOperand;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_TotalElements: Integer;
    function Get_ValueType: _Type;
    procedure _Set_ValueType(const pRetVal: _Type);
    function Get_ValueTypeFullName: WideString;
    procedure Set_ValueTypeFullName(const pRetVal: WideString);
    function Get_ValueTypeCode: TypeCode;
    procedure Set_ValueTypeCode(pRetVal: TypeCode);
    function Get_value: OleVariant;
    procedure _Set_value(pRetVal: OleVariant);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UALiteralOperand);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    procedure SetValue(value: OleVariant);
    property DefaultInterface: _UALiteralOperand read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property TotalElements: Integer read Get_TotalElements;
    property ValueType: _Type read Get_ValueType write _Set_ValueType;
    property value: OleVariant read Get_value write _Set_value;
    property ValueTypeFullName: WideString read Get_ValueTypeFullName write Set_ValueTypeFullName;
    property ValueTypeCode: TypeCode read Get_ValueTypeCode write Set_ValueTypeCode;
  published
  end;

// *********************************************************************//
// The Class CoUASimpleAttributeOperand provides a Create and CreateRemote method to          
// create instances of the default interface _UASimpleAttributeOperand exposed by              
// the CoClass UASimpleAttributeOperand. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUASimpleAttributeOperand = class
    class function Create: _UASimpleAttributeOperand;
    class function CreateRemote(const MachineName: string): _UASimpleAttributeOperand;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUASimpleAttributeOperand
// Help String      : An operand consisting of an attribute of a node in a type, with optional simple relative path, and no alias.
// Default Interface: _UASimpleAttributeOperand
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUASimpleAttributeOperand = class(TOleServer)
  private
    FIntf: _UASimpleAttributeOperand;
    function GetDefaultInterface: _UASimpleAttributeOperand;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_TotalElements: Integer;
    function Get_ArgumentString: WideString;
    function Get_AttributeId: UAAttributeId;
    procedure Set_AttributeId(pRetVal: UAAttributeId);
    function Get_IndexRangeList: _UAIndexRangeList;
    procedure _Set_IndexRangeList(const pRetVal: _UAIndexRangeList);
    function Get_IsNull: WordBool;
    function Get_QualifiedNames: _UAQualifiedNameCollection;
    procedure _Set_QualifiedNames(const pRetVal: _UAQualifiedNameCollection);
    function Get_TypeId: _UANodeDescriptor;
    procedure _Set_TypeId(const pRetVal: _UANodeDescriptor);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UASimpleAttributeOperand);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function ToUAAttributeField: _UAAttributeField;
    property DefaultInterface: _UASimpleAttributeOperand read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property TotalElements: Integer read Get_TotalElements;
    property ArgumentString: WideString read Get_ArgumentString;
    property IndexRangeList: _UAIndexRangeList read Get_IndexRangeList write _Set_IndexRangeList;
    property IsNull: WordBool read Get_IsNull;
    property QualifiedNames: _UAQualifiedNameCollection read Get_QualifiedNames write _Set_QualifiedNames;
    property TypeId: _UANodeDescriptor read Get_TypeId write _Set_TypeId;
    property AttributeId: UAAttributeId read Get_AttributeId write Set_AttributeId;
  published
  end;

// *********************************************************************//
// The Class CoUASimpleAttributeOperandCollection provides a Create and CreateRemote method to          
// create instances of the default interface _UASimpleAttributeOperandCollection exposed by              
// the CoClass UASimpleAttributeOperandCollection. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUASimpleAttributeOperandCollection = class
    class function Create: _UASimpleAttributeOperandCollection;
    class function CreateRemote(const MachineName: string): _UASimpleAttributeOperandCollection;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUASimpleAttributeOperandCollection
// Help String      : A collection of simple attribute operands.
// Default Interface: _UASimpleAttributeOperandCollection
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUASimpleAttributeOperandCollection = class(TOleServer)
  private
    FIntf: _UASimpleAttributeOperandCollection;
    function GetDefaultInterface: _UASimpleAttributeOperandCollection;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_Item(index: Integer): _UASimpleAttributeOperand;
    procedure _Set_Item(index: Integer; const pRetVal: _UASimpleAttributeOperand);
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UASimpleAttributeOperandCollection);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function GetEnumerator: IEnumVARIANT;
    procedure Add(Item: OleVariant);
    procedure Clear;
    function Contains(Item: OleVariant): WordBool;
    function IndexOf(Item: OleVariant): Integer;
    procedure Insert(index: Integer; Item: OleVariant);
    function Remove(Item: OleVariant): WordBool;
    procedure RemoveAt(index: Integer);
    property DefaultInterface: _UASimpleAttributeOperandCollection read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property Item[index: Integer]: _UASimpleAttributeOperand read Get_Item write _Set_Item; default;
    property Count: Integer read Get_Count;
  published
  end;

// *********************************************************************//
// The Class CoUAClientAdaptableParameters provides a Create and CreateRemote method to          
// create instances of the default interface _UAClientAdaptableParameters exposed by              
// the CoClass UAClientAdaptableParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAClientAdaptableParameters = class
    class function Create: _UAClientAdaptableParameters;
    class function CreateRemote(const MachineName: string): _UAClientAdaptableParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAClientAdaptableParameters
// Help String      : Values that differentiate the OPC-UA clients.
// Default Interface: _UAClientAdaptableParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAClientAdaptableParameters = class(TOleServer)
  private
    FIntf: _UAClientAdaptableParameters;
    function GetDefaultInterface: _UAClientAdaptableParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_DiscoveryParameters: _UADiscoveryParameters;
    procedure _Set_DiscoveryParameters(const pRetVal: _UADiscoveryParameters);
    function Get_HostParameters: _UAHostParameters;
    procedure _Set_HostParameters(const pRetVal: _UAHostParameters);
    function Get_MonitoredItemParameters: _UAClientMonitoredItemParameters;
    procedure _Set_MonitoredItemParameters(const pRetVal: _UAClientMonitoredItemParameters);
    function Get_SessionParameters: _UASmartClientSessionParameters;
    procedure _Set_SessionParameters(const pRetVal: _UASmartClientSessionParameters);
    function Get_SubscriptionParameters: _UAClientSubscriptionParameters;
    procedure _Set_SubscriptionParameters(const pRetVal: _UAClientSubscriptionParameters);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAClientAdaptableParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    procedure Reset;
    property DefaultInterface: _UAClientAdaptableParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DiscoveryParameters: _UADiscoveryParameters read Get_DiscoveryParameters write _Set_DiscoveryParameters;
    property HostParameters: _UAHostParameters read Get_HostParameters write _Set_HostParameters;
    property MonitoredItemParameters: _UAClientMonitoredItemParameters read Get_MonitoredItemParameters write _Set_MonitoredItemParameters;
    property SessionParameters: _UASmartClientSessionParameters read Get_SessionParameters write _Set_SessionParameters;
    property SubscriptionParameters: _UAClientSubscriptionParameters read Get_SubscriptionParameters write _Set_SubscriptionParameters;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
  published
  end;

// *********************************************************************//
// The Class CoUAClientServerEngineParameters provides a Create and CreateRemote method to          
// create instances of the default interface _UAClientServerEngineParameters exposed by              
// the CoClass UAClientServerEngineParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAClientServerEngineParameters = class
    class function Create: _UAClientServerEngineParameters;
    class function CreateRemote(const MachineName: string): _UAClientServerEngineParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAClientServerEngineParameters
// Help String      : Contains parameters that influence the behavior of the client/server component on the application level.
// Default Interface: _UAClientServerEngineParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAClientServerEngineParameters = class(TOleServer)
  private
    FIntf: _UAClientServerEngineParameters;
    function GetDefaultInterface: _UAClientServerEngineParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_CertificateAcceptancePolicy: _UACertificateAcceptancePolicy;
    procedure _Set_CertificateAcceptancePolicy(const pRetVal: _UACertificateAcceptancePolicy);
    function Get_ConfigurationPropertyOverrides: _StringObjectDictionary;
    procedure _Set_ConfigurationPropertyOverrides(const pRetVal: _StringObjectDictionary);
    function Get_ConfigurationSources: UAConfigurationSources;
    procedure Set_ConfigurationSources(pRetVal: UAConfigurationSources);
    function Get_DebuggerDetectionOverride: Sign;
    procedure Set_DebuggerDetectionOverride(pRetVal: Sign);
    function Get_gdsEndpointDescriptor: _UAEndpointDescriptor;
    procedure _Set_gdsEndpointDescriptor(const pRetVal: _UAEndpointDescriptor);
    function Get_RetrialDelay: Integer;
    procedure Set_RetrialDelay(pRetVal: Integer);
    function Get_ReconnectionPeriod: Integer;
    procedure Set_ReconnectionPeriod(pRetVal: Integer);
    function Get_UserInteractionParameters: _UAUserInteractionParameters;
    procedure _Set_UserInteractionParameters(const pRetVal: _UAUserInteractionParameters);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAClientServerEngineParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    procedure Reset;
    property DefaultInterface: _UAClientServerEngineParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property CertificateAcceptancePolicy: _UACertificateAcceptancePolicy read Get_CertificateAcceptancePolicy write _Set_CertificateAcceptancePolicy;
    property ConfigurationPropertyOverrides: _StringObjectDictionary read Get_ConfigurationPropertyOverrides write _Set_ConfigurationPropertyOverrides;
    property gdsEndpointDescriptor: _UAEndpointDescriptor read Get_gdsEndpointDescriptor write _Set_gdsEndpointDescriptor;
    property UserInteractionParameters: _UAUserInteractionParameters read Get_UserInteractionParameters write _Set_UserInteractionParameters;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property ConfigurationSources: UAConfigurationSources read Get_ConfigurationSources write Set_ConfigurationSources;
    property DebuggerDetectionOverride: Sign read Get_DebuggerDetectionOverride write Set_DebuggerDetectionOverride;
    property RetrialDelay: Integer read Get_RetrialDelay write Set_RetrialDelay;
    property ReconnectionPeriod: Integer read Get_ReconnectionPeriod write Set_ReconnectionPeriod;
  published
  end;

// *********************************************************************//
// The Class CoEasyUAClientInstanceParameters provides a Create and CreateRemote method to          
// create instances of the default interface _EasyUAClientInstanceParameters exposed by              
// the CoClass EasyUAClientInstanceParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEasyUAClientInstanceParameters = class
    class function Create: _EasyUAClientInstanceParameters;
    class function CreateRemote(const MachineName: string): _EasyUAClientInstanceParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TEasyUAClientInstanceParameters
// Help String      : Contains parameters that influence the behavior of just this instance of the OPC-UA client component.
// Default Interface: _EasyUAClientInstanceParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TEasyUAClientInstanceParameters = class(TOleServer)
  private
    FIntf: _EasyUAClientInstanceParameters;
    function GetDefaultInterface: _EasyUAClientInstanceParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_PluginConfigurations: _ConfigurationPartCollection;
    procedure _Set_PluginConfigurations(const pRetVal: _ConfigurationPartCollection);
    function Get_PluginSetups: _PluginSetupCollection;
    procedure _Set_PluginSetups(const pRetVal: _PluginSetupCollection);
    function Get_DiscoveryHost: WideString;
    procedure Set_DiscoveryHost(const pRetVal: WideString);
    function Get_EnableModelCaching: WordBool;
    procedure Set_EnableModelCaching(pRetVal: WordBool);
    function Get_Mode: _EasyUAClientMode;
    procedure _Set_Mode(const pRetVal: _EasyUAClientMode);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _EasyUAClientInstanceParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    procedure Reset;
    property DefaultInterface: _EasyUAClientInstanceParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property PluginConfigurations: _ConfigurationPartCollection read Get_PluginConfigurations write _Set_PluginConfigurations;
    property PluginSetups: _PluginSetupCollection read Get_PluginSetups write _Set_PluginSetups;
    property Mode: _EasyUAClientMode read Get_Mode write _Set_Mode;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property DiscoveryHost: WideString read Get_DiscoveryHost write Set_DiscoveryHost;
    property EnableModelCaching: WordBool read Get_EnableModelCaching write Set_EnableModelCaching;
  published
  end;

// *********************************************************************//
// The Class CoEasyUAClientMode provides a Create and CreateRemote method to          
// create instances of the default interface _EasyUAClientMode exposed by              
// the CoClass EasyUAClientMode. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEasyUAClientMode = class
    class function Create: _EasyUAClientMode;
    class function CreateRemote(const MachineName: string): _EasyUAClientMode;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TEasyUAClientMode
// Help String      : Specifies common parameters that influence the OPC-UA client mode of operation.
// Default Interface: _EasyUAClientMode
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TEasyUAClientMode = class(TOleServer)
  private
    FIntf: _EasyUAClientMode;
    function GetDefaultInterface: _EasyUAClientMode;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _EasyUAClientMode);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _EasyUAClientMode read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
  published
  end;

// *********************************************************************//
// The Class CoEasyUAClientSharedParameters provides a Create and CreateRemote method to          
// create instances of the default interface _EasyUAClientSharedParameters exposed by              
// the CoClass EasyUAClientSharedParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEasyUAClientSharedParameters = class
    class function Create: _EasyUAClientSharedParameters;
    class function CreateRemote(const MachineName: string): _EasyUAClientSharedParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TEasyUAClientSharedParameters
// Help String      : Parameters that are always shared by all instances of the OPC-UA client component.
// Default Interface: _EasyUAClientSharedParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TEasyUAClientSharedParameters = class(TOleServer)
  private
    FIntf: _EasyUAClientSharedParameters;
    function GetDefaultInterface: _EasyUAClientSharedParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_PluginConfigurations: _ConfigurationPartCollection;
    procedure _Set_PluginConfigurations(const pRetVal: _ConfigurationPartCollection);
    function Get_PluginSetups: _PluginSetupCollection;
    procedure _Set_PluginSetups(const pRetVal: _PluginSetupCollection);
    function Get_EngineParameters: _EasyUAClientEngineParameters;
    procedure _Set_EngineParameters(const pRetVal: _EasyUAClientEngineParameters);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _EasyUAClientSharedParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    procedure Reset;
    property DefaultInterface: _EasyUAClientSharedParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property PluginConfigurations: _ConfigurationPartCollection read Get_PluginConfigurations write _Set_PluginConfigurations;
    property PluginSetups: _PluginSetupCollection read Get_PluginSetups write _Set_PluginSetups;
    property EngineParameters: _EasyUAClientEngineParameters read Get_EngineParameters write _Set_EngineParameters;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
  published
  end;

// *********************************************************************//
// The Class CoUACertificateAcceptancePolicy provides a Create and CreateRemote method to          
// create instances of the default interface _UACertificateAcceptancePolicy exposed by              
// the CoClass UACertificateAcceptancePolicy. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUACertificateAcceptancePolicy = class
    class function Create: _UACertificateAcceptancePolicy;
    class function CreateRemote(const MachineName: string): _UACertificateAcceptancePolicy;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUACertificateAcceptancePolicy
// Help String      : Contains parameters that determine which OPC UA certificates are accepted.
// Default Interface: _UACertificateAcceptancePolicy
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUACertificateAcceptancePolicy = class(TOleServer)
  private
    FIntf: _UACertificateAcceptancePolicy;
    function GetDefaultInterface: _UACertificateAcceptancePolicy;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_AcceptAnyCertificate: WordBool;
    procedure Set_AcceptAnyCertificate(pRetVal: WordBool);
    function Get_AllowSha1SignedCertificates: WordBool;
    procedure Set_AllowSha1SignedCertificates(pRetVal: WordBool);
    function Get_AllowUserAcceptCertificate: WordBool;
    procedure Set_AllowUserAcceptCertificate(pRetVal: WordBool);
    function Get_CheckTimeValidAndNested: WordBool;
    procedure Set_CheckTimeValidAndNested(pRetVal: WordBool);
    function Get_MinimumCertificateKeySize: Integer;
    procedure Set_MinimumCertificateKeySize(pRetVal: Integer);
    function Get_RequireRevocationStatusKnown: WordBool;
    procedure Set_RequireRevocationStatusKnown(pRetVal: WordBool);
    function Get_TrustedEndpointUrlStrings: _StringCollection;
    procedure _Set_TrustedEndpointUrlStrings(const pRetVal: _StringCollection);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UACertificateAcceptancePolicy);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    procedure DistrustEndpointUrlString(const endpointUrlString: WideString);
    function IsEndpointUrlStringTrusted(const endpointUrlString: WideString): WordBool;
    procedure TrustEndpointUrlString(const endpointUrlString: WideString);
    property DefaultInterface: _UACertificateAcceptancePolicy read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property TrustedEndpointUrlStrings: _StringCollection read Get_TrustedEndpointUrlStrings write _Set_TrustedEndpointUrlStrings;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property AcceptAnyCertificate: WordBool read Get_AcceptAnyCertificate write Set_AcceptAnyCertificate;
    property AllowSha1SignedCertificates: WordBool read Get_AllowSha1SignedCertificates write Set_AllowSha1SignedCertificates;
    property AllowUserAcceptCertificate: WordBool read Get_AllowUserAcceptCertificate write Set_AllowUserAcceptCertificate;
    property CheckTimeValidAndNested: WordBool read Get_CheckTimeValidAndNested write Set_CheckTimeValidAndNested;
    property MinimumCertificateKeySize: Integer read Get_MinimumCertificateKeySize write Set_MinimumCertificateKeySize;
    property RequireRevocationStatusKnown: WordBool read Get_RequireRevocationStatusKnown write Set_RequireRevocationStatusKnown;
  published
  end;

// *********************************************************************//
// The Class CoEasyUAClientAdaptableParameters provides a Create and CreateRemote method to          
// create instances of the default interface _EasyUAClientAdaptableParameters exposed by              
// the CoClass EasyUAClientAdaptableParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEasyUAClientAdaptableParameters = class
    class function Create: _EasyUAClientAdaptableParameters;
    class function CreateRemote(const MachineName: string): _EasyUAClientAdaptableParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TEasyUAClientAdaptableParameters
// Help String      : Adaptable parameters for isolated or non-isolated OPC-UA client objects.
// Default Interface: _EasyUAClientAdaptableParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TEasyUAClientAdaptableParameters = class(TOleServer)
  private
    FIntf: _EasyUAClientAdaptableParameters;
    function GetDefaultInterface: _EasyUAClientAdaptableParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_DiscoveryParameters: _UADiscoveryParameters;
    procedure _Set_DiscoveryParameters(const pRetVal: _UADiscoveryParameters);
    function Get_HostParameters: _UAHostParameters;
    procedure _Set_HostParameters(const pRetVal: _UAHostParameters);
    function Get_MonitoredItemParameters: _UAClientMonitoredItemParameters;
    procedure _Set_MonitoredItemParameters(const pRetVal: _UAClientMonitoredItemParameters);
    function Get_SessionParameters: _UASmartClientSessionParameters;
    procedure _Set_SessionParameters(const pRetVal: _UASmartClientSessionParameters);
    function Get_SubscriptionParameters: _UAClientSubscriptionParameters;
    procedure _Set_SubscriptionParameters(const pRetVal: _UAClientSubscriptionParameters);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _EasyUAClientAdaptableParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    procedure Reset;
    property DefaultInterface: _EasyUAClientAdaptableParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DiscoveryParameters: _UADiscoveryParameters read Get_DiscoveryParameters write _Set_DiscoveryParameters;
    property HostParameters: _UAHostParameters read Get_HostParameters write _Set_HostParameters;
    property MonitoredItemParameters: _UAClientMonitoredItemParameters read Get_MonitoredItemParameters write _Set_MonitoredItemParameters;
    property SessionParameters: _UASmartClientSessionParameters read Get_SessionParameters write _Set_SessionParameters;
    property SubscriptionParameters: _UAClientSubscriptionParameters read Get_SubscriptionParameters write _Set_SubscriptionParameters;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
  published
  end;

// *********************************************************************//
// The Class CoUAClientEngineParameters provides a Create and CreateRemote method to          
// create instances of the default interface _UAClientEngineParameters exposed by              
// the CoClass UAClientEngineParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAClientEngineParameters = class
    class function Create: _UAClientEngineParameters;
    class function CreateRemote(const MachineName: string): _UAClientEngineParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAClientEngineParameters
// Help String      : Contains parameters that influence the behavior of the client component on the application level.
// Default Interface: _UAClientEngineParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAClientEngineParameters = class(TOleServer)
  private
    FIntf: _UAClientEngineParameters;
    function GetDefaultInterface: _UAClientEngineParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_CertificateAcceptancePolicy: _UACertificateAcceptancePolicy;
    procedure _Set_CertificateAcceptancePolicy(const pRetVal: _UACertificateAcceptancePolicy);
    function Get_ConfigurationPropertyOverrides: _StringObjectDictionary;
    procedure _Set_ConfigurationPropertyOverrides(const pRetVal: _StringObjectDictionary);
    function Get_ConfigurationSources: UAConfigurationSources;
    procedure Set_ConfigurationSources(pRetVal: UAConfigurationSources);
    function Get_DebuggerDetectionOverride: Sign;
    procedure Set_DebuggerDetectionOverride(pRetVal: Sign);
    function Get_gdsEndpointDescriptor: _UAEndpointDescriptor;
    procedure _Set_gdsEndpointDescriptor(const pRetVal: _UAEndpointDescriptor);
    function Get_RetrialDelay: Integer;
    procedure Set_RetrialDelay(pRetVal: Integer);
    function Get_ReconnectionPeriod: Integer;
    procedure Set_ReconnectionPeriod(pRetVal: Integer);
    function Get_UserInteractionParameters: _UAUserInteractionParameters;
    procedure _Set_UserInteractionParameters(const pRetVal: _UAUserInteractionParameters);
    function Get_HttpsCertificateAcceptancePolicy: _UACertificateAcceptancePolicy;
    procedure _Set_HttpsCertificateAcceptancePolicy(const pRetVal: _UACertificateAcceptancePolicy);
    function Get_UseCustomHttpsCertificateValidation: WordBool;
    procedure Set_UseCustomHttpsCertificateValidation(pRetVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAClientEngineParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    procedure Reset;
    property DefaultInterface: _UAClientEngineParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property CertificateAcceptancePolicy: _UACertificateAcceptancePolicy read Get_CertificateAcceptancePolicy write _Set_CertificateAcceptancePolicy;
    property ConfigurationPropertyOverrides: _StringObjectDictionary read Get_ConfigurationPropertyOverrides write _Set_ConfigurationPropertyOverrides;
    property gdsEndpointDescriptor: _UAEndpointDescriptor read Get_gdsEndpointDescriptor write _Set_gdsEndpointDescriptor;
    property UserInteractionParameters: _UAUserInteractionParameters read Get_UserInteractionParameters write _Set_UserInteractionParameters;
    property HttpsCertificateAcceptancePolicy: _UACertificateAcceptancePolicy read Get_HttpsCertificateAcceptancePolicy write _Set_HttpsCertificateAcceptancePolicy;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property ConfigurationSources: UAConfigurationSources read Get_ConfigurationSources write Set_ConfigurationSources;
    property DebuggerDetectionOverride: Sign read Get_DebuggerDetectionOverride write Set_DebuggerDetectionOverride;
    property RetrialDelay: Integer read Get_RetrialDelay write Set_RetrialDelay;
    property ReconnectionPeriod: Integer read Get_ReconnectionPeriod write Set_ReconnectionPeriod;
    property UseCustomHttpsCertificateValidation: WordBool read Get_UseCustomHttpsCertificateValidation write Set_UseCustomHttpsCertificateValidation;
  published
  end;

// *********************************************************************//
// The Class CoUAClientMonitoredItemParameters provides a Create and CreateRemote method to          
// create instances of the default interface _UAClientMonitoredItemParameters exposed by              
// the CoClass UAClientMonitoredItemParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAClientMonitoredItemParameters = class
    class function Create: _UAClientMonitoredItemParameters;
    class function CreateRemote(const MachineName: string): _UAClientMonitoredItemParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAClientMonitoredItemParameters
// Help String      : Contains parameters that influence the behavior of the component on the monitored item level.
// Default Interface: _UAClientMonitoredItemParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAClientMonitoredItemParameters = class(TOleServer)
  private
    FIntf: _UAClientMonitoredItemParameters;
    function GetDefaultInterface: _UAClientMonitoredItemParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_CheckMonitoredItemId: WordBool;
    procedure Set_CheckMonitoredItemId(pRetVal: WordBool);
    function Get_RequireValidRevisedSamplingInterval: WordBool;
    procedure Set_RequireValidRevisedSamplingInterval(pRetVal: WordBool);
    function Get_RequireValidRevisedQueueSize: WordBool;
    procedure Set_RequireValidRevisedQueueSize(pRetVal: WordBool);
    function Get_RetrialDelay: Integer;
    procedure Set_RetrialDelay(pRetVal: Integer);
    function Get_SanitizeNotificationDataValue: WordBool;
    procedure Set_SanitizeNotificationDataValue(pRetVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAClientMonitoredItemParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    procedure Reset;
    property DefaultInterface: _UAClientMonitoredItemParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property CheckMonitoredItemId: WordBool read Get_CheckMonitoredItemId write Set_CheckMonitoredItemId;
    property RequireValidRevisedSamplingInterval: WordBool read Get_RequireValidRevisedSamplingInterval write Set_RequireValidRevisedSamplingInterval;
    property RequireValidRevisedQueueSize: WordBool read Get_RequireValidRevisedQueueSize write Set_RequireValidRevisedQueueSize;
    property RetrialDelay: Integer read Get_RetrialDelay write Set_RetrialDelay;
    property SanitizeNotificationDataValue: WordBool read Get_SanitizeNotificationDataValue write Set_SanitizeNotificationDataValue;
  published
  end;

// *********************************************************************//
// The Class CoUAClientServerApplicationParameters provides a Create and CreateRemote method to          
// create instances of the default interface _UAClientServerApplicationParameters exposed by              
// the CoClass UAClientServerApplicationParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAClientServerApplicationParameters = class
    class function Create: _UAClientServerApplicationParameters;
    class function CreateRemote(const MachineName: string): _UAClientServerApplicationParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAClientServerApplicationParameters
// Help String      : Contains parameters that define the OPC UA client/server application and its behavior.
// Default Interface: _UAClientServerApplicationParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAClientServerApplicationParameters = class(TOleServer)
  private
    FIntf: _UAClientServerApplicationParameters;
    function GetDefaultInterface: _UAClientServerApplicationParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_ApplicationManifest: _UAApplicationManifest;
    procedure _Set_ApplicationManifest(const pRetVal: _UAApplicationManifest);
    function Get_ApplicationUriTemplateString: WideString;
    procedure Set_ApplicationUriTemplateString(const pRetVal: WideString);
    function Get_AutoGenerateInstanceCertificate: WordBool;
    procedure Set_AutoGenerateInstanceCertificate(pRetVal: WordBool);
    function Get_AutoTrustInstanceCertificate: WordBool;
    procedure Set_AutoTrustInstanceCertificate(pRetVal: WordBool);
    function Get_HostNames: _StringCollection;
    procedure _Set_HostNames(const pRetVal: _StringCollection);
    function Get_HostNamesString: WideString;
    procedure Set_HostNamesString(const pRetVal: WideString);
    function Get_InstanceCertificateGenerationParameters: _CertificateGenerationParameters;
    procedure _Set_InstanceCertificateGenerationParameters(const pRetVal: _CertificateGenerationParameters);
    function Get_InstanceCertificatePrivateKeyPassword: WideString;
    procedure Set_InstanceCertificatePrivateKeyPassword(const pRetVal: WideString);
    function Get_InstanceCertificatePrivateKeyPasswordDictionary: _StringStringDictionary;
    procedure _Set_InstanceCertificatePrivateKeyPasswordDictionary(const pRetVal: _StringStringDictionary);
    function Get_RelaxedCertificateSearch: WordBool;
    procedure Set_RelaxedCertificateSearch(pRetVal: WordBool);
    function Get_ValidateOwnInstanceCertificate: WordBool;
    procedure Set_ValidateOwnInstanceCertificate(pRetVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAClientServerApplicationParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function FindInstanceCertificatePrivateKeyPassword(const certificateSubId: WideString): WideString;
    procedure Reset;
    property DefaultInterface: _UAClientServerApplicationParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property ApplicationManifest: _UAApplicationManifest read Get_ApplicationManifest write _Set_ApplicationManifest;
    property HostNames: _StringCollection read Get_HostNames write _Set_HostNames;
    property InstanceCertificateGenerationParameters: _CertificateGenerationParameters read Get_InstanceCertificateGenerationParameters write _Set_InstanceCertificateGenerationParameters;
    property InstanceCertificatePrivateKeyPasswordDictionary: _StringStringDictionary read Get_InstanceCertificatePrivateKeyPasswordDictionary write _Set_InstanceCertificatePrivateKeyPasswordDictionary;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property ApplicationUriTemplateString: WideString read Get_ApplicationUriTemplateString write Set_ApplicationUriTemplateString;
    property AutoGenerateInstanceCertificate: WordBool read Get_AutoGenerateInstanceCertificate write Set_AutoGenerateInstanceCertificate;
    property AutoTrustInstanceCertificate: WordBool read Get_AutoTrustInstanceCertificate write Set_AutoTrustInstanceCertificate;
    property HostNamesString: WideString read Get_HostNamesString write Set_HostNamesString;
    property InstanceCertificatePrivateKeyPassword: WideString read Get_InstanceCertificatePrivateKeyPassword write Set_InstanceCertificatePrivateKeyPassword;
    property RelaxedCertificateSearch: WordBool read Get_RelaxedCertificateSearch write Set_RelaxedCertificateSearch;
    property ValidateOwnInstanceCertificate: WordBool read Get_ValidateOwnInstanceCertificate write Set_ValidateOwnInstanceCertificate;
  published
  end;

// *********************************************************************//
// The Class CoEasyUAClientEngineParameters provides a Create and CreateRemote method to          
// create instances of the default interface _EasyUAClientEngineParameters exposed by              
// the CoClass EasyUAClientEngineParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEasyUAClientEngineParameters = class
    class function Create: _EasyUAClientEngineParameters;
    class function CreateRemote(const MachineName: string): _EasyUAClientEngineParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TEasyUAClientEngineParameters
// Help String      : Contains values for determining certain OPC-UA parameters heuristically.
// Default Interface: _EasyUAClientEngineParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TEasyUAClientEngineParameters = class(TOleServer)
  private
    FIntf: _EasyUAClientEngineParameters;
    function GetDefaultInterface: _EasyUAClientEngineParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_CertificateAcceptancePolicy: _UACertificateAcceptancePolicy;
    procedure _Set_CertificateAcceptancePolicy(const pRetVal: _UACertificateAcceptancePolicy);
    function Get_ConfigurationPropertyOverrides: _StringObjectDictionary;
    procedure _Set_ConfigurationPropertyOverrides(const pRetVal: _StringObjectDictionary);
    function Get_ConfigurationSources: UAConfigurationSources;
    procedure Set_ConfigurationSources(pRetVal: UAConfigurationSources);
    function Get_DebuggerDetectionOverride: Sign;
    procedure Set_DebuggerDetectionOverride(pRetVal: Sign);
    function Get_gdsEndpointDescriptor: _UAEndpointDescriptor;
    procedure _Set_gdsEndpointDescriptor(const pRetVal: _UAEndpointDescriptor);
    function Get_RetrialDelay: Integer;
    procedure Set_RetrialDelay(pRetVal: Integer);
    function Get_ReconnectionPeriod: Integer;
    procedure Set_ReconnectionPeriod(pRetVal: Integer);
    function Get_UserInteractionParameters: _UAUserInteractionParameters;
    procedure _Set_UserInteractionParameters(const pRetVal: _UAUserInteractionParameters);
    function Get_HttpsCertificateAcceptancePolicy: _UACertificateAcceptancePolicy;
    procedure _Set_HttpsCertificateAcceptancePolicy(const pRetVal: _UACertificateAcceptancePolicy);
    function Get_UseCustomHttpsCertificateValidation: WordBool;
    procedure Set_UseCustomHttpsCertificateValidation(pRetVal: WordBool);
    function Get_GarbageCollectionPeriod: Integer;
    procedure Set_GarbageCollectionPeriod(pRetVal: Integer);
    function Get_MaximumDormantSessions: Integer;
    procedure Set_MaximumDormantSessions(pRetVal: Integer);
    function Get_AutomaticPublishingFactor: Single;
    procedure Set_AutomaticPublishingFactor(pRetVal: Single);
    function Get_FastestAutomaticPublishingInterval: Integer;
    procedure Set_FastestAutomaticPublishingInterval(pRetVal: Integer);
    function Get_RestrictToSupportedTypes: WordBool;
    procedure Set_RestrictToSupportedTypes(pRetVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _EasyUAClientEngineParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    procedure Reset;
    property DefaultInterface: _EasyUAClientEngineParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property CertificateAcceptancePolicy: _UACertificateAcceptancePolicy read Get_CertificateAcceptancePolicy write _Set_CertificateAcceptancePolicy;
    property ConfigurationPropertyOverrides: _StringObjectDictionary read Get_ConfigurationPropertyOverrides write _Set_ConfigurationPropertyOverrides;
    property gdsEndpointDescriptor: _UAEndpointDescriptor read Get_gdsEndpointDescriptor write _Set_gdsEndpointDescriptor;
    property UserInteractionParameters: _UAUserInteractionParameters read Get_UserInteractionParameters write _Set_UserInteractionParameters;
    property HttpsCertificateAcceptancePolicy: _UACertificateAcceptancePolicy read Get_HttpsCertificateAcceptancePolicy write _Set_HttpsCertificateAcceptancePolicy;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property ConfigurationSources: UAConfigurationSources read Get_ConfigurationSources write Set_ConfigurationSources;
    property DebuggerDetectionOverride: Sign read Get_DebuggerDetectionOverride write Set_DebuggerDetectionOverride;
    property RetrialDelay: Integer read Get_RetrialDelay write Set_RetrialDelay;
    property ReconnectionPeriod: Integer read Get_ReconnectionPeriod write Set_ReconnectionPeriod;
    property UseCustomHttpsCertificateValidation: WordBool read Get_UseCustomHttpsCertificateValidation write Set_UseCustomHttpsCertificateValidation;
    property GarbageCollectionPeriod: Integer read Get_GarbageCollectionPeriod write Set_GarbageCollectionPeriod;
    property MaximumDormantSessions: Integer read Get_MaximumDormantSessions write Set_MaximumDormantSessions;
    property AutomaticPublishingFactor: Single read Get_AutomaticPublishingFactor write Set_AutomaticPublishingFactor;
    property FastestAutomaticPublishingInterval: Integer read Get_FastestAutomaticPublishingInterval write Set_FastestAutomaticPublishingInterval;
    property RestrictToSupportedTypes: WordBool read Get_RestrictToSupportedTypes write Set_RestrictToSupportedTypes;
  published
  end;

// *********************************************************************//
// The Class CoUAClientSessionParameters provides a Create and CreateRemote method to          
// create instances of the default interface _UAClientSessionParameters exposed by              
// the CoClass UAClientSessionParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAClientSessionParameters = class
    class function Create: _UAClientSessionParameters;
    class function CreateRemote(const MachineName: string): _UAClientSessionParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAClientSessionParameters
// Help String      : Contains parameters that influence the behavior of the component on the session level.
// Default Interface: _UAClientSessionParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAClientSessionParameters = class(TOleServer)
  private
    FIntf: _UAClientSessionParameters;
    function GetDefaultInterface: _UAClientSessionParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_AcknowledgedMessagesLimit: Integer;
    procedure Set_AcknowledgedMessagesLimit(pRetVal: Integer);
    function Get_AllowEndpointDomainPrompt: WordBool;
    procedure Set_AllowEndpointDomainPrompt(pRetVal: WordBool);
    function Get_AlwaysPreselectEndpoint: WordBool;
    procedure Set_AlwaysPreselectEndpoint(pRetVal: WordBool);
    function Get_CheckAvailableSequenceNumbers: WordBool;
    procedure Set_CheckAvailableSequenceNumbers(pRetVal: WordBool);
    function Get_CheckBrowseResults: WordBool;
    procedure Set_CheckBrowseResults(pRetVal: WordBool);
    function Get_CheckEndpointDomain: WordBool;
    procedure Set_CheckEndpointDomain(pRetVal: WordBool);
    function Get_CheckNotificationMessage: WordBool;
    procedure Set_CheckNotificationMessage(pRetVal: WordBool);
    function Get_CheckSessionId: WordBool;
    procedure Set_CheckSessionId(pRetVal: WordBool);
    function Get_CloseTimeout: Integer;
    procedure Set_CloseTimeout(pRetVal: Integer);
    function Get_DiagnosticsMasks: UADiagnosticsMasks;
    procedure Set_DiagnosticsMasks(pRetVal: UADiagnosticsMasks);
    function Get_EndpointDescriptionChecks: _UAEndpointDescriptionChecks;
    procedure _Set_EndpointDescriptionChecks(const pRetVal: _UAEndpointDescriptionChecks);
    function Get_EndpointSelectionPolicy: _UAEndpointSelectionPolicy;
    procedure _Set_EndpointSelectionPolicy(const pRetVal: _UAEndpointSelectionPolicy);
    function Get_EndpointSelectionTimeout: Integer;
    procedure Set_EndpointSelectionTimeout(pRetVal: Integer);
    function Get_KeepAliveInterval: Integer;
    procedure Set_KeepAliveInterval(pRetVal: Integer);
    function Get_KeepAliveIntervalDebug: Integer;
    procedure Set_KeepAliveIntervalDebug(pRetVal: Integer);
    function Get_LocaleId: WideString;
    procedure Set_LocaleId(const pRetVal: WideString);
    function Get_MaximumReferencesPerBrowseNode: Integer;
    procedure Set_MaximumReferencesPerBrowseNode(pRetVal: Integer);
    function Get_OperationTimeout: Integer;
    procedure Set_OperationTimeout(pRetVal: Integer);
    function Get_PendingMessagesLimit: Integer;
    procedure Set_PendingMessagesLimit(pRetVal: Integer);
    function Get_PreselectedEndpointValidityPeriod: Integer;
    procedure Set_PreselectedEndpointValidityPeriod(pRetVal: Integer);
    function Get_RequireMatchingServerSoftwareCertificates: WordBool;
    procedure Set_RequireMatchingServerSoftwareCertificates(pRetVal: WordBool);
    function Get_RequireNonEmptyServerSignature: WordBool;
    procedure Set_RequireNonEmptyServerSignature(pRetVal: WordBool);
    function Get_RequireServerEndpointsMatchDiscovery: WordBool;
    procedure Set_RequireServerEndpointsMatchDiscovery(pRetVal: WordBool);
    function Get_RequireTimestampsAsRequested: WordBool;
    procedure Set_RequireTimestampsAsRequested(pRetVal: WordBool);
    function Get_RequireUniqueAuthenticationToken: WordBool;
    procedure Set_RequireUniqueAuthenticationToken(pRetVal: WordBool);
    function Get_RequireUniqueServerNonce: WordBool;
    procedure Set_RequireUniqueServerNonce(pRetVal: WordBool);
    function Get_RequireValidAuthenticationToken: WordBool;
    procedure Set_RequireValidAuthenticationToken(pRetVal: WordBool);
    function Get_RequireValidServerNonce: WordBool;
    procedure Set_RequireValidServerNonce(pRetVal: WordBool);
    function Get_RetrialDelay: Integer;
    procedure Set_RetrialDelay(pRetVal: Integer);
    function Get_SanitizeReferenceDescriptions: WordBool;
    procedure Set_SanitizeReferenceDescriptions(pRetVal: WordBool);
    function Get_SessionConnectTimeout: Integer;
    procedure Set_SessionConnectTimeout(pRetVal: Integer);
    function Get_SessionTimeout: Integer;
    procedure Set_SessionTimeout(pRetVal: Integer);
    function Get_SessionTimeoutDebug: Integer;
    procedure Set_SessionTimeoutDebug(pRetVal: Integer);
    function Get_ShortestAllowedRevisedSessionTimeout: Double;
    procedure Set_ShortestAllowedRevisedSessionTimeout(pRetVal: Double);
    function Get_UpdateEndpointBeforeConnect: WordBool;
    procedure Set_UpdateEndpointBeforeConnect(pRetVal: WordBool);
    function Get_UserIdentity: _UserIdentity;
    procedure _Set_UserIdentity(const pRetVal: _UserIdentity);
    function Get_WriteNarrowestIntegerType: WordBool;
    procedure Set_WriteNarrowestIntegerType(pRetVal: WordBool);
    function Get_WriteNarrowestRealType: WordBool;
    procedure Set_WriteNarrowestRealType(pRetVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAClientSessionParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    procedure Reset;
    property DefaultInterface: _UAClientSessionParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property EndpointDescriptionChecks: _UAEndpointDescriptionChecks read Get_EndpointDescriptionChecks write _Set_EndpointDescriptionChecks;
    property EndpointSelectionPolicy: _UAEndpointSelectionPolicy read Get_EndpointSelectionPolicy write _Set_EndpointSelectionPolicy;
    property UserIdentity: _UserIdentity read Get_UserIdentity write _Set_UserIdentity;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property AcknowledgedMessagesLimit: Integer read Get_AcknowledgedMessagesLimit write Set_AcknowledgedMessagesLimit;
    property AllowEndpointDomainPrompt: WordBool read Get_AllowEndpointDomainPrompt write Set_AllowEndpointDomainPrompt;
    property AlwaysPreselectEndpoint: WordBool read Get_AlwaysPreselectEndpoint write Set_AlwaysPreselectEndpoint;
    property CheckAvailableSequenceNumbers: WordBool read Get_CheckAvailableSequenceNumbers write Set_CheckAvailableSequenceNumbers;
    property CheckBrowseResults: WordBool read Get_CheckBrowseResults write Set_CheckBrowseResults;
    property CheckEndpointDomain: WordBool read Get_CheckEndpointDomain write Set_CheckEndpointDomain;
    property CheckNotificationMessage: WordBool read Get_CheckNotificationMessage write Set_CheckNotificationMessage;
    property CheckSessionId: WordBool read Get_CheckSessionId write Set_CheckSessionId;
    property CloseTimeout: Integer read Get_CloseTimeout write Set_CloseTimeout;
    property DiagnosticsMasks: UADiagnosticsMasks read Get_DiagnosticsMasks write Set_DiagnosticsMasks;
    property EndpointSelectionTimeout: Integer read Get_EndpointSelectionTimeout write Set_EndpointSelectionTimeout;
    property KeepAliveInterval: Integer read Get_KeepAliveInterval write Set_KeepAliveInterval;
    property KeepAliveIntervalDebug: Integer read Get_KeepAliveIntervalDebug write Set_KeepAliveIntervalDebug;
    property LocaleId: WideString read Get_LocaleId write Set_LocaleId;
    property MaximumReferencesPerBrowseNode: Integer read Get_MaximumReferencesPerBrowseNode write Set_MaximumReferencesPerBrowseNode;
    property OperationTimeout: Integer read Get_OperationTimeout write Set_OperationTimeout;
    property PendingMessagesLimit: Integer read Get_PendingMessagesLimit write Set_PendingMessagesLimit;
    property PreselectedEndpointValidityPeriod: Integer read Get_PreselectedEndpointValidityPeriod write Set_PreselectedEndpointValidityPeriod;
    property RequireMatchingServerSoftwareCertificates: WordBool read Get_RequireMatchingServerSoftwareCertificates write Set_RequireMatchingServerSoftwareCertificates;
    property RequireNonEmptyServerSignature: WordBool read Get_RequireNonEmptyServerSignature write Set_RequireNonEmptyServerSignature;
    property RequireServerEndpointsMatchDiscovery: WordBool read Get_RequireServerEndpointsMatchDiscovery write Set_RequireServerEndpointsMatchDiscovery;
    property RequireTimestampsAsRequested: WordBool read Get_RequireTimestampsAsRequested write Set_RequireTimestampsAsRequested;
    property RequireUniqueAuthenticationToken: WordBool read Get_RequireUniqueAuthenticationToken write Set_RequireUniqueAuthenticationToken;
    property RequireUniqueServerNonce: WordBool read Get_RequireUniqueServerNonce write Set_RequireUniqueServerNonce;
    property RequireValidAuthenticationToken: WordBool read Get_RequireValidAuthenticationToken write Set_RequireValidAuthenticationToken;
    property RequireValidServerNonce: WordBool read Get_RequireValidServerNonce write Set_RequireValidServerNonce;
    property RetrialDelay: Integer read Get_RetrialDelay write Set_RetrialDelay;
    property SanitizeReferenceDescriptions: WordBool read Get_SanitizeReferenceDescriptions write Set_SanitizeReferenceDescriptions;
    property SessionConnectTimeout: Integer read Get_SessionConnectTimeout write Set_SessionConnectTimeout;
    property SessionTimeout: Integer read Get_SessionTimeout write Set_SessionTimeout;
    property SessionTimeoutDebug: Integer read Get_SessionTimeoutDebug write Set_SessionTimeoutDebug;
    property ShortestAllowedRevisedSessionTimeout: Double read Get_ShortestAllowedRevisedSessionTimeout write Set_ShortestAllowedRevisedSessionTimeout;
    property UpdateEndpointBeforeConnect: WordBool read Get_UpdateEndpointBeforeConnect write Set_UpdateEndpointBeforeConnect;
    property WriteNarrowestIntegerType: WordBool read Get_WriteNarrowestIntegerType write Set_WriteNarrowestIntegerType;
    property WriteNarrowestRealType: WordBool read Get_WriteNarrowestRealType write Set_WriteNarrowestRealType;
  published
  end;

// *********************************************************************//
// The Class CoUAClientSubscriptionParameters provides a Create and CreateRemote method to          
// create instances of the default interface _UAClientSubscriptionParameters exposed by              
// the CoClass UAClientSubscriptionParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAClientSubscriptionParameters = class
    class function Create: _UAClientSubscriptionParameters;
    class function CreateRemote(const MachineName: string): _UAClientSubscriptionParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAClientSubscriptionParameters
// Help String      : Contains parameters that influence the behavior of the component on the subscription level.
// Default Interface: _UAClientSubscriptionParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAClientSubscriptionParameters = class(TOleServer)
  private
    FIntf: _UAClientSubscriptionParameters;
    function GetDefaultInterface: _UAClientSubscriptionParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_AllowPublishTimeAhead: WordBool;
    procedure Set_AllowPublishTimeAhead(pRetVal: WordBool);
    function Get_AllowPublishTimeStale: WordBool;
    procedure Set_AllowPublishTimeStale(pRetVal: WordBool);
    function Get_AssumedMinimumKeepAliveCount: Integer;
    procedure Set_AssumedMinimumKeepAliveCount(pRetVal: Integer);
    function Get_AssumedMinimumLifetimeCount: Integer;
    procedure Set_AssumedMinimumLifetimeCount(pRetVal: Integer);
    function Get_AssumedMinimumPublishingInterval: Integer;
    procedure Set_AssumedMinimumPublishingInterval(pRetVal: Integer);
    function Get_CheckSubscriptionId: WordBool;
    procedure Set_CheckSubscriptionId(pRetVal: WordBool);
    function Get_FastestKeepAliveInterval: Integer;
    procedure Set_FastestKeepAliveInterval(pRetVal: Integer);
    function Get_FastestKeepAliveIntervalDebug: Integer;
    procedure Set_FastestKeepAliveIntervalDebug(pRetVal: Integer);
    function Get_FastestLifetimeInterval: Integer;
    procedure Set_FastestLifetimeInterval(pRetVal: Integer);
    function Get_FastestLifetimeIntervalDebug: Integer;
    procedure Set_FastestLifetimeIntervalDebug(pRetVal: Integer);
    function Get_KeepAliveCount: Integer;
    procedure Set_KeepAliveCount(pRetVal: Integer);
    function Get_LifetimeCount: Integer;
    procedure Set_LifetimeCount(pRetVal: Integer);
    function Get_MaximumLifetimeDueTime: Double;
    procedure Set_MaximumLifetimeDueTime(pRetVal: Double);
    function Get_PublishingHaltedProbationaryPeriod: Integer;
    procedure Set_PublishingHaltedProbationaryPeriod(pRetVal: Integer);
    function Get_PublishStatusChangedQueueLimit: Integer;
    procedure Set_PublishStatusChangedQueueLimit(pRetVal: Integer);
    function Get_RequireMinimumRevisedLifetimeCount: WordBool;
    procedure Set_RequireMinimumRevisedLifetimeCount(pRetVal: WordBool);
    function Get_RetrialDelay: Integer;
    procedure Set_RetrialDelay(pRetVal: Integer);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAClientSubscriptionParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    procedure Reset;
    property DefaultInterface: _UAClientSubscriptionParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property AllowPublishTimeAhead: WordBool read Get_AllowPublishTimeAhead write Set_AllowPublishTimeAhead;
    property AllowPublishTimeStale: WordBool read Get_AllowPublishTimeStale write Set_AllowPublishTimeStale;
    property AssumedMinimumKeepAliveCount: Integer read Get_AssumedMinimumKeepAliveCount write Set_AssumedMinimumKeepAliveCount;
    property AssumedMinimumLifetimeCount: Integer read Get_AssumedMinimumLifetimeCount write Set_AssumedMinimumLifetimeCount;
    property AssumedMinimumPublishingInterval: Integer read Get_AssumedMinimumPublishingInterval write Set_AssumedMinimumPublishingInterval;
    property CheckSubscriptionId: WordBool read Get_CheckSubscriptionId write Set_CheckSubscriptionId;
    property FastestKeepAliveInterval: Integer read Get_FastestKeepAliveInterval write Set_FastestKeepAliveInterval;
    property FastestKeepAliveIntervalDebug: Integer read Get_FastestKeepAliveIntervalDebug write Set_FastestKeepAliveIntervalDebug;
    property FastestLifetimeInterval: Integer read Get_FastestLifetimeInterval write Set_FastestLifetimeInterval;
    property FastestLifetimeIntervalDebug: Integer read Get_FastestLifetimeIntervalDebug write Set_FastestLifetimeIntervalDebug;
    property KeepAliveCount: Integer read Get_KeepAliveCount write Set_KeepAliveCount;
    property LifetimeCount: Integer read Get_LifetimeCount write Set_LifetimeCount;
    property MaximumLifetimeDueTime: Double read Get_MaximumLifetimeDueTime write Set_MaximumLifetimeDueTime;
    property PublishingHaltedProbationaryPeriod: Integer read Get_PublishingHaltedProbationaryPeriod write Set_PublishingHaltedProbationaryPeriod;
    property PublishStatusChangedQueueLimit: Integer read Get_PublishStatusChangedQueueLimit write Set_PublishStatusChangedQueueLimit;
    property RequireMinimumRevisedLifetimeCount: WordBool read Get_RequireMinimumRevisedLifetimeCount write Set_RequireMinimumRevisedLifetimeCount;
    property RetrialDelay: Integer read Get_RetrialDelay write Set_RetrialDelay;
  published
  end;

// *********************************************************************//
// The Class CoUADiscoveryParameters provides a Create and CreateRemote method to          
// create instances of the default interface _UADiscoveryParameters exposed by              
// the CoClass UADiscoveryParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUADiscoveryParameters = class
    class function Create: _UADiscoveryParameters;
    class function CreateRemote(const MachineName: string): _UADiscoveryParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUADiscoveryParameters
// Help String      : Contains parameters that influence the behavior of the component for OPC-UA discovery.
// Default Interface: _UADiscoveryParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUADiscoveryParameters = class(TOleServer)
  private
    FIntf: _UADiscoveryParameters;
    function GetDefaultInterface: _UADiscoveryParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_CheckApplicationDescription: WordBool;
    procedure Set_CheckApplicationDescription(pRetVal: WordBool);
    function Get_DiscoveryTimeout: Integer;
    procedure Set_DiscoveryTimeout(pRetVal: Integer);
    function Get_ParallelDiscovery: WordBool;
    procedure Set_ParallelDiscovery(pRetVal: WordBool);
    function Get_ReturnSameSites: WordBool;
    procedure Set_ReturnSameSites(pRetVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UADiscoveryParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    procedure Reset;
    property DefaultInterface: _UADiscoveryParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property CheckApplicationDescription: WordBool read Get_CheckApplicationDescription write Set_CheckApplicationDescription;
    property DiscoveryTimeout: Integer read Get_DiscoveryTimeout write Set_DiscoveryTimeout;
    property ParallelDiscovery: WordBool read Get_ParallelDiscovery write Set_ParallelDiscovery;
    property ReturnSameSites: WordBool read Get_ReturnSameSites write Set_ReturnSameSites;
  published
  end;

// *********************************************************************//
// The Class CoUAEndpointDescriptionChecks provides a Create and CreateRemote method to          
// create instances of the default interface _UAEndpointDescriptionChecks exposed by              
// the CoClass UAEndpointDescriptionChecks. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAEndpointDescriptionChecks = class
    class function Create: _UAEndpointDescriptionChecks;
    class function CreateRemote(const MachineName: string): _UAEndpointDescriptionChecks;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAEndpointDescriptionChecks
// Help String      : Configures checks on an endpoint description.
// Default Interface: _UAEndpointDescriptionChecks
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAEndpointDescriptionChecks = class(TOleServer)
  private
    FIntf: _UAEndpointDescriptionChecks;
    function GetDefaultInterface: _UAEndpointDescriptionChecks;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_CheckEndpointUrl: WordBool;
    procedure Set_CheckEndpointUrl(pRetVal: WordBool);
    function Get_CheckServerApplication: WordBool;
    procedure Set_CheckServerApplication(pRetVal: WordBool);
    function Get_CheckServerCertificate: WordBool;
    procedure Set_CheckServerCertificate(pRetVal: WordBool);
    function Get_CheckSecurityMode: WordBool;
    procedure Set_CheckSecurityMode(pRetVal: WordBool);
    function Get_CheckSecurityPolicyUri: WordBool;
    procedure Set_CheckSecurityPolicyUri(pRetVal: WordBool);
    function Get_CheckUserIdentityTokens: WordBool;
    procedure Set_CheckUserIdentityTokens(pRetVal: WordBool);
    function Get_CheckTransportProfileUri: WordBool;
    procedure Set_CheckTransportProfileUri(pRetVal: WordBool);
    function Get_RequireHostMatchCertificate: WordBool;
    procedure Set_RequireHostMatchCertificate(pRetVal: WordBool);
    function Get_RequireValidDiscoveryUrls: WordBool;
    procedure Set_RequireValidDiscoveryUrls(pRetVal: WordBool);
    function Get_UseStrictUrlMatch: WordBool;
    procedure Set_UseStrictUrlMatch(pRetVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAEndpointDescriptionChecks);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    procedure Reset;
    property DefaultInterface: _UAEndpointDescriptionChecks read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property CheckEndpointUrl: WordBool read Get_CheckEndpointUrl write Set_CheckEndpointUrl;
    property CheckServerApplication: WordBool read Get_CheckServerApplication write Set_CheckServerApplication;
    property CheckServerCertificate: WordBool read Get_CheckServerCertificate write Set_CheckServerCertificate;
    property CheckSecurityMode: WordBool read Get_CheckSecurityMode write Set_CheckSecurityMode;
    property CheckSecurityPolicyUri: WordBool read Get_CheckSecurityPolicyUri write Set_CheckSecurityPolicyUri;
    property CheckUserIdentityTokens: WordBool read Get_CheckUserIdentityTokens write Set_CheckUserIdentityTokens;
    property CheckTransportProfileUri: WordBool read Get_CheckTransportProfileUri write Set_CheckTransportProfileUri;
    property RequireHostMatchCertificate: WordBool read Get_RequireHostMatchCertificate write Set_RequireHostMatchCertificate;
    property RequireValidDiscoveryUrls: WordBool read Get_RequireValidDiscoveryUrls write Set_RequireValidDiscoveryUrls;
    property UseStrictUrlMatch: WordBool read Get_UseStrictUrlMatch write Set_UseStrictUrlMatch;
  published
  end;

// *********************************************************************//
// The Class CoUAEndpointSelectionPolicy provides a Create and CreateRemote method to          
// create instances of the default interface _UAEndpointSelectionPolicy exposed by              
// the CoClass UAEndpointSelectionPolicy. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAEndpointSelectionPolicy = class
    class function Create: _UAEndpointSelectionPolicy;
    class function CreateRemote(const MachineName: string): _UAEndpointSelectionPolicy;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAEndpointSelectionPolicy
// Help String      : Determines how the UA client chooses the endpoint from the endpoints provided by the UA server.
// Default Interface: _UAEndpointSelectionPolicy
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAEndpointSelectionPolicy = class(TOleServer)
  private
    FIntf: _UAEndpointSelectionPolicy;
    function GetDefaultInterface: _UAEndpointSelectionPolicy;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_AllowedMessageSecurityModes: UAMessageSecurityModes;
    procedure Set_AllowedMessageSecurityModes(pRetVal: UAMessageSecurityModes);
    function Get_AllowZeroSecurityLevel: WordBool;
    procedure Set_AllowZeroSecurityLevel(pRetVal: WordBool);
    function Get_ChannelSecurityRanking: OleVariant;
    function Get_CommunicationSecurityRanking: OleVariant;
    function Get_CustomPolicySpecifier: WideString;
    procedure Set_CustomPolicySpecifier(const pRetVal: WideString);
    function Get_DataEncodingName: WideString;
    procedure Set_DataEncodingName(const pRetVal: WideString);
    function Get_EnforceSamePort: WordBool;
    procedure Set_EnforceSamePort(pRetVal: WordBool);
    function Get_EnforceSameSite: WordBool;
    procedure Set_EnforceSameSite(pRetVal: WordBool);
    function Get_IsPrecise: WordBool;
    function Get_MessageSecurityModeName: WideString;
    procedure Set_MessageSecurityModeName(const pRetVal: WideString);
    function Get_MessageSecurityPreference: Sign;
    procedure Set_MessageSecurityPreference(pRetVal: Sign);
    function Get_OrganicSecurityRanking: OleVariant;
    function Get_ProtocolName: WideString;
    procedure Set_ProtocolName(const pRetVal: WideString);
    function Get_RejectObsoleteSecurityPolicies: WordBool;
    procedure Set_RejectObsoleteSecurityPolicies(pRetVal: WordBool);
    function Get_RequireAuthentication: WordBool;
    procedure Set_RequireAuthentication(pRetVal: WordBool);
    function Get_RequireConfidentiality: WordBool;
    procedure Set_RequireConfidentiality(pRetVal: WordBool);
    function Get_RequireIntegrity: WordBool;
    procedure Set_RequireIntegrity(pRetVal: WordBool);
    function Get_SecurityPolicyDisplayName: WideString;
    procedure Set_SecurityPolicyDisplayName(const pRetVal: WideString);
    function Get_SecurityPolicyUriString: WideString;
    procedure Set_SecurityPolicyUriString(const pRetVal: WideString);
    function Get_TransportProfileDisplayName: WideString;
    procedure Set_TransportProfileDisplayName(const pRetVal: WideString);
    function Get_TransportProfileUriString: WideString;
    procedure Set_TransportProfileUriString(const pRetVal: WideString);
    function Get_TransportSecurityRanking: OleVariant;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAEndpointSelectionPolicy);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UAEndpointSelectionPolicy read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property ChannelSecurityRanking: OleVariant read Get_ChannelSecurityRanking;
    property CommunicationSecurityRanking: OleVariant read Get_CommunicationSecurityRanking;
    property IsPrecise: WordBool read Get_IsPrecise;
    property OrganicSecurityRanking: OleVariant read Get_OrganicSecurityRanking;
    property TransportSecurityRanking: OleVariant read Get_TransportSecurityRanking;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property AllowedMessageSecurityModes: UAMessageSecurityModes read Get_AllowedMessageSecurityModes write Set_AllowedMessageSecurityModes;
    property AllowZeroSecurityLevel: WordBool read Get_AllowZeroSecurityLevel write Set_AllowZeroSecurityLevel;
    property CustomPolicySpecifier: WideString read Get_CustomPolicySpecifier write Set_CustomPolicySpecifier;
    property DataEncodingName: WideString read Get_DataEncodingName write Set_DataEncodingName;
    property EnforceSamePort: WordBool read Get_EnforceSamePort write Set_EnforceSamePort;
    property EnforceSameSite: WordBool read Get_EnforceSameSite write Set_EnforceSameSite;
    property MessageSecurityModeName: WideString read Get_MessageSecurityModeName write Set_MessageSecurityModeName;
    property MessageSecurityPreference: Sign read Get_MessageSecurityPreference write Set_MessageSecurityPreference;
    property ProtocolName: WideString read Get_ProtocolName write Set_ProtocolName;
    property RejectObsoleteSecurityPolicies: WordBool read Get_RejectObsoleteSecurityPolicies write Set_RejectObsoleteSecurityPolicies;
    property RequireAuthentication: WordBool read Get_RequireAuthentication write Set_RequireAuthentication;
    property RequireConfidentiality: WordBool read Get_RequireConfidentiality write Set_RequireConfidentiality;
    property RequireIntegrity: WordBool read Get_RequireIntegrity write Set_RequireIntegrity;
    property SecurityPolicyDisplayName: WideString read Get_SecurityPolicyDisplayName write Set_SecurityPolicyDisplayName;
    property SecurityPolicyUriString: WideString read Get_SecurityPolicyUriString write Set_SecurityPolicyUriString;
    property TransportProfileDisplayName: WideString read Get_TransportProfileDisplayName write Set_TransportProfileDisplayName;
    property TransportProfileUriString: WideString read Get_TransportProfileUriString write Set_TransportProfileUriString;
  published
  end;

// *********************************************************************//
// The Class CoUAEngineException provides a Create and CreateRemote method to          
// create instances of the default interface _UAEngineException exposed by              
// the CoClass UAEngineException. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAEngineException = class
    class function Create: _UAEngineException;
    class function CreateRemote(const MachineName: string): _UAEngineException;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAEngineException
// Help String      : An exception that originates in the OPC-UA engine and not in the OPC service (or OPC-UA SDK).
// Default Interface: _UAEngineException
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAEngineException = class(TOleServer)
  private
    FIntf: _UAEngineException;
    function GetDefaultInterface: _UAEngineException;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_Message: WideString;
    function Get_StackTrace: WideString;
    function Get_HelpLink: WideString;
    procedure Set_HelpLink(const pRetVal: WideString);
    function Get_Source: WideString;
    procedure Set_Source(const pRetVal: WideString);
    function Get_InnerException: _Exception;
    function Get_TargetSite: _MethodBase;
    function Get_Data: _Dictionary;
    function Get_HResult: Integer;
    function Get_ErrorId: WideString;
    function Get_ActivityTrace: WideString;
    function Get_ErrorCode: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAEngineException);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function GetBaseException: _Exception;
    procedure GetObjectData(const info: _SerializationInfo; context: StreamingContext);
    property DefaultInterface: _UAEngineException read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Message: WideString read Get_Message;
    property StackTrace: WideString read Get_StackTrace;
    property InnerException: _Exception read Get_InnerException;
    property TargetSite: _MethodBase read Get_TargetSite;
    property Data: _Dictionary read Get_Data;
    property HResult: Integer read Get_HResult;
    property ErrorId: WideString read Get_ErrorId;
    property ActivityTrace: WideString read Get_ActivityTrace;
    property ErrorCode: Integer read Get_ErrorCode;
    property HelpLink: WideString read Get_HelpLink write Set_HelpLink;
    property Source: WideString read Get_Source write Set_Source;
  published
  end;

// *********************************************************************//
// The Class CoUAEnhancedClientSessionParameters provides a Create and CreateRemote method to          
// create instances of the default interface _UAClientSessionParameters exposed by              
// the CoClass UAEnhancedClientSessionParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAEnhancedClientSessionParameters = class
    class function Create: _UAClientSessionParameters;
    class function CreateRemote(const MachineName: string): _UAClientSessionParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAEnhancedClientSessionParameters
// Help String      : Contains parameters that influence the behavior of the component on the enhanced session level.
// Default Interface: _UAClientSessionParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAEnhancedClientSessionParameters = class(TOleServer)
  private
    FIntf: _UAClientSessionParameters;
    function GetDefaultInterface: _UAClientSessionParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_AcknowledgedMessagesLimit: Integer;
    procedure Set_AcknowledgedMessagesLimit(pRetVal: Integer);
    function Get_AllowEndpointDomainPrompt: WordBool;
    procedure Set_AllowEndpointDomainPrompt(pRetVal: WordBool);
    function Get_AlwaysPreselectEndpoint: WordBool;
    procedure Set_AlwaysPreselectEndpoint(pRetVal: WordBool);
    function Get_CheckAvailableSequenceNumbers: WordBool;
    procedure Set_CheckAvailableSequenceNumbers(pRetVal: WordBool);
    function Get_CheckBrowseResults: WordBool;
    procedure Set_CheckBrowseResults(pRetVal: WordBool);
    function Get_CheckEndpointDomain: WordBool;
    procedure Set_CheckEndpointDomain(pRetVal: WordBool);
    function Get_CheckNotificationMessage: WordBool;
    procedure Set_CheckNotificationMessage(pRetVal: WordBool);
    function Get_CheckSessionId: WordBool;
    procedure Set_CheckSessionId(pRetVal: WordBool);
    function Get_CloseTimeout: Integer;
    procedure Set_CloseTimeout(pRetVal: Integer);
    function Get_DiagnosticsMasks: UADiagnosticsMasks;
    procedure Set_DiagnosticsMasks(pRetVal: UADiagnosticsMasks);
    function Get_EndpointDescriptionChecks: _UAEndpointDescriptionChecks;
    procedure _Set_EndpointDescriptionChecks(const pRetVal: _UAEndpointDescriptionChecks);
    function Get_EndpointSelectionPolicy: _UAEndpointSelectionPolicy;
    procedure _Set_EndpointSelectionPolicy(const pRetVal: _UAEndpointSelectionPolicy);
    function Get_EndpointSelectionTimeout: Integer;
    procedure Set_EndpointSelectionTimeout(pRetVal: Integer);
    function Get_KeepAliveInterval: Integer;
    procedure Set_KeepAliveInterval(pRetVal: Integer);
    function Get_KeepAliveIntervalDebug: Integer;
    procedure Set_KeepAliveIntervalDebug(pRetVal: Integer);
    function Get_LocaleId: WideString;
    procedure Set_LocaleId(const pRetVal: WideString);
    function Get_MaximumReferencesPerBrowseNode: Integer;
    procedure Set_MaximumReferencesPerBrowseNode(pRetVal: Integer);
    function Get_OperationTimeout: Integer;
    procedure Set_OperationTimeout(pRetVal: Integer);
    function Get_PendingMessagesLimit: Integer;
    procedure Set_PendingMessagesLimit(pRetVal: Integer);
    function Get_PreselectedEndpointValidityPeriod: Integer;
    procedure Set_PreselectedEndpointValidityPeriod(pRetVal: Integer);
    function Get_RequireMatchingServerSoftwareCertificates: WordBool;
    procedure Set_RequireMatchingServerSoftwareCertificates(pRetVal: WordBool);
    function Get_RequireNonEmptyServerSignature: WordBool;
    procedure Set_RequireNonEmptyServerSignature(pRetVal: WordBool);
    function Get_RequireServerEndpointsMatchDiscovery: WordBool;
    procedure Set_RequireServerEndpointsMatchDiscovery(pRetVal: WordBool);
    function Get_RequireTimestampsAsRequested: WordBool;
    procedure Set_RequireTimestampsAsRequested(pRetVal: WordBool);
    function Get_RequireUniqueAuthenticationToken: WordBool;
    procedure Set_RequireUniqueAuthenticationToken(pRetVal: WordBool);
    function Get_RequireUniqueServerNonce: WordBool;
    procedure Set_RequireUniqueServerNonce(pRetVal: WordBool);
    function Get_RequireValidAuthenticationToken: WordBool;
    procedure Set_RequireValidAuthenticationToken(pRetVal: WordBool);
    function Get_RequireValidServerNonce: WordBool;
    procedure Set_RequireValidServerNonce(pRetVal: WordBool);
    function Get_RetrialDelay: Integer;
    procedure Set_RetrialDelay(pRetVal: Integer);
    function Get_SanitizeReferenceDescriptions: WordBool;
    procedure Set_SanitizeReferenceDescriptions(pRetVal: WordBool);
    function Get_SessionConnectTimeout: Integer;
    procedure Set_SessionConnectTimeout(pRetVal: Integer);
    function Get_SessionTimeout: Integer;
    procedure Set_SessionTimeout(pRetVal: Integer);
    function Get_SessionTimeoutDebug: Integer;
    procedure Set_SessionTimeoutDebug(pRetVal: Integer);
    function Get_ShortestAllowedRevisedSessionTimeout: Double;
    procedure Set_ShortestAllowedRevisedSessionTimeout(pRetVal: Double);
    function Get_UpdateEndpointBeforeConnect: WordBool;
    procedure Set_UpdateEndpointBeforeConnect(pRetVal: WordBool);
    function Get_UserIdentity: _UserIdentity;
    procedure _Set_UserIdentity(const pRetVal: _UserIdentity);
    function Get_WriteNarrowestIntegerType: WordBool;
    procedure Set_WriteNarrowestIntegerType(pRetVal: WordBool);
    function Get_WriteNarrowestRealType: WordBool;
    procedure Set_WriteNarrowestRealType(pRetVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAClientSessionParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    procedure Reset;
    property DefaultInterface: _UAClientSessionParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property EndpointDescriptionChecks: _UAEndpointDescriptionChecks read Get_EndpointDescriptionChecks write _Set_EndpointDescriptionChecks;
    property EndpointSelectionPolicy: _UAEndpointSelectionPolicy read Get_EndpointSelectionPolicy write _Set_EndpointSelectionPolicy;
    property UserIdentity: _UserIdentity read Get_UserIdentity write _Set_UserIdentity;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property AcknowledgedMessagesLimit: Integer read Get_AcknowledgedMessagesLimit write Set_AcknowledgedMessagesLimit;
    property AllowEndpointDomainPrompt: WordBool read Get_AllowEndpointDomainPrompt write Set_AllowEndpointDomainPrompt;
    property AlwaysPreselectEndpoint: WordBool read Get_AlwaysPreselectEndpoint write Set_AlwaysPreselectEndpoint;
    property CheckAvailableSequenceNumbers: WordBool read Get_CheckAvailableSequenceNumbers write Set_CheckAvailableSequenceNumbers;
    property CheckBrowseResults: WordBool read Get_CheckBrowseResults write Set_CheckBrowseResults;
    property CheckEndpointDomain: WordBool read Get_CheckEndpointDomain write Set_CheckEndpointDomain;
    property CheckNotificationMessage: WordBool read Get_CheckNotificationMessage write Set_CheckNotificationMessage;
    property CheckSessionId: WordBool read Get_CheckSessionId write Set_CheckSessionId;
    property CloseTimeout: Integer read Get_CloseTimeout write Set_CloseTimeout;
    property DiagnosticsMasks: UADiagnosticsMasks read Get_DiagnosticsMasks write Set_DiagnosticsMasks;
    property EndpointSelectionTimeout: Integer read Get_EndpointSelectionTimeout write Set_EndpointSelectionTimeout;
    property KeepAliveInterval: Integer read Get_KeepAliveInterval write Set_KeepAliveInterval;
    property KeepAliveIntervalDebug: Integer read Get_KeepAliveIntervalDebug write Set_KeepAliveIntervalDebug;
    property LocaleId: WideString read Get_LocaleId write Set_LocaleId;
    property MaximumReferencesPerBrowseNode: Integer read Get_MaximumReferencesPerBrowseNode write Set_MaximumReferencesPerBrowseNode;
    property OperationTimeout: Integer read Get_OperationTimeout write Set_OperationTimeout;
    property PendingMessagesLimit: Integer read Get_PendingMessagesLimit write Set_PendingMessagesLimit;
    property PreselectedEndpointValidityPeriod: Integer read Get_PreselectedEndpointValidityPeriod write Set_PreselectedEndpointValidityPeriod;
    property RequireMatchingServerSoftwareCertificates: WordBool read Get_RequireMatchingServerSoftwareCertificates write Set_RequireMatchingServerSoftwareCertificates;
    property RequireNonEmptyServerSignature: WordBool read Get_RequireNonEmptyServerSignature write Set_RequireNonEmptyServerSignature;
    property RequireServerEndpointsMatchDiscovery: WordBool read Get_RequireServerEndpointsMatchDiscovery write Set_RequireServerEndpointsMatchDiscovery;
    property RequireTimestampsAsRequested: WordBool read Get_RequireTimestampsAsRequested write Set_RequireTimestampsAsRequested;
    property RequireUniqueAuthenticationToken: WordBool read Get_RequireUniqueAuthenticationToken write Set_RequireUniqueAuthenticationToken;
    property RequireUniqueServerNonce: WordBool read Get_RequireUniqueServerNonce write Set_RequireUniqueServerNonce;
    property RequireValidAuthenticationToken: WordBool read Get_RequireValidAuthenticationToken write Set_RequireValidAuthenticationToken;
    property RequireValidServerNonce: WordBool read Get_RequireValidServerNonce write Set_RequireValidServerNonce;
    property RetrialDelay: Integer read Get_RetrialDelay write Set_RetrialDelay;
    property SanitizeReferenceDescriptions: WordBool read Get_SanitizeReferenceDescriptions write Set_SanitizeReferenceDescriptions;
    property SessionConnectTimeout: Integer read Get_SessionConnectTimeout write Set_SessionConnectTimeout;
    property SessionTimeout: Integer read Get_SessionTimeout write Set_SessionTimeout;
    property SessionTimeoutDebug: Integer read Get_SessionTimeoutDebug write Set_SessionTimeoutDebug;
    property ShortestAllowedRevisedSessionTimeout: Double read Get_ShortestAllowedRevisedSessionTimeout write Set_ShortestAllowedRevisedSessionTimeout;
    property UpdateEndpointBeforeConnect: WordBool read Get_UpdateEndpointBeforeConnect write Set_UpdateEndpointBeforeConnect;
    property WriteNarrowestIntegerType: WordBool read Get_WriteNarrowestIntegerType write Set_WriteNarrowestIntegerType;
    property WriteNarrowestRealType: WordBool read Get_WriteNarrowestRealType write Set_WriteNarrowestRealType;
  published
  end;

// *********************************************************************//
// The Class CoUAHostParameters provides a Create and CreateRemote method to          
// create instances of the default interface _UAHostParameters exposed by              
// the CoClass UAHostParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAHostParameters = class
    class function Create: _UAHostParameters;
    class function CreateRemote(const MachineName: string): _UAHostParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAHostParameters
// Help String      : Contains parameters that influence the behavior of the component on the host level.
// Default Interface: _UAHostParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAHostParameters = class(TOleServer)
  private
    FIntf: _UAHostParameters;
    function GetDefaultInterface: _UAHostParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_DiscoveryUriTemplateStrings: _StringCollection;
    procedure _Set_DiscoveryUriTemplateStrings(const pRetVal: _StringCollection);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAHostParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    procedure Reset;
    property DefaultInterface: _UAHostParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DiscoveryUriTemplateStrings: _StringCollection read Get_DiscoveryUriTemplateStrings write _Set_DiscoveryUriTemplateStrings;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
  published
  end;

// *********************************************************************//
// The Class CoUASmartClientEngineParameters provides a Create and CreateRemote method to          
// create instances of the default interface _UASmartClientEngineParameters exposed by              
// the CoClass UASmartClientEngineParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUASmartClientEngineParameters = class
    class function Create: _UASmartClientEngineParameters;
    class function CreateRemote(const MachineName: string): _UASmartClientEngineParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUASmartClientEngineParameters
// Help String      : Contains heuristics such as how often are unused objects cleaned up, or how long are connections to session kept open.
// Default Interface: _UASmartClientEngineParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUASmartClientEngineParameters = class(TOleServer)
  private
    FIntf: _UASmartClientEngineParameters;
    function GetDefaultInterface: _UASmartClientEngineParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_CertificateAcceptancePolicy: _UACertificateAcceptancePolicy;
    procedure _Set_CertificateAcceptancePolicy(const pRetVal: _UACertificateAcceptancePolicy);
    function Get_ConfigurationPropertyOverrides: _StringObjectDictionary;
    procedure _Set_ConfigurationPropertyOverrides(const pRetVal: _StringObjectDictionary);
    function Get_ConfigurationSources: UAConfigurationSources;
    procedure Set_ConfigurationSources(pRetVal: UAConfigurationSources);
    function Get_DebuggerDetectionOverride: Sign;
    procedure Set_DebuggerDetectionOverride(pRetVal: Sign);
    function Get_gdsEndpointDescriptor: _UAEndpointDescriptor;
    procedure _Set_gdsEndpointDescriptor(const pRetVal: _UAEndpointDescriptor);
    function Get_RetrialDelay: Integer;
    procedure Set_RetrialDelay(pRetVal: Integer);
    function Get_ReconnectionPeriod: Integer;
    procedure Set_ReconnectionPeriod(pRetVal: Integer);
    function Get_UserInteractionParameters: _UAUserInteractionParameters;
    procedure _Set_UserInteractionParameters(const pRetVal: _UAUserInteractionParameters);
    function Get_HttpsCertificateAcceptancePolicy: _UACertificateAcceptancePolicy;
    procedure _Set_HttpsCertificateAcceptancePolicy(const pRetVal: _UACertificateAcceptancePolicy);
    function Get_UseCustomHttpsCertificateValidation: WordBool;
    procedure Set_UseCustomHttpsCertificateValidation(pRetVal: WordBool);
    function Get_GarbageCollectionPeriod: Integer;
    procedure Set_GarbageCollectionPeriod(pRetVal: Integer);
    function Get_MaximumDormantSessions: Integer;
    procedure Set_MaximumDormantSessions(pRetVal: Integer);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UASmartClientEngineParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    procedure Reset;
    property DefaultInterface: _UASmartClientEngineParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property CertificateAcceptancePolicy: _UACertificateAcceptancePolicy read Get_CertificateAcceptancePolicy write _Set_CertificateAcceptancePolicy;
    property ConfigurationPropertyOverrides: _StringObjectDictionary read Get_ConfigurationPropertyOverrides write _Set_ConfigurationPropertyOverrides;
    property gdsEndpointDescriptor: _UAEndpointDescriptor read Get_gdsEndpointDescriptor write _Set_gdsEndpointDescriptor;
    property UserInteractionParameters: _UAUserInteractionParameters read Get_UserInteractionParameters write _Set_UserInteractionParameters;
    property HttpsCertificateAcceptancePolicy: _UACertificateAcceptancePolicy read Get_HttpsCertificateAcceptancePolicy write _Set_HttpsCertificateAcceptancePolicy;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property ConfigurationSources: UAConfigurationSources read Get_ConfigurationSources write Set_ConfigurationSources;
    property DebuggerDetectionOverride: Sign read Get_DebuggerDetectionOverride write Set_DebuggerDetectionOverride;
    property RetrialDelay: Integer read Get_RetrialDelay write Set_RetrialDelay;
    property ReconnectionPeriod: Integer read Get_ReconnectionPeriod write Set_ReconnectionPeriod;
    property UseCustomHttpsCertificateValidation: WordBool read Get_UseCustomHttpsCertificateValidation write Set_UseCustomHttpsCertificateValidation;
    property GarbageCollectionPeriod: Integer read Get_GarbageCollectionPeriod write Set_GarbageCollectionPeriod;
    property MaximumDormantSessions: Integer read Get_MaximumDormantSessions write Set_MaximumDormantSessions;
  published
  end;

// *********************************************************************//
// The Class CoUASmartClientSessionParameters provides a Create and CreateRemote method to          
// create instances of the default interface _UASmartClientSessionParameters exposed by              
// the CoClass UASmartClientSessionParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUASmartClientSessionParameters = class
    class function Create: _UASmartClientSessionParameters;
    class function CreateRemote(const MachineName: string): _UASmartClientSessionParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUASmartClientSessionParameters
// Help String      : Contains parameters that influence the behavior of the component on the smart session level.
// Default Interface: _UASmartClientSessionParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUASmartClientSessionParameters = class(TOleServer)
  private
    FIntf: _UASmartClientSessionParameters;
    function GetDefaultInterface: _UASmartClientSessionParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_AcknowledgedMessagesLimit: Integer;
    procedure Set_AcknowledgedMessagesLimit(pRetVal: Integer);
    function Get_AllowEndpointDomainPrompt: WordBool;
    procedure Set_AllowEndpointDomainPrompt(pRetVal: WordBool);
    function Get_AlwaysPreselectEndpoint: WordBool;
    procedure Set_AlwaysPreselectEndpoint(pRetVal: WordBool);
    function Get_CheckAvailableSequenceNumbers: WordBool;
    procedure Set_CheckAvailableSequenceNumbers(pRetVal: WordBool);
    function Get_CheckBrowseResults: WordBool;
    procedure Set_CheckBrowseResults(pRetVal: WordBool);
    function Get_CheckEndpointDomain: WordBool;
    procedure Set_CheckEndpointDomain(pRetVal: WordBool);
    function Get_CheckNotificationMessage: WordBool;
    procedure Set_CheckNotificationMessage(pRetVal: WordBool);
    function Get_CheckSessionId: WordBool;
    procedure Set_CheckSessionId(pRetVal: WordBool);
    function Get_CloseTimeout: Integer;
    procedure Set_CloseTimeout(pRetVal: Integer);
    function Get_DiagnosticsMasks: UADiagnosticsMasks;
    procedure Set_DiagnosticsMasks(pRetVal: UADiagnosticsMasks);
    function Get_EndpointDescriptionChecks: _UAEndpointDescriptionChecks;
    procedure _Set_EndpointDescriptionChecks(const pRetVal: _UAEndpointDescriptionChecks);
    function Get_EndpointSelectionPolicy: _UAEndpointSelectionPolicy;
    procedure _Set_EndpointSelectionPolicy(const pRetVal: _UAEndpointSelectionPolicy);
    function Get_EndpointSelectionTimeout: Integer;
    procedure Set_EndpointSelectionTimeout(pRetVal: Integer);
    function Get_KeepAliveInterval: Integer;
    procedure Set_KeepAliveInterval(pRetVal: Integer);
    function Get_KeepAliveIntervalDebug: Integer;
    procedure Set_KeepAliveIntervalDebug(pRetVal: Integer);
    function Get_LocaleId: WideString;
    procedure Set_LocaleId(const pRetVal: WideString);
    function Get_OperationTimeout: Integer;
    procedure Set_OperationTimeout(pRetVal: Integer);
    function Get_MaximumReferencesPerBrowseNode: Integer;
    procedure Set_MaximumReferencesPerBrowseNode(pRetVal: Integer);
    function Get_PendingMessagesLimit: Integer;
    procedure Set_PendingMessagesLimit(pRetVal: Integer);
    function Get_PreselectedEndpointValidityPeriod: Integer;
    procedure Set_PreselectedEndpointValidityPeriod(pRetVal: Integer);
    function Get_RequireMatchingServerSoftwareCertificates: WordBool;
    procedure Set_RequireMatchingServerSoftwareCertificates(pRetVal: WordBool);
    function Get_RequireNonEmptyServerSignature: WordBool;
    procedure Set_RequireNonEmptyServerSignature(pRetVal: WordBool);
    function Get_RequireServerEndpointsMatchDiscovery: WordBool;
    procedure Set_RequireServerEndpointsMatchDiscovery(pRetVal: WordBool);
    function Get_RequireTimestampsAsRequested: WordBool;
    procedure Set_RequireTimestampsAsRequested(pRetVal: WordBool);
    function Get_RequireUniqueAuthenticationToken: WordBool;
    procedure Set_RequireUniqueAuthenticationToken(pRetVal: WordBool);
    function Get_RequireUniqueServerNonce: WordBool;
    procedure Set_RequireUniqueServerNonce(pRetVal: WordBool);
    function Get_RequireValidAuthenticationToken: WordBool;
    procedure Set_RequireValidAuthenticationToken(pRetVal: WordBool);
    function Get_RequireValidServerNonce: WordBool;
    procedure Set_RequireValidServerNonce(pRetVal: WordBool);
    function Get_RetrialDelay: Integer;
    procedure Set_RetrialDelay(pRetVal: Integer);
    function Get_SanitizeReferenceDescriptions: WordBool;
    procedure Set_SanitizeReferenceDescriptions(pRetVal: WordBool);
    function Get_SessionConnectTimeout: Integer;
    procedure Set_SessionConnectTimeout(pRetVal: Integer);
    function Get_SessionTimeout: Integer;
    procedure Set_SessionTimeout(pRetVal: Integer);
    function Get_SessionTimeoutDebug: Integer;
    procedure Set_SessionTimeoutDebug(pRetVal: Integer);
    function Get_ShortestAllowedRevisedSessionTimeout: Double;
    procedure Set_ShortestAllowedRevisedSessionTimeout(pRetVal: Double);
    function Get_UpdateEndpointBeforeConnect: WordBool;
    procedure Set_UpdateEndpointBeforeConnect(pRetVal: WordBool);
    function Get_UserIdentity: _UserIdentity;
    procedure _Set_UserIdentity(const pRetVal: _UserIdentity);
    function Get_WriteNarrowestIntegerType: WordBool;
    procedure Set_WriteNarrowestIntegerType(pRetVal: WordBool);
    function Get_WriteNarrowestRealType: WordBool;
    procedure Set_WriteNarrowestRealType(pRetVal: WordBool);
    function Get_EnableStatusSubscription: WordBool;
    procedure Set_EnableStatusSubscription(pRetVal: WordBool);
    function Get_MaximumMonitoredItemsPerSubscription: Integer;
    procedure Set_MaximumMonitoredItemsPerSubscription(pRetVal: Integer);
    function Get_ServerShutdownRetrialDelay: Integer;
    procedure Set_ServerShutdownRetrialDelay(pRetVal: Integer);
    function Get_StatusSubscriptionSamplingInterval: Integer;
    procedure Set_StatusSubscriptionSamplingInterval(pRetVal: Integer);
    function Get_DormancyPeriod: Int64;
    procedure Set_DormancyPeriod(pRetVal: Int64);
    function Get_DormancyPeriodDouble: Double;
    procedure Set_DormancyPeriodDouble(pRetVal: Double);
    function Get_HoldPeriod: Integer;
    procedure Set_HoldPeriod(pRetVal: Integer);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UASmartClientSessionParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    procedure Reset;
    property DefaultInterface: _UASmartClientSessionParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property EndpointDescriptionChecks: _UAEndpointDescriptionChecks read Get_EndpointDescriptionChecks write _Set_EndpointDescriptionChecks;
    property EndpointSelectionPolicy: _UAEndpointSelectionPolicy read Get_EndpointSelectionPolicy write _Set_EndpointSelectionPolicy;
    property UserIdentity: _UserIdentity read Get_UserIdentity write _Set_UserIdentity;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property AcknowledgedMessagesLimit: Integer read Get_AcknowledgedMessagesLimit write Set_AcknowledgedMessagesLimit;
    property AllowEndpointDomainPrompt: WordBool read Get_AllowEndpointDomainPrompt write Set_AllowEndpointDomainPrompt;
    property AlwaysPreselectEndpoint: WordBool read Get_AlwaysPreselectEndpoint write Set_AlwaysPreselectEndpoint;
    property CheckAvailableSequenceNumbers: WordBool read Get_CheckAvailableSequenceNumbers write Set_CheckAvailableSequenceNumbers;
    property CheckBrowseResults: WordBool read Get_CheckBrowseResults write Set_CheckBrowseResults;
    property CheckEndpointDomain: WordBool read Get_CheckEndpointDomain write Set_CheckEndpointDomain;
    property CheckNotificationMessage: WordBool read Get_CheckNotificationMessage write Set_CheckNotificationMessage;
    property CheckSessionId: WordBool read Get_CheckSessionId write Set_CheckSessionId;
    property CloseTimeout: Integer read Get_CloseTimeout write Set_CloseTimeout;
    property DiagnosticsMasks: UADiagnosticsMasks read Get_DiagnosticsMasks write Set_DiagnosticsMasks;
    property EndpointSelectionTimeout: Integer read Get_EndpointSelectionTimeout write Set_EndpointSelectionTimeout;
    property KeepAliveInterval: Integer read Get_KeepAliveInterval write Set_KeepAliveInterval;
    property KeepAliveIntervalDebug: Integer read Get_KeepAliveIntervalDebug write Set_KeepAliveIntervalDebug;
    property LocaleId: WideString read Get_LocaleId write Set_LocaleId;
    property OperationTimeout: Integer read Get_OperationTimeout write Set_OperationTimeout;
    property MaximumReferencesPerBrowseNode: Integer read Get_MaximumReferencesPerBrowseNode write Set_MaximumReferencesPerBrowseNode;
    property PendingMessagesLimit: Integer read Get_PendingMessagesLimit write Set_PendingMessagesLimit;
    property PreselectedEndpointValidityPeriod: Integer read Get_PreselectedEndpointValidityPeriod write Set_PreselectedEndpointValidityPeriod;
    property RequireMatchingServerSoftwareCertificates: WordBool read Get_RequireMatchingServerSoftwareCertificates write Set_RequireMatchingServerSoftwareCertificates;
    property RequireNonEmptyServerSignature: WordBool read Get_RequireNonEmptyServerSignature write Set_RequireNonEmptyServerSignature;
    property RequireServerEndpointsMatchDiscovery: WordBool read Get_RequireServerEndpointsMatchDiscovery write Set_RequireServerEndpointsMatchDiscovery;
    property RequireTimestampsAsRequested: WordBool read Get_RequireTimestampsAsRequested write Set_RequireTimestampsAsRequested;
    property RequireUniqueAuthenticationToken: WordBool read Get_RequireUniqueAuthenticationToken write Set_RequireUniqueAuthenticationToken;
    property RequireUniqueServerNonce: WordBool read Get_RequireUniqueServerNonce write Set_RequireUniqueServerNonce;
    property RequireValidAuthenticationToken: WordBool read Get_RequireValidAuthenticationToken write Set_RequireValidAuthenticationToken;
    property RequireValidServerNonce: WordBool read Get_RequireValidServerNonce write Set_RequireValidServerNonce;
    property RetrialDelay: Integer read Get_RetrialDelay write Set_RetrialDelay;
    property SanitizeReferenceDescriptions: WordBool read Get_SanitizeReferenceDescriptions write Set_SanitizeReferenceDescriptions;
    property SessionConnectTimeout: Integer read Get_SessionConnectTimeout write Set_SessionConnectTimeout;
    property SessionTimeout: Integer read Get_SessionTimeout write Set_SessionTimeout;
    property SessionTimeoutDebug: Integer read Get_SessionTimeoutDebug write Set_SessionTimeoutDebug;
    property ShortestAllowedRevisedSessionTimeout: Double read Get_ShortestAllowedRevisedSessionTimeout write Set_ShortestAllowedRevisedSessionTimeout;
    property UpdateEndpointBeforeConnect: WordBool read Get_UpdateEndpointBeforeConnect write Set_UpdateEndpointBeforeConnect;
    property WriteNarrowestIntegerType: WordBool read Get_WriteNarrowestIntegerType write Set_WriteNarrowestIntegerType;
    property WriteNarrowestRealType: WordBool read Get_WriteNarrowestRealType write Set_WriteNarrowestRealType;
    property EnableStatusSubscription: WordBool read Get_EnableStatusSubscription write Set_EnableStatusSubscription;
    property MaximumMonitoredItemsPerSubscription: Integer read Get_MaximumMonitoredItemsPerSubscription write Set_MaximumMonitoredItemsPerSubscription;
    property ServerShutdownRetrialDelay: Integer read Get_ServerShutdownRetrialDelay write Set_ServerShutdownRetrialDelay;
    property StatusSubscriptionSamplingInterval: Integer read Get_StatusSubscriptionSamplingInterval write Set_StatusSubscriptionSamplingInterval;
    property DormancyPeriod: Int64 read Get_DormancyPeriod write Set_DormancyPeriod;
    property DormancyPeriodDouble: Double read Get_DormancyPeriodDouble write Set_DormancyPeriodDouble;
    property HoldPeriod: Integer read Get_HoldPeriod write Set_HoldPeriod;
  published
  end;

// *********************************************************************//
// The Class CoUAUserInteractionParameters provides a Create and CreateRemote method to          
// create instances of the default interface _UAUserInteractionParameters exposed by              
// the CoClass UAUserInteractionParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAUserInteractionParameters = class
    class function Create: _UAUserInteractionParameters;
    class function CreateRemote(const MachineName: string): _UAUserInteractionParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAUserInteractionParameters
// Help String      : Contains parameters that influence the interaction of the component with the user.
// Default Interface: _UAUserInteractionParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAUserInteractionParameters = class(TOleServer)
  private
    FIntf: _UAUserInteractionParameters;
    function GetDefaultInterface: _UAUserInteractionParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_AcceptNotificationTimeout: Integer;
    procedure Set_AcceptNotificationTimeout(pRetVal: Integer);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAUserInteractionParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    procedure Reset;
    property DefaultInterface: _UAUserInteractionParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property AcceptNotificationTimeout: Integer read Get_AcceptNotificationTimeout write Set_AcceptNotificationTimeout;
  published
  end;

// *********************************************************************//
// The Class CoUAApplicationElement provides a Create and CreateRemote method to          
// create instances of the default interface _UAApplicationElement exposed by              
// the CoClass UAApplicationElement. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAApplicationElement = class
    class function Create: _UAApplicationElement;
    class function CreateRemote(const MachineName: string): _UAApplicationElement;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAApplicationElement
// Help String      : Contains OPC UA application registration information.
// Default Interface: _UAApplicationElement
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAApplicationElement = class(TOleServer)
  private
    FIntf: _UAApplicationElement;
    function GetDefaultInterface: _UAApplicationElement;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_applicationName: WideString;
    procedure Set_applicationName(const pRetVal: WideString);
    function Get_ApplicationType: UAApplicationTypes;
    procedure Set_ApplicationType(pRetVal: UAApplicationTypes);
    function Get_applicationUriString: WideString;
    procedure Set_applicationUriString(const pRetVal: WideString);
    function Get_DiscoveryUriString: WideString;
    procedure Set_DiscoveryUriString(const pRetVal: WideString);
    function Get_DiscoveryUriStrings: _StringCollection;
    procedure _Set_DiscoveryUriStrings(const pRetVal: _StringCollection);
    function Get_productUriString: WideString;
    procedure Set_productUriString(const pRetVal: WideString);
    function Get_serverCapabilities: _StringCollection;
    procedure _Set_serverCapabilities(const pRetVal: _StringCollection);
    function Get_ServerCapabilitySet: _StringSet;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAApplicationElement);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function ToUAEndpointDescriptor: _UAEndpointDescriptor;
    property DefaultInterface: _UAApplicationElement read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DiscoveryUriStrings: _StringCollection read Get_DiscoveryUriStrings write _Set_DiscoveryUriStrings;
    property serverCapabilities: _StringCollection read Get_serverCapabilities write _Set_serverCapabilities;
    property ServerCapabilitySet: _StringSet read Get_ServerCapabilitySet;
    property applicationName: WideString read Get_applicationName write Set_applicationName;
    property ApplicationType: UAApplicationTypes read Get_ApplicationType write Set_ApplicationType;
    property applicationUriString: WideString read Get_applicationUriString write Set_applicationUriString;
    property DiscoveryUriString: WideString read Get_DiscoveryUriString write Set_DiscoveryUriString;
    property productUriString: WideString read Get_productUriString write Set_productUriString;
  published
  end;

// *********************************************************************//
// The Class CoUAApplicationDescription provides a Create and CreateRemote method to          
// create instances of the default interface _UAApplicationDescription exposed by              
// the CoClass UAApplicationDescription. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAApplicationDescription = class
    class function Create: _UAApplicationDescription;
    class function CreateRemote(const MachineName: string): _UAApplicationDescription;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAApplicationDescription
// Help String      : Contains OPC UA application description.
// Default Interface: _UAApplicationDescription
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAApplicationDescription = class(TOleServer)
  private
    FIntf: _UAApplicationDescription;
    function GetDefaultInterface: _UAApplicationDescription;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_applicationName: WideString;
    procedure Set_applicationName(const pRetVal: WideString);
    function Get_ApplicationType: UAApplicationTypes;
    procedure Set_ApplicationType(pRetVal: UAApplicationTypes);
    function Get_applicationUriString: WideString;
    procedure Set_applicationUriString(const pRetVal: WideString);
    function Get_DiscoveryProfileUriString: WideString;
    procedure Set_DiscoveryProfileUriString(const pRetVal: WideString);
    function Get_DiscoveryUriStrings: _StringCollection;
    procedure _Set_DiscoveryUriStrings(const pRetVal: _StringCollection);
    function Get_GatewayServerUriString: WideString;
    procedure Set_GatewayServerUriString(const pRetVal: WideString);
    function Get_productUriString: WideString;
    procedure Set_productUriString(const pRetVal: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAApplicationDescription);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UAApplicationDescription read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DiscoveryUriStrings: _StringCollection read Get_DiscoveryUriStrings write _Set_DiscoveryUriStrings;
    property applicationName: WideString read Get_applicationName write Set_applicationName;
    property ApplicationType: UAApplicationTypes read Get_ApplicationType write Set_ApplicationType;
    property applicationUriString: WideString read Get_applicationUriString write Set_applicationUriString;
    property DiscoveryProfileUriString: WideString read Get_DiscoveryProfileUriString write Set_DiscoveryProfileUriString;
    property GatewayServerUriString: WideString read Get_GatewayServerUriString write Set_GatewayServerUriString;
    property productUriString: WideString read Get_productUriString write Set_productUriString;
  published
  end;

// *********************************************************************//
// The Class CoUAApplicationRecordDataType provides a Create and CreateRemote method to          
// create instances of the default interface _UAApplicationRecordDataType exposed by              
// the CoClass UAApplicationRecordDataType. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAApplicationRecordDataType = class
    class function Create: _UAApplicationRecordDataType;
    class function CreateRemote(const MachineName: string): _UAApplicationRecordDataType;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAApplicationRecordDataType
// Help String      : Represents a record in the GDS (OPC UA Global Discovery Server).
// Default Interface: _UAApplicationRecordDataType
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAApplicationRecordDataType = class(TOleServer)
  private
    FIntf: _UAApplicationRecordDataType;
    function GetDefaultInterface: _UAApplicationRecordDataType;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_applicationName: WideString;
    procedure Set_applicationName(const pRetVal: WideString);
    function Get_ApplicationType: UAApplicationTypes;
    procedure Set_ApplicationType(pRetVal: UAApplicationTypes);
    function Get_applicationUriString: WideString;
    procedure Set_applicationUriString(const pRetVal: WideString);
    function Get_DiscoveryUriString: WideString;
    procedure Set_DiscoveryUriString(const pRetVal: WideString);
    function Get_DiscoveryUriStrings: _StringCollection;
    procedure _Set_DiscoveryUriStrings(const pRetVal: _StringCollection);
    function Get_productUriString: WideString;
    procedure Set_productUriString(const pRetVal: WideString);
    function Get_serverCapabilities: _StringCollection;
    procedure _Set_serverCapabilities(const pRetVal: _StringCollection);
    function Get_ServerCapabilitySet: _StringSet;
    function Get_applicationId: _UANodeId;
    procedure _Set_applicationId(const pRetVal: _UANodeId);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAApplicationRecordDataType);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function ToUAEndpointDescriptor: _UAEndpointDescriptor;
    property DefaultInterface: _UAApplicationRecordDataType read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DiscoveryUriStrings: _StringCollection read Get_DiscoveryUriStrings write _Set_DiscoveryUriStrings;
    property serverCapabilities: _StringCollection read Get_serverCapabilities write _Set_serverCapabilities;
    property ServerCapabilitySet: _StringSet read Get_ServerCapabilitySet;
    property applicationId: _UANodeId read Get_applicationId write _Set_applicationId;
    property applicationName: WideString read Get_applicationName write Set_applicationName;
    property ApplicationType: UAApplicationTypes read Get_ApplicationType write Set_ApplicationType;
    property applicationUriString: WideString read Get_applicationUriString write Set_applicationUriString;
    property DiscoveryUriString: WideString read Get_DiscoveryUriString write Set_DiscoveryUriString;
    property productUriString: WideString read Get_productUriString write Set_productUriString;
  published
  end;

// *********************************************************************//
// The Class CoUADiscoveryElement provides a Create and CreateRemote method to          
// create instances of the default interface _UADiscoveryElement exposed by              
// the CoClass UADiscoveryElement. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUADiscoveryElement = class
    class function Create: _UADiscoveryElement;
    class function CreateRemote(const MachineName: string): _UADiscoveryElement;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUADiscoveryElement
// Help String      : Contains information gathered about an OPC application (typically, an OPC-UA server) or an endpoint.
// Default Interface: _UADiscoveryElement
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUADiscoveryElement = class(TOleServer)
  private
    FIntf: _UADiscoveryElement;
    function GetDefaultInterface: _UADiscoveryElement;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_applicationName: WideString;
    procedure Set_applicationName(const pRetVal: WideString);
    function Get_ApplicationType: UAApplicationTypes;
    procedure Set_ApplicationType(pRetVal: UAApplicationTypes);
    function Get_applicationUriString: WideString;
    procedure Set_applicationUriString(const pRetVal: WideString);
    function Get_DiscoveryUriString: WideString;
    procedure Set_DiscoveryUriString(const pRetVal: WideString);
    function Get_DiscoveryUriStrings: _StringCollection;
    procedure _Set_DiscoveryUriStrings(const pRetVal: _StringCollection);
    function Get_productUriString: WideString;
    procedure Set_productUriString(const pRetVal: WideString);
    function Get_serverCapabilities: _StringCollection;
    procedure _Set_serverCapabilities(const pRetVal: _StringCollection);
    function Get_ServerCapabilitySet: _StringSet;
    function Get_ApplicationOrServerName: WideString;
    function Get_DiscoveryProfileUriString: WideString;
    procedure Set_DiscoveryProfileUriString(const pRetVal: WideString);
    function Get_EndpointSelectionPolicy: _UAEndpointSelectionPolicy;
    procedure _Set_EndpointSelectionPolicy(const pRetVal: _UAEndpointSelectionPolicy);
    function Get_EndpointUriString: WideString;
    procedure Set_EndpointUriString(const pRetVal: WideString);
    function Get_GatewayServerUriString: WideString;
    procedure Set_GatewayServerUriString(const pRetVal: WideString);
    function Get_IsValidServer: WordBool;
    function Get_ServerCertificate: _PkiCertificate;
    procedure _Set_ServerCertificate(const pRetVal: _PkiCertificate);
    function Get_ServerCertificateByteArray: OleVariant;
    procedure _Set_ServerCertificateByteArray(pRetVal: OleVariant);
    function Get_ServerName: WideString;
    procedure Set_ServerName(const pRetVal: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UADiscoveryElement);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function ToUAEndpointDescriptor: _UAEndpointDescriptor;
    procedure SetServerCertificateByteArray(value: OleVariant);
    property DefaultInterface: _UADiscoveryElement read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DiscoveryUriStrings: _StringCollection read Get_DiscoveryUriStrings write _Set_DiscoveryUriStrings;
    property serverCapabilities: _StringCollection read Get_serverCapabilities write _Set_serverCapabilities;
    property ServerCapabilitySet: _StringSet read Get_ServerCapabilitySet;
    property ApplicationOrServerName: WideString read Get_ApplicationOrServerName;
    property EndpointSelectionPolicy: _UAEndpointSelectionPolicy read Get_EndpointSelectionPolicy write _Set_EndpointSelectionPolicy;
    property IsValidServer: WordBool read Get_IsValidServer;
    property ServerCertificate: _PkiCertificate read Get_ServerCertificate write _Set_ServerCertificate;
    property ServerCertificateByteArray: OleVariant read Get_ServerCertificateByteArray write _Set_ServerCertificateByteArray;
    property applicationName: WideString read Get_applicationName write Set_applicationName;
    property ApplicationType: UAApplicationTypes read Get_ApplicationType write Set_ApplicationType;
    property applicationUriString: WideString read Get_applicationUriString write Set_applicationUriString;
    property DiscoveryUriString: WideString read Get_DiscoveryUriString write Set_DiscoveryUriString;
    property productUriString: WideString read Get_productUriString write Set_productUriString;
    property DiscoveryProfileUriString: WideString read Get_DiscoveryProfileUriString write Set_DiscoveryProfileUriString;
    property EndpointUriString: WideString read Get_EndpointUriString write Set_EndpointUriString;
    property GatewayServerUriString: WideString read Get_GatewayServerUriString write Set_GatewayServerUriString;
    property ServerName: WideString read Get_ServerName write Set_ServerName;
  published
  end;

// *********************************************************************//
// The Class CoUADiscoveryElementCollection provides a Create and CreateRemote method to          
// create instances of the default interface _UADiscoveryElementCollection exposed by              
// the CoClass UADiscoveryElementCollection. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUADiscoveryElementCollection = class
    class function Create: _UADiscoveryElementCollection;
    class function CreateRemote(const MachineName: string): _UADiscoveryElementCollection;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUADiscoveryElementCollection
// Help String      : A collection of application elements (typically servers).
// Default Interface: _UADiscoveryElementCollection
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUADiscoveryElementCollection = class(TOleServer)
  private
    FIntf: _UADiscoveryElementCollection;
    function GetDefaultInterface: _UADiscoveryElementCollection;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_Item(index: Integer): _UADiscoveryElement;
    procedure _Set_Item(index: Integer; const pRetVal: _UADiscoveryElement);
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UADiscoveryElementCollection);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function GetEnumerator: IEnumVARIANT;
    procedure Add(Item: OleVariant);
    procedure Clear;
    function Contains(Item: OleVariant): WordBool;
    function IndexOf(Item: OleVariant): Integer;
    procedure Insert(index: Integer; Item: OleVariant);
    function Remove(Item: OleVariant): WordBool;
    procedure RemoveAt(index: Integer);
    function ToList: _ElasticVector;
    function ToUAEndpointDescriptorCollection: _UAEndpointDescriptorCollection;
    property DefaultInterface: _UADiscoveryElementCollection read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property Item[index: Integer]: _UADiscoveryElement read Get_Item write _Set_Item; default;
    property Count: Integer read Get_Count;
  published
  end;

// *********************************************************************//
// The Class CoUAGlobalApplicationDiscoveryQuery provides a Create and CreateRemote method to          
// create instances of the default interface _UAGlobalApplicationDiscoveryQuery exposed by              
// the CoClass UAGlobalApplicationDiscoveryQuery. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAGlobalApplicationDiscoveryQuery = class
    class function Create: _UAGlobalApplicationDiscoveryQuery;
    class function CreateRemote(const MachineName: string): _UAGlobalApplicationDiscoveryQuery;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAGlobalApplicationDiscoveryQuery
// Help String      : An OPC UA discovery query for searching the applications globally in the administrative domain.
// Default Interface: _UAGlobalApplicationDiscoveryQuery
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAGlobalApplicationDiscoveryQuery = class(TOleServer)
  private
    FIntf: _UAGlobalApplicationDiscoveryQuery;
    function GetDefaultInterface: _UAGlobalApplicationDiscoveryQuery;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_Flat: WordBool;
    procedure Set_Flat(pRetVal: WordBool);
    function Get_gdsEndpointDescriptor: _UAEndpointDescriptor;
    procedure _Set_gdsEndpointDescriptor(const pRetVal: _UAEndpointDescriptor);
    function Get_QueryApplicationsFilter: _UAQueryApplicationsFilter;
    procedure _Set_QueryApplicationsFilter(const pRetVal: _UAQueryApplicationsFilter);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAGlobalApplicationDiscoveryQuery);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UAGlobalApplicationDiscoveryQuery read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property gdsEndpointDescriptor: _UAEndpointDescriptor read Get_gdsEndpointDescriptor write _Set_gdsEndpointDescriptor;
    property QueryApplicationsFilter: _UAQueryApplicationsFilter read Get_QueryApplicationsFilter write _Set_QueryApplicationsFilter;
    property Flat: WordBool read Get_Flat write Set_Flat;
  published
  end;

// *********************************************************************//
// The Class CoUALocalApplicationDiscoveryQuery provides a Create and CreateRemote method to          
// create instances of the default interface _UALocalApplicationDiscoveryQuery exposed by              
// the CoClass UALocalApplicationDiscoveryQuery. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUALocalApplicationDiscoveryQuery = class
    class function Create: _UALocalApplicationDiscoveryQuery;
    class function CreateRemote(const MachineName: string): _UALocalApplicationDiscoveryQuery;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUALocalApplicationDiscoveryQuery
// Help String      : An OPC UA discovery query for applications on the specified discovery host or discovery endpoints.
// Default Interface: _UALocalApplicationDiscoveryQuery
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUALocalApplicationDiscoveryQuery = class(TOleServer)
  private
    FIntf: _UALocalApplicationDiscoveryQuery;
    function GetDefaultInterface: _UALocalApplicationDiscoveryQuery;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_Flat: WordBool;
    procedure Set_Flat(pRetVal: WordBool);
    function Get_applicationTypes: UAApplicationTypes;
    procedure Set_applicationTypes(pRetVal: UAApplicationTypes);
    function Get_DiscoveryHost: WideString;
    procedure Set_DiscoveryHost(const pRetVal: WideString);
    function Get_DiscoveryUriStrings: _StringCollection;
    procedure _Set_DiscoveryUriStrings(const pRetVal: _StringCollection);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UALocalApplicationDiscoveryQuery);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UALocalApplicationDiscoveryQuery read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DiscoveryUriStrings: _StringCollection read Get_DiscoveryUriStrings write _Set_DiscoveryUriStrings;
    property Flat: WordBool read Get_Flat write Set_Flat;
    property applicationTypes: UAApplicationTypes read Get_applicationTypes write Set_applicationTypes;
    property DiscoveryHost: WideString read Get_DiscoveryHost write Set_DiscoveryHost;
  published
  end;

// *********************************************************************//
// The Class CoUALocalEndpointDiscoveryQuery provides a Create and CreateRemote method to          
// create instances of the default interface _UALocalEndpointDiscoveryQuery exposed by              
// the CoClass UALocalEndpointDiscoveryQuery. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUALocalEndpointDiscoveryQuery = class
    class function Create: _UALocalEndpointDiscoveryQuery;
    class function CreateRemote(const MachineName: string): _UALocalEndpointDiscoveryQuery;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUALocalEndpointDiscoveryQuery
// Help String      : An OPC UA discovery query for local endpoints.
// Default Interface: _UALocalEndpointDiscoveryQuery
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUALocalEndpointDiscoveryQuery = class(TOleServer)
  private
    FIntf: _UALocalEndpointDiscoveryQuery;
    function GetDefaultInterface: _UALocalEndpointDiscoveryQuery;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_DiscoveryUriString: WideString;
    procedure Set_DiscoveryUriString(const pRetVal: WideString);
    function Get_DiscoveryUriStrings: _StringCollection;
    procedure _Set_DiscoveryUriStrings(const pRetVal: _StringCollection);
    function Get_MatchDiscoveryUriSchemes: WordBool;
    procedure Set_MatchDiscoveryUriSchemes(pRetVal: WordBool);
    function Get_TransportProfileUriStringFilter: _StringCollection;
    procedure _Set_TransportProfileUriStringFilter(const pRetVal: _StringCollection);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UALocalEndpointDiscoveryQuery);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UALocalEndpointDiscoveryQuery read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DiscoveryUriStrings: _StringCollection read Get_DiscoveryUriStrings write _Set_DiscoveryUriStrings;
    property TransportProfileUriStringFilter: _StringCollection read Get_TransportProfileUriStringFilter write _Set_TransportProfileUriStringFilter;
    property DiscoveryUriString: WideString read Get_DiscoveryUriString write Set_DiscoveryUriString;
    property MatchDiscoveryUriSchemes: WordBool read Get_MatchDiscoveryUriSchemes write Set_MatchDiscoveryUriSchemes;
  published
  end;

// *********************************************************************//
// The Class CoUANetworkServerDiscoveryQuery provides a Create and CreateRemote method to          
// create instances of the default interface _UANetworkServerDiscoveryQuery exposed by              
// the CoClass UANetworkServerDiscoveryQuery. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUANetworkServerDiscoveryQuery = class
    class function Create: _UANetworkServerDiscoveryQuery;
    class function CreateRemote(const MachineName: string): _UANetworkServerDiscoveryQuery;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUANetworkServerDiscoveryQuery
// Help String      : An OPC UA discovery query for applications on a network.
// Default Interface: _UANetworkServerDiscoveryQuery
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUANetworkServerDiscoveryQuery = class(TOleServer)
  private
    FIntf: _UANetworkServerDiscoveryQuery;
    function GetDefaultInterface: _UANetworkServerDiscoveryQuery;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_Flat: WordBool;
    procedure Set_Flat(pRetVal: WordBool);
    function Get_applicationTypes: UAApplicationTypes;
    procedure Set_applicationTypes(pRetVal: UAApplicationTypes);
    function Get_DiscoveryHost: WideString;
    procedure Set_DiscoveryHost(const pRetVal: WideString);
    function Get_DiscoveryUriStrings: _StringCollection;
    procedure _Set_DiscoveryUriStrings(const pRetVal: _StringCollection);
    function Get_ServerCapabilityFilter: _StringCollection;
    procedure _Set_ServerCapabilityFilter(const pRetVal: _StringCollection);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UANetworkServerDiscoveryQuery);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UANetworkServerDiscoveryQuery read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DiscoveryUriStrings: _StringCollection read Get_DiscoveryUriStrings write _Set_DiscoveryUriStrings;
    property ServerCapabilityFilter: _StringCollection read Get_ServerCapabilityFilter write _Set_ServerCapabilityFilter;
    property Flat: WordBool read Get_Flat write Set_Flat;
    property applicationTypes: UAApplicationTypes read Get_applicationTypes write Set_applicationTypes;
    property DiscoveryHost: WideString read Get_DiscoveryHost write Set_DiscoveryHost;
  published
  end;

// *********************************************************************//
// The Class CoUAQueryApplicationsFilter provides a Create and CreateRemote method to          
// create instances of the default interface _UAQueryApplicationsFilter exposed by              
// the CoClass UAQueryApplicationsFilter. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAQueryApplicationsFilter = class
    class function Create: _UAQueryApplicationsFilter;
    class function CreateRemote(const MachineName: string): _UAQueryApplicationsFilter;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAQueryApplicationsFilter
// Help String      : A filter used to find servers that meet the specified criteria.
// Default Interface: _UAQueryApplicationsFilter
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAQueryApplicationsFilter = class(TOleServer)
  private
    FIntf: _UAQueryApplicationsFilter;
    function GetDefaultInterface: _UAQueryApplicationsFilter;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_applicationName: WideString;
    procedure Set_applicationName(const pRetVal: WideString);
    function Get_applicationTypes: UAApplicationTypes;
    procedure Set_applicationTypes(pRetVal: UAApplicationTypes);
    function Get_applicationUriString: WideString;
    procedure Set_applicationUriString(const pRetVal: WideString);
    function Get_productUriString: WideString;
    procedure Set_productUriString(const pRetVal: WideString);
    function Get_serverCapabilities: _StringCollection;
    procedure _Set_serverCapabilities(const pRetVal: _StringCollection);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAQueryApplicationsFilter);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UAQueryApplicationsFilter read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property serverCapabilities: _StringCollection read Get_serverCapabilities write _Set_serverCapabilities;
    property applicationName: WideString read Get_applicationName write Set_applicationName;
    property applicationTypes: UAApplicationTypes read Get_applicationTypes write Set_applicationTypes;
    property applicationUriString: WideString read Get_applicationUriString write Set_applicationUriString;
    property productUriString: WideString read Get_productUriString write Set_productUriString;
  published
  end;

// *********************************************************************//
// The Class CoUAServerOnNetwork provides a Create and CreateRemote method to          
// create instances of the default interface _UAServerOnNetwork exposed by              
// the CoClass UAServerOnNetwork. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAServerOnNetwork = class
    class function Create: _UAServerOnNetwork;
    class function CreateRemote(const MachineName: string): _UAServerOnNetwork;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAServerOnNetwork
// Help String      : A DNS service record for OPC Unified Architecture (OPC UA).
// Default Interface: _UAServerOnNetwork
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAServerOnNetwork = class(TOleServer)
  private
    FIntf: _UAServerOnNetwork;
    function GetDefaultInterface: _UAServerOnNetwork;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_DiscoveryUrlString: WideString;
    procedure Set_DiscoveryUrlString(const pRetVal: WideString);
    function Get_RecordId: Integer;
    procedure Set_RecordId(pRetVal: Integer);
    function Get_serverCapabilities: _StringCollection;
    procedure _Set_serverCapabilities(const pRetVal: _StringCollection);
    function Get_ServerName: WideString;
    procedure Set_ServerName(const pRetVal: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAServerOnNetwork);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UAServerOnNetwork read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property serverCapabilities: _StringCollection read Get_serverCapabilities write _Set_serverCapabilities;
    property DiscoveryUrlString: WideString read Get_DiscoveryUrlString write Set_DiscoveryUrlString;
    property RecordId: Integer read Get_RecordId write Set_RecordId;
    property ServerName: WideString read Get_ServerName write Set_ServerName;
  published
  end;

// *********************************************************************//
// The Class CoUAEnumValue provides a Create and CreateRemote method to          
// create instances of the default interface _UAEnumValue exposed by              
// the CoClass UAEnumValue. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAEnumValue = class
    class function Create: _UAEnumValue;
    class function CreateRemote(const MachineName: string): _UAEnumValue;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAEnumValue
// Help String      : A human-readable representation of an OPC UA enumeration.
// Default Interface: _UAEnumValue
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAEnumValue = class(TOleServer)
  private
    FIntf: _UAEnumValue;
    function GetDefaultInterface: _UAEnumValue;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_DecimalValue: TDecimal;
    procedure Set_DecimalValue(pRetVal: TDecimal);
    function Get_Description: WideString;
    procedure Set_Description(const pRetVal: WideString);
    function Get_DisplayName: WideString;
    procedure Set_DisplayName(const pRetVal: WideString);
    function Get_Int32Value: Integer;
    procedure Set_Int32Value(pRetVal: Integer);
    function Get_value: Int64;
    procedure Set_value(pRetVal: Int64);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAEnumValue);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UAEnumValue read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DecimalValue: TDecimal read Get_DecimalValue write Set_DecimalValue;
    property Description: WideString read Get_Description write Set_Description;
    property DisplayName: WideString read Get_DisplayName write Set_DisplayName;
    property Int32Value: Integer read Get_Int32Value write Set_Int32Value;
    property value: Int64 read Get_value write Set_value;
  published
  end;

// *********************************************************************//
// The Class CoUADataTypeInfo provides a Create and CreateRemote method to          
// create instances of the default interface _UADataTypeInfo exposed by              
// the CoClass UADataTypeInfo. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUADataTypeInfo = class
    class function Create: _UADataTypeInfo;
    class function CreateRemote(const MachineName: string): _UADataTypeInfo;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUADataTypeInfo
// Help String      : Abstract base data type for all data types used to provide the metadata for custom data types like structures and enumerations.
// Default Interface: _UADataTypeInfo
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TUADataTypeInfo = class(TOleServer)
  private
    FIntf: _UADataTypeInfo;
    function GetDefaultInterface: _UADataTypeInfo;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_DataTypeId: _UAModelNodeDescriptor;
    procedure _Set_DataTypeId(const pRetVal: _UAModelNodeDescriptor);
    function Get_Name: _UAQualifiedName;
    procedure _Set_Name(const pRetVal: _UAQualifiedName);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UADataTypeInfo);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function AsEnumTypeInfo: _UAEnumTypeInfo;
    function AsSimpleTypeInfo: _UASimpleTypeInfo;
    function AsStructureTypeInfo: _UAStructureTypeInfo;
    property DefaultInterface: _UADataTypeInfo read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DataTypeId: _UAModelNodeDescriptor read Get_DataTypeId write _Set_DataTypeId;
    property Name: _UAQualifiedName read Get_Name write _Set_Name;
  published
  end;

// *********************************************************************//
// The Class CoUAEnumDefinition provides a Create and CreateRemote method to          
// create instances of the default interface _UAEnumDefinition exposed by              
// the CoClass UAEnumDefinition. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAEnumDefinition = class
    class function Create: _UAEnumDefinition;
    class function CreateRemote(const MachineName: string): _UAEnumDefinition;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAEnumDefinition
// Help String      : Provides metadata for a custom OPC UA enumeration or option set data type.
// Default Interface: _UAEnumDefinition
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAEnumDefinition = class(TOleServer)
  private
    FIntf: _UAEnumDefinition;
    function GetDefaultInterface: _UAEnumDefinition;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_Fields: ICollection;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAEnumDefinition);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    procedure Add(enumField: OleVariant);
    property DefaultInterface: _UAEnumDefinition read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Fields: ICollection read Get_Fields;
  published
  end;

// *********************************************************************//
// The Class CoUAEnumDescription provides a Create and CreateRemote method to          
// create instances of the default interface _UAEnumDescription exposed by              
// the CoClass UAEnumDescription. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAEnumDescription = class
    class function Create: _UAEnumDescription;
    class function CreateRemote(const MachineName: string): _UAEnumDescription;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAEnumDescription
// Help String      : Provides concrete data type description for OPC UA enumeration and option set data types.
// Default Interface: _UAEnumDescription
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAEnumDescription = class(TOleServer)
  private
    FIntf: _UAEnumDescription;
    function GetDefaultInterface: _UAEnumDescription;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_DataTypeId: _UANodeId;
    procedure _Set_DataTypeId(const pRetVal: _UANodeId);
    function Get_Name: _UAQualifiedName;
    procedure _Set_Name(const pRetVal: _UAQualifiedName);
    function Get_BuiltInType: UABuiltInType;
    procedure Set_BuiltInType(pRetVal: UABuiltInType);
    function Get_EnumDefinition: _UAEnumDefinition;
    procedure _Set_EnumDefinition(const pRetVal: _UAEnumDefinition);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAEnumDescription);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function ToUADataTypeInfoResult(readOnlyDataTypeSchema: OleVariant; 
                                    requireBaseDataTypes: WordBool): _ValueResult;
    property DefaultInterface: _UAEnumDescription read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DataTypeId: _UANodeId read Get_DataTypeId write _Set_DataTypeId;
    property Name: _UAQualifiedName read Get_Name write _Set_Name;
    property EnumDefinition: _UAEnumDefinition read Get_EnumDefinition write _Set_EnumDefinition;
    property BuiltInType: UABuiltInType read Get_BuiltInType write Set_BuiltInType;
  published
  end;

// *********************************************************************//
// The Class CoUAEnumFieldInfo provides a Create and CreateRemote method to          
// create instances of the default interface _UAEnumFieldInfo exposed by              
// the CoClass UAEnumFieldInfo. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAEnumFieldInfo = class
    class function Create: _UAEnumFieldInfo;
    class function CreateRemote(const MachineName: string): _UAEnumFieldInfo;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAEnumFieldInfo
// Help String      : Provides the concrete information for OPC UA enumeration data types.
// Default Interface: _UAEnumFieldInfo
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAEnumFieldInfo = class(TOleServer)
  private
    FIntf: _UAEnumFieldInfo;
    function GetDefaultInterface: _UAEnumFieldInfo;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_DecimalValue: TDecimal;
    procedure Set_DecimalValue(pRetVal: TDecimal);
    function Get_Description: WideString;
    procedure Set_Description(const pRetVal: WideString);
    function Get_DisplayName: WideString;
    procedure Set_DisplayName(const pRetVal: WideString);
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_value: Int64;
    procedure Set_value(pRetVal: Int64);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAEnumFieldInfo);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UAEnumFieldInfo read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DecimalValue: TDecimal read Get_DecimalValue write Set_DecimalValue;
    property Description: WideString read Get_Description write Set_Description;
    property DisplayName: WideString read Get_DisplayName write Set_DisplayName;
    property Name: WideString read Get_Name write Set_Name;
    property value: Int64 read Get_value write Set_value;
  published
  end;

// *********************************************************************//
// The Class CoUAEnumTypeInfo provides a Create and CreateRemote method to          
// create instances of the default interface _UAEnumTypeInfo exposed by              
// the CoClass UAEnumTypeInfo. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAEnumTypeInfo = class
    class function Create: _UAEnumTypeInfo;
    class function CreateRemote(const MachineName: string): _UAEnumTypeInfo;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAEnumTypeInfo
// Help String      : Provides metadata for a custom OPC UA enumeration or option set data type.
// Default Interface: _UAEnumTypeInfo
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAEnumTypeInfo = class(TOleServer)
  private
    FIntf: _UAEnumTypeInfo;
    function GetDefaultInterface: _UAEnumTypeInfo;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_DataTypeId: _UAModelNodeDescriptor;
    procedure _Set_DataTypeId(const pRetVal: _UAModelNodeDescriptor);
    function Get_Name: _UAQualifiedName;
    procedure _Set_Name(const pRetVal: _UAQualifiedName);
    function Get_BuiltInType: UABuiltInType;
    procedure Set_BuiltInType(pRetVal: UABuiltInType);
    function Get_FieldInfos: ICollection;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAEnumTypeInfo);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function AsEnumTypeInfo: _UAEnumTypeInfo;
    function AsSimpleTypeInfo: _UASimpleTypeInfo;
    function AsStructureTypeInfo: _UAStructureTypeInfo;
    procedure Add(enumFieldInfo: OleVariant);
    property DefaultInterface: _UAEnumTypeInfo read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DataTypeId: _UAModelNodeDescriptor read Get_DataTypeId write _Set_DataTypeId;
    property Name: _UAQualifiedName read Get_Name write _Set_Name;
    property FieldInfos: ICollection read Get_FieldInfos;
    property BuiltInType: UABuiltInType read Get_BuiltInType write Set_BuiltInType;
  published
  end;

// *********************************************************************//
// The Class CoUAEnumField provides a Create and CreateRemote method to          
// create instances of the default interface _UAEnumField exposed by              
// the CoClass UAEnumField. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAEnumField = class
    class function Create: _UAEnumField;
    class function CreateRemote(const MachineName: string): _UAEnumField;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAEnumField
// Help String      : Provides metadata for a field of a custom OPC UA enumeration or option set data type.
// Default Interface: _UAEnumField
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAEnumField = class(TOleServer)
  private
    FIntf: _UAEnumField;
    function GetDefaultInterface: _UAEnumField;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_DecimalValue: TDecimal;
    procedure Set_DecimalValue(pRetVal: TDecimal);
    function Get_Description: WideString;
    procedure Set_Description(const pRetVal: WideString);
    function Get_DisplayName: WideString;
    procedure Set_DisplayName(const pRetVal: WideString);
    function Get_Int32Value: Integer;
    procedure Set_Int32Value(pRetVal: Integer);
    function Get_value: Int64;
    procedure Set_value(pRetVal: Int64);
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAEnumField);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UAEnumField read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DecimalValue: TDecimal read Get_DecimalValue write Set_DecimalValue;
    property Description: WideString read Get_Description write Set_Description;
    property DisplayName: WideString read Get_DisplayName write Set_DisplayName;
    property Int32Value: Integer read Get_Int32Value write Set_Int32Value;
    property value: Int64 read Get_value write Set_value;
    property Name: WideString read Get_Name write Set_Name;
  published
  end;

// *********************************************************************//
// The Class CoUAHeaderDataTypeSchema provides a Create and CreateRemote method to          
// create instances of the default interface _UAHeaderDataTypeSchema exposed by              
// the CoClass UAHeaderDataTypeSchema. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAHeaderDataTypeSchema = class
    class function Create: _UAHeaderDataTypeSchema;
    class function CreateRemote(const MachineName: string): _UAHeaderDataTypeSchema;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAHeaderDataTypeSchema
// Help String      : Provide OPC UA data type definitions for an OPC UA Binary encoded byte blob used outside an OPC UA server address space.
// Default Interface: _UAHeaderDataTypeSchema
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAHeaderDataTypeSchema = class(TOleServer)
  private
    FIntf: _UAHeaderDataTypeSchema;
    function GetDefaultInterface: _UAHeaderDataTypeSchema;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_EnumDescriptions: ICollection;
    function Get_NamespaceArray: PSafeArray;
    procedure Set_NamespaceArray(pRetVal: PSafeArray);
    function Get_SimpleTypeDescriptions: ICollection;
    function Get_StructureDescriptions: ICollection;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAHeaderDataTypeSchema);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function FindDataTypeDescriptions(dataTypeIdList: OleVariant; searchSupertypes: WordBool): PSafeArray;
    function Clone: OleVariant;
    procedure SetNamespaceArray(var value: PSafeArray);
    property DefaultInterface: _UAHeaderDataTypeSchema read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property EnumDescriptions: ICollection read Get_EnumDescriptions;
    property SimpleTypeDescriptions: ICollection read Get_SimpleTypeDescriptions;
    property StructureDescriptions: ICollection read Get_StructureDescriptions;
    property NamespaceArray: PSafeArray read Get_NamespaceArray write Set_NamespaceArray;
  published
  end;

// *********************************************************************//
// The Class CoUADataSetMetaData provides a Create and CreateRemote method to          
// create instances of the default interface _UADataSetMetaData exposed by              
// the CoClass UADataSetMetaData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUADataSetMetaData = class
    class function Create: _UADataSetMetaData;
    class function CreateRemote(const MachineName: string): _UADataSetMetaData;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUADataSetMetaData
// Help String      : Describes the content and semantic of a dataset.
// Default Interface: _UADataSetMetaData
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUADataSetMetaData = class(TOleServer)
  private
    FIntf: _UADataSetMetaData;
    function GetDefaultInterface: _UADataSetMetaData;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_EnumDescriptions: ICollection;
    function Get_NamespaceArray: PSafeArray;
    procedure Set_NamespaceArray(pRetVal: PSafeArray);
    function Get_SimpleTypeDescriptions: ICollection;
    function Get_StructureDescriptions: ICollection;
    function Get_ConfigurationVersion: _UAConfigurationVersion;
    procedure _Set_ConfigurationVersion(const pRetVal: _UAConfigurationVersion);
    function Get_DataSetClassId: TGUID;
    procedure Set_DataSetClassId(pRetVal: TGUID);
    function Get_DataSetClassIdString: WideString;
    procedure Set_DataSetClassIdString(const pRetVal: WideString);
    function Get_Description: WideString;
    procedure Set_Description(const pRetVal: WideString);
    function Get_FieldCount: Integer;
    function Get_Fields: _UAFieldMetaDataCollection;
    function Get_HasDataSetClassId: WordBool;
    function Get_HasPromotedFields: WordBool;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_PromotedFieldCount: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UADataSetMetaData);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function FindDataTypeDescriptions(dataTypeIdList: OleVariant; searchSupertypes: WordBool): PSafeArray;
    function Clone: OleVariant;
    procedure SetNamespaceArray(var value: PSafeArray);
    procedure Add(fieldMetaData: OleVariant);
    property DefaultInterface: _UADataSetMetaData read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property EnumDescriptions: ICollection read Get_EnumDescriptions;
    property SimpleTypeDescriptions: ICollection read Get_SimpleTypeDescriptions;
    property StructureDescriptions: ICollection read Get_StructureDescriptions;
    property ConfigurationVersion: _UAConfigurationVersion read Get_ConfigurationVersion write _Set_ConfigurationVersion;
    property FieldCount: Integer read Get_FieldCount;
    property Fields: _UAFieldMetaDataCollection read Get_Fields;
    property HasDataSetClassId: WordBool read Get_HasDataSetClassId;
    property HasPromotedFields: WordBool read Get_HasPromotedFields;
    property PromotedFieldCount: Integer read Get_PromotedFieldCount;
    property NamespaceArray: PSafeArray read Get_NamespaceArray write Set_NamespaceArray;
    property DataSetClassId: TGUID read Get_DataSetClassId write Set_DataSetClassId;
    property DataSetClassIdString: WideString read Get_DataSetClassIdString write Set_DataSetClassIdString;
    property Description: WideString read Get_Description write Set_Description;
    property Name: WideString read Get_Name write Set_Name;
  published
  end;

// *********************************************************************//
// The Class CoUASimpleTypeDescription provides a Create and CreateRemote method to          
// create instances of the default interface _UASimpleTypeDescription exposed by              
// the CoClass UASimpleTypeDescription. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUASimpleTypeDescription = class
    class function Create: _UASimpleTypeDescription;
    class function CreateRemote(const MachineName: string): _UASimpleTypeDescription;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUASimpleTypeDescription
// Help String      : Provides the concrete data type description for OPC UA data types derived from built-in data types.
// Default Interface: _UASimpleTypeDescription
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUASimpleTypeDescription = class(TOleServer)
  private
    FIntf: _UASimpleTypeDescription;
    function GetDefaultInterface: _UASimpleTypeDescription;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_DataTypeId: _UANodeId;
    procedure _Set_DataTypeId(const pRetVal: _UANodeId);
    function Get_Name: _UAQualifiedName;
    procedure _Set_Name(const pRetVal: _UAQualifiedName);
    function Get_BaseDataTypeId: _UANodeId;
    procedure _Set_BaseDataTypeId(const pRetVal: _UANodeId);
    function Get_BuiltInType: UABuiltInType;
    procedure Set_BuiltInType(pRetVal: UABuiltInType);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UASimpleTypeDescription);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function ToUADataTypeInfoResult(readOnlyDataTypeSchema: OleVariant; 
                                    requireBaseDataTypes: WordBool): _ValueResult;
    property DefaultInterface: _UASimpleTypeDescription read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DataTypeId: _UANodeId read Get_DataTypeId write _Set_DataTypeId;
    property Name: _UAQualifiedName read Get_Name write _Set_Name;
    property BaseDataTypeId: _UANodeId read Get_BaseDataTypeId write _Set_BaseDataTypeId;
    property BuiltInType: UABuiltInType read Get_BuiltInType write Set_BuiltInType;
  published
  end;

// *********************************************************************//
// The Class CoUASimpleTypeInfo provides a Create and CreateRemote method to          
// create instances of the default interface _UASimpleTypeInfo exposed by              
// the CoClass UASimpleTypeInfo. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUASimpleTypeInfo = class
    class function Create: _UASimpleTypeInfo;
    class function CreateRemote(const MachineName: string): _UASimpleTypeInfo;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUASimpleTypeInfo
// Help String      : Provides metadata for an OPC UA data type derived from built-in data type.
// Default Interface: _UASimpleTypeInfo
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUASimpleTypeInfo = class(TOleServer)
  private
    FIntf: _UASimpleTypeInfo;
    function GetDefaultInterface: _UASimpleTypeInfo;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_DataTypeId: _UAModelNodeDescriptor;
    procedure _Set_DataTypeId(const pRetVal: _UAModelNodeDescriptor);
    function Get_Name: _UAQualifiedName;
    procedure _Set_Name(const pRetVal: _UAQualifiedName);
    function Get_BaseDataTypeId: _UAModelNodeDescriptor;
    procedure _Set_BaseDataTypeId(const pRetVal: _UAModelNodeDescriptor);
    function Get_BaseDataTypeInfo: _UADataTypeInfo;
    procedure _Set_BaseDataTypeInfo(const pRetVal: _UADataTypeInfo);
    function Get_BuiltInType: UABuiltInType;
    procedure Set_BuiltInType(pRetVal: UABuiltInType);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UASimpleTypeInfo);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function AsEnumTypeInfo: _UAEnumTypeInfo;
    function AsSimpleTypeInfo: _UASimpleTypeInfo;
    function AsStructureTypeInfo: _UAStructureTypeInfo;
    property DefaultInterface: _UASimpleTypeInfo read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DataTypeId: _UAModelNodeDescriptor read Get_DataTypeId write _Set_DataTypeId;
    property Name: _UAQualifiedName read Get_Name write _Set_Name;
    property BaseDataTypeId: _UAModelNodeDescriptor read Get_BaseDataTypeId write _Set_BaseDataTypeId;
    property BaseDataTypeInfo: _UADataTypeInfo read Get_BaseDataTypeInfo write _Set_BaseDataTypeInfo;
    property BuiltInType: UABuiltInType read Get_BuiltInType write Set_BuiltInType;
  published
  end;

// *********************************************************************//
// The Class CoUAStructureDefinition provides a Create and CreateRemote method to          
// create instances of the default interface _UAStructureDefinition exposed by              
// the CoClass UAStructureDefinition. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAStructureDefinition = class
    class function Create: _UAStructureDefinition;
    class function CreateRemote(const MachineName: string): _UAStructureDefinition;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAStructureDefinition
// Help String      : Provides metadata for a custom OPC UA structure data type.
// Default Interface: _UAStructureDefinition
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAStructureDefinition = class(TOleServer)
  private
    FIntf: _UAStructureDefinition;
    function GetDefaultInterface: _UAStructureDefinition;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_BaseDataTypeId: _UANodeId;
    procedure _Set_BaseDataTypeId(const pRetVal: _UANodeId);
    function Get_DefaultEncodingId: _UANodeId;
    procedure _Set_DefaultEncodingId(const pRetVal: _UANodeId);
    function Get_Fields: ICollection;
    function Get_StructureType: UAStructureType;
    procedure Set_StructureType(pRetVal: UAStructureType);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAStructureDefinition);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    procedure Add(structureField: OleVariant);
    property DefaultInterface: _UAStructureDefinition read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property BaseDataTypeId: _UANodeId read Get_BaseDataTypeId write _Set_BaseDataTypeId;
    property DefaultEncodingId: _UANodeId read Get_DefaultEncodingId write _Set_DefaultEncodingId;
    property Fields: ICollection read Get_Fields;
    property StructureType: UAStructureType read Get_StructureType write Set_StructureType;
  published
  end;

// *********************************************************************//
// The Class CoUAStructureDescription provides a Create and CreateRemote method to          
// create instances of the default interface _UAStructureDescription exposed by              
// the CoClass UAStructureDescription. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAStructureDescription = class
    class function Create: _UAStructureDescription;
    class function CreateRemote(const MachineName: string): _UAStructureDescription;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAStructureDescription
// Help String      : Provides the concrete data type description for OPC UA structure data types.
// Default Interface: _UAStructureDescription
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAStructureDescription = class(TOleServer)
  private
    FIntf: _UAStructureDescription;
    function GetDefaultInterface: _UAStructureDescription;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_DataTypeId: _UANodeId;
    procedure _Set_DataTypeId(const pRetVal: _UANodeId);
    function Get_Name: _UAQualifiedName;
    procedure _Set_Name(const pRetVal: _UAQualifiedName);
    function Get_StructureDefinition: _UAStructureDefinition;
    procedure _Set_StructureDefinition(const pRetVal: _UAStructureDefinition);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAStructureDescription);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function ToUADataTypeInfoResult(readOnlyDataTypeSchema: OleVariant; 
                                    requireBaseDataTypes: WordBool): _ValueResult;
    property DefaultInterface: _UAStructureDescription read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DataTypeId: _UANodeId read Get_DataTypeId write _Set_DataTypeId;
    property Name: _UAQualifiedName read Get_Name write _Set_Name;
    property StructureDefinition: _UAStructureDefinition read Get_StructureDefinition write _Set_StructureDefinition;
  published
  end;

// *********************************************************************//
// The Class CoUAStructureField provides a Create and CreateRemote method to          
// create instances of the default interface _UAStructureField exposed by              
// the CoClass UAStructureField. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAStructureField = class
    class function Create: _UAStructureField;
    class function CreateRemote(const MachineName: string): _UAStructureField;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAStructureField
// Help String      : Provides metadata for a field of a custom OPC UA structure data type.
// Default Interface: _UAStructureField
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAStructureField = class(TOleServer)
  private
    FIntf: _UAStructureField;
    function GetDefaultInterface: _UAStructureField;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_ArrayDimensions: PSafeArray;
    procedure Set_ArrayDimensions(pRetVal: PSafeArray);
    function Get_DataTypeId: _UANodeId;
    procedure _Set_DataTypeId(const pRetVal: _UANodeId);
    function Get_DecimalMaximumStringLength: TDecimal;
    procedure Set_DecimalMaximumStringLength(pRetVal: TDecimal);
    function Get_Description: WideString;
    procedure Set_Description(const pRetVal: WideString);
    function Get_Int32MaximumStringLength: Integer;
    procedure Set_Int32MaximumStringLength(pRetVal: Integer);
    function Get_IsOptional: WordBool;
    procedure Set_IsOptional(pRetVal: WordBool);
    function Get_MaximumStringLength: Int64;
    procedure Set_MaximumStringLength(pRetVal: Int64);
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_ValueRank: Integer;
    procedure Set_ValueRank(pRetVal: Integer);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAStructureField);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    procedure SetDecimalArrayDimensions(var value: PSafeArray);
    function ToUAStructureFieldInfoResult(readOnlyDataTypeSchema: OleVariant; 
                                          requireBaseDataTypes: WordBool): _ValueResult;
    property DefaultInterface: _UAStructureField read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DataTypeId: _UANodeId read Get_DataTypeId write _Set_DataTypeId;
    property ArrayDimensions: PSafeArray read Get_ArrayDimensions write Set_ArrayDimensions;
    property DecimalMaximumStringLength: TDecimal read Get_DecimalMaximumStringLength write Set_DecimalMaximumStringLength;
    property Description: WideString read Get_Description write Set_Description;
    property Int32MaximumStringLength: Integer read Get_Int32MaximumStringLength write Set_Int32MaximumStringLength;
    property IsOptional: WordBool read Get_IsOptional write Set_IsOptional;
    property MaximumStringLength: Int64 read Get_MaximumStringLength write Set_MaximumStringLength;
    property Name: WideString read Get_Name write Set_Name;
    property ValueRank: Integer read Get_ValueRank write Set_ValueRank;
  published
  end;

// *********************************************************************//
// The Class CoUAStructureFieldInfo provides a Create and CreateRemote method to          
// create instances of the default interface _UAStructureFieldInfo exposed by              
// the CoClass UAStructureFieldInfo. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAStructureFieldInfo = class
    class function Create: _UAStructureFieldInfo;
    class function CreateRemote(const MachineName: string): _UAStructureFieldInfo;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAStructureFieldInfo
// Help String      : Provides the metadata for a field of a custom structure data type.
// Default Interface: _UAStructureFieldInfo
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAStructureFieldInfo = class(TOleServer)
  private
    FIntf: _UAStructureFieldInfo;
    function GetDefaultInterface: _UAStructureFieldInfo;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_ArrayDimensions: PSafeArray;
    procedure Set_ArrayDimensions(pRetVal: PSafeArray);
    function Get_DataTypeInfo: _UADataTypeInfo;
    procedure _Set_DataTypeInfo(const pRetVal: _UADataTypeInfo);
    function Get_DecimalMaximumStringLength: TDecimal;
    procedure Set_DecimalMaximumStringLength(pRetVal: TDecimal);
    function Get_Description: WideString;
    procedure Set_Description(const pRetVal: WideString);
    function Get_Int32MaximumStringLength: Integer;
    procedure Set_Int32MaximumStringLength(pRetVal: Integer);
    function Get_IsOptional: WordBool;
    procedure Set_IsOptional(pRetVal: WordBool);
    function Get_MaximumStringLength: Int64;
    procedure Set_MaximumStringLength(pRetVal: Int64);
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_ValueRank: Integer;
    procedure Set_ValueRank(pRetVal: Integer);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAStructureFieldInfo);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    procedure SetDecimalArrayDimensions(var value: PSafeArray);
    property DefaultInterface: _UAStructureFieldInfo read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DataTypeInfo: _UADataTypeInfo read Get_DataTypeInfo write _Set_DataTypeInfo;
    property ArrayDimensions: PSafeArray read Get_ArrayDimensions write Set_ArrayDimensions;
    property DecimalMaximumStringLength: TDecimal read Get_DecimalMaximumStringLength write Set_DecimalMaximumStringLength;
    property Description: WideString read Get_Description write Set_Description;
    property Int32MaximumStringLength: Integer read Get_Int32MaximumStringLength write Set_Int32MaximumStringLength;
    property IsOptional: WordBool read Get_IsOptional write Set_IsOptional;
    property MaximumStringLength: Int64 read Get_MaximumStringLength write Set_MaximumStringLength;
    property Name: WideString read Get_Name write Set_Name;
    property ValueRank: Integer read Get_ValueRank write Set_ValueRank;
  published
  end;

// *********************************************************************//
// The Class CoUAStructureTypeInfo provides a Create and CreateRemote method to          
// create instances of the default interface _UAStructureTypeInfo exposed by              
// the CoClass UAStructureTypeInfo. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAStructureTypeInfo = class
    class function Create: _UAStructureTypeInfo;
    class function CreateRemote(const MachineName: string): _UAStructureTypeInfo;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAStructureTypeInfo
// Help String      : Provides metadata for a custom OPC UA structure data type.
// Default Interface: _UAStructureTypeInfo
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAStructureTypeInfo = class(TOleServer)
  private
    FIntf: _UAStructureTypeInfo;
    function GetDefaultInterface: _UAStructureTypeInfo;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_DataTypeId: _UAModelNodeDescriptor;
    procedure _Set_DataTypeId(const pRetVal: _UAModelNodeDescriptor);
    function Get_Name: _UAQualifiedName;
    procedure _Set_Name(const pRetVal: _UAQualifiedName);
    function Get_BaseDataTypeId: _UAModelNodeDescriptor;
    procedure _Set_BaseDataTypeId(const pRetVal: _UAModelNodeDescriptor);
    function Get_BaseDataTypeInfo: _UADataTypeInfo;
    procedure _Set_BaseDataTypeInfo(const pRetVal: _UADataTypeInfo);
    function Get_FieldInfos: ICollection;
    function Get_StructureType: UAStructureType;
    procedure Set_StructureType(pRetVal: UAStructureType);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAStructureTypeInfo);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function AsEnumTypeInfo: _UAEnumTypeInfo;
    function AsSimpleTypeInfo: _UASimpleTypeInfo;
    function AsStructureTypeInfo: _UAStructureTypeInfo;
    procedure Add(structureFieldInfo: OleVariant);
    property DefaultInterface: _UAStructureTypeInfo read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DataTypeId: _UAModelNodeDescriptor read Get_DataTypeId write _Set_DataTypeId;
    property Name: _UAQualifiedName read Get_Name write _Set_Name;
    property BaseDataTypeId: _UAModelNodeDescriptor read Get_BaseDataTypeId write _Set_BaseDataTypeId;
    property BaseDataTypeInfo: _UADataTypeInfo read Get_BaseDataTypeInfo write _Set_BaseDataTypeInfo;
    property FieldInfos: ICollection read Get_FieldInfos;
    property StructureType: UAStructureType read Get_StructureType write Set_StructureType;
  published
  end;

// *********************************************************************//
// The Class CoUAServerDtmpParameters provides a Create and CreateRemote method to          
// create instances of the default interface _UAServerDtmpParameters exposed by              
// the CoClass UAServerDtmpParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAServerDtmpParameters = class
    class function Create: _UAServerDtmpParameters;
    class function CreateRemote(const MachineName: string): _UAServerDtmpParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAServerDtmpParameters
// Help String      : Contains parameters for OPC UA server-based data type model provider.
// Default Interface: _UAServerDtmpParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAServerDtmpParameters = class(TOleServer)
  private
    FIntf: _UAServerDtmpParameters;
    function GetDefaultInterface: _UAServerDtmpParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAServerDtmpParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UAServerDtmpParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
  published
  end;

// *********************************************************************//
// The Class CoUADataTypeDescriptor provides a Create and CreateRemote method to          
// create instances of the default interface _UADataTypeDescriptor exposed by              
// the CoClass UADataTypeDescriptor. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUADataTypeDescriptor = class
    class function Create: _UADataTypeDescriptor;
    class function CreateRemote(const MachineName: string): _UADataTypeDescriptor;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUADataTypeDescriptor
// Help String      : Identifies an OPC UA data type together with its data type dictionary.
// Default Interface: _UADataTypeDescriptor
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUADataTypeDescriptor = class(TOleServer)
  private
    FIntf: _UADataTypeDescriptor;
    function GetDefaultInterface: _UADataTypeDescriptor;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_DataTypeDescription: OleVariant;
    procedure _Set_DataTypeDescription(pRetVal: OleVariant);
    function Get_DataTypeDictionaryId: _UAModelNodeDescriptor;
    procedure _Set_DataTypeDictionaryId(const pRetVal: _UAModelNodeDescriptor);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UADataTypeDescriptor);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    procedure SetDataTypeDescription(DataTypeDescription: OleVariant);
    property DefaultInterface: _UADataTypeDescriptor read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DataTypeDescription: OleVariant read Get_DataTypeDescription write _Set_DataTypeDescription;
    property DataTypeDictionaryId: _UAModelNodeDescriptor read Get_DataTypeDictionaryId write _Set_DataTypeDictionaryId;
  published
  end;

// *********************************************************************//
// The Class CoUADataTypeSystemParameters provides a Create and CreateRemote method to          
// create instances of the default interface _UADataTypeSystemParameters exposed by              
// the CoClass UADataTypeSystemParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUADataTypeSystemParameters = class
    class function Create: _UADataTypeSystemParameters;
    class function CreateRemote(const MachineName: string): _UADataTypeSystemParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUADataTypeSystemParameters
// Help String      : Contains common parameters for OPC UA data type systems.
// Default Interface: _UADataTypeSystemParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUADataTypeSystemParameters = class(TOleServer)
  private
    FIntf: _UADataTypeSystemParameters;
    function GetDefaultInterface: _UADataTypeSystemParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_AllowCircularTypeNameReferences: WordBool;
    procedure Set_AllowCircularTypeNameReferences(pRetVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UADataTypeSystemParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UADataTypeSystemParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property AllowCircularTypeNameReferences: WordBool read Get_AllowCircularTypeNameReferences write Set_AllowCircularTypeNameReferences;
  published
  end;

// *********************************************************************//
// The Class CoUAOpcBinaryDtsParameters provides a Create and CreateRemote method to          
// create instances of the default interface _UAOpcBinaryDtsParameters exposed by              
// the CoClass UAOpcBinaryDtsParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAOpcBinaryDtsParameters = class
    class function Create: _UAOpcBinaryDtsParameters;
    class function CreateRemote(const MachineName: string): _UAOpcBinaryDtsParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAOpcBinaryDtsParameters
// Help String      : Contains parameters for OPC Binary data type system (in OPC UA).
// Default Interface: _UAOpcBinaryDtsParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAOpcBinaryDtsParameters = class(TOleServer)
  private
    FIntf: _UAOpcBinaryDtsParameters;
    function GetDefaultInterface: _UAOpcBinaryDtsParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_AllowCircularTypeNameReferences: WordBool;
    procedure Set_AllowCircularTypeNameReferences(pRetVal: WordBool);
    function Get_AllowDataPastEndOfStream: WordBool;
    procedure Set_AllowDataPastEndOfStream(pRetVal: WordBool);
    function Get_ImplicitImportDictionary: _StringStringDictionary;
    procedure _Set_ImplicitImportDictionary(const pRetVal: _StringStringDictionary);
    function Get_NamespaceRedirectionDictionary: _StringStringDictionary;
    procedure _Set_NamespaceRedirectionDictionary(const pRetVal: _StringStringDictionary);
    function Get_OverrideLocationForKnownNamespaces: WordBool;
    procedure Set_OverrideLocationForKnownNamespaces(pRetVal: WordBool);
    function Get_TypeNameRemappingDictionary: _XmlQualifiedName2Dictionary;
    procedure _Set_TypeNameRemappingDictionary(const pRetVal: _XmlQualifiedName2Dictionary);
    function Get_WellKnownLocationTemplateDictionary: _StringStringDictionary;
    procedure _Set_WellKnownLocationTemplateDictionary(const pRetVal: _StringStringDictionary);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAOpcBinaryDtsParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UAOpcBinaryDtsParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property ImplicitImportDictionary: _StringStringDictionary read Get_ImplicitImportDictionary write _Set_ImplicitImportDictionary;
    property NamespaceRedirectionDictionary: _StringStringDictionary read Get_NamespaceRedirectionDictionary write _Set_NamespaceRedirectionDictionary;
    property TypeNameRemappingDictionary: _XmlQualifiedName2Dictionary read Get_TypeNameRemappingDictionary write _Set_TypeNameRemappingDictionary;
    property WellKnownLocationTemplateDictionary: _StringStringDictionary read Get_WellKnownLocationTemplateDictionary write _Set_WellKnownLocationTemplateDictionary;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property AllowCircularTypeNameReferences: WordBool read Get_AllowCircularTypeNameReferences write Set_AllowCircularTypeNameReferences;
    property AllowDataPastEndOfStream: WordBool read Get_AllowDataPastEndOfStream write Set_AllowDataPastEndOfStream;
    property OverrideLocationForKnownNamespaces: WordBool read Get_OverrideLocationForKnownNamespaces write Set_OverrideLocationForKnownNamespaces;
  published
  end;

// *********************************************************************//
// The Class CoUAServerDtmpPluginParameters provides a Create and CreateRemote method to          
// create instances of the default interface _UAServerDtmpPluginParameters exposed by              
// the CoClass UAServerDtmpPluginParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAServerDtmpPluginParameters = class
    class function Create: _UAServerDtmpPluginParameters;
    class function CreateRemote(const MachineName: string): _UAServerDtmpPluginParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAServerDtmpPluginParameters
// Help String      : Contains parameters for OPC UA Server DTMP (Data Type Model Provider) plug-in.
// Default Interface: _UAServerDtmpPluginParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAServerDtmpPluginParameters = class(TOleServer)
  private
    FIntf: _UAServerDtmpPluginParameters;
    function GetDefaultInterface: _UAServerDtmpPluginParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_ClientSelector: _EasyUAClientSelector;
    procedure _Set_ClientSelector(const pRetVal: _EasyUAClientSelector);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAServerDtmpPluginParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UAServerDtmpPluginParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property ClientSelector: _EasyUAClientSelector read Get_ClientSelector write _Set_ClientSelector;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
  published
  end;

// *********************************************************************//
// The Class CoUAXmlSchemaDtsParameters provides a Create and CreateRemote method to          
// create instances of the default interface _UAXmlSchemaDtsParameters exposed by              
// the CoClass UAXmlSchemaDtsParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAXmlSchemaDtsParameters = class
    class function Create: _UAXmlSchemaDtsParameters;
    class function CreateRemote(const MachineName: string): _UAXmlSchemaDtsParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAXmlSchemaDtsParameters
// Help String      : Contains parameters for XML Schema data type system (in OPC UA).
// Default Interface: _UAXmlSchemaDtsParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAXmlSchemaDtsParameters = class(TOleServer)
  private
    FIntf: _UAXmlSchemaDtsParameters;
    function GetDefaultInterface: _UAXmlSchemaDtsParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_AllowCircularTypeNameReferences: WordBool;
    procedure Set_AllowCircularTypeNameReferences(pRetVal: WordBool);
    function Get_SelectLowestLevelDataTypeDescription: WordBool;
    procedure Set_SelectLowestLevelDataTypeDescription(pRetVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAXmlSchemaDtsParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UAXmlSchemaDtsParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property AllowCircularTypeNameReferences: WordBool read Get_AllowCircularTypeNameReferences write Set_AllowCircularTypeNameReferences;
    property SelectLowestLevelDataTypeDescription: WordBool read Get_SelectLowestLevelDataTypeDescription write Set_SelectLowestLevelDataTypeDescription;
  published
  end;

// *********************************************************************//
// The Class CoUAEUInformation provides a Create and CreateRemote method to          
// create instances of the default interface _UAEUInformation exposed by              
// the CoClass UAEUInformation. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAEUInformation = class
    class function Create: _UAEUInformation;
    class function CreateRemote(const MachineName: string): _UAEUInformation;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAEUInformation
// Help String      : This structure contains information about the EngineeringUnits.
// Default Interface: _UAEUInformation
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAEUInformation = class(TOleServer)
  private
    FIntf: _UAEUInformation;
    function GetDefaultInterface: _UAEUInformation;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_Description: WideString;
    procedure Set_Description(const pRetVal: WideString);
    function Get_DisplayName: WideString;
    procedure Set_DisplayName(const pRetVal: WideString);
    function Get_NamespaceUriString: WideString;
    procedure Set_NamespaceUriString(const pRetVal: WideString);
    function Get_UnitId: Integer;
    procedure Set_UnitId(pRetVal: Integer);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAEUInformation);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UAEUInformation read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Description: WideString read Get_Description write Set_Description;
    property DisplayName: WideString read Get_DisplayName write Set_DisplayName;
    property NamespaceUriString: WideString read Get_NamespaceUriString write Set_NamespaceUriString;
    property UnitId: Integer read Get_UnitId write Set_UnitId;
  published
  end;

// *********************************************************************//
// The Class CoUARange provides a Create and CreateRemote method to          
// create instances of the default interface _UARange exposed by              
// the CoClass UARange. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUARange = class
    class function Create: _UARange;
    class function CreateRemote(const MachineName: string): _UARange;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUARange
// Help String      : This structure defines the OPC-UA Range for a value.
// Default Interface: _UARange
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUARange = class(TOleServer)
  private
    FIntf: _UARange;
    function GetDefaultInterface: _UARange;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_High: Double;
    procedure Set_High(pRetVal: Double);
    function Get_HighBound: Double;
    function Get_IsReversed: WordBool;
    function Get_IsSingleValue: WordBool;
    function Get_IsNormalized: WordBool;
    function Get_Low: Double;
    procedure Set_Low(pRetVal: Double);
    function Get_LowBound: Double;
    function Get_Size: Double;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UARange);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function InRange(value: Double): WordBool;
    procedure IntersectWith(other: OleVariant);
    procedure Normalize;
    property DefaultInterface: _UARange read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property HighBound: Double read Get_HighBound;
    property IsReversed: WordBool read Get_IsReversed;
    property IsSingleValue: WordBool read Get_IsSingleValue;
    property IsNormalized: WordBool read Get_IsNormalized;
    property LowBound: Double read Get_LowBound;
    property Size: Double read Get_Size;
    property High: Double read Get_High write Set_High;
    property Low: Double read Get_Low write Set_Low;
  published
  end;

// *********************************************************************//
// The Class CoComEasyUAClientConnectionMonitoring provides a Create and CreateRemote method to          
// create instances of the default interface _EasyUAClientConnectionMonitoring exposed by              
// the CoClass ComEasyUAClientConnectionMonitoring. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoComEasyUAClientConnectionMonitoring = class
    class function Create: _EasyUAClientConnectionMonitoring;
    class function CreateRemote(const MachineName: string): _EasyUAClientConnectionMonitoring;
  end;

  TComEasyUAClientConnectionMonitoringServerConditionChanged = procedure(ASender: TObject; sender0: OleVariant; 
                                                                                           const eventArgs: _EasyUAServerConditionChangedEventArgs) of object;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TComEasyUAClientConnectionMonitoring
// Help String      : COM object that provides methods to monitor the OPC UA client connections to the server.
// Default Interface: _EasyUAClientConnectionMonitoring
// Def. Intf. DISP? : No
// Event   Interface: DEasyUAClientConnectionMonitoringEvents
// TypeFlags        : (0)
// *********************************************************************//
  TComEasyUAClientConnectionMonitoring = class(TOleServer)
  private
    FOnServerConditionChanged: TComEasyUAClientConnectionMonitoringServerConditionChanged;
    FIntf: _EasyUAClientConnectionMonitoring;
    function GetDefaultInterface: _EasyUAClientConnectionMonitoring;
  protected
    procedure InitServerData; override;
    procedure InvokeEvent(DispID: TDispID; var Params: TVariantArray); override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_PullServerConditionChangedQueueCapacity: Integer;
    procedure Set_PullServerConditionChangedQueueCapacity(pRetVal: Integer);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _EasyUAClientConnectionMonitoring);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function PullMultipleServerConditionChanges(maximumCount: Integer; millisecondsTimeout: Integer): PSafeArray;
    function PullServerConditionChanged(millisecondsTimeout: Integer): _EasyUAServerConditionChangedEventArgs;
    function PullServerConditionChangeList(maximumCount: Integer; millisecondsTimeout: Integer): _ElasticVector;
    property DefaultInterface: _EasyUAClientConnectionMonitoring read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property PullServerConditionChangedQueueCapacity: Integer read Get_PullServerConditionChangedQueueCapacity write Set_PullServerConditionChangedQueueCapacity;
  published
    property OnServerConditionChanged: TComEasyUAClientConnectionMonitoringServerConditionChanged read FOnServerConditionChanged write FOnServerConditionChanged;
  end;

// *********************************************************************//
// The Class CoEasyUAClientSelector provides a Create and CreateRemote method to          
// create instances of the default interface _EasyUAClientSelector exposed by              
// the CoClass EasyUAClientSelector. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEasyUAClientSelector = class
    class function Create: _EasyUAClientSelector;
    class function CreateRemote(const MachineName: string): _EasyUAClientSelector;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TEasyUAClientSelector
// Help String      : Describes how to select the EasyUAClient object.
// Default Interface: _EasyUAClientSelector
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TEasyUAClientSelector = class(TOleServer)
  private
    FIntf: _EasyUAClientSelector;
    function GetDefaultInterface: _EasyUAClientSelector;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_Differentiator: WideString;
    procedure Set_Differentiator(const pRetVal: WideString);
    function Get_InstanceParameters: _EasyUAClientInstanceParameters;
    procedure _Set_InstanceParameters(const pRetVal: _EasyUAClientInstanceParameters);
    function Get_Isolated: WordBool;
    procedure Set_Isolated(pRetVal: WordBool);
    function Get_IsolatedParameters: _EasyUAClientAdaptableParameters;
    procedure _Set_IsolatedParameters(const pRetVal: _EasyUAClientAdaptableParameters);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _EasyUAClientSelector);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    procedure Reset;
    property DefaultInterface: _EasyUAClientSelector read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property InstanceParameters: _EasyUAClientInstanceParameters read Get_InstanceParameters write _Set_InstanceParameters;
    property IsolatedParameters: _EasyUAClientAdaptableParameters read Get_IsolatedParameters write _Set_IsolatedParameters;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property Differentiator: WideString read Get_Differentiator write Set_Differentiator;
    property Isolated: WordBool read Get_Isolated write Set_Isolated;
  published
  end;

// *********************************************************************//
// The Class CoEasyUAEngineException provides a Create and CreateRemote method to          
// create instances of the default interface _EasyUAEngineException exposed by              
// the CoClass EasyUAEngineException. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEasyUAEngineException = class
    class function Create: _EasyUAEngineException;
    class function CreateRemote(const MachineName: string): _EasyUAEngineException;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TEasyUAEngineException
// Help String      : An exception specific to the EasyUAClient component.
// Default Interface: _EasyUAEngineException
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TEasyUAEngineException = class(TOleServer)
  private
    FIntf: _EasyUAEngineException;
    function GetDefaultInterface: _EasyUAEngineException;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_Message: WideString;
    function Get_StackTrace: WideString;
    function Get_HelpLink: WideString;
    procedure Set_HelpLink(const pRetVal: WideString);
    function Get_Source: WideString;
    procedure Set_Source(const pRetVal: WideString);
    function Get_InnerException: _Exception;
    function Get_TargetSite: _MethodBase;
    function Get_Data: _Dictionary;
    function Get_HResult: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _EasyUAEngineException);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function GetBaseException: _Exception;
    procedure GetObjectData(const info: _SerializationInfo; context: StreamingContext);
    property DefaultInterface: _EasyUAEngineException read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Message: WideString read Get_Message;
    property StackTrace: WideString read Get_StackTrace;
    property InnerException: _Exception read Get_InnerException;
    property TargetSite: _MethodBase read Get_TargetSite;
    property Data: _Dictionary read Get_Data;
    property HResult: Integer read Get_HResult;
    property HelpLink: WideString read Get_HelpLink write Set_HelpLink;
    property Source: WideString read Get_Source write Set_Source;
  published
  end;

// *********************************************************************//
// The Class CoEasyUASpecializedClient provides a Create and CreateRemote method to          
// create instances of the default interface _EasyUASpecializedClient exposed by              
// the CoClass EasyUASpecializedClient. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEasyUASpecializedClient = class
    class function Create: _EasyUASpecializedClient;
    class function CreateRemote(const MachineName: string): _EasyUASpecializedClient;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TEasyUASpecializedClient
// Help String      : Base class for specialized OPC UA clients.
// Default Interface: _EasyUASpecializedClient
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TEasyUASpecializedClient = class(TOleServer)
  private
    FIntf: _EasyUASpecializedClient;
    function GetDefaultInterface: _EasyUASpecializedClient;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_CustomReference: WideString;
    procedure Set_CustomReference(const pRetVal: WideString);
    function Get_ClientSelector: _EasyUAClientSelector;
    procedure _Set_ClientSelector(const pRetVal: _EasyUAClientSelector);
    function Get_IsDerived: WordBool;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _EasyUASpecializedClient);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function GetService(const serviceType: _Type): OleVariant;
    function GetServiceByName(const serviceTypeName: WideString): OleVariant;
    function ValueEquals(other: OleVariant): WordBool;
    function AsClient: _EasyUAClient;
    property DefaultInterface: _EasyUASpecializedClient read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property ClientSelector: _EasyUAClientSelector read Get_ClientSelector write _Set_ClientSelector;
    property IsDerived: WordBool read Get_IsDerived;
    property CustomReference: WideString read Get_CustomReference write Set_CustomReference;
  published
  end;

// *********************************************************************//
// The Class CoStringUANodeIdDictionary provides a Create and CreateRemote method to          
// create instances of the default interface _StringUANodeIdReadOnlyDictionary exposed by              
// the CoClass StringUANodeIdDictionary. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoStringUANodeIdDictionary = class
    class function Create: _StringUANodeIdReadOnlyDictionary;
    class function CreateRemote(const MachineName: string): _StringUANodeIdReadOnlyDictionary;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TStringUANodeIdDictionary
// Help String      : This is a dictionary where the key is a string, and the value is a an OPC UA node ID.
// Default Interface: _StringUANodeIdReadOnlyDictionary
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TStringUANodeIdDictionary = class(TOleServer)
  private
    FIntf: _StringUANodeIdReadOnlyDictionary;
    function GetDefaultInterface: _StringUANodeIdReadOnlyDictionary;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_Item(key: OleVariant): _UANodeId;
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _StringUANodeIdReadOnlyDictionary);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function GetEnumerator: IEnumVARIANT;
    function ContainsKey(key: OleVariant): WordBool;
    function TryGetValue(key: OleVariant; out value: OleVariant): WordBool;
    function ContainsValue(value: OleVariant): WordBool;
    property DefaultInterface: _StringUANodeIdReadOnlyDictionary read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property Item[key: OleVariant]: _UANodeId read Get_Item; default;
    property Count: Integer read Get_Count;
  published
  end;

// *********************************************************************//
// The Class CoUAAttributeField provides a Create and CreateRemote method to          
// create instances of the default interface _UAAttributeField exposed by              
// the CoClass UAAttributeField. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAAttributeField = class
    class function Create: _UAAttributeField;
    class function CreateRemote(const MachineName: string): _UAAttributeField;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAAttributeField
// Help String      : A field referring an attribute.
// Default Interface: _UAAttributeField
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAAttributeField = class(TOleServer)
  private
    FIntf: _UAAttributeField;
    function GetDefaultInterface: _UAAttributeField;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_State: OleVariant;
    procedure _Set_State(pRetVal: OleVariant);
    function Get_Operand: _UASimpleAttributeOperand;
    procedure _Set_Operand(const pRetVal: _UASimpleAttributeOperand);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAAttributeField);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function MemberwiseClone: _OperationArguments;
    procedure SetState(State: OleVariant);
    property DefaultInterface: _UAAttributeField read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property State: OleVariant read Get_State write _Set_State;
    property Operand: _UASimpleAttributeOperand read Get_Operand write _Set_Operand;
  published
  end;

// *********************************************************************//
// The Class CoUAAttributeFieldCollection provides a Create and CreateRemote method to          
// create instances of the default interface _UAAttributeFieldCollection exposed by              
// the CoClass UAAttributeFieldCollection. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAAttributeFieldCollection = class
    class function Create: _UAAttributeFieldCollection;
    class function CreateRemote(const MachineName: string): _UAAttributeFieldCollection;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAAttributeFieldCollection
// Help String      : A collection of OPC UA attribute fields.
// Default Interface: _UAAttributeFieldCollection
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAAttributeFieldCollection = class(TOleServer)
  private
    FIntf: _UAAttributeFieldCollection;
    function GetDefaultInterface: _UAAttributeFieldCollection;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_Item(index: Integer): _UAAttributeField;
    procedure _Set_Item(index: Integer; const pRetVal: _UAAttributeField);
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAAttributeFieldCollection);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function GetEnumerator: IEnumVARIANT;
    procedure Add(Item: OleVariant);
    procedure Clear;
    function Contains(Item: OleVariant): WordBool;
    function IndexOf(Item: OleVariant): Integer;
    procedure Insert(index: Integer; Item: OleVariant);
    function Remove(Item: OleVariant): WordBool;
    procedure RemoveAt(index: Integer);
    property DefaultInterface: _UAAttributeFieldCollection read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property Item[index: Integer]: _UAAttributeField read Get_Item write _Set_Item; default;
    property Count: Integer read Get_Count;
  published
  end;

// *********************************************************************//
// The Class CoUABrowseParameters provides a Create and CreateRemote method to          
// create instances of the default interface _UABrowseParameters exposed by              
// the CoClass UABrowseParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUABrowseParameters = class
    class function Create: _UABrowseParameters;
    class function CreateRemote(const MachineName: string): _UABrowseParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUABrowseParameters
// Help String      : Specifies which nodes will be returned by browsing the OPC server's address space.
// Default Interface: _UABrowseParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUABrowseParameters = class(TOleServer)
  private
    FIntf: _UABrowseParameters;
    function GetDefaultInterface: _UABrowseParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_BrowseDirections: UABrowseDirections;
    procedure Set_BrowseDirections(pRetVal: UABrowseDirections);
    function Get_IncludeSubtypes: WordBool;
    procedure Set_IncludeSubtypes(pRetVal: WordBool);
    function Get_NodeClasses: UANodeClass;
    procedure Set_NodeClasses(pRetVal: UANodeClass);
    function Get_ReferenceTypeIds: _UANodeIdCollection;
    procedure _Set_ReferenceTypeIds(const pRetVal: _UANodeIdCollection);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UABrowseParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    procedure CombineWith(other: OleVariant);
    property DefaultInterface: _UABrowseParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property ReferenceTypeIds: _UANodeIdCollection read Get_ReferenceTypeIds write _Set_ReferenceTypeIds;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property BrowseDirections: UABrowseDirections read Get_BrowseDirections write Set_BrowseDirections;
    property IncludeSubtypes: WordBool read Get_IncludeSubtypes write Set_IncludeSubtypes;
    property NodeClasses: UANodeClass read Get_NodeClasses write Set_NodeClasses;
  published
  end;

// *********************************************************************//
// The Class CoUADataChangeFilter provides a Create and CreateRemote method to          
// create instances of the default interface _UADataChangeFilter exposed by              
// the CoClass UADataChangeFilter. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUADataChangeFilter = class
    class function Create: _UADataChangeFilter;
    class function CreateRemote(const MachineName: string): _UADataChangeFilter;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUADataChangeFilter
// Help String      : Defines the conditions under which a data change notification should be reported.
// Default Interface: _UADataChangeFilter
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUADataChangeFilter = class(TOleServer)
  private
    FIntf: _UADataChangeFilter;
    function GetDefaultInterface: _UADataChangeFilter;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_DeadbandType: UADeadbandType;
    procedure Set_DeadbandType(pRetVal: UADeadbandType);
    function Get_DeadbandValue: Double;
    procedure Set_DeadbandValue(pRetVal: Double);
    function Get_Trigger: UADataChangeTrigger;
    procedure Set_Trigger(pRetVal: UADataChangeTrigger);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UADataChangeFilter);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UADataChangeFilter read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property DeadbandType: UADeadbandType read Get_DeadbandType write Set_DeadbandType;
    property DeadbandValue: Double read Get_DeadbandValue write Set_DeadbandValue;
    property Trigger: UADataChangeTrigger read Get_Trigger write Set_Trigger;
  published
  end;

// *********************************************************************//
// The Class CoUAAttributeData provides a Create and CreateRemote method to          
// create instances of the default interface _UAAttributeData exposed by              
// the CoClass UAAttributeData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAAttributeData = class
    class function Create: _UAAttributeData;
    class function CreateRemote(const MachineName: string): _UAAttributeData;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAAttributeData
// Help String      : A class that stores the value of an attribute, together with status code and timestamps.
// Default Interface: _UAAttributeData
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAAttributeData = class(TOleServer)
  private
    FIntf: _UAAttributeData;
    function GetDefaultInterface: _UAAttributeData;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_ToString_2(const format: WideString; const formatProvider: IFormatProvider): WideString;
    function Get_ToString_3(const format: WideString): WideString;
    function Get_HasBadStatus: WordBool;
    function Get_HasGoodStatus: WordBool;
    function Get_HasServerTimestamp: WordBool;
    function Get_HasSourceTimestamp: WordBool;
    function Get_HasUncertainStatus: WordBool;
    function Get_HasValue: WordBool;
    function Get_ServerPicoseconds: Integer;
    procedure Set_ServerPicoseconds(pRetVal: Integer);
    function Get_ServerTimestamp: TDateTime;
    procedure Set_ServerTimestamp(pRetVal: TDateTime);
    function Get_ServerTimestampDouble: Double;
    procedure Set_ServerTimestampDouble(pRetVal: Double);
    function Get_ServerTimestampLocal: TDateTime;
    procedure Set_ServerTimestampLocal(pRetVal: TDateTime);
    function Get_ServerTimestampLocalDouble: Double;
    procedure Set_ServerTimestampLocalDouble(pRetVal: Double);
    function Get_SourcePicoseconds: Integer;
    procedure Set_SourcePicoseconds(pRetVal: Integer);
    function Get_SourceTimestamp: TDateTime;
    procedure Set_SourceTimestamp(pRetVal: TDateTime);
    function Get_SourceTimestampDouble: Double;
    procedure Set_SourceTimestampDouble(pRetVal: Double);
    function Get_SourceTimestampLocal: TDateTime;
    procedure Set_SourceTimestampLocal(pRetVal: TDateTime);
    function Get_SourceTimestampLocalDouble: Double;
    procedure Set_SourceTimestampLocalDouble(pRetVal: Double);
    function Get_StatusCode: _UAStatusCode;
    procedure _Set_StatusCode(const pRetVal: _UAStatusCode);
    function Get_StatusInfo: StatusInfo;
    function Get_value: OleVariant;
    procedure _Set_value(pRetVal: OleVariant);
    function Get_ValueType: _Type;
    function Get_ValueTypeName: WideString;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAAttributeData);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function DisplayValue: WideString;
    procedure SetValue(value: OleVariant);
    property DefaultInterface: _UAAttributeData read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property ToString_2[const format: WideString; const formatProvider: IFormatProvider]: WideString read Get_ToString_2;
    property ToString_3[const format: WideString]: WideString read Get_ToString_3;
    property HasBadStatus: WordBool read Get_HasBadStatus;
    property HasGoodStatus: WordBool read Get_HasGoodStatus;
    property HasServerTimestamp: WordBool read Get_HasServerTimestamp;
    property HasSourceTimestamp: WordBool read Get_HasSourceTimestamp;
    property HasUncertainStatus: WordBool read Get_HasUncertainStatus;
    property HasValue: WordBool read Get_HasValue;
    property StatusCode: _UAStatusCode read Get_StatusCode write _Set_StatusCode;
    property StatusInfo: StatusInfo read Get_StatusInfo;
    property value: OleVariant read Get_value write _Set_value;
    property ValueType: _Type read Get_ValueType;
    property ValueTypeName: WideString read Get_ValueTypeName;
    property ServerPicoseconds: Integer read Get_ServerPicoseconds write Set_ServerPicoseconds;
    property ServerTimestamp: TDateTime read Get_ServerTimestamp write Set_ServerTimestamp;
    property ServerTimestampDouble: Double read Get_ServerTimestampDouble write Set_ServerTimestampDouble;
    property ServerTimestampLocal: TDateTime read Get_ServerTimestampLocal write Set_ServerTimestampLocal;
    property ServerTimestampLocalDouble: Double read Get_ServerTimestampLocalDouble write Set_ServerTimestampLocalDouble;
    property SourcePicoseconds: Integer read Get_SourcePicoseconds write Set_SourcePicoseconds;
    property SourceTimestamp: TDateTime read Get_SourceTimestamp write Set_SourceTimestamp;
    property SourceTimestampDouble: Double read Get_SourceTimestampDouble write Set_SourceTimestampDouble;
    property SourceTimestampLocal: TDateTime read Get_SourceTimestampLocal write Set_SourceTimestampLocal;
    property SourceTimestampLocalDouble: Double read Get_SourceTimestampLocalDouble write Set_SourceTimestampLocalDouble;
  published
  end;

// *********************************************************************//
// The Class CoUAEndpointDescriptor provides a Create and CreateRemote method to          
// create instances of the default interface _UAEndpointDescriptor exposed by              
// the CoClass UAEndpointDescriptor. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAEndpointDescriptor = class
    class function Create: _UAEndpointDescriptor;
    class function CreateRemote(const MachineName: string): _UAEndpointDescriptor;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAEndpointDescriptor
// Help String      : Contains data defining a connection to the OPC-UA Server (mainly, its URL string).
// Default Interface: _UAEndpointDescriptor
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAEndpointDescriptor = class(TOleServer)
  private
    FIntf: _UAEndpointDescriptor;
    function GetDefaultInterface: _UAEndpointDescriptor;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_AliasName: WideString;
    procedure Set_AliasName(const pRetVal: WideString);
    function Get_IsAliased: WordBool;
    function Get_Authority: WideString;
    procedure Set_Authority(const pRetVal: WideString);
    function Get_DescriptorString: WideString;
    procedure Set_DescriptorString(const pRetVal: WideString);
    function Get_PathAndQuery: WideString;
    procedure Set_PathAndQuery(const pRetVal: WideString);
    function Get_SchemeAndAuthority: WideString;
    procedure Set_SchemeAndAuthority(const pRetVal: WideString);
    function Get_UserInfo: WideString;
    procedure Set_UserInfo(const pRetVal: WideString);
    function Get_UrlString: WideString;
    procedure Set_UrlString(const pRetVal: WideString);
    function Get_Fragment: WideString;
    procedure Set_Fragment(const pRetVal: WideString);
    function Get_Host: WideString;
    procedure Set_Host(const pRetVal: WideString);
    function Get_IsNull: WordBool;
    function Get_Password: WideString;
    procedure Set_Password(const pRetVal: WideString);
    function Get_Path: WideString;
    procedure Set_Path(const pRetVal: WideString);
    function Get_Port: Integer;
    procedure Set_Port(pRetVal: Integer);
    function Get_prefix: WideString;
    procedure Set_prefix(const pRetVal: WideString);
    function Get_Query: WideString;
    procedure Set_Query(const pRetVal: WideString);
    function Get_Scheme: WideString;
    procedure Set_Scheme(const pRetVal: WideString);
    function Get_UserName: WideString;
    procedure Set_UserName(const pRetVal: WideString);
    function Get_NetworkSecurity: _NetworkSecurity;
    procedure _Set_NetworkSecurity(const pRetVal: _NetworkSecurity);
    function Get_CertificateAcceptancePolicy: _UACertificateAcceptancePolicy;
    procedure _Set_CertificateAcceptancePolicy(const pRetVal: _UACertificateAcceptancePolicy);
    function Get_certificateSubId: WideString;
    procedure Set_certificateSubId(const pRetVal: WideString);
    function Get_EndpointSelectionPolicy: _UAEndpointSelectionPolicy;
    procedure _Set_EndpointSelectionPolicy(const pRetVal: _UAEndpointSelectionPolicy);
    function Get_HasServerCertificate: WordBool;
    function Get_ServerCertificate: _PkiCertificate;
    procedure _Set_ServerCertificate(const pRetVal: _PkiCertificate);
    function Get_ServerCertificateByteArray: OleVariant;
    procedure _Set_ServerCertificateByteArray(pRetVal: OleVariant);
    function Get_UserIdentity: _UserIdentity;
    procedure _Set_UserIdentity(const pRetVal: _UserIdentity);
    function Get_UserTokenPolicyId: WideString;
    procedure Set_UserTokenPolicyId(const pRetVal: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAEndpointDescriptor);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    procedure SetServerCertificateByteArray(value: OleVariant);
    property DefaultInterface: _UAEndpointDescriptor read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property IsAliased: WordBool read Get_IsAliased;
    property IsNull: WordBool read Get_IsNull;
    property NetworkSecurity: _NetworkSecurity read Get_NetworkSecurity write _Set_NetworkSecurity;
    property CertificateAcceptancePolicy: _UACertificateAcceptancePolicy read Get_CertificateAcceptancePolicy write _Set_CertificateAcceptancePolicy;
    property EndpointSelectionPolicy: _UAEndpointSelectionPolicy read Get_EndpointSelectionPolicy write _Set_EndpointSelectionPolicy;
    property HasServerCertificate: WordBool read Get_HasServerCertificate;
    property ServerCertificate: _PkiCertificate read Get_ServerCertificate write _Set_ServerCertificate;
    property ServerCertificateByteArray: OleVariant read Get_ServerCertificateByteArray write _Set_ServerCertificateByteArray;
    property UserIdentity: _UserIdentity read Get_UserIdentity write _Set_UserIdentity;
    property AliasName: WideString read Get_AliasName write Set_AliasName;
    property Authority: WideString read Get_Authority write Set_Authority;
    property DescriptorString: WideString read Get_DescriptorString write Set_DescriptorString;
    property PathAndQuery: WideString read Get_PathAndQuery write Set_PathAndQuery;
    property SchemeAndAuthority: WideString read Get_SchemeAndAuthority write Set_SchemeAndAuthority;
    property UserInfo: WideString read Get_UserInfo write Set_UserInfo;
    property UrlString: WideString read Get_UrlString write Set_UrlString;
    property Fragment: WideString read Get_Fragment write Set_Fragment;
    property Host: WideString read Get_Host write Set_Host;
    property Password: WideString read Get_Password write Set_Password;
    property Path: WideString read Get_Path write Set_Path;
    property Port: Integer read Get_Port write Set_Port;
    property prefix: WideString read Get_prefix write Set_prefix;
    property Query: WideString read Get_Query write Set_Query;
    property Scheme: WideString read Get_Scheme write Set_Scheme;
    property UserName: WideString read Get_UserName write Set_UserName;
    property certificateSubId: WideString read Get_certificateSubId write Set_certificateSubId;
    property UserTokenPolicyId: WideString read Get_UserTokenPolicyId write Set_UserTokenPolicyId;
  published
  end;

// *********************************************************************//
// The Class CoUAEndpointDescriptorCollection provides a Create and CreateRemote method to          
// create instances of the default interface _UAEndpointDescriptorCollection exposed by              
// the CoClass UAEndpointDescriptorCollection. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAEndpointDescriptorCollection = class
    class function Create: _UAEndpointDescriptorCollection;
    class function CreateRemote(const MachineName: string): _UAEndpointDescriptorCollection;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAEndpointDescriptorCollection
// Help String      : A collection of OPC UA endpoint descriptors.
// Default Interface: _UAEndpointDescriptorCollection
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAEndpointDescriptorCollection = class(TOleServer)
  private
    FIntf: _UAEndpointDescriptorCollection;
    function GetDefaultInterface: _UAEndpointDescriptorCollection;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_Item(index: Integer): _UAEndpointDescriptor;
    procedure _Set_Item(index: Integer; const pRetVal: _UAEndpointDescriptor);
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAEndpointDescriptorCollection);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function GetEnumerator: IEnumVARIANT;
    procedure Add(Item: OleVariant);
    procedure Clear;
    function Contains(Item: OleVariant): WordBool;
    function IndexOf(Item: OleVariant): Integer;
    procedure Insert(index: Integer; Item: OleVariant);
    function Remove(Item: OleVariant): WordBool;
    procedure RemoveAt(index: Integer);
    function Clone: OleVariant;
    property DefaultInterface: _UAEndpointDescriptorCollection read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property Item[index: Integer]: _UAEndpointDescriptor read Get_Item write _Set_Item; default;
    property Count: Integer read Get_Count;
  published
  end;

// *********************************************************************//
// The Class CoUAEndpointDescriptorUANodeIdDictionary provides a Create and CreateRemote method to          
// create instances of the default interface _UAEndpointDescriptorUANodeIdReadOnlyDictionary exposed by              
// the CoClass UAEndpointDescriptorUANodeIdDictionary. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAEndpointDescriptorUANodeIdDictionary = class
    class function Create: _UAEndpointDescriptorUANodeIdReadOnlyDictionary;
    class function CreateRemote(const MachineName: string): _UAEndpointDescriptorUANodeIdReadOnlyDictionary;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAEndpointDescriptorUANodeIdDictionary
// Help String      : This is a dictionary where the key is an OPC UA endpoint descriptor, and the value is a an OPC UA node ID.
// Default Interface: _UAEndpointDescriptorUANodeIdReadOnlyDictionary
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAEndpointDescriptorUANodeIdDictionary = class(TOleServer)
  private
    FIntf: _UAEndpointDescriptorUANodeIdReadOnlyDictionary;
    function GetDefaultInterface: _UAEndpointDescriptorUANodeIdReadOnlyDictionary;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_Item(key: OleVariant): _UANodeId;
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAEndpointDescriptorUANodeIdReadOnlyDictionary);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function GetEnumerator: IEnumVARIANT;
    function ContainsKey(key: OleVariant): WordBool;
    function TryGetValue(key: OleVariant; out value: OleVariant): WordBool;
    function ContainsValue(value: OleVariant): WordBool;
    property DefaultInterface: _UAEndpointDescriptorUANodeIdReadOnlyDictionary read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property Item[key: OleVariant]: _UANodeId read Get_Item; default;
    property Count: Integer read Get_Count;
  published
  end;

// *********************************************************************//
// The Class CoUAEventData provides a Create and CreateRemote method to          
// create instances of the default interface _UAEventData exposed by              
// the CoClass UAEventData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAEventData = class
    class function Create: _UAEventData;
    class function CreateRemote(const MachineName: string): _UAEventData;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAEventData
// Help String      : Contains event notification information.
// Default Interface: _UAEventData
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAEventData = class(TOleServer)
  private
    FIntf: _UAEventData;
    function GetDefaultInterface: _UAEventData;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_BaseEvent: _UABaseEventObject;
    function Get_FieldResults: _UAFieldResultDictionary;
    procedure _Set_FieldResults(const pRetVal: _UAFieldResultDictionary);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAEventData);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    procedure SetFieldValue(attributeField: OleVariant; value: OleVariant);
    function TryGetFieldValue(attributeField: OleVariant; out value: OleVariant): WordBool;
    property DefaultInterface: _UAEventData read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property BaseEvent: _UABaseEventObject read Get_BaseEvent;
    property FieldResults: _UAFieldResultDictionary read Get_FieldResults write _Set_FieldResults;
  published
  end;

// *********************************************************************//
// The Class CoUAEventFilter provides a Create and CreateRemote method to          
// create instances of the default interface _UAEventFilter exposed by              
// the CoClass UAEventFilter. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAEventFilter = class
    class function Create: _UAEventFilter;
    class function CreateRemote(const MachineName: string): _UAEventFilter;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAEventFilter
// Help String      : Defines the conditions under which an event notification should be reported.
// Default Interface: _UAEventFilter
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAEventFilter = class(TOleServer)
  private
    FIntf: _UAEventFilter;
    function GetDefaultInterface: _UAEventFilter;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_SelectClauses: _UAAttributeFieldCollection;
    procedure _Set_SelectClauses(const pRetVal: _UAAttributeFieldCollection);
    function Get_WhereClause: _UAContentFilterElement;
    procedure _Set_WhereClause(const pRetVal: _UAContentFilterElement);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAEventFilter);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UAEventFilter read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property SelectClauses: _UAAttributeFieldCollection read Get_SelectClauses write _Set_SelectClauses;
    property WhereClause: _UAContentFilterElement read Get_WhereClause write _Set_WhereClause;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
  published
  end;

// *********************************************************************//
// The Class CoUAExtensionObject provides a Create and CreateRemote method to          
// create instances of the default interface _UAExtensionObject exposed by              
// the CoClass UAExtensionObject. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAExtensionObject = class
    class function Create: _UAExtensionObject;
    class function CreateRemote(const MachineName: string): _UAExtensionObject;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAExtensionObject
// Help String      : An object used to wrap OPC UA complex data types.
// Default Interface: _UAExtensionObject
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAExtensionObject = class(TOleServer)
  private
    FIntf: _UAExtensionObject;
    function GetDefaultInterface: _UAExtensionObject;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_BinaryBody: OleVariant;
    procedure _Set_BinaryBody(pRetVal: OleVariant);
    function Get_Body: OleVariant;
    procedure _Set_Body(pRetVal: OleVariant);
    function Get_dataTypeEncodingId: _UANodeId;
    procedure _Set_dataTypeEncodingId(const pRetVal: _UANodeId);
    function Get_extensionObjectType: UAExtensionObjectType;
    function Get_XmlBodyText: WideString;
    procedure Set_XmlBodyText(const pRetVal: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAExtensionObject);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    procedure SetBinaryBody(var BinaryBody: PSafeArray);
    procedure SetBody(Body: OleVariant);
    property DefaultInterface: _UAExtensionObject read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property BinaryBody: OleVariant read Get_BinaryBody write _Set_BinaryBody;
    property Body: OleVariant read Get_Body write _Set_Body;
    property dataTypeEncodingId: _UANodeId read Get_dataTypeEncodingId write _Set_dataTypeEncodingId;
    property extensionObjectType: UAExtensionObjectType read Get_extensionObjectType;
    property XmlBodyText: WideString read Get_XmlBodyText write Set_XmlBodyText;
  published
  end;

// *********************************************************************//
// The Class CoUAFieldResultDictionary provides a Create and CreateRemote method to          
// create instances of the default interface _UAFieldResultDictionary exposed by              
// the CoClass UAFieldResultDictionary. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAFieldResultDictionary = class
    class function Create: _UAFieldResultDictionary;
    class function CreateRemote(const MachineName: string): _UAFieldResultDictionary;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAFieldResultDictionary
// Help String      : This is a dictionary where the key is an OPC UA attribute field, and the value is a value result of that field.
// Default Interface: _UAFieldResultDictionary
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAFieldResultDictionary = class(TOleServer)
  private
    FIntf: _UAFieldResultDictionary;
    function GetDefaultInterface: _UAFieldResultDictionary;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_Item(key: OleVariant): _ValueResult;
    procedure _Set_Item(key: OleVariant; const pRetVal: _ValueResult);
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAFieldResultDictionary);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function GetEnumerator: IEnumVARIANT;
    procedure Add(key: OleVariant; Item: OleVariant);
    procedure Clear;
    function ContainsKey(key: OleVariant): WordBool;
    function Remove(key: OleVariant): WordBool;
    function TryGetValue(key: OleVariant; out value: OleVariant): WordBool;
    function ContainsValue(value: OleVariant): WordBool;
    property DefaultInterface: _UAFieldResultDictionary read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property Item[key: OleVariant]: _ValueResult read Get_Item write _Set_Item; default;
    property Count: Integer read Get_Count;
  published
  end;

// *********************************************************************//
// The Class CoUAIndexRange provides a Create and CreateRemote method to          
// create instances of the default interface _UAIndexRange exposed by              
// the CoClass UAIndexRange. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAIndexRange = class
    class function Create: _UAIndexRange;
    class function CreateRemote(const MachineName: string): _UAIndexRange;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAIndexRange
// Help String      : An index range. Determines a continuous span of elements for a single dimension of an array.
// Default Interface: _UAIndexRange
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAIndexRange = class(TOleServer)
  private
    FIntf: _UAIndexRange;
    function GetDefaultInterface: _UAIndexRange;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_IsSingle: WordBool;
    function Get_Maximum: Integer;
    procedure Set_Maximum(pRetVal: Integer);
    function Get_Minimum: Integer;
    procedure Set_Minimum(pRetVal: Integer);
    function Get_Span: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAIndexRange);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    procedure SetRange(Minimum: Integer; Maximum: Integer);
    property DefaultInterface: _UAIndexRange read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property IsSingle: WordBool read Get_IsSingle;
    property Span: Integer read Get_Span;
    property Maximum: Integer read Get_Maximum write Set_Maximum;
    property Minimum: Integer read Get_Minimum write Set_Minimum;
  published
  end;

// *********************************************************************//
// The Class CoUAIndexRangeList provides a Create and CreateRemote method to          
// create instances of the default interface _UAIndexRangeList exposed by              
// the CoClass UAIndexRangeList. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAIndexRangeList = class
    class function Create: _UAIndexRangeList;
    class function CreateRemote(const MachineName: string): _UAIndexRangeList;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAIndexRangeList
// Help String      : List of index ranges. Can be used to identify the whole array, a single element of a structure or an array, or a single range of indexes for arrays.
// Default Interface: _UAIndexRangeList
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAIndexRangeList = class(TOleServer)
  private
    FIntf: _UAIndexRangeList;
    function GetDefaultInterface: _UAIndexRangeList;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_Item(index: Integer): _UAIndexRange;
    procedure _Set_Item(index: Integer; const pRetVal: _UAIndexRange);
    function Get_Count: Integer;
    function Get_ArrayLength: Integer;
    function Get_AsString: WideString;
    function Get_LongArrayLength: Int64;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAIndexRangeList);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function GetEnumerator: IEnumVARIANT;
    procedure Add(Item: OleVariant);
    procedure Clear;
    function Contains(Item: OleVariant): WordBool;
    function IndexOf(Item: OleVariant): Integer;
    procedure Insert(index: Integer; Item: OleVariant);
    function Remove(Item: OleVariant): WordBool;
    procedure RemoveAt(index: Integer);
    function Clone: OleVariant;
    property DefaultInterface: _UAIndexRangeList read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property Item[index: Integer]: _UAIndexRange read Get_Item write _Set_Item; default;
    property Count: Integer read Get_Count;
    property ArrayLength: Integer read Get_ArrayLength;
    property AsString: WideString read Get_AsString;
    property LongArrayLength: Int64 read Get_LongArrayLength;
  published
  end;

// *********************************************************************//
// The Class CoUAKeyValueDictionary provides a Create and CreateRemote method to          
// create instances of the default interface _UAKeyValueDictionary exposed by              
// the CoClass UAKeyValueDictionary. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAKeyValueDictionary = class
    class function Create: _UAKeyValueDictionary;
    class function CreateRemote(const MachineName: string): _UAKeyValueDictionary;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAKeyValueDictionary
// Help String      : A dictionary where the key is an OPC UA qualified name, and the value can be any value valid in OPC UA.
// Default Interface: _UAKeyValueDictionary
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAKeyValueDictionary = class(TOleServer)
  private
    FIntf: _UAKeyValueDictionary;
    function GetDefaultInterface: _UAKeyValueDictionary;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_Item(key: OleVariant): OleVariant;
    procedure _Set_Item(key: OleVariant; pRetVal: OleVariant);
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAKeyValueDictionary);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function GetEnumerator: IEnumVARIANT;
    procedure Add(key: OleVariant; Item: OleVariant);
    procedure Clear;
    function ContainsKey(key: OleVariant): WordBool;
    function Remove(key: OleVariant): WordBool;
    function TryGetValue(key: OleVariant; out value: OleVariant): WordBool;
    function Clone: OleVariant;
    function ContainsValue(value: OleVariant): WordBool;
    property DefaultInterface: _UAKeyValueDictionary read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property Item[key: OleVariant]: OleVariant read Get_Item write _Set_Item; default;
    property Count: Integer read Get_Count;
  published
  end;

// *********************************************************************//
// The Class CoUAKeyValuePair provides a Create and CreateRemote method to          
// create instances of the default interface _UAKeyValuePair exposed by              
// the CoClass UAKeyValuePair. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAKeyValuePair = class
    class function Create: _UAKeyValuePair;
    class function CreateRemote(const MachineName: string): _UAKeyValuePair;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAKeyValuePair
// Help String      : Provides an OPC UA key value pair.
// Default Interface: _UAKeyValuePair
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAKeyValuePair = class(TOleServer)
  private
    FIntf: _UAKeyValuePair;
    function GetDefaultInterface: _UAKeyValuePair;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_key: _UAQualifiedName;
    procedure _Set_key(const pRetVal: _UAQualifiedName);
    function Get_value: OleVariant;
    procedure _Set_value(pRetVal: OleVariant);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAKeyValuePair);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    procedure SetValue(value: OleVariant);
    property DefaultInterface: _UAKeyValuePair read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property key: _UAQualifiedName read Get_key write _Set_key;
    property value: OleVariant read Get_value write _Set_value;
  published
  end;

// *********************************************************************//
// The Class CoUAMonitoringParameters provides a Create and CreateRemote method to          
// create instances of the default interface _UAMonitoringParameters exposed by              
// the CoClass UAMonitoringParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAMonitoringParameters = class
    class function Create: _UAMonitoringParameters;
    class function CreateRemote(const MachineName: string): _UAMonitoringParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAMonitoringParameters
// Help String      : Contains monitoring parameters (such as the sampling interval, and optional data change or event filter).
// Default Interface: _UAMonitoringParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAMonitoringParameters = class(TOleServer)
  private
    FIntf: _UAMonitoringParameters;
    function GetDefaultInterface: _UAMonitoringParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_DataChangeFilter: _UADataChangeFilter;
    procedure _Set_DataChangeFilter(const pRetVal: _UADataChangeFilter);
    function Get_DiscardOldest: WordBool;
    procedure Set_DiscardOldest(pRetVal: WordBool);
    function Get_encodingName: _UAQualifiedName;
    procedure _Set_encodingName(const pRetVal: _UAQualifiedName);
    function Get_EventFilter: _UAEventFilter;
    procedure _Set_EventFilter(const pRetVal: _UAEventFilter);
    function Get_Filter: OleVariant;
    procedure _Set_Filter(pRetVal: OleVariant);
    function Get_QueueSize: Integer;
    procedure Set_QueueSize(pRetVal: Integer);
    function Get_samplingInterval: Integer;
    procedure Set_samplingInterval(pRetVal: Integer);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAMonitoringParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    procedure SetFilter(Filter: OleVariant);
    property DefaultInterface: _UAMonitoringParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DataChangeFilter: _UADataChangeFilter read Get_DataChangeFilter write _Set_DataChangeFilter;
    property encodingName: _UAQualifiedName read Get_encodingName write _Set_encodingName;
    property EventFilter: _UAEventFilter read Get_EventFilter write _Set_EventFilter;
    property Filter: OleVariant read Get_Filter write _Set_Filter;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property DiscardOldest: WordBool read Get_DiscardOldest write Set_DiscardOldest;
    property QueueSize: Integer read Get_QueueSize write Set_QueueSize;
    property samplingInterval: Integer read Get_samplingInterval write Set_samplingInterval;
  published
  end;

// *********************************************************************//
// The Class CoUANodeDescriptor provides a Create and CreateRemote method to          
// create instances of the default interface _UANodeDescriptor exposed by              
// the CoClass UANodeDescriptor. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUANodeDescriptor = class
    class function Create: _UANodeDescriptor;
    class function CreateRemote(const MachineName: string): _UANodeDescriptor;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUANodeDescriptor
// Help String      : Contains information necessary to identify a node in OPC address space.
// Default Interface: _UANodeDescriptor
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUANodeDescriptor = class(TOleServer)
  private
    FIntf: _UANodeDescriptor;
    function GetDefaultInterface: _UANodeDescriptor;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_AliasName: WideString;
    procedure Set_AliasName(const pRetVal: WideString);
    function Get_IsAliased: WordBool;
    function Get_ArgumentString: WideString;
    function Get_browsePath: _UABrowsePath;
    procedure _Set_browsePath(const pRetVal: _UABrowsePath);
    function Get_HasBrowsePath: WordBool;
    function Get_HasNodeId: WordBool;
    function Get_IsNull: WordBool;
    function Get_NodeId: _UANodeId;
    procedure _Set_NodeId(const pRetVal: _UANodeId);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UANodeDescriptor);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function Flatten: _UANodeDescriptor;
    function Match(other: OleVariant): WordBool;
    property DefaultInterface: _UANodeDescriptor read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property IsAliased: WordBool read Get_IsAliased;
    property ArgumentString: WideString read Get_ArgumentString;
    property browsePath: _UABrowsePath read Get_browsePath write _Set_browsePath;
    property HasBrowsePath: WordBool read Get_HasBrowsePath;
    property HasNodeId: WordBool read Get_HasNodeId;
    property IsNull: WordBool read Get_IsNull;
    property NodeId: _UANodeId read Get_NodeId write _Set_NodeId;
    property AliasName: WideString read Get_AliasName write Set_AliasName;
  published
  end;

// *********************************************************************//
// The Class CoUANodeIdUAApplicationElementDictionary provides a Create and CreateRemote method to          
// create instances of the default interface _UANodeIdUAApplicationElementReadOnlyDictionary exposed by              
// the CoClass UANodeIdUAApplicationElementDictionary. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUANodeIdUAApplicationElementDictionary = class
    class function Create: _UANodeIdUAApplicationElementReadOnlyDictionary;
    class function CreateRemote(const MachineName: string): _UANodeIdUAApplicationElementReadOnlyDictionary;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUANodeIdUAApplicationElementDictionary
// Help String      : This is a dictionary where the key is an OPC UA node ID, and the value is a an OPC UA application element.
// Default Interface: _UANodeIdUAApplicationElementReadOnlyDictionary
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUANodeIdUAApplicationElementDictionary = class(TOleServer)
  private
    FIntf: _UANodeIdUAApplicationElementReadOnlyDictionary;
    function GetDefaultInterface: _UANodeIdUAApplicationElementReadOnlyDictionary;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_Item(key: OleVariant): _UAApplicationElement;
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UANodeIdUAApplicationElementReadOnlyDictionary);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function GetEnumerator: IEnumVARIANT;
    function ContainsKey(key: OleVariant): WordBool;
    function TryGetValue(key: OleVariant; out value: OleVariant): WordBool;
    function ContainsValue(value: OleVariant): WordBool;
    property DefaultInterface: _UANodeIdUAApplicationElementReadOnlyDictionary read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property Item[key: OleVariant]: _UAApplicationElement read Get_Item; default;
    property Count: Integer read Get_Count;
  published
  end;

// *********************************************************************//
// The Class CoUAReadParameters provides a Create and CreateRemote method to          
// create instances of the default interface _UAReadParameters exposed by              
// the CoClass UAReadParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAReadParameters = class
    class function Create: _UAReadParameters;
    class function CreateRemote(const MachineName: string): _UAReadParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAReadParameters
// Help String      : Contains parameters for OPC-UA read operations, such as the maximum age of the value.
// Default Interface: _UAReadParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAReadParameters = class(TOleServer)
  private
    FIntf: _UAReadParameters;
    function GetDefaultInterface: _UAReadParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_encodingName: _UAQualifiedName;
    procedure _Set_encodingName(const pRetVal: _UAQualifiedName);
    function Get_MaximumAge: Double;
    procedure Set_MaximumAge(pRetVal: Double);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAReadParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UAReadParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property encodingName: _UAQualifiedName read Get_encodingName write _Set_encodingName;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property MaximumAge: Double read Get_MaximumAge write Set_MaximumAge;
  published
  end;

// *********************************************************************//
// The Class CoUAMethodOutputException provides a Create and CreateRemote method to          
// create instances of the default interface _UAMethodOutputException exposed by              
// the CoClass UAMethodOutputException. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAMethodOutputException = class
    class function Create: _UAMethodOutputException;
    class function CreateRemote(const MachineName: string): _UAMethodOutputException;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAMethodOutputException
// Help String      : The exception that is thrown when an OPC UA method result (output argument) is not valid.
// Default Interface: _UAMethodOutputException
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TUAMethodOutputException = class(TOleServer)
  private
    FIntf: _UAMethodOutputException;
    function GetDefaultInterface: _UAMethodOutputException;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_Message: WideString;
    function Get_StackTrace: WideString;
    function Get_HelpLink: WideString;
    procedure Set_HelpLink(const pRetVal: WideString);
    function Get_Source: WideString;
    procedure Set_Source(const pRetVal: WideString);
    function Get_InnerException: _Exception;
    function Get_TargetSite: _MethodBase;
    function Get_Data: _Dictionary;
    function Get_HResult: Integer;
    function Get_MethodNodeId: _UANodeId;
    function Get_ArgumentIndex: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAMethodOutputException);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function GetBaseException: _Exception;
    procedure GetObjectData(const info: _SerializationInfo; context: StreamingContext);
    property DefaultInterface: _UAMethodOutputException read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Message: WideString read Get_Message;
    property StackTrace: WideString read Get_StackTrace;
    property InnerException: _Exception read Get_InnerException;
    property TargetSite: _MethodBase read Get_TargetSite;
    property Data: _Dictionary read Get_Data;
    property HResult: Integer read Get_HResult;
    property MethodNodeId: _UANodeId read Get_MethodNodeId;
    property ArgumentIndex: Integer read Get_ArgumentIndex;
    property HelpLink: WideString read Get_HelpLink write Set_HelpLink;
    property Source: WideString read Get_Source write Set_Source;
  published
  end;

// *********************************************************************//
// The Class CoUACallServiceException provides a Create and CreateRemote method to          
// create instances of the default interface _UACallServiceException exposed by              
// the CoClass UACallServiceException. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUACallServiceException = class
    class function Create: _UACallServiceException;
    class function CreateRemote(const MachineName: string): _UACallServiceException;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUACallServiceException
// Help String      : An exception thrown when a UA defined error occurs in the Call operation.
// Default Interface: _UACallServiceException
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TUACallServiceException = class(TOleServer)
  private
    FIntf: _UACallServiceException;
    function GetDefaultInterface: _UACallServiceException;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_Message: WideString;
    function Get_StackTrace: WideString;
    function Get_HelpLink: WideString;
    procedure Set_HelpLink(const pRetVal: WideString);
    function Get_Source: WideString;
    procedure Set_Source(const pRetVal: WideString);
    function Get_InnerException: _Exception;
    function Get_TargetSite: _MethodBase;
    function Get_Data: _Dictionary;
    function Get_HResult: Integer;
    function Get_ErrorId: WideString;
    function Get_InternalCode: Integer;
    function Get_ServiceResult: _UAServiceResult;
    function Get_ServiceTargetSite: _MethodBase;
    function Get_InputArgumentExceptionArray: PSafeArray;
    procedure Set_InputArgumentExceptionArray(pRetVal: PSafeArray);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UACallServiceException);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function GetBaseException: _Exception;
    procedure GetObjectData(const info: _SerializationInfo; context: StreamingContext);
    procedure SetInputArgumentExceptionArray(InputArgumentExceptionArray: OleVariant);
    property DefaultInterface: _UACallServiceException read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Message: WideString read Get_Message;
    property StackTrace: WideString read Get_StackTrace;
    property InnerException: _Exception read Get_InnerException;
    property TargetSite: _MethodBase read Get_TargetSite;
    property Data: _Dictionary read Get_Data;
    property HResult: Integer read Get_HResult;
    property ErrorId: WideString read Get_ErrorId;
    property InternalCode: Integer read Get_InternalCode;
    property ServiceResult: _UAServiceResult read Get_ServiceResult;
    property ServiceTargetSite: _MethodBase read Get_ServiceTargetSite;
    property HelpLink: WideString read Get_HelpLink write Set_HelpLink;
    property Source: WideString read Get_Source write Set_Source;
    property InputArgumentExceptionArray: PSafeArray read Get_InputArgumentExceptionArray write Set_InputArgumentExceptionArray;
  published
  end;

// *********************************************************************//
// The Class CoUAServiceResult provides a Create and CreateRemote method to          
// create instances of the default interface _UAServiceResult exposed by              
// the CoClass UAServiceResult. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAServiceResult = class
    class function Create: _UAServiceResult;
    class function CreateRemote(const MachineName: string): _UAServiceResult;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAServiceResult
// Help String      : The service result combines the status code and diagnostic information.
// Default Interface: _UAServiceResult
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAServiceResult = class(TOleServer)
  private
    FIntf: _UAServiceResult;
    function GetDefaultInterface: _UAServiceResult;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_AdditionalInfo: WideString;
    procedure Set_AdditionalInfo(const pRetVal: WideString);
    function Get_Description: WideString;
    procedure Set_Description(const pRetVal: WideString);
    function Get_InnerResult: _UAServiceResult;
    procedure _Set_InnerResult(const pRetVal: _UAServiceResult);
    function Get_Message: WideString;
    function Get_QualifiedSymbolicId: _UAQualifiedName;
    procedure _Set_QualifiedSymbolicId(const pRetVal: _UAQualifiedName);
    function Get_Text: WideString;
    function Get_StatusCode: _UAStatusCode;
    procedure _Set_StatusCode(const pRetVal: _UAStatusCode);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAServiceResult);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function ToUACodeBits: UACodeBits;
    property DefaultInterface: _UAServiceResult read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property InnerResult: _UAServiceResult read Get_InnerResult write _Set_InnerResult;
    property Message: WideString read Get_Message;
    property QualifiedSymbolicId: _UAQualifiedName read Get_QualifiedSymbolicId write _Set_QualifiedSymbolicId;
    property Text: WideString read Get_Text;
    property StatusCode: _UAStatusCode read Get_StatusCode write _Set_StatusCode;
    property AdditionalInfo: WideString read Get_AdditionalInfo write Set_AdditionalInfo;
    property Description: WideString read Get_Description write Set_Description;
  published
  end;

// *********************************************************************//
// The Class CoUAStatusCode provides a Create and CreateRemote method to          
// create instances of the default interface _UAStatusCode exposed by              
// the CoClass UAStatusCode. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAStatusCode = class
    class function Create: _UAStatusCode;
    class function CreateRemote(const MachineName: string): _UAStatusCode;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAStatusCode
// Help String      : A status code that describes the result of a service or operation.
// Default Interface: _UAStatusCode
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAStatusCode = class(TOleServer)
  private
    FIntf: _UAStatusCode;
    function GetDefaultInterface: _UAStatusCode;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_ToString_2(const format: WideString; const formatProvider: IFormatProvider): WideString;
    function Get_ToString_3(const format: WideString): WideString;
    function Get_CodeBits: UACodeBits;
    procedure Set_CodeBits(pRetVal: UACodeBits);
    function Get_CodeBitsSymbol: WideString;
    procedure Set_CodeBitsSymbol(const pRetVal: WideString);
    function Get_Condition: Smallint;
    procedure Set_Condition(pRetVal: Smallint);
    function Get_Description: WideString;
    function Get_FlagBits: Integer;
    procedure Set_FlagBits(pRetVal: Integer);
    function Get_HasDataValueInfo: WordBool;
    function Get_InfoType: UAInfoType;
    procedure Set_InfoType(pRetVal: UAInfoType);
    function Get_InternalValue: Integer;
    procedure Set_InternalValue(pRetVal: Integer);
    function Get_IsBad: WordBool;
    function Get_IsGood: WordBool;
    function Get_IsUncertain: WordBool;
    function Get_LimitInfo: UALimitInfo;
    procedure Set_LimitInfo(pRetVal: UALimitInfo);
    function Get_Overflow: WordBool;
    procedure Set_Overflow(pRetVal: WordBool);
    function Get_Severity: UASeverity;
    procedure Set_Severity(pRetVal: UASeverity);
    function Get_SemanticsChanged: WordBool;
    procedure Set_SemanticsChanged(pRetVal: WordBool);
    function Get_StatusInfo: StatusInfo;
    function Get_StructureChanged: WordBool;
    procedure Set_StructureChanged(pRetVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAStatusCode);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function ToInt64: Int64;
    property DefaultInterface: _UAStatusCode read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property ToString_2[const format: WideString; const formatProvider: IFormatProvider]: WideString read Get_ToString_2;
    property ToString_3[const format: WideString]: WideString read Get_ToString_3;
    property Description: WideString read Get_Description;
    property HasDataValueInfo: WordBool read Get_HasDataValueInfo;
    property IsBad: WordBool read Get_IsBad;
    property IsGood: WordBool read Get_IsGood;
    property IsUncertain: WordBool read Get_IsUncertain;
    property StatusInfo: StatusInfo read Get_StatusInfo;
    property CodeBits: UACodeBits read Get_CodeBits write Set_CodeBits;
    property CodeBitsSymbol: WideString read Get_CodeBitsSymbol write Set_CodeBitsSymbol;
    property Condition: Smallint read Get_Condition write Set_Condition;
    property FlagBits: Integer read Get_FlagBits write Set_FlagBits;
    property InfoType: UAInfoType read Get_InfoType write Set_InfoType;
    property InternalValue: Integer read Get_InternalValue write Set_InternalValue;
    property LimitInfo: UALimitInfo read Get_LimitInfo write Set_LimitInfo;
    property Overflow: WordBool read Get_Overflow write Set_Overflow;
    property Severity: UASeverity read Get_Severity write Set_Severity;
    property SemanticsChanged: WordBool read Get_SemanticsChanged write Set_SemanticsChanged;
    property StructureChanged: WordBool read Get_StructureChanged write Set_StructureChanged;
  published
  end;

// *********************************************************************//
// The Class CoUAStatusCodeException provides a Create and CreateRemote method to          
// create instances of the default interface _UAStatusCodeException exposed by              
// the CoClass UAStatusCodeException. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAStatusCodeException = class
    class function Create: _UAStatusCodeException;
    class function CreateRemote(const MachineName: string): _UAStatusCodeException;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAStatusCodeException
// Help String      : An exception generated when the OPC-UA status code is not as expected.
// Default Interface: _UAStatusCodeException
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAStatusCodeException = class(TOleServer)
  private
    FIntf: _UAStatusCodeException;
    function GetDefaultInterface: _UAStatusCodeException;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_Message: WideString;
    function Get_StackTrace: WideString;
    function Get_HelpLink: WideString;
    procedure Set_HelpLink(const pRetVal: WideString);
    function Get_Source: WideString;
    procedure Set_Source(const pRetVal: WideString);
    function Get_InnerException: _Exception;
    function Get_TargetSite: _MethodBase;
    function Get_Data: _Dictionary;
    function Get_HResult: Integer;
    function Get_ErrorId: WideString;
    function Get_StatusCode: _UAStatusCode;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAStatusCodeException);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function GetBaseException: _Exception;
    procedure GetObjectData(const info: _SerializationInfo; context: StreamingContext);
    property DefaultInterface: _UAStatusCodeException read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Message: WideString read Get_Message;
    property StackTrace: WideString read Get_StackTrace;
    property InnerException: _Exception read Get_InnerException;
    property TargetSite: _MethodBase read Get_TargetSite;
    property Data: _Dictionary read Get_Data;
    property HResult: Integer read Get_HResult;
    property ErrorId: WideString read Get_ErrorId;
    property StatusCode: _UAStatusCode read Get_StatusCode;
    property HelpLink: WideString read Get_HelpLink write Set_HelpLink;
    property Source: WideString read Get_Source write Set_Source;
  published
  end;

// *********************************************************************//
// The Class CoUASubscriptionParameters provides a Create and CreateRemote method to          
// create instances of the default interface _UASubscriptionParameters exposed by              
// the CoClass UASubscriptionParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUASubscriptionParameters = class
    class function Create: _UASubscriptionParameters;
    class function CreateRemote(const MachineName: string): _UASubscriptionParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUASubscriptionParameters
// Help String      : Contains subscription parameters (such as the publishing interval).
// Default Interface: _UASubscriptionParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUASubscriptionParameters = class(TOleServer)
  private
    FIntf: _UASubscriptionParameters;
    function GetDefaultInterface: _UASubscriptionParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_Priority: Byte;
    procedure Set_Priority(pRetVal: Byte);
    function Get_PublishingInterval: Integer;
    procedure Set_PublishingInterval(pRetVal: Integer);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UASubscriptionParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UASubscriptionParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property Priority: Byte read Get_Priority write Set_Priority;
    property PublishingInterval: Integer read Get_PublishingInterval write Set_PublishingInterval;
  published
  end;

// *********************************************************************//
// The Class CoUATimeZoneData provides a Create and CreateRemote method to          
// create instances of the default interface _UATimeZoneData exposed by              
// the CoClass UATimeZoneData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUATimeZoneData = class
    class function Create: _UATimeZoneData;
    class function CreateRemote(const MachineName: string): _UATimeZoneData;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUATimeZoneData
// Help String      : Defines the local time that may or may not take daylight saving time into account.
// Default Interface: _UATimeZoneData
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUATimeZoneData = class(TOleServer)
  private
    FIntf: _UATimeZoneData;
    function GetDefaultInterface: _UATimeZoneData;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_DaylightSavingInOffset: WordBool;
    procedure Set_DaylightSavingInOffset(pRetVal: WordBool);
    function Get_Offset: Smallint;
    procedure Set_Offset(pRetVal: Smallint);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UATimeZoneData);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UATimeZoneData read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DaylightSavingInOffset: WordBool read Get_DaylightSavingInOffset write Set_DaylightSavingInOffset;
    property Offset: Smallint read Get_Offset write Set_Offset;
  published
  end;

// *********************************************************************//
// The Class CoUAComplexDataParameters provides a Create and CreateRemote method to          
// create instances of the default interface _UAComplexDataParameters exposed by              
// the CoClass UAComplexDataParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAComplexDataParameters = class
    class function Create: _UAComplexDataParameters;
    class function CreateRemote(const MachineName: string): _UAComplexDataParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAComplexDataParameters
// Help String      : Contains parameters for OPC UA Complex Data client.
// Default Interface: _UAComplexDataParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAComplexDataParameters = class(TOleServer)
  private
    FIntf: _UAComplexDataParameters;
    function GetDefaultInterface: _UAComplexDataParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_TryResolveMissingDataTypeEncodingIds: WordBool;
    procedure Set_TryResolveMissingDataTypeEncodingIds(pRetVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAComplexDataParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UAComplexDataParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property TryResolveMissingDataTypeEncodingIds: WordBool read Get_TryResolveMissingDataTypeEncodingIds write Set_TryResolveMissingDataTypeEncodingIds;
  published
  end;

// *********************************************************************//
// The Class CoUAComplexDataClientPluginParameters provides a Create and CreateRemote method to          
// create instances of the default interface _UAComplexDataClientPluginParameters exposed by              
// the CoClass UAComplexDataClientPluginParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAComplexDataClientPluginParameters = class
    class function Create: _UAComplexDataClientPluginParameters;
    class function CreateRemote(const MachineName: string): _UAComplexDataClientPluginParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAComplexDataClientPluginParameters
// Help String      : Contains parameters for OPC UA Complex Data Client plug-in.
// Default Interface: _UAComplexDataClientPluginParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAComplexDataClientPluginParameters = class(TOleServer)
  private
    FIntf: _UAComplexDataClientPluginParameters;
    function GetDefaultInterface: _UAComplexDataClientPluginParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_TryResolveMissingDataTypeEncodingIds: WordBool;
    procedure Set_TryResolveMissingDataTypeEncodingIds(pRetVal: WordBool);
    function Get_IsolatedDataTypeModelProvider: WordBool;
    procedure Set_IsolatedDataTypeModelProvider(pRetVal: WordBool);
    function Get_ThisClientForProviderOperations: WordBool;
    procedure Set_ThisClientForProviderOperations(pRetVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAComplexDataClientPluginParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UAComplexDataClientPluginParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property TryResolveMissingDataTypeEncodingIds: WordBool read Get_TryResolveMissingDataTypeEncodingIds write Set_TryResolveMissingDataTypeEncodingIds;
    property IsolatedDataTypeModelProvider: WordBool read Get_IsolatedDataTypeModelProvider write Set_IsolatedDataTypeModelProvider;
    property ThisClientForProviderOperations: WordBool read Get_ThisClientForProviderOperations write Set_ThisClientForProviderOperations;
  published
  end;

// *********************************************************************//
// The Class CoUAGenericObject provides a Create and CreateRemote method to          
// create instances of the default interface _UAGenericObject exposed by              
// the CoClass UAGenericObject. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAGenericObject = class
    class function Create: _UAGenericObject;
    class function CreateRemote(const MachineName: string): _UAGenericObject;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAGenericObject
// Help String      : A generic object, used to hold OPC UA complex data.
// Default Interface: _UAGenericObject
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAGenericObject = class(TOleServer)
  private
    FIntf: _UAGenericObject;
    function GetDefaultInterface: _UAGenericObject;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_DataTypeId: _UAModelNodeDescriptor;
    procedure _Set_DataTypeId(const pRetVal: _UAModelNodeDescriptor);
    function Get_genericData: _GenericData;
    procedure _Set_genericData(const pRetVal: _GenericData);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAGenericObject);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UAGenericObject read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DataTypeId: _UAModelNodeDescriptor read Get_DataTypeId write _Set_DataTypeId;
    property genericData: _GenericData read Get_genericData write _Set_genericData;
  published
  end;

// *********************************************************************//
// The Class CoUANodeBrowseFilter provides a Create and CreateRemote method to          
// create instances of the default interface _UANodeBrowseFilter exposed by              
// the CoClass UANodeBrowseFilter. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUANodeBrowseFilter = class
    class function Create: _UANodeBrowseFilter;
    class function CreateRemote(const MachineName: string): _UANodeBrowseFilter;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUANodeBrowseFilter
// Help String      : Filter for OPC-UA node browsing.
// Default Interface: _UANodeBrowseFilter
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUANodeBrowseFilter = class(TOleServer)
  private
    FIntf: _UANodeBrowseFilter;
    function GetDefaultInterface: _UANodeBrowseFilter;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_IncludeProperties: WordBool;
    procedure Set_IncludeProperties(pRetVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UANodeBrowseFilter);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UANodeBrowseFilter read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property IncludeProperties: WordBool read Get_IncludeProperties write Set_IncludeProperties;
  published
  end;

// *********************************************************************//
// The Class CoAbstractEasyUAClientServerApplication provides a Create and CreateRemote method to          
// create instances of the default interface _EasyUAClientServerApplication exposed by              
// the CoClass AbstractEasyUAClientServerApplication. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAbstractEasyUAClientServerApplication = class
    class function Create: _EasyUAClientServerApplication;
    class function CreateRemote(const MachineName: string): _EasyUAClientServerApplication;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TAbstractEasyUAClientServerApplication
// Help String      : An abstract implementation of OPC UA client/server application.
// Default Interface: _EasyUAClientServerApplication
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TAbstractEasyUAClientServerApplication = class(TOleServer)
  private
    FIntf: _EasyUAClientServerApplication;
    function GetDefaultInterface: _EasyUAClientServerApplication;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_ApplicationIdDictionary: _StringUANodeIdReadOnlyDictionary;
    function Get_ApplicationStoreGroup: IUnknown;
    function Get_CertificateGenerationParameters: _CertificateGenerationParameters;
    function Get_CertificateRequestParameters: _UACertificateRequestParameters;
    function Get_HostNames: _StringCollection;
    function Get_SupportsGds: WordBool;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _EasyUAClientServerApplication);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function AssureOwnCertificate(createOwnCertificateArguments: OleVariant): WordBool;
    procedure CreateOwnCertificate(createOwnCertificateArguments: OleVariant);
    procedure ExportApplicationConfiguration(const stream: _Stream);
    procedure ExportApplicationConfigurationToFile(const filePath: WideString);
    procedure ExportOwnCertificateToFile(exportCertificateArguments: OleVariant);
    procedure ExportRegisteredApplication(const stream: _Stream);
    procedure ExportRegisteredApplicationToFile(const filePath: WideString);
    procedure ExportSecuredApplication(const stream: _Stream);
    procedure ExportSecuredApplicationToFile(const filePath: WideString);
    function FindGdsRegistrations(gdsEndpointDescriptor: OleVariant): _UANodeIdUAApplicationElementReadOnlyDictionary;
    function FindOwnCertificate(const certificateSubId: WideString): _PkiCertificate;
    function GetApplicationElement: _UAApplicationElement;
    function GetApplicationId(gdsEndpointDescriptor: OleVariant): _UANodeId;
    function GetCertificateSubjectName(const certificateSubId: WideString): WideString;
    function GetCertificateSubjectNameDictionary: _StringStringDictionary;
    function GetEffectiveApplicationManifest: _UAApplicationManifest;
    function GetEffectiveHostNames(alternateHostNames: OleVariant): _StringCollection;
    function GetPrivateKeyPasswordStrength(const certificateSubId: WideString): Single;
    function HasOwnCertificate(const certificateSubId: WideString): WordBool;
    function HasPrivateKeyPassword(const certificateSubId: WideString): WordBool;
    procedure ImportOwnCertificateFromFile(importCertificateArguments: OleVariant);
    function ListCertificateSubIds: _StringSet;
    function ListCertificateTypeElements(gdsEndpointDescriptor: OleVariant; 
                                         applicationStoreKind: PkiApplicationStoreKind): _UACertificateTypeElementCollection;
    function ObtainNewCertificate(Arguments: OleVariant): _PkiCertificate;
    function ProtectOrUnprotectOwnCertificate(const certificateSubId: WideString; 
                                              const newPrivateKeyPassword: WideString): WordBool;
    procedure ProtectOwnCertificate(const newPrivateKeyPassword: WideString);
    function RefreshTrustLists(gdsEndpointDescriptor: OleVariant; updateGdsRegistration: WordBool): UATrustListMasks;
    function RegisterToGds(gdsEndpointDescriptor: OleVariant): _UANodeId;
    function RemoveOwnCertificates(const certificateSubIdPattern: WideString; mustExist: WordBool; 
                                   updateTrustedPeerCertificates: WordBool): Integer;
    procedure RemovePrivateKeyPassword(const certificateSubId: WideString);
    procedure SetPrivateKeyPassword(const certificateSubId: WideString; 
                                    const privateKeyPassword: WideString);
    procedure UnprotectOwnCertificate;
    procedure UnregisterFromGds(gdsEndpointDescriptor: OleVariant);
    function updateGdsRegistration(gdsEndpointDescriptor: OleVariant): _UANodeId;
    procedure ValidateOwnCertificate(certificateGenerationArguments: OleVariant);
    property DefaultInterface: _EasyUAClientServerApplication read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property ApplicationIdDictionary: _StringUANodeIdReadOnlyDictionary read Get_ApplicationIdDictionary;
    property ApplicationStoreGroup: IUnknown read Get_ApplicationStoreGroup;
    property CertificateGenerationParameters: _CertificateGenerationParameters read Get_CertificateGenerationParameters;
    property CertificateRequestParameters: _UACertificateRequestParameters read Get_CertificateRequestParameters;
    property HostNames: _StringCollection read Get_HostNames;
    property SupportsGds: WordBool read Get_SupportsGds;
  published
  end;

// *********************************************************************//
// The Class CoUACertificateArguments provides a Create and CreateRemote method to          
// create instances of the default interface _UACertificateArguments exposed by              
// the CoClass UACertificateArguments. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUACertificateArguments = class
    class function Create: _UACertificateArguments;
    class function CreateRemote(const MachineName: string): _UACertificateArguments;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUACertificateArguments
// Help String      : Contains arguments for OPC UA application certificate-related operations.
// Default Interface: _UACertificateArguments
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUACertificateArguments = class(TOleServer)
  private
    FIntf: _UACertificateArguments;
    function GetDefaultInterface: _UACertificateArguments;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_State: OleVariant;
    procedure _Set_State(pRetVal: OleVariant);
    function Get_certificateSubId: WideString;
    procedure Set_certificateSubId(const pRetVal: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UACertificateArguments);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function MemberwiseClone: _OperationArguments;
    procedure SetState(State: OleVariant);
    property DefaultInterface: _UACertificateArguments read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property State: OleVariant read Get_State write _Set_State;
    property certificateSubId: WideString read Get_certificateSubId write Set_certificateSubId;
  published
  end;

// *********************************************************************//
// The Class CoUAIngestCertificateArguments provides a Create and CreateRemote method to          
// create instances of the default interface _UAIngestCertificateArguments exposed by              
// the CoClass UAIngestCertificateArguments. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAIngestCertificateArguments = class
    class function Create: _UAIngestCertificateArguments;
    class function CreateRemote(const MachineName: string): _UAIngestCertificateArguments;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAIngestCertificateArguments
// Help String      : Contains arguments for ingesting a new application certificate.
// Default Interface: _UAIngestCertificateArguments
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAIngestCertificateArguments = class(TOleServer)
  private
    FIntf: _UAIngestCertificateArguments;
    function GetDefaultInterface: _UAIngestCertificateArguments;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_State: OleVariant;
    procedure _Set_State(pRetVal: OleVariant);
    function Get_certificateSubId: WideString;
    procedure Set_certificateSubId(const pRetVal: WideString);
    function Get_newPrivateKeyPassword: WideString;
    procedure Set_newPrivateKeyPassword(const pRetVal: WideString);
    function Get_SetNewPassword: WordBool;
    procedure Set_SetNewPassword(pRetVal: WordBool);
    function Get_updateTrustedPeerCertificates: WordBool;
    procedure Set_updateTrustedPeerCertificates(pRetVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAIngestCertificateArguments);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function MemberwiseClone: _OperationArguments;
    procedure SetState(State: OleVariant);
    property DefaultInterface: _UAIngestCertificateArguments read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property State: OleVariant read Get_State write _Set_State;
    property certificateSubId: WideString read Get_certificateSubId write Set_certificateSubId;
    property newPrivateKeyPassword: WideString read Get_newPrivateKeyPassword write Set_newPrivateKeyPassword;
    property SetNewPassword: WordBool read Get_SetNewPassword write Set_SetNewPassword;
    property updateTrustedPeerCertificates: WordBool read Get_updateTrustedPeerCertificates write Set_updateTrustedPeerCertificates;
  published
  end;

// *********************************************************************//
// The Class CoUAValidateCertificateArguments provides a Create and CreateRemote method to          
// create instances of the default interface _UAValidateCertificateArguments exposed by              
// the CoClass UAValidateCertificateArguments. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAValidateCertificateArguments = class
    class function Create: _UAValidateCertificateArguments;
    class function CreateRemote(const MachineName: string): _UAValidateCertificateArguments;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAValidateCertificateArguments
// Help String      : Contains arguments for operations related to OPC UA certificate generation.
// Default Interface: _UAValidateCertificateArguments
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAValidateCertificateArguments = class(TOleServer)
  private
    FIntf: _UAValidateCertificateArguments;
    function GetDefaultInterface: _UAValidateCertificateArguments;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_State: OleVariant;
    procedure _Set_State(pRetVal: OleVariant);
    function Get_certificateSubId: WideString;
    procedure Set_certificateSubId(const pRetVal: WideString);
    function Get_Parameters: _CertificateGenerationParameters;
    procedure _Set_Parameters(const pRetVal: _CertificateGenerationParameters);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAValidateCertificateArguments);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function MemberwiseClone: _OperationArguments;
    procedure SetState(State: OleVariant);
    property DefaultInterface: _UAValidateCertificateArguments read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property State: OleVariant read Get_State write _Set_State;
    property Parameters: _CertificateGenerationParameters read Get_Parameters write _Set_Parameters;
    property certificateSubId: WideString read Get_certificateSubId write Set_certificateSubId;
  published
  end;

// *********************************************************************//
// The Class CoNetSdkEasyUAClientServerApplication provides a Create and CreateRemote method to          
// create instances of the default interface _EasyUAClientServerApplication exposed by              
// the CoClass NetSdkEasyUAClientServerApplication. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNetSdkEasyUAClientServerApplication = class
    class function Create: _EasyUAClientServerApplication;
    class function CreateRemote(const MachineName: string): _EasyUAClientServerApplication;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TNetSdkEasyUAClientServerApplication
// Help String      : Infrastructure. An implementation of OPC UA client/server application using the OPC Foundation's UA SDK.
// Default Interface: _EasyUAClientServerApplication
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TNetSdkEasyUAClientServerApplication = class(TOleServer)
  private
    FIntf: _EasyUAClientServerApplication;
    function GetDefaultInterface: _EasyUAClientServerApplication;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_ApplicationIdDictionary: _StringUANodeIdReadOnlyDictionary;
    function Get_ApplicationStoreGroup: IUnknown;
    function Get_CertificateGenerationParameters: _CertificateGenerationParameters;
    function Get_CertificateRequestParameters: _UACertificateRequestParameters;
    function Get_HostNames: _StringCollection;
    function Get_SupportsGds: WordBool;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _EasyUAClientServerApplication);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function AssureOwnCertificate(createOwnCertificateArguments: OleVariant): WordBool;
    procedure CreateOwnCertificate(createOwnCertificateArguments: OleVariant);
    procedure ExportApplicationConfiguration(const stream: _Stream);
    procedure ExportApplicationConfigurationToFile(const filePath: WideString);
    procedure ExportOwnCertificateToFile(exportCertificateArguments: OleVariant);
    procedure ExportRegisteredApplication(const stream: _Stream);
    procedure ExportRegisteredApplicationToFile(const filePath: WideString);
    procedure ExportSecuredApplication(const stream: _Stream);
    procedure ExportSecuredApplicationToFile(const filePath: WideString);
    function FindGdsRegistrations(gdsEndpointDescriptor: OleVariant): _UANodeIdUAApplicationElementReadOnlyDictionary;
    function FindOwnCertificate(const certificateSubId: WideString): _PkiCertificate;
    function GetApplicationElement: _UAApplicationElement;
    function GetApplicationId(gdsEndpointDescriptor: OleVariant): _UANodeId;
    function GetCertificateSubjectName(const certificateSubId: WideString): WideString;
    function GetCertificateSubjectNameDictionary: _StringStringDictionary;
    function GetEffectiveApplicationManifest: _UAApplicationManifest;
    function GetEffectiveHostNames(alternateHostNames: OleVariant): _StringCollection;
    function GetPrivateKeyPasswordStrength(const certificateSubId: WideString): Single;
    function HasOwnCertificate(const certificateSubId: WideString): WordBool;
    function HasPrivateKeyPassword(const certificateSubId: WideString): WordBool;
    procedure ImportOwnCertificateFromFile(importCertificateArguments: OleVariant);
    function ListCertificateSubIds: _StringSet;
    function ListCertificateTypeElements(gdsEndpointDescriptor: OleVariant; 
                                         applicationStoreKind: PkiApplicationStoreKind): _UACertificateTypeElementCollection;
    function ObtainNewCertificate(Arguments: OleVariant): _PkiCertificate;
    function ProtectOrUnprotectOwnCertificate(const certificateSubId: WideString; 
                                              const newPrivateKeyPassword: WideString): WordBool;
    procedure ProtectOwnCertificate(const newPrivateKeyPassword: WideString);
    function RefreshTrustLists(gdsEndpointDescriptor: OleVariant; updateGdsRegistration: WordBool): UATrustListMasks;
    function RegisterToGds(gdsEndpointDescriptor: OleVariant): _UANodeId;
    function RemoveOwnCertificates(const certificateSubIdPattern: WideString; mustExist: WordBool; 
                                   updateTrustedPeerCertificates: WordBool): Integer;
    procedure RemovePrivateKeyPassword(const certificateSubId: WideString);
    procedure SetPrivateKeyPassword(const certificateSubId: WideString; 
                                    const privateKeyPassword: WideString);
    procedure UnprotectOwnCertificate;
    procedure UnregisterFromGds(gdsEndpointDescriptor: OleVariant);
    function updateGdsRegistration(gdsEndpointDescriptor: OleVariant): _UANodeId;
    procedure ValidateOwnCertificate(certificateGenerationArguments: OleVariant);
    property DefaultInterface: _EasyUAClientServerApplication read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property ApplicationIdDictionary: _StringUANodeIdReadOnlyDictionary read Get_ApplicationIdDictionary;
    property ApplicationStoreGroup: IUnknown read Get_ApplicationStoreGroup;
    property CertificateGenerationParameters: _CertificateGenerationParameters read Get_CertificateGenerationParameters;
    property CertificateRequestParameters: _UACertificateRequestParameters read Get_CertificateRequestParameters;
    property HostNames: _StringCollection read Get_HostNames;
    property SupportsGds: WordBool read Get_SupportsGds;
  published
  end;

// *********************************************************************//
// The Class CoUAAssureCertificateArguments provides a Create and CreateRemote method to          
// create instances of the default interface _UAAssureCertificateArguments exposed by              
// the CoClass UAAssureCertificateArguments. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAAssureCertificateArguments = class
    class function Create: _UAAssureCertificateArguments;
    class function CreateRemote(const MachineName: string): _UAAssureCertificateArguments;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAAssureCertificateArguments
// Help String      : Contains arguments for assuring an own OPC UA certificate.
// Default Interface: _UAAssureCertificateArguments
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAAssureCertificateArguments = class(TOleServer)
  private
    FIntf: _UAAssureCertificateArguments;
    function GetDefaultInterface: _UAAssureCertificateArguments;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_State: OleVariant;
    procedure _Set_State(pRetVal: OleVariant);
    function Get_certificateSubId: WideString;
    procedure Set_certificateSubId(const pRetVal: WideString);
    function Get_Parameters: _CertificateGenerationParameters;
    procedure _Set_Parameters(const pRetVal: _CertificateGenerationParameters);
    function Get_updateTrustedPeerCertificates: WordBool;
    procedure Set_updateTrustedPeerCertificates(pRetVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAAssureCertificateArguments);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function MemberwiseClone: _OperationArguments;
    procedure SetState(State: OleVariant);
    property DefaultInterface: _UAAssureCertificateArguments read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property State: OleVariant read Get_State write _Set_State;
    property Parameters: _CertificateGenerationParameters read Get_Parameters write _Set_Parameters;
    property certificateSubId: WideString read Get_certificateSubId write Set_certificateSubId;
    property updateTrustedPeerCertificates: WordBool read Get_updateTrustedPeerCertificates write Set_updateTrustedPeerCertificates;
  published
  end;

// *********************************************************************//
// The Class CoUACertificateRequestParameters provides a Create and CreateRemote method to          
// create instances of the default interface _UACertificateRequestParameters exposed by              
// the CoClass UACertificateRequestParameters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUACertificateRequestParameters = class
    class function Create: _UACertificateRequestParameters;
    class function CreateRemote(const MachineName: string): _UACertificateRequestParameters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUACertificateRequestParameters
// Help String      : Contains parameters for obtaining a new application certificate from the OPC UA Global Discovery Server (GDS).
// Default Interface: _UACertificateRequestParameters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUACertificateRequestParameters = class(TOleServer)
  private
    FIntf: _UACertificateRequestParameters;
    function GetDefaultInterface: _UACertificateRequestParameters;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
    function Get_certificateTypeId: _UANodeId;
    procedure _Set_certificateTypeId(const pRetVal: _UANodeId);
    function Get_FilePrivateKeyPassword: WideString;
    procedure Set_FilePrivateKeyPassword(const pRetVal: WideString);
    function Get_gdsEndpointDescriptor: _UAEndpointDescriptor;
    procedure _Set_gdsEndpointDescriptor(const pRetVal: _UAEndpointDescriptor);
    function Get_PrivateKeyFileName: WideString;
    procedure Set_PrivateKeyFileName(const pRetVal: WideString);
    function Get_privateKeyFormat: WideString;
    procedure Set_privateKeyFormat(const pRetVal: WideString);
    function Get_TryReuseExistingPrivateKey: WordBool;
    procedure Set_TryReuseExistingPrivateKey(pRetVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UACertificateRequestParameters);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UACertificateRequestParameters read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property certificateTypeId: _UANodeId read Get_certificateTypeId write _Set_certificateTypeId;
    property gdsEndpointDescriptor: _UAEndpointDescriptor read Get_gdsEndpointDescriptor write _Set_gdsEndpointDescriptor;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
    property FilePrivateKeyPassword: WideString read Get_FilePrivateKeyPassword write Set_FilePrivateKeyPassword;
    property PrivateKeyFileName: WideString read Get_PrivateKeyFileName write Set_PrivateKeyFileName;
    property privateKeyFormat: WideString read Get_privateKeyFormat write Set_privateKeyFormat;
    property TryReuseExistingPrivateKey: WordBool read Get_TryReuseExistingPrivateKey write Set_TryReuseExistingPrivateKey;
  published
  end;

// *********************************************************************//
// The Class CoUACertificateTypeElement provides a Create and CreateRemote method to          
// create instances of the default interface _UACertificateTypeElement exposed by              
// the CoClass UACertificateTypeElement. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUACertificateTypeElement = class
    class function Create: _UACertificateTypeElement;
    class function CreateRemote(const MachineName: string): _UACertificateTypeElement;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUACertificateTypeElement
// Help String      : Contains information gathered about an OC UA certificate type.
// Default Interface: _UACertificateTypeElement
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUACertificateTypeElement = class(TOleServer)
  private
    FIntf: _UACertificateTypeElement;
    function GetDefaultInterface: _UACertificateTypeElement;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_BaseCertificateTypeId: _UANodeId;
    procedure _Set_BaseCertificateTypeId(const pRetVal: _UANodeId);
    function Get_certificateTypeId: _UANodeId;
    procedure _Set_certificateTypeId(const pRetVal: _UANodeId);
    function Get_DisplayName: WideString;
    procedure Set_DisplayName(const pRetVal: WideString);
    function Get_DisplayText: WideString;
    function Get_IsAbstract: WordBool;
    procedure Set_IsAbstract(pRetVal: WordBool);
    function Get_MinimumRssKeySize: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UACertificateTypeElement);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UACertificateTypeElement read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property BaseCertificateTypeId: _UANodeId read Get_BaseCertificateTypeId write _Set_BaseCertificateTypeId;
    property certificateTypeId: _UANodeId read Get_certificateTypeId write _Set_certificateTypeId;
    property DisplayText: WideString read Get_DisplayText;
    property MinimumRssKeySize: Integer read Get_MinimumRssKeySize;
    property DisplayName: WideString read Get_DisplayName write Set_DisplayName;
    property IsAbstract: WordBool read Get_IsAbstract write Set_IsAbstract;
  published
  end;

// *********************************************************************//
// The Class CoUACertificateTypeElementCollection provides a Create and CreateRemote method to          
// create instances of the default interface _UACertificateTypeElementCollection exposed by              
// the CoClass UACertificateTypeElementCollection. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUACertificateTypeElementCollection = class
    class function Create: _UACertificateTypeElementCollection;
    class function CreateRemote(const MachineName: string): _UACertificateTypeElementCollection;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUACertificateTypeElementCollection
// Help String      : A collection of OPC-UA certificate type elements.
// Default Interface: _UACertificateTypeElementCollection
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUACertificateTypeElementCollection = class(TOleServer)
  private
    FIntf: _UACertificateTypeElementCollection;
    function GetDefaultInterface: _UACertificateTypeElementCollection;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_Item(key: OleVariant): _UACertificateTypeElement;
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UACertificateTypeElementCollection);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function GetEnumerator: IEnumVARIANT;
    procedure Add(Item: OleVariant);
    procedure Clear;
    function Contains(Item: OleVariant): WordBool;
    function IndexOf(Item: OleVariant): Integer;
    function Remove(key: OleVariant): WordBool;
    procedure RemoveAt(index: Integer);
    function ToList: _ElasticVector;
    function TryGetValue(key: OleVariant; out Item: OleVariant): WordBool;
    function Clone: OleVariant;
    property DefaultInterface: _UACertificateTypeElementCollection read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Item[key: OleVariant]: _UACertificateTypeElement read Get_Item; default;
    property Count: Integer read Get_Count;
  published
  end;

// *********************************************************************//
// The Class CoUAExportCertificateArguments provides a Create and CreateRemote method to          
// create instances of the default interface _UAExportCertificateArguments exposed by              
// the CoClass UAExportCertificateArguments. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAExportCertificateArguments = class
    class function Create: _UAExportCertificateArguments;
    class function CreateRemote(const MachineName: string): _UAExportCertificateArguments;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAExportCertificateArguments
// Help String      : Contains arguments for exporting an application certificate.
// Default Interface: _UAExportCertificateArguments
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAExportCertificateArguments = class(TOleServer)
  private
    FIntf: _UAExportCertificateArguments;
    function GetDefaultInterface: _UAExportCertificateArguments;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_State: OleVariant;
    procedure _Set_State(pRetVal: OleVariant);
    function Get_certificateSubId: WideString;
    procedure Set_certificateSubId(const pRetVal: WideString);
    function Get_filePath: WideString;
    procedure Set_filePath(const pRetVal: WideString);
    function Get_newPrivateKeyPassword: WideString;
    procedure Set_newPrivateKeyPassword(const pRetVal: WideString);
    function Get_PkiFileFormat: PkiFileFormat;
    procedure Set_PkiFileFormat(pRetVal: PkiFileFormat);
    function Get_WithPrivateKey: WordBool;
    procedure Set_WithPrivateKey(pRetVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAExportCertificateArguments);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function MemberwiseClone: _OperationArguments;
    procedure SetState(State: OleVariant);
    property DefaultInterface: _UAExportCertificateArguments read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property State: OleVariant read Get_State write _Set_State;
    property certificateSubId: WideString read Get_certificateSubId write Set_certificateSubId;
    property filePath: WideString read Get_filePath write Set_filePath;
    property newPrivateKeyPassword: WideString read Get_newPrivateKeyPassword write Set_newPrivateKeyPassword;
    property PkiFileFormat: PkiFileFormat read Get_PkiFileFormat write Set_PkiFileFormat;
    property WithPrivateKey: WordBool read Get_WithPrivateKey write Set_WithPrivateKey;
  published
  end;

// *********************************************************************//
// The Class CoUAImportCertificateArguments provides a Create and CreateRemote method to          
// create instances of the default interface _UAImportCertificateArguments exposed by              
// the CoClass UAImportCertificateArguments. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAImportCertificateArguments = class
    class function Create: _UAImportCertificateArguments;
    class function CreateRemote(const MachineName: string): _UAImportCertificateArguments;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAImportCertificateArguments
// Help String      : Contains arguments for importing an application certificate.
// Default Interface: _UAImportCertificateArguments
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAImportCertificateArguments = class(TOleServer)
  private
    FIntf: _UAImportCertificateArguments;
    function GetDefaultInterface: _UAImportCertificateArguments;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_State: OleVariant;
    procedure _Set_State(pRetVal: OleVariant);
    function Get_certificateSubId: WideString;
    procedure Set_certificateSubId(const pRetVal: WideString);
    function Get_newPrivateKeyPassword: WideString;
    procedure Set_newPrivateKeyPassword(const pRetVal: WideString);
    function Get_SetNewPassword: WordBool;
    procedure Set_SetNewPassword(pRetVal: WordBool);
    function Get_updateTrustedPeerCertificates: WordBool;
    procedure Set_updateTrustedPeerCertificates(pRetVal: WordBool);
    function Get_filePath: WideString;
    procedure Set_filePath(const pRetVal: WideString);
    function Get_OldPrivateKeyPassword: WideString;
    procedure Set_OldPrivateKeyPassword(const pRetVal: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAImportCertificateArguments);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function MemberwiseClone: _OperationArguments;
    procedure SetState(State: OleVariant);
    property DefaultInterface: _UAImportCertificateArguments read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property State: OleVariant read Get_State write _Set_State;
    property certificateSubId: WideString read Get_certificateSubId write Set_certificateSubId;
    property newPrivateKeyPassword: WideString read Get_newPrivateKeyPassword write Set_newPrivateKeyPassword;
    property SetNewPassword: WordBool read Get_SetNewPassword write Set_SetNewPassword;
    property updateTrustedPeerCertificates: WordBool read Get_updateTrustedPeerCertificates write Set_updateTrustedPeerCertificates;
    property filePath: WideString read Get_filePath write Set_filePath;
    property OldPrivateKeyPassword: WideString read Get_OldPrivateKeyPassword write Set_OldPrivateKeyPassword;
  published
  end;

// *********************************************************************//
// The Class CoUAObtainCertificateArguments provides a Create and CreateRemote method to          
// create instances of the default interface _UAObtainCertificateArguments exposed by              
// the CoClass UAObtainCertificateArguments. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAObtainCertificateArguments = class
    class function Create: _UAObtainCertificateArguments;
    class function CreateRemote(const MachineName: string): _UAObtainCertificateArguments;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAObtainCertificateArguments
// Help String      : Contains arguments for obtaining a new application certificate from the OPC UA Global Discovery Server (GDS).
// Default Interface: _UAObtainCertificateArguments
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAObtainCertificateArguments = class(TOleServer)
  private
    FIntf: _UAObtainCertificateArguments;
    function GetDefaultInterface: _UAObtainCertificateArguments;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_State: OleVariant;
    procedure _Set_State(pRetVal: OleVariant);
    function Get_certificateSubId: WideString;
    procedure Set_certificateSubId(const pRetVal: WideString);
    function Get_newPrivateKeyPassword: WideString;
    procedure Set_newPrivateKeyPassword(const pRetVal: WideString);
    function Get_SetNewPassword: WordBool;
    procedure Set_SetNewPassword(pRetVal: WordBool);
    function Get_updateTrustedPeerCertificates: WordBool;
    procedure Set_updateTrustedPeerCertificates(pRetVal: WordBool);
    function Get_HostNames: _StringCollection;
    procedure _Set_HostNames(const pRetVal: _StringCollection);
    function Get_HostNamesString: WideString;
    procedure Set_HostNamesString(const pRetVal: WideString);
    function Get_Parameters: _UACertificateRequestParameters;
    procedure _Set_Parameters(const pRetVal: _UACertificateRequestParameters);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAObtainCertificateArguments);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function MemberwiseClone: _OperationArguments;
    procedure SetState(State: OleVariant);
    property DefaultInterface: _UAObtainCertificateArguments read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property State: OleVariant read Get_State write _Set_State;
    property HostNames: _StringCollection read Get_HostNames write _Set_HostNames;
    property Parameters: _UACertificateRequestParameters read Get_Parameters write _Set_Parameters;
    property certificateSubId: WideString read Get_certificateSubId write Set_certificateSubId;
    property newPrivateKeyPassword: WideString read Get_newPrivateKeyPassword write Set_newPrivateKeyPassword;
    property SetNewPassword: WordBool read Get_SetNewPassword write Set_SetNewPassword;
    property updateTrustedPeerCertificates: WordBool read Get_updateTrustedPeerCertificates write Set_updateTrustedPeerCertificates;
    property HostNamesString: WideString read Get_HostNamesString write Set_HostNamesString;
  published
  end;

// *********************************************************************//
// The Class CoUACreateCertificateArguments provides a Create and CreateRemote method to          
// create instances of the default interface _UACreateCertificateArguments exposed by              
// the CoClass UACreateCertificateArguments. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUACreateCertificateArguments = class
    class function Create: _UACreateCertificateArguments;
    class function CreateRemote(const MachineName: string): _UACreateCertificateArguments;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUACreateCertificateArguments
// Help String      : Contains arguments for creating an own OPC UA certificate.
// Default Interface: _UACreateCertificateArguments
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUACreateCertificateArguments = class(TOleServer)
  private
    FIntf: _UACreateCertificateArguments;
    function GetDefaultInterface: _UACreateCertificateArguments;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_State: OleVariant;
    procedure _Set_State(pRetVal: OleVariant);
    function Get_certificateSubId: WideString;
    procedure Set_certificateSubId(const pRetVal: WideString);
    function Get_Parameters: _CertificateGenerationParameters;
    procedure _Set_Parameters(const pRetVal: _CertificateGenerationParameters);
    function Get_updateTrustedPeerCertificates: WordBool;
    procedure Set_updateTrustedPeerCertificates(pRetVal: WordBool);
    function Get_HostNames: _StringCollection;
    procedure _Set_HostNames(const pRetVal: _StringCollection);
    function Get_HostNamesString: WideString;
    procedure Set_HostNamesString(const pRetVal: WideString);
    function Get_MustNotExist: WordBool;
    procedure Set_MustNotExist(pRetVal: WordBool);
    function Get_newPrivateKeyPassword: WideString;
    procedure Set_newPrivateKeyPassword(const pRetVal: WideString);
    function Get_SetNewPassword: WordBool;
    procedure Set_SetNewPassword(pRetVal: WordBool);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UACreateCertificateArguments);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function MemberwiseClone: _OperationArguments;
    procedure SetState(State: OleVariant);
    property DefaultInterface: _UACreateCertificateArguments read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property State: OleVariant read Get_State write _Set_State;
    property Parameters: _CertificateGenerationParameters read Get_Parameters write _Set_Parameters;
    property HostNames: _StringCollection read Get_HostNames write _Set_HostNames;
    property certificateSubId: WideString read Get_certificateSubId write Set_certificateSubId;
    property updateTrustedPeerCertificates: WordBool read Get_updateTrustedPeerCertificates write Set_updateTrustedPeerCertificates;
    property HostNamesString: WideString read Get_HostNamesString write Set_HostNamesString;
    property MustNotExist: WordBool read Get_MustNotExist write Set_MustNotExist;
    property newPrivateKeyPassword: WideString read Get_newPrivateKeyPassword write Set_newPrivateKeyPassword;
    property SetNewPassword: WordBool read Get_SetNewPassword write Set_SetNewPassword;
  published
  end;

// *********************************************************************//
// The Class CoUABaseEventObject provides a Create and CreateRemote method to          
// create instances of the default interface _UABaseEventObject exposed by              
// the CoClass UABaseEventObject. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUABaseEventObject = class
    class function Create: _UABaseEventObject;
    class function CreateRemote(const MachineName: string): _UABaseEventObject;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUABaseEventObject
// Help String      : Contains the base event object.
// Default Interface: _UABaseEventObject
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUABaseEventObject = class(TOleServer)
  private
    FIntf: _UABaseEventObject;
    function GetDefaultInterface: _UABaseEventObject;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_eventId: PSafeArray;
    function Get_EventType: _UANodeId;
    function Get_LocalTime: _UATimeZoneData;
    function Get_Message: WideString;
    function Get_NodeId: _UANodeId;
    function Get_ReceiveTime: TDateTime;
    function Get_ReceiveTimeDouble: Double;
    function Get_Severity: Integer;
    function Get_SourceName: WideString;
    function Get_SourceNode: _UANodeId;
    function Get_Time: TDateTime;
    function Get_TimeDouble: Double;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UABaseEventObject);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    property DefaultInterface: _UABaseEventObject read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property eventId: PSafeArray read Get_eventId;
    property EventType: _UANodeId read Get_EventType;
    property LocalTime: _UATimeZoneData read Get_LocalTime;
    property Message: WideString read Get_Message;
    property NodeId: _UANodeId read Get_NodeId;
    property ReceiveTime: TDateTime read Get_ReceiveTime;
    property ReceiveTimeDouble: Double read Get_ReceiveTimeDouble;
    property Severity: Integer read Get_Severity;
    property SourceName: WideString read Get_SourceName;
    property SourceNode: _UANodeId read Get_SourceNode;
    property Time: TDateTime read Get_Time;
    property TimeDouble: Double read Get_TimeDouble;
  published
  end;

// *********************************************************************//
// The Class CoUAApplicationManifest provides a Create and CreateRemote method to          
// create instances of the default interface _UAApplicationManifest exposed by              
// the CoClass UAApplicationManifest. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAApplicationManifest = class
    class function Create: _UAApplicationManifest;
    class function CreateRemote(const MachineName: string): _UAApplicationManifest;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAApplicationManifest
// Help String      : The OPC UA application manifest, i.e. the application registration information together with data related to PKI administration, such as paths to the certificate stores used.
// Default Interface: _UAApplicationManifest
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAApplicationManifest = class(TOleServer)
  private
    FIntf: _UAApplicationManifest;
    function GetDefaultInterface: _UAApplicationManifest;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_applicationName: WideString;
    procedure Set_applicationName(const pRetVal: WideString);
    function Get_ApplicationType: UAApplicationTypes;
    procedure Set_ApplicationType(pRetVal: UAApplicationTypes);
    function Get_applicationUriString: WideString;
    procedure Set_applicationUriString(const pRetVal: WideString);
    function Get_DiscoveryUriString: WideString;
    procedure Set_DiscoveryUriString(const pRetVal: WideString);
    function Get_DiscoveryUriStrings: _StringCollection;
    procedure _Set_DiscoveryUriStrings(const pRetVal: _StringCollection);
    function Get_productUriString: WideString;
    procedure Set_productUriString(const pRetVal: WideString);
    function Get_serverCapabilities: _StringCollection;
    procedure _Set_serverCapabilities(const pRetVal: _StringCollection);
    function Get_ServerCapabilitySet: _StringSet;
    function Get_CountryName: WideString;
    procedure Set_CountryName(const pRetVal: WideString);
    function Get_HttpsIssuerStorePath: WideString;
    procedure Set_HttpsIssuerStorePath(const pRetVal: WideString);
    function Get_HttpsTrustedStorePath: WideString;
    procedure Set_HttpsTrustedStorePath(const pRetVal: WideString);
    function Get_InstanceCertificateSubject: WideString;
    procedure Set_InstanceCertificateSubject(const pRetVal: WideString);
    function Get_InstanceIssuerStorePath: WideString;
    procedure Set_InstanceIssuerStorePath(const pRetVal: WideString);
    function Get_InstanceOwnStorePath: WideString;
    procedure Set_InstanceOwnStorePath(const pRetVal: WideString);
    function Get_InstanceTrustedStorePath: WideString;
    procedure Set_InstanceTrustedStorePath(const pRetVal: WideString);
    function Get_LocalityName: WideString;
    procedure Set_LocalityName(const pRetVal: WideString);
    function Get_OrganizationName: WideString;
    procedure Set_OrganizationName(const pRetVal: WideString);
    function Get_OrganizationalUnitName: WideString;
    procedure Set_OrganizationalUnitName(const pRetVal: WideString);
    function Get_RejectedStorePath: WideString;
    procedure Set_RejectedStorePath(const pRetVal: WideString);
    function Get_StateOrProvinceName: WideString;
    procedure Set_StateOrProvinceName(const pRetVal: WideString);
    function Get_UserIssuerStorePath: WideString;
    procedure Set_UserIssuerStorePath(const pRetVal: WideString);
    function Get_UserTrustedStorePath: WideString;
    procedure Set_UserTrustedStorePath(const pRetVal: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAApplicationManifest);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function ToUAEndpointDescriptor: _UAEndpointDescriptor;
    property DefaultInterface: _UAApplicationManifest read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DiscoveryUriStrings: _StringCollection read Get_DiscoveryUriStrings write _Set_DiscoveryUriStrings;
    property serverCapabilities: _StringCollection read Get_serverCapabilities write _Set_serverCapabilities;
    property ServerCapabilitySet: _StringSet read Get_ServerCapabilitySet;
    property applicationName: WideString read Get_applicationName write Set_applicationName;
    property ApplicationType: UAApplicationTypes read Get_ApplicationType write Set_ApplicationType;
    property applicationUriString: WideString read Get_applicationUriString write Set_applicationUriString;
    property DiscoveryUriString: WideString read Get_DiscoveryUriString write Set_DiscoveryUriString;
    property productUriString: WideString read Get_productUriString write Set_productUriString;
    property CountryName: WideString read Get_CountryName write Set_CountryName;
    property HttpsIssuerStorePath: WideString read Get_HttpsIssuerStorePath write Set_HttpsIssuerStorePath;
    property HttpsTrustedStorePath: WideString read Get_HttpsTrustedStorePath write Set_HttpsTrustedStorePath;
    property InstanceCertificateSubject: WideString read Get_InstanceCertificateSubject write Set_InstanceCertificateSubject;
    property InstanceIssuerStorePath: WideString read Get_InstanceIssuerStorePath write Set_InstanceIssuerStorePath;
    property InstanceOwnStorePath: WideString read Get_InstanceOwnStorePath write Set_InstanceOwnStorePath;
    property InstanceTrustedStorePath: WideString read Get_InstanceTrustedStorePath write Set_InstanceTrustedStorePath;
    property LocalityName: WideString read Get_LocalityName write Set_LocalityName;
    property OrganizationName: WideString read Get_OrganizationName write Set_OrganizationName;
    property OrganizationalUnitName: WideString read Get_OrganizationalUnitName write Set_OrganizationalUnitName;
    property RejectedStorePath: WideString read Get_RejectedStorePath write Set_RejectedStorePath;
    property StateOrProvinceName: WideString read Get_StateOrProvinceName write Set_StateOrProvinceName;
    property UserIssuerStorePath: WideString read Get_UserIssuerStorePath write Set_UserIssuerStorePath;
    property UserTrustedStorePath: WideString read Get_UserTrustedStorePath write Set_UserTrustedStorePath;
  published
  end;

// *********************************************************************//
// The Class CoUANodeIdFormatException provides a Create and CreateRemote method to          
// create instances of the default interface _UANodeIdFormatException exposed by              
// the CoClass UANodeIdFormatException. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUANodeIdFormatException = class
    class function Create: _UANodeIdFormatException;
    class function CreateRemote(const MachineName: string): _UANodeIdFormatException;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUANodeIdFormatException
// Help String      : The exception that is thrown when the string format of the OPC-UA node ID is incorrect.
// Default Interface: _UANodeIdFormatException
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TUANodeIdFormatException = class(TOleServer)
  private
    FIntf: _UANodeIdFormatException;
    function GetDefaultInterface: _UANodeIdFormatException;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_Message: WideString;
    function Get_StackTrace: WideString;
    function Get_HelpLink: WideString;
    procedure Set_HelpLink(const pRetVal: WideString);
    function Get_Source: WideString;
    procedure Set_Source(const pRetVal: WideString);
    function Get_InnerException: _Exception;
    function Get_TargetSite: _MethodBase;
    function Get_Data: _Dictionary;
    function Get_HResult: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UANodeIdFormatException);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function GetBaseException: _Exception;
    procedure GetObjectData(const info: _SerializationInfo; context: StreamingContext);
    property DefaultInterface: _UANodeIdFormatException read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Message: WideString read Get_Message;
    property StackTrace: WideString read Get_StackTrace;
    property InnerException: _Exception read Get_InnerException;
    property TargetSite: _MethodBase read Get_TargetSite;
    property Data: _Dictionary read Get_Data;
    property HResult: Integer read Get_HResult;
    property HelpLink: WideString read Get_HelpLink write Set_HelpLink;
    property Source: WideString read Get_Source write Set_Source;
  published
  end;

// *********************************************************************//
// The Class CoUANodeIdParser provides a Create and CreateRemote method to          
// create instances of the default interface _UANodeIdParser exposed by              
// the CoClass UANodeIdParser. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUANodeIdParser = class
    class function Create: _UANodeIdParser;
    class function CreateRemote(const MachineName: string): _UANodeIdParser;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUANodeIdParser
// Help String      : A parser for OPC-UA node IDs.
// Default Interface: _UANodeIdParser
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUANodeIdParser = class(TOleServer)
  private
    FIntf: _UANodeIdParser;
    function GetDefaultInterface: _UANodeIdParser;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_DefaultNamespaceUriString: WideString;
    procedure Set_DefaultNamespaceUriString(const pRetVal: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UANodeIdParser);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function Parse(const s: WideString; requireNamespace: WordBool): _UANodeId;
    function TryParse(const s: WideString; requireNamespace: WordBool; out NodeId: OleVariant): _StringParsingError;
    property DefaultInterface: _UANodeIdParser read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DefaultNamespaceUriString: WideString read Get_DefaultNamespaceUriString write Set_DefaultNamespaceUriString;
  published
  end;

// *********************************************************************//
// The Class CoUAQualifiedNameFormatException provides a Create and CreateRemote method to          
// create instances of the default interface _UAQualifiedNameFormatException exposed by              
// the CoClass UAQualifiedNameFormatException. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAQualifiedNameFormatException = class
    class function Create: _UAQualifiedNameFormatException;
    class function CreateRemote(const MachineName: string): _UAQualifiedNameFormatException;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAQualifiedNameFormatException
// Help String      : The exception that is thrown when the string format of the OPC-UA qualified name is incorrect.
// Default Interface: _UAQualifiedNameFormatException
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (0)
// *********************************************************************//
  TUAQualifiedNameFormatException = class(TOleServer)
  private
    FIntf: _UAQualifiedNameFormatException;
    function GetDefaultInterface: _UAQualifiedNameFormatException;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_Message: WideString;
    function Get_StackTrace: WideString;
    function Get_HelpLink: WideString;
    procedure Set_HelpLink(const pRetVal: WideString);
    function Get_Source: WideString;
    procedure Set_Source(const pRetVal: WideString);
    function Get_InnerException: _Exception;
    function Get_TargetSite: _MethodBase;
    function Get_Data: _Dictionary;
    function Get_HResult: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAQualifiedNameFormatException);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function GetBaseException: _Exception;
    procedure GetObjectData(const info: _SerializationInfo; context: StreamingContext);
    property DefaultInterface: _UAQualifiedNameFormatException read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property Message: WideString read Get_Message;
    property StackTrace: WideString read Get_StackTrace;
    property InnerException: _Exception read Get_InnerException;
    property TargetSite: _MethodBase read Get_TargetSite;
    property Data: _Dictionary read Get_Data;
    property HResult: Integer read Get_HResult;
    property HelpLink: WideString read Get_HelpLink write Set_HelpLink;
    property Source: WideString read Get_Source write Set_Source;
  published
  end;

// *********************************************************************//
// The Class CoUAQualifiedNameParser provides a Create and CreateRemote method to          
// create instances of the default interface _UAQualifiedNameParser exposed by              
// the CoClass UAQualifiedNameParser. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAQualifiedNameParser = class
    class function Create: _UAQualifiedNameParser;
    class function CreateRemote(const MachineName: string): _UAQualifiedNameParser;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAQualifiedNameParser
// Help String      : A parser for OPC-UA qualified names.
// Default Interface: _UAQualifiedNameParser
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAQualifiedNameParser = class(TOleServer)
  private
    FIntf: _UAQualifiedNameParser;
    function GetDefaultInterface: _UAQualifiedNameParser;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_DefaultNamespaceUriString: WideString;
    procedure Set_DefaultNamespaceUriString(const pRetVal: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAQualifiedNameParser);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function Parse(const expandedText: WideString): _UAQualifiedName;
    function TryParse(const s: WideString; out qualifiedName: OleVariant): _StringParsingError;
    property DefaultInterface: _UAQualifiedNameParser read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property DefaultNamespaceUriString: WideString read Get_DefaultNamespaceUriString write Set_DefaultNamespaceUriString;
  published
  end;

// *********************************************************************//
// The Class CoUANodeElement provides a Create and CreateRemote method to          
// create instances of the default interface _UANodeElement exposed by              
// the CoClass UANodeElement. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUANodeElement = class
    class function Create: _UANodeElement;
    class function CreateRemote(const MachineName: string): _UANodeElement;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUANodeElement
// Help String      : Contains information gathered about a node in OPC server's address space.
// Default Interface: _UANodeElement
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUANodeElement = class(TOleServer)
  private
    FIntf: _UANodeElement;
    function GetDefaultInterface: _UANodeElement;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_BrowseName: _UAQualifiedName;
    procedure _Set_BrowseName(const pRetVal: _UAQualifiedName);
    function Get_browsePath: _UABrowsePath;
    procedure _Set_browsePath(const pRetVal: _UABrowsePath);
    function Get_NodeId: _UANodeId;
    procedure _Set_NodeId(const pRetVal: _UANodeId);
    function Get_IsForward: WordBool;
    procedure Set_IsForward(pRetVal: WordBool);
    function Get_DisplayName: WideString;
    procedure Set_DisplayName(const pRetVal: WideString);
    function Get_NodeClass: UANodeClass;
    procedure Set_NodeClass(pRetVal: UANodeClass);
    function Get_ReferenceTypeId: _UANodeId;
    procedure _Set_ReferenceTypeId(const pRetVal: _UANodeId);
    function Get_TypeDefinition: _UANodeId;
    procedure _Set_TypeDefinition(const pRetVal: _UANodeId);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UANodeElement);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function ToUANodeDescriptor: _UANodeDescriptor;
    property DefaultInterface: _UANodeElement read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property BrowseName: _UAQualifiedName read Get_BrowseName write _Set_BrowseName;
    property browsePath: _UABrowsePath read Get_browsePath write _Set_browsePath;
    property NodeId: _UANodeId read Get_NodeId write _Set_NodeId;
    property ReferenceTypeId: _UANodeId read Get_ReferenceTypeId write _Set_ReferenceTypeId;
    property TypeDefinition: _UANodeId read Get_TypeDefinition write _Set_TypeDefinition;
    property IsForward: WordBool read Get_IsForward write Set_IsForward;
    property DisplayName: WideString read Get_DisplayName write Set_DisplayName;
    property NodeClass: UANodeClass read Get_NodeClass write Set_NodeClass;
  published
  end;

// *********************************************************************//
// The Class CoUANodeElementCollection provides a Create and CreateRemote method to          
// create instances of the default interface _UANodeElementCollection exposed by              
// the CoClass UANodeElementCollection. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUANodeElementCollection = class
    class function Create: _UANodeElementCollection;
    class function CreateRemote(const MachineName: string): _UANodeElementCollection;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUANodeElementCollection
// Help String      : A collection of OPC-UA node elements, keyed by their browse names.
// Default Interface: _UANodeElementCollection
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUANodeElementCollection = class(TOleServer)
  private
    FIntf: _UANodeElementCollection;
    function GetDefaultInterface: _UANodeElementCollection;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_Item(index: Integer): _UANodeElement;
    procedure _Set_Item(index: Integer; const pRetVal: _UANodeElement);
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UANodeElementCollection);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function GetEnumerator: IEnumVARIANT;
    procedure Add(Item: OleVariant);
    procedure Clear;
    function Contains(Item: OleVariant): WordBool;
    function IndexOf(Item: OleVariant): Integer;
    procedure Insert(index: Integer; Item: OleVariant);
    function Remove(Item: OleVariant): WordBool;
    procedure RemoveAt(index: Integer);
    function Clone: OleVariant;
    property DefaultInterface: _UANodeElementCollection read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property Item[index: Integer]: _UANodeElement read Get_Item write _Set_Item; default;
    property Count: Integer read Get_Count;
  published
  end;

// *********************************************************************//
// The Class CoUANodeId provides a Create and CreateRemote method to          
// create instances of the default interface _UANodeId exposed by              
// the CoClass UANodeId. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUANodeId = class
    class function Create: _UANodeId;
    class function CreateRemote(const MachineName: string): _UANodeId;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUANodeId
// Help String      : Stores an identifier for a node in a server's address space, together with a complete namespace URI.
// Default Interface: _UANodeId
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUANodeId = class(TOleServer)
  private
    FIntf: _UANodeId;
    function GetDefaultInterface: _UANodeId;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_IsStandard: WordBool;
    function Get_NamespaceIndex: Integer;
    procedure Set_NamespaceIndex(pRetVal: Integer);
    function Get_NamespaceUriString: WideString;
    procedure Set_NamespaceUriString(const pRetVal: WideString);
    function Get_expandedText: WideString;
    procedure Set_expandedText(const pRetVal: WideString);
    function Get_GuidIdentifier: TGUID;
    procedure Set_GuidIdentifier(pRetVal: TGUID);
    function Get_GuidIdentifierString: WideString;
    procedure Set_GuidIdentifierString(const pRetVal: WideString);
    function Get_identifier: OleVariant;
    procedure _Set_identifier(pRetVal: OleVariant);
    function Get_IsNull: WordBool;
    function Get_NodeIdType: UANodeIdType;
    procedure Set_NodeIdType(pRetVal: UANodeIdType);
    function Get_NumericIdentifier: Integer;
    procedure Set_NumericIdentifier(pRetVal: Integer);
    function Get_OpaqueIdentifier: PSafeArray;
    procedure Set_OpaqueIdentifier(pRetVal: PSafeArray);
    function Get_StringIdentifier: WideString;
    procedure Set_StringIdentifier(const pRetVal: WideString);
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UANodeId);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function format(const DefaultNamespaceUriString: WideString; useStandardNames: WordBool): WideString;
    function Match(other: OleVariant): WordBool;
    procedure SetIdentifier(identifier: OleVariant);
    procedure SetOpaqueIdentifier(var OpaqueIdentifier: PSafeArray);
    function ToBrowsePath: _UABrowsePath;
    function ToUABuiltInType: UABuiltInType;
    property DefaultInterface: _UANodeId read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property IsStandard: WordBool read Get_IsStandard;
    property identifier: OleVariant read Get_identifier write _Set_identifier;
    property IsNull: WordBool read Get_IsNull;
    property NamespaceIndex: Integer read Get_NamespaceIndex write Set_NamespaceIndex;
    property NamespaceUriString: WideString read Get_NamespaceUriString write Set_NamespaceUriString;
    property expandedText: WideString read Get_expandedText write Set_expandedText;
    property GuidIdentifier: TGUID read Get_GuidIdentifier write Set_GuidIdentifier;
    property GuidIdentifierString: WideString read Get_GuidIdentifierString write Set_GuidIdentifierString;
    property NodeIdType: UANodeIdType read Get_NodeIdType write Set_NodeIdType;
    property NumericIdentifier: Integer read Get_NumericIdentifier write Set_NumericIdentifier;
    property OpaqueIdentifier: PSafeArray read Get_OpaqueIdentifier write Set_OpaqueIdentifier;
    property StringIdentifier: WideString read Get_StringIdentifier write Set_StringIdentifier;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
  published
  end;

// *********************************************************************//
// The Class CoUANodeIdCollection provides a Create and CreateRemote method to          
// create instances of the default interface _UANodeIdCollection exposed by              
// the CoClass UANodeIdCollection. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUANodeIdCollection = class
    class function Create: _UANodeIdCollection;
    class function CreateRemote(const MachineName: string): _UANodeIdCollection;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUANodeIdCollection
// Help String      : A collection of node IDs.
// Default Interface: _UANodeIdCollection
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUANodeIdCollection = class(TOleServer)
  private
    FIntf: _UANodeIdCollection;
    function GetDefaultInterface: _UANodeIdCollection;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_Item(index: Integer): _UANodeId;
    procedure _Set_Item(index: Integer; const pRetVal: _UANodeId);
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UANodeIdCollection);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function GetEnumerator: IEnumVARIANT;
    procedure Add(Item: OleVariant);
    procedure Clear;
    function Contains(Item: OleVariant): WordBool;
    function IndexOf(Item: OleVariant): Integer;
    procedure Insert(index: Integer; Item: OleVariant);
    function Remove(Item: OleVariant): WordBool;
    procedure RemoveAt(index: Integer);
    property DefaultInterface: _UANodeIdCollection read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property Item[index: Integer]: _UANodeId read Get_Item write _Set_Item; default;
    property Count: Integer read Get_Count;
  published
  end;

// *********************************************************************//
// The Class CoUANodeIdSet provides a Create and CreateRemote method to          
// create instances of the default interface _UANodeIdSet exposed by              
// the CoClass UANodeIdSet. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUANodeIdSet = class
    class function Create: _UANodeIdSet;
    class function CreateRemote(const MachineName: string): _UANodeIdSet;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUANodeIdSet
// Help String      : Represents a set of OPC-UA node IDs.
// Default Interface: _UANodeIdSet
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUANodeIdSet = class(TOleServer)
  private
    FIntf: _UANodeIdSet;
    function GetDefaultInterface: _UANodeIdSet;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UANodeIdSet);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Add(Item: OleVariant): WordBool;
    function GetEnumerator: IEnumVARIANT;
    procedure Clear;
    function Contains(Item: OleVariant): WordBool;
    function Remove(Item: OleVariant): WordBool;
    procedure UnionWith(other: OleVariant);
    procedure IntersectWith(other: OleVariant);
    procedure ExceptWith(other: OleVariant);
    procedure SymmetricExceptWith(other: OleVariant);
    function IsSubsetOf(other: OleVariant): WordBool;
    function IsSupersetOf(other: OleVariant): WordBool;
    function IsProperSupersetOf(other: OleVariant): WordBool;
    function IsProperSubsetOf(other: OleVariant): WordBool;
    function Overlaps(other: OleVariant): WordBool;
    function SetEquals(other: OleVariant): WordBool;
    procedure TrimExcess;
    function TryGetValue(equalValue: OleVariant; out actualValue: OleVariant): WordBool;
    property DefaultInterface: _UANodeIdSet read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property Count: Integer read Get_Count;
  published
  end;

// *********************************************************************//
// The Class CoUAQualifiedName provides a Create and CreateRemote method to          
// create instances of the default interface _UAQualifiedName exposed by              
// the CoClass UAQualifiedName. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAQualifiedName = class
    class function Create: _UAQualifiedName;
    class function CreateRemote(const MachineName: string): _UAQualifiedName;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAQualifiedName
// Help String      : An OPC-UA name qualified by a namespace.
// Default Interface: _UAQualifiedName
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAQualifiedName = class(TOleServer)
  private
    FIntf: _UAQualifiedName;
    function GetDefaultInterface: _UAQualifiedName;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_DisplayString: WideString;
    function Get_IsStandard: WordBool;
    function Get_NamespaceIndex: Integer;
    procedure Set_NamespaceIndex(pRetVal: Integer);
    function Get_NamespaceUriString: WideString;
    procedure Set_NamespaceUriString(const pRetVal: WideString);
    function Get_expandedText: WideString;
    procedure Set_expandedText(const pRetVal: WideString);
    function Get_IsNull: WordBool;
    function Get_Name: WideString;
    procedure Set_Name(const pRetVal: WideString);
    function Get_StandardName: WideString;
    procedure Set_StandardName(const pRetVal: WideString);
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAQualifiedName);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Clone: OleVariant;
    function format(const DefaultNamespaceUriString: WideString): WideString;
    function Match(other: OleVariant): WordBool;
    property DefaultInterface: _UAQualifiedName read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property DisplayString: WideString read Get_DisplayString;
    property IsStandard: WordBool read Get_IsStandard;
    property IsNull: WordBool read Get_IsNull;
    property NamespaceIndex: Integer read Get_NamespaceIndex write Set_NamespaceIndex;
    property NamespaceUriString: WideString read Get_NamespaceUriString write Set_NamespaceUriString;
    property expandedText: WideString read Get_expandedText write Set_expandedText;
    property Name: WideString read Get_Name write Set_Name;
    property StandardName: WideString read Get_StandardName write Set_StandardName;
  published
  end;

// *********************************************************************//
// The Class CoUAQualifiedNameCollection provides a Create and CreateRemote method to          
// create instances of the default interface _UAQualifiedNameCollection exposed by              
// the CoClass UAQualifiedNameCollection. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAQualifiedNameCollection = class
    class function Create: _UAQualifiedNameCollection;
    class function CreateRemote(const MachineName: string): _UAQualifiedNameCollection;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAQualifiedNameCollection
// Help String      : A collection of qualified names.
// Default Interface: _UAQualifiedNameCollection
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAQualifiedNameCollection = class(TOleServer)
  private
    FIntf: _UAQualifiedNameCollection;
    function GetDefaultInterface: _UAQualifiedNameCollection;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_Item(index: Integer): _UAQualifiedName;
    procedure _Set_Item(index: Integer; const pRetVal: _UAQualifiedName);
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAQualifiedNameCollection);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function GetEnumerator: IEnumVARIANT;
    procedure Add(Item: OleVariant);
    procedure Clear;
    function Contains(Item: OleVariant): WordBool;
    function IndexOf(Item: OleVariant): Integer;
    procedure Insert(index: Integer; Item: OleVariant);
    function Remove(Item: OleVariant): WordBool;
    procedure RemoveAt(index: Integer);
    property DefaultInterface: _UAQualifiedNameCollection read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property Item[index: Integer]: _UAQualifiedName read Get_Item write _Set_Item; default;
    property Count: Integer read Get_Count;
  published
  end;

// *********************************************************************//
// The Class CoUAQualifiedNameSet provides a Create and CreateRemote method to          
// create instances of the default interface _UAQualifiedNameSet exposed by              
// the CoClass UAQualifiedNameSet. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUAQualifiedNameSet = class
    class function Create: _UAQualifiedNameSet;
    class function CreateRemote(const MachineName: string): _UAQualifiedNameSet;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TUAQualifiedNameSet
// Help String      : Represents a set of OPC-UA qualified names.
// Default Interface: _UAQualifiedNameSet
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TUAQualifiedNameSet = class(TOleServer)
  private
    FIntf: _UAQualifiedNameSet;
    function GetDefaultInterface: _UAQualifiedNameSet;
  protected
    procedure InitServerData; override;
    function Get_ToString: WideString;
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: _UAQualifiedNameSet);
    procedure Disconnect; override;
    function Equals(obj: OleVariant): WordBool;
    function GetHashCode: Integer;
    function GetType: _Type;
    function Add(Item: OleVariant): WordBool;
    function GetEnumerator: IEnumVARIANT;
    procedure Clear;
    function Contains(Item: OleVariant): WordBool;
    function Remove(Item: OleVariant): WordBool;
    procedure UnionWith(other: OleVariant);
    procedure IntersectWith(other: OleVariant);
    procedure ExceptWith(other: OleVariant);
    procedure SymmetricExceptWith(other: OleVariant);
    function IsSubsetOf(other: OleVariant): WordBool;
    function IsSupersetOf(other: OleVariant): WordBool;
    function IsProperSupersetOf(other: OleVariant): WordBool;
    function IsProperSubsetOf(other: OleVariant): WordBool;
    function Overlaps(other: OleVariant): WordBool;
    function SetEquals(other: OleVariant): WordBool;
    procedure TrimExcess;
    function TryGetValue(equalValue: OleVariant; out actualValue: OleVariant): WordBool;
    property DefaultInterface: _UAQualifiedNameSet read GetDefaultInterface;
    property ToString: WideString read Get_ToString;
    property Count: Integer read Get_Count;
  published
  end;

procedure Register;

resourcestring
  dtlServerPage = 'ActiveX';

  dtlOcxPage = 'ActiveX';

implementation

uses System.Win.ComObj;

class function CoUADataValue.Create: _UADataValue;
begin
  Result := CreateComObject(CLASS_UADataValue) as _UADataValue;
end;

class function CoUADataValue.CreateRemote(const MachineName: string): _UADataValue;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UADataValue) as _UADataValue;
end;

procedure TUADataValue.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{F0AA1082-1B20-4661-865B-A5BDC32D2C29}';
    IntfIID:   '{8007E7F1-6A08-48B5-AD64-A11A0ABE3C3E}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUADataValue.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UADataValue;
  end;
end;

procedure TUADataValue.ConnectTo(svrIntf: _UADataValue);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUADataValue.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUADataValue.GetDefaultInterface: _UADataValue;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUADataValue.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUADataValue.Destroy;
begin
  inherited Destroy;
end;

function TUADataValue.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUADataValue.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUADataValue.Get_ToString_2(const format: WideString; const formatProvider: IFormatProvider): WideString;
begin
  Result := DefaultInterface.ToString_2[format, formatProvider];
end;

function TUADataValue.Get_ToString_3(const format: WideString): WideString;
begin
  Result := DefaultInterface.ToString_3[format];
end;

function TUADataValue.Get_HasBadStatus: WordBool;
begin
  Result := DefaultInterface.HasBadStatus;
end;

function TUADataValue.Get_HasGoodStatus: WordBool;
begin
  Result := DefaultInterface.HasGoodStatus;
end;

function TUADataValue.Get_HasServerTimestamp: WordBool;
begin
  Result := DefaultInterface.HasServerTimestamp;
end;

function TUADataValue.Get_HasSourceTimestamp: WordBool;
begin
  Result := DefaultInterface.HasSourceTimestamp;
end;

function TUADataValue.Get_HasUncertainStatus: WordBool;
begin
  Result := DefaultInterface.HasUncertainStatus;
end;

function TUADataValue.Get_HasValue: WordBool;
begin
  Result := DefaultInterface.HasValue;
end;

function TUADataValue.Get_ServerPicoseconds: Integer;
begin
  Result := DefaultInterface.ServerPicoseconds;
end;

procedure TUADataValue.Set_ServerPicoseconds(pRetVal: Integer);
begin
  DefaultInterface.ServerPicoseconds := pRetVal;
end;

function TUADataValue.Get_ServerTimestamp: TDateTime;
begin
  Result := DefaultInterface.ServerTimestamp;
end;

procedure TUADataValue.Set_ServerTimestamp(pRetVal: TDateTime);
begin
  DefaultInterface.ServerTimestamp := pRetVal;
end;

function TUADataValue.Get_ServerTimestampDouble: Double;
begin
  Result := DefaultInterface.ServerTimestampDouble;
end;

procedure TUADataValue.Set_ServerTimestampDouble(pRetVal: Double);
begin
  DefaultInterface.ServerTimestampDouble := pRetVal;
end;

function TUADataValue.Get_ServerTimestampLocal: TDateTime;
begin
  Result := DefaultInterface.ServerTimestampLocal;
end;

procedure TUADataValue.Set_ServerTimestampLocal(pRetVal: TDateTime);
begin
  DefaultInterface.ServerTimestampLocal := pRetVal;
end;

function TUADataValue.Get_ServerTimestampLocalDouble: Double;
begin
  Result := DefaultInterface.ServerTimestampLocalDouble;
end;

procedure TUADataValue.Set_ServerTimestampLocalDouble(pRetVal: Double);
begin
  DefaultInterface.ServerTimestampLocalDouble := pRetVal;
end;

function TUADataValue.Get_SourcePicoseconds: Integer;
begin
  Result := DefaultInterface.SourcePicoseconds;
end;

procedure TUADataValue.Set_SourcePicoseconds(pRetVal: Integer);
begin
  DefaultInterface.SourcePicoseconds := pRetVal;
end;

function TUADataValue.Get_SourceTimestamp: TDateTime;
begin
  Result := DefaultInterface.SourceTimestamp;
end;

procedure TUADataValue.Set_SourceTimestamp(pRetVal: TDateTime);
begin
  DefaultInterface.SourceTimestamp := pRetVal;
end;

function TUADataValue.Get_SourceTimestampDouble: Double;
begin
  Result := DefaultInterface.SourceTimestampDouble;
end;

procedure TUADataValue.Set_SourceTimestampDouble(pRetVal: Double);
begin
  DefaultInterface.SourceTimestampDouble := pRetVal;
end;

function TUADataValue.Get_SourceTimestampLocal: TDateTime;
begin
  Result := DefaultInterface.SourceTimestampLocal;
end;

procedure TUADataValue.Set_SourceTimestampLocal(pRetVal: TDateTime);
begin
  DefaultInterface.SourceTimestampLocal := pRetVal;
end;

function TUADataValue.Get_SourceTimestampLocalDouble: Double;
begin
  Result := DefaultInterface.SourceTimestampLocalDouble;
end;

procedure TUADataValue.Set_SourceTimestampLocalDouble(pRetVal: Double);
begin
  DefaultInterface.SourceTimestampLocalDouble := pRetVal;
end;

function TUADataValue.Get_StatusCode: _UAStatusCode;
begin
  Result := DefaultInterface.StatusCode;
end;

procedure TUADataValue._Set_StatusCode(const pRetVal: _UAStatusCode);
begin
  DefaultInterface.StatusCode := pRetVal;
end;

function TUADataValue.Get_StatusInfo: StatusInfo;
begin
  Result := DefaultInterface.StatusInfo;
end;

function TUADataValue.Get_value: OleVariant;
begin
  Result := DefaultInterface.value;
end;

procedure TUADataValue._Set_value(pRetVal: OleVariant);
begin
  DefaultInterface.value := pRetVal;
end;

function TUADataValue.Get_ValueType: _Type;
begin
  Result := DefaultInterface.ValueType;
end;

function TUADataValue.Get_ValueTypeName: WideString;
begin
  Result := DefaultInterface.ValueTypeName;
end;

function TUADataValue.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUADataValue.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUADataValue.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUADataValue.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUADataValue.DisplayValue: WideString;
begin
  Result := DefaultInterface.DisplayValue;
end;

procedure TUADataValue.SetValue(value: OleVariant);
begin
  DefaultInterface.SetValue(value);
end;

class function CoUAResultException.Create: _UAResultException;
begin
  Result := CreateComObject(CLASS_UAResultException) as _UAResultException;
end;

class function CoUAResultException.CreateRemote(const MachineName: string): _UAResultException;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAResultException) as _UAResultException;
end;

procedure TUAResultException.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{B1E752EE-1C4D-49C8-BEE8-2A7219A47D25}';
    IntfIID:   '{DCB10B57-CD3F-46ED-8BB8-43D6F12F624B}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAResultException.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAResultException;
  end;
end;

procedure TUAResultException.ConnectTo(svrIntf: _UAResultException);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAResultException.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAResultException.GetDefaultInterface: _UAResultException;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAResultException.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAResultException.Destroy;
begin
  inherited Destroy;
end;

function TUAResultException.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAResultException.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAResultException.Get_Message: WideString;
begin
  Result := DefaultInterface.Message;
end;

function TUAResultException.Get_StackTrace: WideString;
begin
  Result := DefaultInterface.StackTrace;
end;

function TUAResultException.Get_HelpLink: WideString;
begin
  Result := DefaultInterface.HelpLink;
end;

procedure TUAResultException.Set_HelpLink(const pRetVal: WideString);
begin
  DefaultInterface.HelpLink := pRetVal;
end;

function TUAResultException.Get_Source: WideString;
begin
  Result := DefaultInterface.Source;
end;

procedure TUAResultException.Set_Source(const pRetVal: WideString);
begin
  DefaultInterface.Source := pRetVal;
end;

function TUAResultException.Get_InnerException: _Exception;
begin
  Result := DefaultInterface.InnerException;
end;

function TUAResultException.Get_TargetSite: _MethodBase;
begin
  Result := DefaultInterface.TargetSite;
end;

function TUAResultException.Get_Data: _Dictionary;
begin
  Result := DefaultInterface.Data;
end;

function TUAResultException.Get_HResult: Integer;
begin
  Result := DefaultInterface.HResult;
end;

function TUAResultException.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAResultException.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAResultException.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAResultException.GetBaseException: _Exception;
begin
  Result := DefaultInterface.GetBaseException;
end;

procedure TUAResultException.GetObjectData(const info: _SerializationInfo; context: StreamingContext);
begin
  DefaultInterface.GetObjectData(info, context);
end;

class function CoUAServiceException.Create: _UAServiceException;
begin
  Result := CreateComObject(CLASS_UAServiceException) as _UAServiceException;
end;

class function CoUAServiceException.CreateRemote(const MachineName: string): _UAServiceException;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAServiceException) as _UAServiceException;
end;

procedure TUAServiceException.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{83F4125E-A9CF-4071-AA2C-2D89BF13082A}';
    IntfIID:   '{24E865DB-0521-4A10-A995-42B21CB201FF}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAServiceException.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAServiceException;
  end;
end;

procedure TUAServiceException.ConnectTo(svrIntf: _UAServiceException);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAServiceException.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAServiceException.GetDefaultInterface: _UAServiceException;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAServiceException.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAServiceException.Destroy;
begin
  inherited Destroy;
end;

function TUAServiceException.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAServiceException.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAServiceException.Get_Message: WideString;
begin
  Result := DefaultInterface.Message;
end;

function TUAServiceException.Get_StackTrace: WideString;
begin
  Result := DefaultInterface.StackTrace;
end;

function TUAServiceException.Get_HelpLink: WideString;
begin
  Result := DefaultInterface.HelpLink;
end;

procedure TUAServiceException.Set_HelpLink(const pRetVal: WideString);
begin
  DefaultInterface.HelpLink := pRetVal;
end;

function TUAServiceException.Get_Source: WideString;
begin
  Result := DefaultInterface.Source;
end;

procedure TUAServiceException.Set_Source(const pRetVal: WideString);
begin
  DefaultInterface.Source := pRetVal;
end;

function TUAServiceException.Get_InnerException: _Exception;
begin
  Result := DefaultInterface.InnerException;
end;

function TUAServiceException.Get_TargetSite: _MethodBase;
begin
  Result := DefaultInterface.TargetSite;
end;

function TUAServiceException.Get_Data: _Dictionary;
begin
  Result := DefaultInterface.Data;
end;

function TUAServiceException.Get_HResult: Integer;
begin
  Result := DefaultInterface.HResult;
end;

function TUAServiceException.Get_ErrorId: WideString;
begin
  Result := DefaultInterface.ErrorId;
end;

function TUAServiceException.Get_InternalCode: Integer;
begin
  Result := DefaultInterface.InternalCode;
end;

function TUAServiceException.Get_ServiceResult: _UAServiceResult;
begin
  Result := DefaultInterface.ServiceResult;
end;

function TUAServiceException.Get_ServiceTargetSite: _MethodBase;
begin
  Result := DefaultInterface.ServiceTargetSite;
end;

function TUAServiceException.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAServiceException.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAServiceException.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAServiceException.GetBaseException: _Exception;
begin
  Result := DefaultInterface.GetBaseException;
end;

procedure TUAServiceException.GetObjectData(const info: _SerializationInfo; 
                                            context: StreamingContext);
begin
  DefaultInterface.GetObjectData(info, context);
end;

class function CoComEasyUAClientConnectionControl.Create: _EasyUAClientConnectionControl;
begin
  Result := CreateComObject(CLASS_ComEasyUAClientConnectionControl) as _EasyUAClientConnectionControl;
end;

class function CoComEasyUAClientConnectionControl.CreateRemote(const MachineName: string): _EasyUAClientConnectionControl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ComEasyUAClientConnectionControl) as _EasyUAClientConnectionControl;
end;

procedure TComEasyUAClientConnectionControl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{D092EB7F-D060-4A5E-8332-2EFB89DEFC56}';
    IntfIID:   '{2D98A3F0-0050-46CC-B3BD-3E9D57DD0A3B}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TComEasyUAClientConnectionControl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _EasyUAClientConnectionControl;
  end;
end;

procedure TComEasyUAClientConnectionControl.ConnectTo(svrIntf: _EasyUAClientConnectionControl);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TComEasyUAClientConnectionControl.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TComEasyUAClientConnectionControl.GetDefaultInterface: _EasyUAClientConnectionControl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TComEasyUAClientConnectionControl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TComEasyUAClientConnectionControl.Destroy;
begin
  inherited Destroy;
end;

function TComEasyUAClientConnectionControl.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TComEasyUAClientConnectionControl.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TComEasyUAClientConnectionControl.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TComEasyUAClientConnectionControl.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TComEasyUAClientConnectionControl.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TComEasyUAClientConnectionControl.LockConnection(endpointDescriptor: OleVariant): Integer;
begin
  Result := DefaultInterface.LockConnection(endpointDescriptor);
end;

procedure TComEasyUAClientConnectionControl.UnlockConnection(lockHandle: Integer);
begin
  DefaultInterface.UnlockConnection(lockHandle);
end;

class function CoComEasyUAClientNodeRegistration.Create: _EasyUAClientNodeRegistration;
begin
  Result := CreateComObject(CLASS_ComEasyUAClientNodeRegistration) as _EasyUAClientNodeRegistration;
end;

class function CoComEasyUAClientNodeRegistration.CreateRemote(const MachineName: string): _EasyUAClientNodeRegistration;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ComEasyUAClientNodeRegistration) as _EasyUAClientNodeRegistration;
end;

procedure TComEasyUAClientNodeRegistration.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{53387064-CD24-427D-AB58-F9FCEA55149E}';
    IntfIID:   '{630024EF-25C0-480C-A6D0-C37E8BD659E8}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TComEasyUAClientNodeRegistration.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _EasyUAClientNodeRegistration;
  end;
end;

procedure TComEasyUAClientNodeRegistration.ConnectTo(svrIntf: _EasyUAClientNodeRegistration);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TComEasyUAClientNodeRegistration.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TComEasyUAClientNodeRegistration.GetDefaultInterface: _EasyUAClientNodeRegistration;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TComEasyUAClientNodeRegistration.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TComEasyUAClientNodeRegistration.Destroy;
begin
  inherited Destroy;
end;

function TComEasyUAClientNodeRegistration.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TComEasyUAClientNodeRegistration.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TComEasyUAClientNodeRegistration.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TComEasyUAClientNodeRegistration.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TComEasyUAClientNodeRegistration.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TComEasyUAClientNodeRegistration.RegisterMultipleNodes(nodeArgumentsArray: OleVariant): PSafeArray;
begin
  Result := DefaultInterface.RegisterMultipleNodes(nodeArgumentsArray);
end;

function TComEasyUAClientNodeRegistration.RegisterNode(const endpointDescriptorString: WideString; 
                                                       const nodeDescriptorString: WideString): Integer;
begin
  Result := DefaultInterface.RegisterNode(endpointDescriptorString, nodeDescriptorString);
end;

procedure TComEasyUAClientNodeRegistration.UnregisterMultipleNodes(handlesToUnregisterArray: OleVariant);
begin
  DefaultInterface.UnregisterMultipleNodes(handlesToUnregisterArray);
end;

procedure TComEasyUAClientNodeRegistration.UnregisterNode(registrationHandle: Integer);
begin
  DefaultInterface.UnregisterNode(registrationHandle);
end;

class function CoUAPubSubHeader.Create: _UAPubSubHeader;
begin
  Result := CreateComObject(CLASS_UAPubSubHeader) as _UAPubSubHeader;
end;

class function CoUAPubSubHeader.CreateRemote(const MachineName: string): _UAPubSubHeader;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAPubSubHeader) as _UAPubSubHeader;
end;

procedure TUAPubSubHeader.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{C307BBEB-FA89-4BBD-9659-6C94B7A6B63F}';
    IntfIID:   '{34C0B10D-C825-4302-9B07-F9FACEC9CB90}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAPubSubHeader.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAPubSubHeader;
  end;
end;

procedure TUAPubSubHeader.ConnectTo(svrIntf: _UAPubSubHeader);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAPubSubHeader.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAPubSubHeader.GetDefaultInterface: _UAPubSubHeader;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAPubSubHeader.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAPubSubHeader.Destroy;
begin
  inherited Destroy;
end;

function TUAPubSubHeader.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAPubSubHeader.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAPubSubHeader.Get_DataSetWriterId: Integer;
begin
  Result := DefaultInterface.DataSetWriterId;
end;

procedure TUAPubSubHeader.Set_DataSetWriterId(pRetVal: Integer);
begin
  DefaultInterface.DataSetWriterId := pRetVal;
end;

function TUAPubSubHeader.Get_DataSetWriterName: WideString;
begin
  Result := DefaultInterface.DataSetWriterName;
end;

procedure TUAPubSubHeader.Set_DataSetWriterName(const pRetVal: WideString);
begin
  DefaultInterface.DataSetWriterName := pRetVal;
end;

function TUAPubSubHeader.Get_HasDataSetWriterId: WordBool;
begin
  Result := DefaultInterface.HasDataSetWriterId;
end;

function TUAPubSubHeader.Get_HasDataSetWriterName: WordBool;
begin
  Result := DefaultInterface.HasDataSetWriterName;
end;

function TUAPubSubHeader.Get_HasPublisherId: WordBool;
begin
  Result := DefaultInterface.HasPublisherId;
end;

function TUAPubSubHeader.Get_HasWriterGroupId: WordBool;
begin
  Result := DefaultInterface.HasWriterGroupId;
end;

function TUAPubSubHeader.Get_HasWriterGroupName: WordBool;
begin
  Result := DefaultInterface.HasWriterGroupName;
end;

function TUAPubSubHeader.Get_PublisherId: _UAPublisherId;
begin
  Result := DefaultInterface.PublisherId;
end;

procedure TUAPubSubHeader._Set_PublisherId(const pRetVal: _UAPublisherId);
begin
  DefaultInterface.PublisherId := pRetVal;
end;

function TUAPubSubHeader.Get_WriterGroupId: Integer;
begin
  Result := DefaultInterface.WriterGroupId;
end;

procedure TUAPubSubHeader.Set_WriterGroupId(pRetVal: Integer);
begin
  DefaultInterface.WriterGroupId := pRetVal;
end;

function TUAPubSubHeader.Get_WriterGroupName: WideString;
begin
  Result := DefaultInterface.WriterGroupName;
end;

procedure TUAPubSubHeader.Set_WriterGroupName(const pRetVal: WideString);
begin
  DefaultInterface.WriterGroupName := pRetVal;
end;

function TUAPubSubHeader.Get_Compressed: WordBool;
begin
  Result := DefaultInterface.Compressed;
end;

procedure TUAPubSubHeader.Set_Compressed(pRetVal: WordBool);
begin
  DefaultInterface.Compressed := pRetVal;
end;

function TUAPubSubHeader.Get_ConfigurationVersion: _UAConfigurationVersion;
begin
  Result := DefaultInterface.ConfigurationVersion;
end;

procedure TUAPubSubHeader._Set_ConfigurationVersion(const pRetVal: _UAConfigurationVersion);
begin
  DefaultInterface.ConfigurationVersion := pRetVal;
end;

function TUAPubSubHeader.Get_DataSetClassId: TGUID;
begin
  Result := DefaultInterface.DataSetClassId;
end;

procedure TUAPubSubHeader.Set_DataSetClassId(pRetVal: TGUID);
begin
  DefaultInterface.DataSetClassId := pRetVal;
end;

function TUAPubSubHeader.Get_DataSetClassIdString: WideString;
begin
  Result := DefaultInterface.DataSetClassIdString;
end;

procedure TUAPubSubHeader.Set_DataSetClassIdString(const pRetVal: WideString);
begin
  DefaultInterface.DataSetClassIdString := pRetVal;
end;

function TUAPubSubHeader.Get_Encrypted: WordBool;
begin
  Result := DefaultInterface.Encrypted;
end;

procedure TUAPubSubHeader.Set_Encrypted(pRetVal: WordBool);
begin
  DefaultInterface.Encrypted := pRetVal;
end;

function TUAPubSubHeader.Get_HasConfigurationVersion: WordBool;
begin
  Result := DefaultInterface.HasConfigurationVersion;
end;

function TUAPubSubHeader.Get_HasDataSetClassId: WordBool;
begin
  Result := DefaultInterface.HasDataSetClassId;
end;

function TUAPubSubHeader.Get_HasOrigin: WordBool;
begin
  Result := DefaultInterface.HasOrigin;
end;

function TUAPubSubHeader.Get_MessageMappingName: WideString;
begin
  Result := DefaultInterface.MessageMappingName;
end;

procedure TUAPubSubHeader.Set_MessageMappingName(const pRetVal: WideString);
begin
  DefaultInterface.MessageMappingName := pRetVal;
end;

function TUAPubSubHeader.Get_Origin: OleVariant;
begin
  Result := DefaultInterface.Origin;
end;

procedure TUAPubSubHeader._Set_Origin(pRetVal: OleVariant);
begin
  DefaultInterface.Origin := pRetVal;
end;

function TUAPubSubHeader.Get_Retain: WordBool;
begin
  Result := DefaultInterface.Retain;
end;

procedure TUAPubSubHeader.Set_Retain(pRetVal: WordBool);
begin
  DefaultInterface.Retain := pRetVal;
end;

function TUAPubSubHeader.Get_Signed: WordBool;
begin
  Result := DefaultInterface.Signed;
end;

procedure TUAPubSubHeader.Set_Signed(pRetVal: WordBool);
begin
  DefaultInterface.Signed := pRetVal;
end;

function TUAPubSubHeader.Get_TransportMappingName: WideString;
begin
  Result := DefaultInterface.TransportMappingName;
end;

procedure TUAPubSubHeader.Set_TransportMappingName(const pRetVal: WideString);
begin
  DefaultInterface.TransportMappingName := pRetVal;
end;

function TUAPubSubHeader.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAPubSubHeader.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAPubSubHeader.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAPubSubHeader.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUAPubSubHeader.CompareTo(other: OleVariant): Integer;
begin
  Result := DefaultInterface.CompareTo(other);
end;

procedure TUAPubSubHeader.SetOrigin(value: OleVariant);
begin
  DefaultInterface.SetOrigin(value);
end;

class function CoUAPubSubLocators.Create: _UAPubSubLocators;
begin
  Result := CreateComObject(CLASS_UAPubSubLocators) as _UAPubSubLocators;
end;

class function CoUAPubSubLocators.CreateRemote(const MachineName: string): _UAPubSubLocators;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAPubSubLocators) as _UAPubSubLocators;
end;

procedure TUAPubSubLocators.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{3F9EC413-1A2E-4E0E-A8B3-1F283BB0029A}';
    IntfIID:   '{0D4EB582-A52A-4951-B9CF-46B79B21AA6B}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAPubSubLocators.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAPubSubLocators;
  end;
end;

procedure TUAPubSubLocators.ConnectTo(svrIntf: _UAPubSubLocators);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAPubSubLocators.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAPubSubLocators.GetDefaultInterface: _UAPubSubLocators;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAPubSubLocators.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAPubSubLocators.Destroy;
begin
  inherited Destroy;
end;

function TUAPubSubLocators.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAPubSubLocators.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAPubSubLocators.Get_DataSetWriterId: Integer;
begin
  Result := DefaultInterface.DataSetWriterId;
end;

procedure TUAPubSubLocators.Set_DataSetWriterId(pRetVal: Integer);
begin
  DefaultInterface.DataSetWriterId := pRetVal;
end;

function TUAPubSubLocators.Get_DataSetWriterName: WideString;
begin
  Result := DefaultInterface.DataSetWriterName;
end;

procedure TUAPubSubLocators.Set_DataSetWriterName(const pRetVal: WideString);
begin
  DefaultInterface.DataSetWriterName := pRetVal;
end;

function TUAPubSubLocators.Get_HasDataSetWriterId: WordBool;
begin
  Result := DefaultInterface.HasDataSetWriterId;
end;

function TUAPubSubLocators.Get_HasDataSetWriterName: WordBool;
begin
  Result := DefaultInterface.HasDataSetWriterName;
end;

function TUAPubSubLocators.Get_HasPublisherId: WordBool;
begin
  Result := DefaultInterface.HasPublisherId;
end;

function TUAPubSubLocators.Get_HasWriterGroupId: WordBool;
begin
  Result := DefaultInterface.HasWriterGroupId;
end;

function TUAPubSubLocators.Get_HasWriterGroupName: WordBool;
begin
  Result := DefaultInterface.HasWriterGroupName;
end;

function TUAPubSubLocators.Get_PublisherId: _UAPublisherId;
begin
  Result := DefaultInterface.PublisherId;
end;

procedure TUAPubSubLocators._Set_PublisherId(const pRetVal: _UAPublisherId);
begin
  DefaultInterface.PublisherId := pRetVal;
end;

function TUAPubSubLocators.Get_WriterGroupId: Integer;
begin
  Result := DefaultInterface.WriterGroupId;
end;

procedure TUAPubSubLocators.Set_WriterGroupId(pRetVal: Integer);
begin
  DefaultInterface.WriterGroupId := pRetVal;
end;

function TUAPubSubLocators.Get_WriterGroupName: WideString;
begin
  Result := DefaultInterface.WriterGroupName;
end;

procedure TUAPubSubLocators.Set_WriterGroupName(const pRetVal: WideString);
begin
  DefaultInterface.WriterGroupName := pRetVal;
end;

function TUAPubSubLocators.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAPubSubLocators.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAPubSubLocators.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAPubSubLocators.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUAPubSubLocators.CompareTo(other: OleVariant): Integer;
begin
  Result := DefaultInterface.CompareTo(other);
end;

class function CoUASubscribeDataSetArguments.Create: _UASubscribeDataSetArguments;
begin
  Result := CreateComObject(CLASS_UASubscribeDataSetArguments) as _UASubscribeDataSetArguments;
end;

class function CoUASubscribeDataSetArguments.CreateRemote(const MachineName: string): _UASubscribeDataSetArguments;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UASubscribeDataSetArguments) as _UASubscribeDataSetArguments;
end;

procedure TUASubscribeDataSetArguments.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{7A871DF3-1FE1-4D5F-BC84-961182C37347}';
    IntfIID:   '{B52904E1-6EE9-4AAE-868D-7C63DB6E5F7D}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUASubscribeDataSetArguments.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UASubscribeDataSetArguments;
  end;
end;

procedure TUASubscribeDataSetArguments.ConnectTo(svrIntf: _UASubscribeDataSetArguments);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUASubscribeDataSetArguments.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUASubscribeDataSetArguments.GetDefaultInterface: _UASubscribeDataSetArguments;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUASubscribeDataSetArguments.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUASubscribeDataSetArguments.Destroy;
begin
  inherited Destroy;
end;

function TUASubscribeDataSetArguments.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUASubscribeDataSetArguments.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUASubscribeDataSetArguments.Get_State: OleVariant;
begin
  Result := DefaultInterface.State;
end;

procedure TUASubscribeDataSetArguments._Set_State(pRetVal: OleVariant);
begin
  DefaultInterface.State := pRetVal;
end;

function TUASubscribeDataSetArguments.Get_DataSetSubscriptionDescriptor: _UADataSetSubscriptionDescriptor;
begin
  Result := DefaultInterface.DataSetSubscriptionDescriptor;
end;

procedure TUASubscribeDataSetArguments._Set_DataSetSubscriptionDescriptor(const pRetVal: _UADataSetSubscriptionDescriptor);
begin
  DefaultInterface.DataSetSubscriptionDescriptor := pRetVal;
end;

function TUASubscribeDataSetArguments.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUASubscribeDataSetArguments.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUASubscribeDataSetArguments.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUASubscribeDataSetArguments.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUASubscribeDataSetArguments.MemberwiseClone: _OperationArguments;
begin
  Result := DefaultInterface.MemberwiseClone;
end;

procedure TUASubscribeDataSetArguments.SetState(State: OleVariant);
begin
  DefaultInterface.SetState(State);
end;

class function CoEasyUADataSetSubscriptionChangeArguments.Create: _EasyUADataSetSubscriptionChangeArguments;
begin
  Result := CreateComObject(CLASS_EasyUADataSetSubscriptionChangeArguments) as _EasyUADataSetSubscriptionChangeArguments;
end;

class function CoEasyUADataSetSubscriptionChangeArguments.CreateRemote(const MachineName: string): _EasyUADataSetSubscriptionChangeArguments;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EasyUADataSetSubscriptionChangeArguments) as _EasyUADataSetSubscriptionChangeArguments;
end;

procedure TEasyUADataSetSubscriptionChangeArguments.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{BC6A01C3-DEC5-47D8-A1E0-9A75B370FF74}';
    IntfIID:   '{48E631D2-9858-4605-BF08-58AC05F0F9DA}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TEasyUADataSetSubscriptionChangeArguments.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _EasyUADataSetSubscriptionChangeArguments;
  end;
end;

procedure TEasyUADataSetSubscriptionChangeArguments.ConnectTo(svrIntf: _EasyUADataSetSubscriptionChangeArguments);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TEasyUADataSetSubscriptionChangeArguments.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TEasyUADataSetSubscriptionChangeArguments.GetDefaultInterface: _EasyUADataSetSubscriptionChangeArguments;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TEasyUADataSetSubscriptionChangeArguments.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TEasyUADataSetSubscriptionChangeArguments.Destroy;
begin
  inherited Destroy;
end;

function TEasyUADataSetSubscriptionChangeArguments.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TEasyUADataSetSubscriptionChangeArguments.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TEasyUADataSetSubscriptionChangeArguments.Get_State: OleVariant;
begin
  Result := DefaultInterface.State;
end;

procedure TEasyUADataSetSubscriptionChangeArguments._Set_State(pRetVal: OleVariant);
begin
  DefaultInterface.State := pRetVal;
end;

function TEasyUADataSetSubscriptionChangeArguments.Get_Handle: Integer;
begin
  Result := DefaultInterface.Handle;
end;

procedure TEasyUADataSetSubscriptionChangeArguments.Set_Handle(pRetVal: Integer);
begin
  DefaultInterface.Handle := pRetVal;
end;

function TEasyUADataSetSubscriptionChangeArguments.Get_Filter: _UASubscribeDataSetFilter;
begin
  Result := DefaultInterface.Filter;
end;

procedure TEasyUADataSetSubscriptionChangeArguments._Set_Filter(const pRetVal: _UASubscribeDataSetFilter);
begin
  DefaultInterface.Filter := pRetVal;
end;

function TEasyUADataSetSubscriptionChangeArguments.Get_DataSetMetaData: _UADataSetMetaData;
begin
  Result := DefaultInterface.DataSetMetaData;
end;

procedure TEasyUADataSetSubscriptionChangeArguments._Set_DataSetMetaData(const pRetVal: _UADataSetMetaData);
begin
  DefaultInterface.DataSetMetaData := pRetVal;
end;

function TEasyUADataSetSubscriptionChangeArguments.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TEasyUADataSetSubscriptionChangeArguments.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TEasyUADataSetSubscriptionChangeArguments.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TEasyUADataSetSubscriptionChangeArguments.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TEasyUADataSetSubscriptionChangeArguments.MemberwiseClone: _OperationArguments;
begin
  Result := DefaultInterface.MemberwiseClone;
end;

procedure TEasyUADataSetSubscriptionChangeArguments.SetState(State: OleVariant);
begin
  DefaultInterface.SetState(State);
end;

class function CoEasyUADataSetMessageEventArgs.Create: _EasyUADataSetMessageEventArgs;
begin
  Result := CreateComObject(CLASS_EasyUADataSetMessageEventArgs) as _EasyUADataSetMessageEventArgs;
end;

class function CoEasyUADataSetMessageEventArgs.CreateRemote(const MachineName: string): _EasyUADataSetMessageEventArgs;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EasyUADataSetMessageEventArgs) as _EasyUADataSetMessageEventArgs;
end;

procedure TEasyUADataSetMessageEventArgs.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{AB4ADB6F-E7CC-4FEB-91FF-A2A84E738B13}';
    IntfIID:   '{EB7AA408-2FD0-4331-B8A8-D0567E27C766}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TEasyUADataSetMessageEventArgs.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _EasyUADataSetMessageEventArgs;
  end;
end;

procedure TEasyUADataSetMessageEventArgs.ConnectTo(svrIntf: _EasyUADataSetMessageEventArgs);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TEasyUADataSetMessageEventArgs.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TEasyUADataSetMessageEventArgs.GetDefaultInterface: _EasyUADataSetMessageEventArgs;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TEasyUADataSetMessageEventArgs.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TEasyUADataSetMessageEventArgs.Destroy;
begin
  inherited Destroy;
end;

function TEasyUADataSetMessageEventArgs.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TEasyUADataSetMessageEventArgs.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TEasyUADataSetMessageEventArgs.Get_Diagnostics: _ExceptionCollection;
begin
  Result := DefaultInterface.Diagnostics;
end;

procedure TEasyUADataSetMessageEventArgs._Set_Diagnostics(const pRetVal: _ExceptionCollection);
begin
  DefaultInterface.Diagnostics := pRetVal;
end;

function TEasyUADataSetMessageEventArgs.Get_DiagnosticsCount: Integer;
begin
  Result := DefaultInterface.DiagnosticsCount;
end;

function TEasyUADataSetMessageEventArgs.Get_DiagnosticsSummary: WideString;
begin
  Result := DefaultInterface.DiagnosticsSummary;
end;

function TEasyUADataSetMessageEventArgs.Get_ErrorId: WideString;
begin
  Result := DefaultInterface.ErrorId;
end;

procedure TEasyUADataSetMessageEventArgs.Set_ErrorId(const pRetVal: WideString);
begin
  DefaultInterface.ErrorId := pRetVal;
end;

function TEasyUADataSetMessageEventArgs.Get_ErrorMessage: WideString;
begin
  Result := DefaultInterface.ErrorMessage;
end;

procedure TEasyUADataSetMessageEventArgs.Set_ErrorMessage(const pRetVal: WideString);
begin
  DefaultInterface.ErrorMessage := pRetVal;
end;

function TEasyUADataSetMessageEventArgs.Get_ErrorMessageBrief: WideString;
begin
  Result := DefaultInterface.ErrorMessageBrief;
end;

function TEasyUADataSetMessageEventArgs.Get_Exception: _Exception;
begin
  Result := DefaultInterface.Exception;
end;

procedure TEasyUADataSetMessageEventArgs._Set_Exception(const pRetVal: _Exception);
begin
  DefaultInterface.Exception := pRetVal;
end;

function TEasyUADataSetMessageEventArgs.Get_NormalizedDiagnostics: _NormalizedExceptionCollection;
begin
  Result := DefaultInterface.NormalizedDiagnostics;
end;

function TEasyUADataSetMessageEventArgs.Get_NormalizedException: _NormalizedException;
begin
  Result := DefaultInterface.NormalizedException;
end;

function TEasyUADataSetMessageEventArgs.Get_Succeeded: WordBool;
begin
  Result := DefaultInterface.Succeeded;
end;

function TEasyUADataSetMessageEventArgs.Get_PubSubLocators: _UAPubSubLocators;
begin
  Result := DefaultInterface.PubSubLocators;
end;

procedure TEasyUADataSetMessageEventArgs._Set_PubSubLocators(const pRetVal: _UAPubSubLocators);
begin
  DefaultInterface.PubSubLocators := pRetVal;
end;

function TEasyUADataSetMessageEventArgs.Get_ResolvedDataSetSubscriptionDescriptor: _UADataSetSubscriptionDescriptor;
begin
  Result := DefaultInterface.ResolvedDataSetSubscriptionDescriptor;
end;

procedure TEasyUADataSetMessageEventArgs._Set_ResolvedDataSetSubscriptionDescriptor(const pRetVal: _UADataSetSubscriptionDescriptor);
begin
  DefaultInterface.ResolvedDataSetSubscriptionDescriptor := pRetVal;
end;

function TEasyUADataSetMessageEventArgs.Get_Arguments: _EasyUASubscribeDataSetArguments;
begin
  Result := DefaultInterface.Arguments;
end;

procedure TEasyUADataSetMessageEventArgs._Set_Arguments(const pRetVal: _EasyUASubscribeDataSetArguments);
begin
  DefaultInterface.Arguments := pRetVal;
end;

function TEasyUADataSetMessageEventArgs.Get_DataSetData: _UADataSetData;
begin
  Result := DefaultInterface.DataSetData;
end;

procedure TEasyUADataSetMessageEventArgs._Set_DataSetData(const pRetVal: _UADataSetData);
begin
  DefaultInterface.DataSetData := pRetVal;
end;

function TEasyUADataSetMessageEventArgs.Get_DataSetHeader: _UADataSetHeader;
begin
  Result := DefaultInterface.DataSetHeader;
end;

procedure TEasyUADataSetMessageEventArgs._Set_DataSetHeader(const pRetVal: _UADataSetHeader);
begin
  DefaultInterface.DataSetHeader := pRetVal;
end;

function TEasyUADataSetMessageEventArgs.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TEasyUADataSetMessageEventArgs.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TEasyUADataSetMessageEventArgs.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TEasyUADataSetMessageEventArgs.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TEasyUADataSetMessageEventArgs.MemberwiseClone: _OperationEventArgs;
begin
  Result := DefaultInterface.MemberwiseClone;
end;

function TEasyUADataSetMessageEventArgs.ToLongString: WideString;
begin
  Result := DefaultInterface.ToLongString;
end;

class function CoEasyUAResolverAccessEventArgs.Create: _EasyUAResolverAccessEventArgs;
begin
  Result := CreateComObject(CLASS_EasyUAResolverAccessEventArgs) as _EasyUAResolverAccessEventArgs;
end;

class function CoEasyUAResolverAccessEventArgs.CreateRemote(const MachineName: string): _EasyUAResolverAccessEventArgs;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EasyUAResolverAccessEventArgs) as _EasyUAResolverAccessEventArgs;
end;

procedure TEasyUAResolverAccessEventArgs.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{A832053F-E56A-4790-BCA5-B38AEA2E9865}';
    IntfIID:   '{C565BB9D-B8CE-4806-B73D-BEE883F32B81}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TEasyUAResolverAccessEventArgs.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _EasyUAResolverAccessEventArgs;
  end;
end;

procedure TEasyUAResolverAccessEventArgs.ConnectTo(svrIntf: _EasyUAResolverAccessEventArgs);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TEasyUAResolverAccessEventArgs.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TEasyUAResolverAccessEventArgs.GetDefaultInterface: _EasyUAResolverAccessEventArgs;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TEasyUAResolverAccessEventArgs.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TEasyUAResolverAccessEventArgs.Destroy;
begin
  inherited Destroy;
end;

function TEasyUAResolverAccessEventArgs.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TEasyUAResolverAccessEventArgs.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TEasyUAResolverAccessEventArgs.Get_Exception: _Exception;
begin
  Result := DefaultInterface.Exception;
end;

function TEasyUAResolverAccessEventArgs.Get_ResolverDescriptor: _UAPubSubResolverDescriptor;
begin
  Result := DefaultInterface.ResolverDescriptor;
end;

procedure TEasyUAResolverAccessEventArgs._Set_ResolverDescriptor(const pRetVal: _UAPubSubResolverDescriptor);
begin
  DefaultInterface.ResolverDescriptor := pRetVal;
end;

function TEasyUAResolverAccessEventArgs.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TEasyUAResolverAccessEventArgs.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TEasyUAResolverAccessEventArgs.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TEasyUAResolverAccessEventArgs.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoEasyUASubscribeDataSetArgumentsDictionary.Create: _EasyUASubscribeDataSetArgumentsDictionary;
begin
  Result := CreateComObject(CLASS_EasyUASubscribeDataSetArgumentsDictionary) as _EasyUASubscribeDataSetArgumentsDictionary;
end;

class function CoEasyUASubscribeDataSetArgumentsDictionary.CreateRemote(const MachineName: string): _EasyUASubscribeDataSetArgumentsDictionary;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EasyUASubscribeDataSetArgumentsDictionary) as _EasyUASubscribeDataSetArgumentsDictionary;
end;

procedure TEasyUASubscribeDataSetArgumentsDictionary.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{A12AC987-73C1-4D38-BBEE-5147F2616B7B}';
    IntfIID:   '{14DE08AF-640B-46CE-A57C-FE2A4919E579}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TEasyUASubscribeDataSetArgumentsDictionary.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _EasyUASubscribeDataSetArgumentsDictionary;
  end;
end;

procedure TEasyUASubscribeDataSetArgumentsDictionary.ConnectTo(svrIntf: _EasyUASubscribeDataSetArgumentsDictionary);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TEasyUASubscribeDataSetArgumentsDictionary.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TEasyUASubscribeDataSetArgumentsDictionary.GetDefaultInterface: _EasyUASubscribeDataSetArgumentsDictionary;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TEasyUASubscribeDataSetArgumentsDictionary.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TEasyUASubscribeDataSetArgumentsDictionary.Destroy;
begin
  inherited Destroy;
end;

function TEasyUASubscribeDataSetArgumentsDictionary.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TEasyUASubscribeDataSetArgumentsDictionary.Get_Item(key: Integer): _EasyUASubscribeDataSetArguments;
begin
  Result := DefaultInterface.Item[key];
end;

procedure TEasyUASubscribeDataSetArgumentsDictionary._Set_Item(key: Integer; 
                                                               const pRetVal: _EasyUASubscribeDataSetArguments);
begin
  DefaultInterface.Item[key] := pRetVal;
end;

function TEasyUASubscribeDataSetArgumentsDictionary.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

function TEasyUASubscribeDataSetArgumentsDictionary.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TEasyUASubscribeDataSetArgumentsDictionary.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TEasyUASubscribeDataSetArgumentsDictionary.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TEasyUASubscribeDataSetArgumentsDictionary.GetEnumerator: IEnumVARIANT;
begin
  Result := DefaultInterface.GetEnumerator;
end;

procedure TEasyUASubscribeDataSetArgumentsDictionary.Add(key: Integer; Item: OleVariant);
begin
  DefaultInterface.Add(key, Item);
end;

procedure TEasyUASubscribeDataSetArgumentsDictionary.Clear;
begin
  DefaultInterface.Clear;
end;

function TEasyUASubscribeDataSetArgumentsDictionary.ContainsKey(key: Integer): WordBool;
begin
  Result := DefaultInterface.ContainsKey(key);
end;

function TEasyUASubscribeDataSetArgumentsDictionary.Remove(key: Integer): WordBool;
begin
  Result := DefaultInterface.Remove(key);
end;

function TEasyUASubscribeDataSetArgumentsDictionary.TryGetValue(key: Integer; out value: OleVariant): WordBool;
begin
  Result := DefaultInterface.TryGetValue(key, value);
end;

function TEasyUASubscribeDataSetArgumentsDictionary.ContainsValue(value: OleVariant): WordBool;
begin
  Result := DefaultInterface.ContainsValue(value);
end;

class function CoEasyUASubscriptionResolvedEventArgs.Create: _EasyUASubscriptionResolvedEventArgs;
begin
  Result := CreateComObject(CLASS_EasyUASubscriptionResolvedEventArgs) as _EasyUASubscriptionResolvedEventArgs;
end;

class function CoEasyUASubscriptionResolvedEventArgs.CreateRemote(const MachineName: string): _EasyUASubscriptionResolvedEventArgs;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EasyUASubscriptionResolvedEventArgs) as _EasyUASubscriptionResolvedEventArgs;
end;

procedure TEasyUASubscriptionResolvedEventArgs.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{74C6F7D0-288C-433B-ACAC-6FC86769AFEA}';
    IntfIID:   '{948E4C59-9521-4D4F-8355-5A9A4869C39A}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TEasyUASubscriptionResolvedEventArgs.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _EasyUASubscriptionResolvedEventArgs;
  end;
end;

procedure TEasyUASubscriptionResolvedEventArgs.ConnectTo(svrIntf: _EasyUASubscriptionResolvedEventArgs);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TEasyUASubscriptionResolvedEventArgs.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TEasyUASubscriptionResolvedEventArgs.GetDefaultInterface: _EasyUASubscriptionResolvedEventArgs;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TEasyUASubscriptionResolvedEventArgs.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TEasyUASubscriptionResolvedEventArgs.Destroy;
begin
  inherited Destroy;
end;

function TEasyUASubscriptionResolvedEventArgs.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TEasyUASubscriptionResolvedEventArgs.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TEasyUASubscriptionResolvedEventArgs.Get_DataSetSubscriptionDescriptor: _UADataSetSubscriptionDescriptor;
begin
  Result := DefaultInterface.DataSetSubscriptionDescriptor;
end;

procedure TEasyUASubscriptionResolvedEventArgs._Set_DataSetSubscriptionDescriptor(const pRetVal: _UADataSetSubscriptionDescriptor);
begin
  DefaultInterface.DataSetSubscriptionDescriptor := pRetVal;
end;

function TEasyUASubscriptionResolvedEventArgs.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TEasyUASubscriptionResolvedEventArgs.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TEasyUASubscriptionResolvedEventArgs.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TEasyUASubscriptionResolvedEventArgs.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoEasyUASubscribeDataSetArguments.Create: _EasyUASubscribeDataSetArguments;
begin
  Result := CreateComObject(CLASS_EasyUASubscribeDataSetArguments) as _EasyUASubscribeDataSetArguments;
end;

class function CoEasyUASubscribeDataSetArguments.CreateRemote(const MachineName: string): _EasyUASubscribeDataSetArguments;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EasyUASubscribeDataSetArguments) as _EasyUASubscribeDataSetArguments;
end;

procedure TEasyUASubscribeDataSetArguments.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{0DF356DA-30CF-48D1-AE01-9626CDBE4155}';
    IntfIID:   '{B1AA6506-00C4-481F-9839-771A56C3A70A}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TEasyUASubscribeDataSetArguments.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _EasyUASubscribeDataSetArguments;
  end;
end;

procedure TEasyUASubscribeDataSetArguments.ConnectTo(svrIntf: _EasyUASubscribeDataSetArguments);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TEasyUASubscribeDataSetArguments.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TEasyUASubscribeDataSetArguments.GetDefaultInterface: _EasyUASubscribeDataSetArguments;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TEasyUASubscribeDataSetArguments.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TEasyUASubscribeDataSetArguments.Destroy;
begin
  inherited Destroy;
end;

function TEasyUASubscribeDataSetArguments.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TEasyUASubscribeDataSetArguments.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TEasyUASubscribeDataSetArguments.Get_State: OleVariant;
begin
  Result := DefaultInterface.State;
end;

procedure TEasyUASubscribeDataSetArguments._Set_State(pRetVal: OleVariant);
begin
  DefaultInterface.State := pRetVal;
end;

function TEasyUASubscribeDataSetArguments.Get_DataSetSubscriptionDescriptor: _UADataSetSubscriptionDescriptor;
begin
  Result := DefaultInterface.DataSetSubscriptionDescriptor;
end;

procedure TEasyUASubscribeDataSetArguments._Set_DataSetSubscriptionDescriptor(const pRetVal: _UADataSetSubscriptionDescriptor);
begin
  DefaultInterface.DataSetSubscriptionDescriptor := pRetVal;
end;

function TEasyUASubscribeDataSetArguments.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TEasyUASubscribeDataSetArguments.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TEasyUASubscribeDataSetArguments.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TEasyUASubscribeDataSetArguments.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TEasyUASubscribeDataSetArguments.MemberwiseClone: _OperationArguments;
begin
  Result := DefaultInterface.MemberwiseClone;
end;

procedure TEasyUASubscribeDataSetArguments.SetState(State: OleVariant);
begin
  DefaultInterface.SetState(State);
end;

class function CoUAPublishSubscribeElement.Create: _UAPublishSubscribeElement;
begin
  Result := CreateComObject(CLASS_UAPublishSubscribeElement) as _UAPublishSubscribeElement;
end;

class function CoUAPublishSubscribeElement.CreateRemote(const MachineName: string): _UAPublishSubscribeElement;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAPublishSubscribeElement) as _UAPublishSubscribeElement;
end;

procedure TUAPublishSubscribeElement.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{CA74823A-5F32-4A95-A0DD-EDF7A18D768A}';
    IntfIID:   '{B4BF8E98-91A3-4002-A514-3C50987E1D9B}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAPublishSubscribeElement.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAPublishSubscribeElement;
  end;
end;

procedure TUAPublishSubscribeElement.ConnectTo(svrIntf: _UAPublishSubscribeElement);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAPublishSubscribeElement.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAPublishSubscribeElement.GetDefaultInterface: _UAPublishSubscribeElement;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAPublishSubscribeElement.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAPublishSubscribeElement.Destroy;
begin
  inherited Destroy;
end;

function TUAPublishSubscribeElement.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAPublishSubscribeElement.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAPublishSubscribeElement.Get_SupportedTransportProfileUriStringSet: _StringSet;
begin
  Result := DefaultInterface.SupportedTransportProfileUriStringSet;
end;

procedure TUAPublishSubscribeElement._Set_SupportedTransportProfileUriStringSet(const pRetVal: _StringSet);
begin
  DefaultInterface.SupportedTransportProfileUriStringSet := pRetVal;
end;

function TUAPublishSubscribeElement.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAPublishSubscribeElement.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAPublishSubscribeElement.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAPublishSubscribeElement.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUAPublisherSubscriberAdaptableParameters.Create: _UAPublisherSubscriberAdaptableParameters;
begin
  Result := CreateComObject(CLASS_UAPublisherSubscriberAdaptableParameters) as _UAPublisherSubscriberAdaptableParameters;
end;

class function CoUAPublisherSubscriberAdaptableParameters.CreateRemote(const MachineName: string): _UAPublisherSubscriberAdaptableParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAPublisherSubscriberAdaptableParameters) as _UAPublisherSubscriberAdaptableParameters;
end;

procedure TUAPublisherSubscriberAdaptableParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{9B8C3689-164F-4FC1-8551-E986C18F9116}';
    IntfIID:   '{B567F45D-4581-40FC-9555-FA826E3477AD}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAPublisherSubscriberAdaptableParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAPublisherSubscriberAdaptableParameters;
  end;
end;

procedure TUAPublisherSubscriberAdaptableParameters.ConnectTo(svrIntf: _UAPublisherSubscriberAdaptableParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAPublisherSubscriberAdaptableParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAPublisherSubscriberAdaptableParameters.GetDefaultInterface: _UAPublisherSubscriberAdaptableParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAPublisherSubscriberAdaptableParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAPublisherSubscriberAdaptableParameters.Destroy;
begin
  inherited Destroy;
end;

function TUAPublisherSubscriberAdaptableParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAPublisherSubscriberAdaptableParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAPublisherSubscriberAdaptableParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUAPublisherSubscriberAdaptableParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUAPublisherSubscriberAdaptableParameters.Get_ManagedSecurityGroupParameters: _ManagedSecurityGroupParameters;
begin
  Result := DefaultInterface.ManagedSecurityGroupParameters;
end;

procedure TUAPublisherSubscriberAdaptableParameters._Set_ManagedSecurityGroupParameters(const pRetVal: _ManagedSecurityGroupParameters);
begin
  DefaultInterface.ManagedSecurityGroupParameters := pRetVal;
end;

function TUAPublisherSubscriberAdaptableParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAPublisherSubscriberAdaptableParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAPublisherSubscriberAdaptableParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAPublisherSubscriberAdaptableParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

procedure TUAPublisherSubscriberAdaptableParameters.Reset;
begin
  DefaultInterface.Reset;
end;

class function CoUAPubSubResolverParameters.Create: _UAPubSubResolverParameters;
begin
  Result := CreateComObject(CLASS_UAPubSubResolverParameters) as _UAPubSubResolverParameters;
end;

class function CoUAPubSubResolverParameters.CreateRemote(const MachineName: string): _UAPubSubResolverParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAPubSubResolverParameters) as _UAPubSubResolverParameters;
end;

procedure TUAPubSubResolverParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{5BBEF801-E8C8-4E43-A8B8-EADF8492B098}';
    IntfIID:   '{944E8BD0-A740-49F1-BCAE-6D190283E4F4}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAPubSubResolverParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAPubSubResolverParameters;
  end;
end;

procedure TUAPubSubResolverParameters.ConnectTo(svrIntf: _UAPubSubResolverParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAPubSubResolverParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAPubSubResolverParameters.GetDefaultInterface: _UAPubSubResolverParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAPubSubResolverParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAPubSubResolverParameters.Destroy;
begin
  inherited Destroy;
end;

function TUAPubSubResolverParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAPubSubResolverParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAPubSubResolverParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUAPubSubResolverParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUAPubSubResolverParameters.Get_ConfigurationResolutionParameters: _UAPublisherConfigurationResolutionParameters;
begin
  Result := DefaultInterface.ConfigurationResolutionParameters;
end;

procedure TUAPubSubResolverParameters._Set_ConfigurationResolutionParameters(const pRetVal: _UAPublisherConfigurationResolutionParameters);
begin
  DefaultInterface.ConfigurationResolutionParameters := pRetVal;
end;

function TUAPubSubResolverParameters.Get_PublisherEndpointResolverParameters: _UAPublisherEndpointResolverParameters;
begin
  Result := DefaultInterface.PublisherEndpointResolverParameters;
end;

procedure TUAPubSubResolverParameters._Set_PublisherEndpointResolverParameters(const pRetVal: _UAPublisherEndpointResolverParameters);
begin
  DefaultInterface.PublisherEndpointResolverParameters := pRetVal;
end;

function TUAPubSubResolverParameters.Get_PublisherFileResourceResolverParameters: _PeriodicResolverParameters;
begin
  Result := DefaultInterface.PublisherFileResourceResolverParameters;
end;

procedure TUAPubSubResolverParameters._Set_PublisherFileResourceResolverParameters(const pRetVal: _PeriodicResolverParameters);
begin
  DefaultInterface.PublisherFileResourceResolverParameters := pRetVal;
end;

function TUAPubSubResolverParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAPubSubResolverParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAPubSubResolverParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAPubSubResolverParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoEasyUASubscriberInstanceParameters.Create: _EasyUASubscriberInstanceParameters;
begin
  Result := CreateComObject(CLASS_EasyUASubscriberInstanceParameters) as _EasyUASubscriberInstanceParameters;
end;

class function CoEasyUASubscriberInstanceParameters.CreateRemote(const MachineName: string): _EasyUASubscriberInstanceParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EasyUASubscriberInstanceParameters) as _EasyUASubscriberInstanceParameters;
end;

procedure TEasyUASubscriberInstanceParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{9554FD95-D810-48B2-882B-9DDA95F392AF}';
    IntfIID:   '{BA81311A-64D2-43E4-AAC2-57CB06815BFF}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TEasyUASubscriberInstanceParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _EasyUASubscriberInstanceParameters;
  end;
end;

procedure TEasyUASubscriberInstanceParameters.ConnectTo(svrIntf: _EasyUASubscriberInstanceParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TEasyUASubscriberInstanceParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TEasyUASubscriberInstanceParameters.GetDefaultInterface: _EasyUASubscriberInstanceParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TEasyUASubscriberInstanceParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TEasyUASubscriberInstanceParameters.Destroy;
begin
  inherited Destroy;
end;

function TEasyUASubscriberInstanceParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TEasyUASubscriberInstanceParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TEasyUASubscriberInstanceParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TEasyUASubscriberInstanceParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TEasyUASubscriberInstanceParameters.Get_PluginConfigurations: _ConfigurationPartCollection;
begin
  Result := DefaultInterface.PluginConfigurations;
end;

procedure TEasyUASubscriberInstanceParameters._Set_PluginConfigurations(const pRetVal: _ConfigurationPartCollection);
begin
  DefaultInterface.PluginConfigurations := pRetVal;
end;

function TEasyUASubscriberInstanceParameters.Get_PluginSetups: _PluginSetupCollection;
begin
  Result := DefaultInterface.PluginSetups;
end;

procedure TEasyUASubscriberInstanceParameters._Set_PluginSetups(const pRetVal: _PluginSetupCollection);
begin
  DefaultInterface.PluginSetups := pRetVal;
end;

function TEasyUASubscriberInstanceParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TEasyUASubscriberInstanceParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TEasyUASubscriberInstanceParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TEasyUASubscriberInstanceParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

procedure TEasyUASubscriberInstanceParameters.Reset;
begin
  DefaultInterface.Reset;
end;

class function CoEasyUASubscriberSharedParameters.Create: _EasyUASubscriberSharedParameters;
begin
  Result := CreateComObject(CLASS_EasyUASubscriberSharedParameters) as _EasyUASubscriberSharedParameters;
end;

class function CoEasyUASubscriberSharedParameters.CreateRemote(const MachineName: string): _EasyUASubscriberSharedParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EasyUASubscriberSharedParameters) as _EasyUASubscriberSharedParameters;
end;

procedure TEasyUASubscriberSharedParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{F6A3E4E3-CBF9-441A-96B6-8F65E8A1707A}';
    IntfIID:   '{F9C726A7-D353-4FF5-AD98-FDC507E10B68}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TEasyUASubscriberSharedParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _EasyUASubscriberSharedParameters;
  end;
end;

procedure TEasyUASubscriberSharedParameters.ConnectTo(svrIntf: _EasyUASubscriberSharedParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TEasyUASubscriberSharedParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TEasyUASubscriberSharedParameters.GetDefaultInterface: _EasyUASubscriberSharedParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TEasyUASubscriberSharedParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TEasyUASubscriberSharedParameters.Destroy;
begin
  inherited Destroy;
end;

function TEasyUASubscriberSharedParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TEasyUASubscriberSharedParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TEasyUASubscriberSharedParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TEasyUASubscriberSharedParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TEasyUASubscriberSharedParameters.Get_PluginConfigurations: _ConfigurationPartCollection;
begin
  Result := DefaultInterface.PluginConfigurations;
end;

procedure TEasyUASubscriberSharedParameters._Set_PluginConfigurations(const pRetVal: _ConfigurationPartCollection);
begin
  DefaultInterface.PluginConfigurations := pRetVal;
end;

function TEasyUASubscriberSharedParameters.Get_PluginSetups: _PluginSetupCollection;
begin
  Result := DefaultInterface.PluginSetups;
end;

procedure TEasyUASubscriberSharedParameters._Set_PluginSetups(const pRetVal: _PluginSetupCollection);
begin
  DefaultInterface.PluginSetups := pRetVal;
end;

function TEasyUASubscriberSharedParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TEasyUASubscriberSharedParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TEasyUASubscriberSharedParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TEasyUASubscriberSharedParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

procedure TEasyUASubscriberSharedParameters.Reset;
begin
  DefaultInterface.Reset;
end;

class function CoUAPublisherConfigurationResolutionParameters.Create: _UAPublisherConfigurationResolutionParameters;
begin
  Result := CreateComObject(CLASS_UAPublisherConfigurationResolutionParameters) as _UAPublisherConfigurationResolutionParameters;
end;

class function CoUAPublisherConfigurationResolutionParameters.CreateRemote(const MachineName: string): _UAPublisherConfigurationResolutionParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAPublisherConfigurationResolutionParameters) as _UAPublisherConfigurationResolutionParameters;
end;

procedure TUAPublisherConfigurationResolutionParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{F284DEF7-B2B1-48BB-9D68-5159404418BF}';
    IntfIID:   '{64684BBB-2874-47A7-99D7-73EDD3E1E02F}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAPublisherConfigurationResolutionParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAPublisherConfigurationResolutionParameters;
  end;
end;

procedure TUAPublisherConfigurationResolutionParameters.ConnectTo(svrIntf: _UAPublisherConfigurationResolutionParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAPublisherConfigurationResolutionParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAPublisherConfigurationResolutionParameters.GetDefaultInterface: _UAPublisherConfigurationResolutionParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAPublisherConfigurationResolutionParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAPublisherConfigurationResolutionParameters.Destroy;
begin
  inherited Destroy;
end;

function TUAPublisherConfigurationResolutionParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAPublisherConfigurationResolutionParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAPublisherConfigurationResolutionParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUAPublisherConfigurationResolutionParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUAPublisherConfigurationResolutionParameters.Get_MessageReceiveTimeoutFactor: Double;
begin
  Result := DefaultInterface.MessageReceiveTimeoutFactor;
end;

procedure TUAPublisherConfigurationResolutionParameters.Set_MessageReceiveTimeoutFactor(pRetVal: Double);
begin
  DefaultInterface.MessageReceiveTimeoutFactor := pRetVal;
end;

function TUAPublisherConfigurationResolutionParameters.Get_MessageReceiveTimeoutIncrease: Double;
begin
  Result := DefaultInterface.MessageReceiveTimeoutIncrease;
end;

procedure TUAPublisherConfigurationResolutionParameters.Set_MessageReceiveTimeoutIncrease(pRetVal: Double);
begin
  DefaultInterface.MessageReceiveTimeoutIncrease := pRetVal;
end;

function TUAPublisherConfigurationResolutionParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAPublisherConfigurationResolutionParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAPublisherConfigurationResolutionParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAPublisherConfigurationResolutionParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUAPublisherEndpointResolverParameters.Create: _UAPublisherEndpointResolverParameters;
begin
  Result := CreateComObject(CLASS_UAPublisherEndpointResolverParameters) as _UAPublisherEndpointResolverParameters;
end;

class function CoUAPublisherEndpointResolverParameters.CreateRemote(const MachineName: string): _UAPublisherEndpointResolverParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAPublisherEndpointResolverParameters) as _UAPublisherEndpointResolverParameters;
end;

procedure TUAPublisherEndpointResolverParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{992E3F65-D672-423D-AB67-FC2079EEFE90}';
    IntfIID:   '{369B6E35-3357-4E40-8E15-A1D6F9BE4CBD}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAPublisherEndpointResolverParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAPublisherEndpointResolverParameters;
  end;
end;

procedure TUAPublisherEndpointResolverParameters.ConnectTo(svrIntf: _UAPublisherEndpointResolverParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAPublisherEndpointResolverParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAPublisherEndpointResolverParameters.GetDefaultInterface: _UAPublisherEndpointResolverParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAPublisherEndpointResolverParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAPublisherEndpointResolverParameters.Destroy;
begin
  inherited Destroy;
end;

function TUAPublisherEndpointResolverParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAPublisherEndpointResolverParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAPublisherEndpointResolverParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUAPublisherEndpointResolverParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUAPublisherEndpointResolverParameters.Get_FailureRetrialDelay: Integer;
begin
  Result := DefaultInterface.FailureRetrialDelay;
end;

procedure TUAPublisherEndpointResolverParameters.Set_FailureRetrialDelay(pRetVal: Integer);
begin
  DefaultInterface.FailureRetrialDelay := pRetVal;
end;

function TUAPublisherEndpointResolverParameters.Get_MaximumWaitDelay: Integer;
begin
  Result := DefaultInterface.MaximumWaitDelay;
end;

procedure TUAPublisherEndpointResolverParameters.Set_MaximumWaitDelay(pRetVal: Integer);
begin
  DefaultInterface.MaximumWaitDelay := pRetVal;
end;

function TUAPublisherEndpointResolverParameters.Get_SuccessRetrialDelay: Integer;
begin
  Result := DefaultInterface.SuccessRetrialDelay;
end;

procedure TUAPublisherEndpointResolverParameters.Set_SuccessRetrialDelay(pRetVal: Integer);
begin
  DefaultInterface.SuccessRetrialDelay := pRetVal;
end;

function TUAPublisherEndpointResolverParameters.Get_pubSubConfigurationAccessMethod: UAPubSubConfigurationAccessMethod;
begin
  Result := DefaultInterface.pubSubConfigurationAccessMethod;
end;

procedure TUAPublisherEndpointResolverParameters.Set_pubSubConfigurationAccessMethod(pRetVal: UAPubSubConfigurationAccessMethod);
begin
  DefaultInterface.pubSubConfigurationAccessMethod := pRetVal;
end;

function TUAPublisherEndpointResolverParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAPublisherEndpointResolverParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAPublisherEndpointResolverParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAPublisherEndpointResolverParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoEasyUASubscriberAdaptableParameters.Create: _EasyUASubscriberAdaptableParameters;
begin
  Result := CreateComObject(CLASS_EasyUASubscriberAdaptableParameters) as _EasyUASubscriberAdaptableParameters;
end;

class function CoEasyUASubscriberAdaptableParameters.CreateRemote(const MachineName: string): _EasyUASubscriberAdaptableParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EasyUASubscriberAdaptableParameters) as _EasyUASubscriberAdaptableParameters;
end;

procedure TEasyUASubscriberAdaptableParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{96972DEB-7072-4C9F-B9B1-2F1D4A30BB1F}';
    IntfIID:   '{494CC092-F648-4A27-8910-7DB5E10E032A}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TEasyUASubscriberAdaptableParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _EasyUASubscriberAdaptableParameters;
  end;
end;

procedure TEasyUASubscriberAdaptableParameters.ConnectTo(svrIntf: _EasyUASubscriberAdaptableParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TEasyUASubscriberAdaptableParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TEasyUASubscriberAdaptableParameters.GetDefaultInterface: _EasyUASubscriberAdaptableParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TEasyUASubscriberAdaptableParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TEasyUASubscriberAdaptableParameters.Destroy;
begin
  inherited Destroy;
end;

function TEasyUASubscriberAdaptableParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TEasyUASubscriberAdaptableParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TEasyUASubscriberAdaptableParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TEasyUASubscriberAdaptableParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TEasyUASubscriberAdaptableParameters.Get_ManagedSecurityGroupParameters: _ManagedSecurityGroupParameters;
begin
  Result := DefaultInterface.ManagedSecurityGroupParameters;
end;

procedure TEasyUASubscriberAdaptableParameters._Set_ManagedSecurityGroupParameters(const pRetVal: _ManagedSecurityGroupParameters);
begin
  DefaultInterface.ManagedSecurityGroupParameters := pRetVal;
end;

function TEasyUASubscriberAdaptableParameters.Get_ResolverParameters: _EasyUAPubSubResolverParameters;
begin
  Result := DefaultInterface.ResolverParameters;
end;

procedure TEasyUASubscriberAdaptableParameters._Set_ResolverParameters(const pRetVal: _EasyUAPubSubResolverParameters);
begin
  DefaultInterface.ResolverParameters := pRetVal;
end;

function TEasyUASubscriberAdaptableParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TEasyUASubscriberAdaptableParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TEasyUASubscriberAdaptableParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TEasyUASubscriberAdaptableParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

procedure TEasyUASubscriberAdaptableParameters.Reset;
begin
  DefaultInterface.Reset;
end;

class function CoEasyUAPubSubResolverParameters.Create: _EasyUAPubSubResolverParameters;
begin
  Result := CreateComObject(CLASS_EasyUAPubSubResolverParameters) as _EasyUAPubSubResolverParameters;
end;

class function CoEasyUAPubSubResolverParameters.CreateRemote(const MachineName: string): _EasyUAPubSubResolverParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EasyUAPubSubResolverParameters) as _EasyUAPubSubResolverParameters;
end;

procedure TEasyUAPubSubResolverParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{5932600C-05A3-4F5E-BAB3-CF7DB2A5F387}';
    IntfIID:   '{26FDDFB7-1197-4B0A-9951-53B1C2847970}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TEasyUAPubSubResolverParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _EasyUAPubSubResolverParameters;
  end;
end;

procedure TEasyUAPubSubResolverParameters.ConnectTo(svrIntf: _EasyUAPubSubResolverParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TEasyUAPubSubResolverParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TEasyUAPubSubResolverParameters.GetDefaultInterface: _EasyUAPubSubResolverParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TEasyUAPubSubResolverParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TEasyUAPubSubResolverParameters.Destroy;
begin
  inherited Destroy;
end;

function TEasyUAPubSubResolverParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TEasyUAPubSubResolverParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TEasyUAPubSubResolverParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TEasyUAPubSubResolverParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TEasyUAPubSubResolverParameters.Get_ConfigurationResolutionParameters: _UAPublisherConfigurationResolutionParameters;
begin
  Result := DefaultInterface.ConfigurationResolutionParameters;
end;

procedure TEasyUAPubSubResolverParameters._Set_ConfigurationResolutionParameters(const pRetVal: _UAPublisherConfigurationResolutionParameters);
begin
  DefaultInterface.ConfigurationResolutionParameters := pRetVal;
end;

function TEasyUAPubSubResolverParameters.Get_PublisherEndpointResolverParameters: _UAPublisherEndpointResolverParameters;
begin
  Result := DefaultInterface.PublisherEndpointResolverParameters;
end;

procedure TEasyUAPubSubResolverParameters._Set_PublisherEndpointResolverParameters(const pRetVal: _UAPublisherEndpointResolverParameters);
begin
  DefaultInterface.PublisherEndpointResolverParameters := pRetVal;
end;

function TEasyUAPubSubResolverParameters.Get_PublisherFileResourceResolverParameters: _PeriodicResolverParameters;
begin
  Result := DefaultInterface.PublisherFileResourceResolverParameters;
end;

procedure TEasyUAPubSubResolverParameters._Set_PublisherFileResourceResolverParameters(const pRetVal: _PeriodicResolverParameters);
begin
  DefaultInterface.PublisherFileResourceResolverParameters := pRetVal;
end;

function TEasyUAPubSubResolverParameters.Get_ClientSelector: _EasyUAClientSelector;
begin
  Result := DefaultInterface.ClientSelector;
end;

procedure TEasyUAPubSubResolverParameters._Set_ClientSelector(const pRetVal: _EasyUAClientSelector);
begin
  DefaultInterface.ClientSelector := pRetVal;
end;

function TEasyUAPubSubResolverParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TEasyUAPubSubResolverParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TEasyUAPubSubResolverParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TEasyUAPubSubResolverParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUAPublishedDataSetElement.Create: _UAPublishedDataSetElement;
begin
  Result := CreateComObject(CLASS_UAPublishedDataSetElement) as _UAPublishedDataSetElement;
end;

class function CoUAPublishedDataSetElement.CreateRemote(const MachineName: string): _UAPublishedDataSetElement;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAPublishedDataSetElement) as _UAPublishedDataSetElement;
end;

procedure TUAPublishedDataSetElement.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{798F6976-C03A-46F9-A0C6-4E7F50FA6B4B}';
    IntfIID:   '{B5C6FE9E-40ED-45F5-8D2E-56C24DB99C95}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAPublishedDataSetElement.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAPublishedDataSetElement;
  end;
end;

procedure TUAPublishedDataSetElement.ConnectTo(svrIntf: _UAPublishedDataSetElement);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAPublishedDataSetElement.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAPublishedDataSetElement.GetDefaultInterface: _UAPublishedDataSetElement;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAPublishedDataSetElement.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAPublishedDataSetElement.Destroy;
begin
  inherited Destroy;
end;

function TUAPublishedDataSetElement.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAPublishedDataSetElement.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAPublishedDataSetElement.Get_ConfigurationVersion: _UAConfigurationVersion;
begin
  Result := DefaultInterface.ConfigurationVersion;
end;

procedure TUAPublishedDataSetElement._Set_ConfigurationVersion(const pRetVal: _UAConfigurationVersion);
begin
  DefaultInterface.ConfigurationVersion := pRetVal;
end;

function TUAPublishedDataSetElement.Get_DataSetClassId: TGUID;
begin
  Result := DefaultInterface.DataSetClassId;
end;

procedure TUAPublishedDataSetElement.Set_DataSetClassId(pRetVal: TGUID);
begin
  DefaultInterface.DataSetClassId := pRetVal;
end;

function TUAPublishedDataSetElement.Get_DataSetClassIdString: WideString;
begin
  Result := DefaultInterface.DataSetClassIdString;
end;

procedure TUAPublishedDataSetElement.Set_DataSetClassIdString(const pRetVal: WideString);
begin
  DefaultInterface.DataSetClassIdString := pRetVal;
end;

function TUAPublishedDataSetElement.Get_DataSetMetaData: _UADataSetMetaData;
begin
  Result := DefaultInterface.DataSetMetaData;
end;

procedure TUAPublishedDataSetElement._Set_DataSetMetaData(const pRetVal: _UADataSetMetaData);
begin
  DefaultInterface.DataSetMetaData := pRetVal;
end;

function TUAPublishedDataSetElement.Get_ExtensionFieldValueDictionary: _UAKeyValueDictionary;
begin
  Result := DefaultInterface.ExtensionFieldValueDictionary;
end;

procedure TUAPublishedDataSetElement._Set_ExtensionFieldValueDictionary(const pRetVal: _UAKeyValueDictionary);
begin
  DefaultInterface.ExtensionFieldValueDictionary := pRetVal;
end;

function TUAPublishedDataSetElement.Get_HasDataSetClassId: WordBool;
begin
  Result := DefaultInterface.HasDataSetClassId;
end;

function TUAPublishedDataSetElement.Get_Name: WideString;
begin
  Result := DefaultInterface.Name;
end;

procedure TUAPublishedDataSetElement.Set_Name(const pRetVal: WideString);
begin
  DefaultInterface.Name := pRetVal;
end;

function TUAPublishedDataSetElement.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAPublishedDataSetElement.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAPublishedDataSetElement.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAPublishedDataSetElement.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUAPubSubConfigurationElement.Create: _UAPubSubConfigurationElement;
begin
  Result := CreateComObject(CLASS_UAPubSubConfigurationElement) as _UAPubSubConfigurationElement;
end;

class function CoUAPubSubConfigurationElement.CreateRemote(const MachineName: string): _UAPubSubConfigurationElement;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAPubSubConfigurationElement) as _UAPubSubConfigurationElement;
end;

procedure TUAPubSubConfigurationElement.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{58CE4825-46EB-4F44-8FA5-CDCE71F78E94}';
    IntfIID:   '{F0A172D0-986C-4A8A-9FF5-60EAC4409764}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAPubSubConfigurationElement.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAPubSubConfigurationElement;
  end;
end;

procedure TUAPubSubConfigurationElement.ConnectTo(svrIntf: _UAPubSubConfigurationElement);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAPubSubConfigurationElement.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAPubSubConfigurationElement.GetDefaultInterface: _UAPubSubConfigurationElement;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAPubSubConfigurationElement.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAPubSubConfigurationElement.Destroy;
begin
  inherited Destroy;
end;

function TUAPubSubConfigurationElement.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAPubSubConfigurationElement.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAPubSubConfigurationElement.Get_Enabled: WordBool;
begin
  Result := DefaultInterface.Enabled;
end;

procedure TUAPubSubConfigurationElement.Set_Enabled(pRetVal: WordBool);
begin
  DefaultInterface.Enabled := pRetVal;
end;

function TUAPubSubConfigurationElement.Get_SecurityKeyServices: _UADiscoveryElementCollection;
begin
  Result := DefaultInterface.SecurityKeyServices;
end;

procedure TUAPubSubConfigurationElement._Set_SecurityKeyServices(const pRetVal: _UADiscoveryElementCollection);
begin
  DefaultInterface.SecurityKeyServices := pRetVal;
end;

function TUAPubSubConfigurationElement.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAPubSubConfigurationElement.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAPubSubConfigurationElement.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAPubSubConfigurationElement.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUAPubSubConnectionElement.Create: _UAPubSubConnectionElement;
begin
  Result := CreateComObject(CLASS_UAPubSubConnectionElement) as _UAPubSubConnectionElement;
end;

class function CoUAPubSubConnectionElement.CreateRemote(const MachineName: string): _UAPubSubConnectionElement;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAPubSubConnectionElement) as _UAPubSubConnectionElement;
end;

procedure TUAPubSubConnectionElement.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{BCDB627F-658A-4888-9AC6-5D44D84F7894}';
    IntfIID:   '{42C799D9-395C-468A-A968-DF81BEB32446}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAPubSubConnectionElement.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAPubSubConnectionElement;
  end;
end;

procedure TUAPubSubConnectionElement.ConnectTo(svrIntf: _UAPubSubConnectionElement);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAPubSubConnectionElement.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAPubSubConnectionElement.GetDefaultInterface: _UAPubSubConnectionElement;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAPubSubConnectionElement.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAPubSubConnectionElement.Destroy;
begin
  inherited Destroy;
end;

function TUAPubSubConnectionElement.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAPubSubConnectionElement.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAPubSubConnectionElement.Get_CustomPropertyValueDictionary: _UAKeyValueDictionary;
begin
  Result := DefaultInterface.CustomPropertyValueDictionary;
end;

procedure TUAPubSubConnectionElement._Set_CustomPropertyValueDictionary(const pRetVal: _UAKeyValueDictionary);
begin
  DefaultInterface.CustomPropertyValueDictionary := pRetVal;
end;

function TUAPubSubConnectionElement.Get_Name: WideString;
begin
  Result := DefaultInterface.Name;
end;

procedure TUAPubSubConnectionElement.Set_Name(const pRetVal: WideString);
begin
  DefaultInterface.Name := pRetVal;
end;

function TUAPubSubConnectionElement.Get_Enabled: WordBool;
begin
  Result := DefaultInterface.Enabled;
end;

procedure TUAPubSubConnectionElement.Set_Enabled(pRetVal: WordBool);
begin
  DefaultInterface.Enabled := pRetVal;
end;

function TUAPubSubConnectionElement.Get_NetworkAddress: _NetworkAddress;
begin
  Result := DefaultInterface.NetworkAddress;
end;

procedure TUAPubSubConnectionElement._Set_NetworkAddress(const pRetVal: _NetworkAddress);
begin
  DefaultInterface.NetworkAddress := pRetVal;
end;

function TUAPubSubConnectionElement.Get_PublisherId: _UAPublisherId;
begin
  Result := DefaultInterface.PublisherId;
end;

procedure TUAPubSubConnectionElement._Set_PublisherId(const pRetVal: _UAPublisherId);
begin
  DefaultInterface.PublisherId := pRetVal;
end;

function TUAPubSubConnectionElement.Get_TransportParameters: _UAConnectionTransportParameters;
begin
  Result := DefaultInterface.TransportParameters;
end;

procedure TUAPubSubConnectionElement._Set_TransportParameters(const pRetVal: _UAConnectionTransportParameters);
begin
  DefaultInterface.TransportParameters := pRetVal;
end;

function TUAPubSubConnectionElement.Get_TransportProfileUriString: WideString;
begin
  Result := DefaultInterface.TransportProfileUriString;
end;

procedure TUAPubSubConnectionElement.Set_TransportProfileUriString(const pRetVal: WideString);
begin
  DefaultInterface.TransportProfileUriString := pRetVal;
end;

function TUAPubSubConnectionElement.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAPubSubConnectionElement.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAPubSubConnectionElement.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAPubSubConnectionElement.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUAPubSubConnectionElement.ToUAPubSubConnectionDescriptor: _UAPubSubConnectionDescriptor;
begin
  Result := DefaultInterface.ToUAPubSubConnectionDescriptor;
end;

class function CoUAConnectionTransportParameters.Create: _UAConnectionTransportParameters;
begin
  Result := CreateComObject(CLASS_UAConnectionTransportParameters) as _UAConnectionTransportParameters;
end;

class function CoUAConnectionTransportParameters.CreateRemote(const MachineName: string): _UAConnectionTransportParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAConnectionTransportParameters) as _UAConnectionTransportParameters;
end;

procedure TUAConnectionTransportParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{A43A5939-D08D-48D9-B8CF-D487E9D019CD}';
    IntfIID:   '{E650C346-85FB-49C5-8051-29FEF4A71682}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAConnectionTransportParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAConnectionTransportParameters;
  end;
end;

procedure TUAConnectionTransportParameters.ConnectTo(svrIntf: _UAConnectionTransportParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAConnectionTransportParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAConnectionTransportParameters.GetDefaultInterface: _UAConnectionTransportParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAConnectionTransportParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAConnectionTransportParameters.Destroy;
begin
  inherited Destroy;
end;

function TUAConnectionTransportParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAConnectionTransportParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAConnectionTransportParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUAConnectionTransportParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUAConnectionTransportParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAConnectionTransportParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAConnectionTransportParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAConnectionTransportParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUAConfigurationVersion.Create: _UAConfigurationVersion;
begin
  Result := CreateComObject(CLASS_UAConfigurationVersion) as _UAConfigurationVersion;
end;

class function CoUAConfigurationVersion.CreateRemote(const MachineName: string): _UAConfigurationVersion;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAConfigurationVersion) as _UAConfigurationVersion;
end;

procedure TUAConfigurationVersion.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{949BE0B2-0E2D-4F01-8B09-34B0127093FA}';
    IntfIID:   '{0514BCB9-150D-4D3B-9498-E068EEA87043}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAConfigurationVersion.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAConfigurationVersion;
  end;
end;

procedure TUAConfigurationVersion.ConnectTo(svrIntf: _UAConfigurationVersion);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAConfigurationVersion.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAConfigurationVersion.GetDefaultInterface: _UAConfigurationVersion;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAConfigurationVersion.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAConfigurationVersion.Destroy;
begin
  inherited Destroy;
end;

function TUAConfigurationVersion.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAConfigurationVersion.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAConfigurationVersion.Get_IsNull: WordBool;
begin
  Result := DefaultInterface.IsNull;
end;

function TUAConfigurationVersion.Get_MajorVersionDateTime: TDateTime;
begin
  Result := DefaultInterface.MajorVersionDateTime;
end;

procedure TUAConfigurationVersion.Set_MajorVersionDateTime(pRetVal: TDateTime);
begin
  DefaultInterface.MajorVersionDateTime := pRetVal;
end;

function TUAConfigurationVersion.Get_MajorVersionDateTimeLocal: TDateTime;
begin
  Result := DefaultInterface.MajorVersionDateTimeLocal;
end;

procedure TUAConfigurationVersion.Set_MajorVersionDateTimeLocal(pRetVal: TDateTime);
begin
  DefaultInterface.MajorVersionDateTimeLocal := pRetVal;
end;

function TUAConfigurationVersion.Get_MajorVersionTime: Int64;
begin
  Result := DefaultInterface.MajorVersionTime;
end;

procedure TUAConfigurationVersion.Set_MajorVersionTime(pRetVal: Int64);
begin
  DefaultInterface.MajorVersionTime := pRetVal;
end;

function TUAConfigurationVersion.Get_MinorVersionDateTime: TDateTime;
begin
  Result := DefaultInterface.MinorVersionDateTime;
end;

procedure TUAConfigurationVersion.Set_MinorVersionDateTime(pRetVal: TDateTime);
begin
  DefaultInterface.MinorVersionDateTime := pRetVal;
end;

function TUAConfigurationVersion.Get_MinorVersionDateTimeLocal: TDateTime;
begin
  Result := DefaultInterface.MinorVersionDateTimeLocal;
end;

procedure TUAConfigurationVersion.Set_MinorVersionDateTimeLocal(pRetVal: TDateTime);
begin
  DefaultInterface.MinorVersionDateTimeLocal := pRetVal;
end;

function TUAConfigurationVersion.Get_MinorVersionTime: Int64;
begin
  Result := DefaultInterface.MinorVersionTime;
end;

procedure TUAConfigurationVersion.Set_MinorVersionTime(pRetVal: Int64);
begin
  DefaultInterface.MinorVersionTime := pRetVal;
end;

function TUAConfigurationVersion.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAConfigurationVersion.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAConfigurationVersion.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAConfigurationVersion.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUABrokerConnectionTransportParameters.Create: _UABrokerConnectionTransportParameters;
begin
  Result := CreateComObject(CLASS_UABrokerConnectionTransportParameters) as _UABrokerConnectionTransportParameters;
end;

class function CoUABrokerConnectionTransportParameters.CreateRemote(const MachineName: string): _UABrokerConnectionTransportParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UABrokerConnectionTransportParameters) as _UABrokerConnectionTransportParameters;
end;

procedure TUABrokerConnectionTransportParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{AB3064FE-9C7F-4A8F-BC1D-F928E46D6B67}';
    IntfIID:   '{03974A3E-6CF1-4C4C-A6EF-6E14D75A4E24}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUABrokerConnectionTransportParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UABrokerConnectionTransportParameters;
  end;
end;

procedure TUABrokerConnectionTransportParameters.ConnectTo(svrIntf: _UABrokerConnectionTransportParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUABrokerConnectionTransportParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUABrokerConnectionTransportParameters.GetDefaultInterface: _UABrokerConnectionTransportParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUABrokerConnectionTransportParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUABrokerConnectionTransportParameters.Destroy;
begin
  inherited Destroy;
end;

function TUABrokerConnectionTransportParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUABrokerConnectionTransportParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUABrokerConnectionTransportParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUABrokerConnectionTransportParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUABrokerConnectionTransportParameters.Get_AuthenticationProfileUriString: WideString;
begin
  Result := DefaultInterface.AuthenticationProfileUriString;
end;

procedure TUABrokerConnectionTransportParameters.Set_AuthenticationProfileUriString(const pRetVal: WideString);
begin
  DefaultInterface.AuthenticationProfileUriString := pRetVal;
end;

function TUABrokerConnectionTransportParameters.Get_ResourceUriString: WideString;
begin
  Result := DefaultInterface.ResourceUriString;
end;

procedure TUABrokerConnectionTransportParameters.Set_ResourceUriString(const pRetVal: WideString);
begin
  DefaultInterface.ResourceUriString := pRetVal;
end;

function TUABrokerConnectionTransportParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUABrokerConnectionTransportParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUABrokerConnectionTransportParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUABrokerConnectionTransportParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUADatagramConnectionTransportParameters.Create: _UADatagramConnectionTransportParameters;
begin
  Result := CreateComObject(CLASS_UADatagramConnectionTransportParameters) as _UADatagramConnectionTransportParameters;
end;

class function CoUADatagramConnectionTransportParameters.CreateRemote(const MachineName: string): _UADatagramConnectionTransportParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UADatagramConnectionTransportParameters) as _UADatagramConnectionTransportParameters;
end;

procedure TUADatagramConnectionTransportParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{43CFB687-BF0C-400E-8A2E-1E490140AE36}';
    IntfIID:   '{1119B094-5007-45B6-95E2-FB4AAE0B058D}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUADatagramConnectionTransportParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UADatagramConnectionTransportParameters;
  end;
end;

procedure TUADatagramConnectionTransportParameters.ConnectTo(svrIntf: _UADatagramConnectionTransportParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUADatagramConnectionTransportParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUADatagramConnectionTransportParameters.GetDefaultInterface: _UADatagramConnectionTransportParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUADatagramConnectionTransportParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUADatagramConnectionTransportParameters.Destroy;
begin
  inherited Destroy;
end;

function TUADatagramConnectionTransportParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUADatagramConnectionTransportParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUADatagramConnectionTransportParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUADatagramConnectionTransportParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUADatagramConnectionTransportParameters.Get_DiscoveryNetworkAddress: _NetworkAddress;
begin
  Result := DefaultInterface.DiscoveryNetworkAddress;
end;

procedure TUADatagramConnectionTransportParameters._Set_DiscoveryNetworkAddress(const pRetVal: _NetworkAddress);
begin
  DefaultInterface.DiscoveryNetworkAddress := pRetVal;
end;

function TUADatagramConnectionTransportParameters.Get_DiscoveryResourceAddress: _ResourceAddress;
begin
  Result := DefaultInterface.DiscoveryResourceAddress;
end;

procedure TUADatagramConnectionTransportParameters._Set_DiscoveryResourceAddress(const pRetVal: _ResourceAddress);
begin
  DefaultInterface.DiscoveryResourceAddress := pRetVal;
end;

function TUADatagramConnectionTransportParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUADatagramConnectionTransportParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUADatagramConnectionTransportParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUADatagramConnectionTransportParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUADatagramWriterGroupTransportParameters.Create: _UADatagramWriterGroupTransportParameters;
begin
  Result := CreateComObject(CLASS_UADatagramWriterGroupTransportParameters) as _UADatagramWriterGroupTransportParameters;
end;

class function CoUADatagramWriterGroupTransportParameters.CreateRemote(const MachineName: string): _UADatagramWriterGroupTransportParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UADatagramWriterGroupTransportParameters) as _UADatagramWriterGroupTransportParameters;
end;

procedure TUADatagramWriterGroupTransportParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{D4E27A38-F07E-4DB2-A0B1-56B1746CFDA6}';
    IntfIID:   '{26724D20-A513-4066-83BA-6E498C83DBDD}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUADatagramWriterGroupTransportParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UADatagramWriterGroupTransportParameters;
  end;
end;

procedure TUADatagramWriterGroupTransportParameters.ConnectTo(svrIntf: _UADatagramWriterGroupTransportParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUADatagramWriterGroupTransportParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUADatagramWriterGroupTransportParameters.GetDefaultInterface: _UADatagramWriterGroupTransportParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUADatagramWriterGroupTransportParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUADatagramWriterGroupTransportParameters.Destroy;
begin
  inherited Destroy;
end;

function TUADatagramWriterGroupTransportParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUADatagramWriterGroupTransportParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUADatagramWriterGroupTransportParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUADatagramWriterGroupTransportParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUADatagramWriterGroupTransportParameters.Get_Address: _NetworkAddress;
begin
  Result := DefaultInterface.Address;
end;

procedure TUADatagramWriterGroupTransportParameters._Set_Address(const pRetVal: _NetworkAddress);
begin
  DefaultInterface.Address := pRetVal;
end;

function TUADatagramWriterGroupTransportParameters.Get_MessageRepeatCount: Byte;
begin
  Result := DefaultInterface.MessageRepeatCount;
end;

procedure TUADatagramWriterGroupTransportParameters.Set_MessageRepeatCount(pRetVal: Byte);
begin
  DefaultInterface.MessageRepeatCount := pRetVal;
end;

function TUADatagramWriterGroupTransportParameters.Get_MessageRepeatDelay: Double;
begin
  Result := DefaultInterface.MessageRepeatDelay;
end;

procedure TUADatagramWriterGroupTransportParameters.Set_MessageRepeatDelay(pRetVal: Double);
begin
  DefaultInterface.MessageRepeatDelay := pRetVal;
end;

function TUADatagramWriterGroupTransportParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUADatagramWriterGroupTransportParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUADatagramWriterGroupTransportParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUADatagramWriterGroupTransportParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUADataSetFolderData.Create: _UADataSetFolderData;
begin
  Result := CreateComObject(CLASS_UADataSetFolderData) as _UADataSetFolderData;
end;

class function CoUADataSetFolderData.CreateRemote(const MachineName: string): _UADataSetFolderData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UADataSetFolderData) as _UADataSetFolderData;
end;

procedure TUADataSetFolderData.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{6228059C-878F-428C-817E-3B020D277282}';
    IntfIID:   '{B42A0B0E-BFD8-4689-ACF0-6E7DB1D549F2}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUADataSetFolderData.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UADataSetFolderData;
  end;
end;

procedure TUADataSetFolderData.ConnectTo(svrIntf: _UADataSetFolderData);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUADataSetFolderData.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUADataSetFolderData.GetDefaultInterface: _UADataSetFolderData;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUADataSetFolderData.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUADataSetFolderData.Destroy;
begin
  inherited Destroy;
end;

function TUADataSetFolderData.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUADataSetFolderData.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUADataSetFolderData.Get_Name: WideString;
begin
  Result := DefaultInterface.Name;
end;

procedure TUADataSetFolderData.Set_Name(const pRetVal: WideString);
begin
  DefaultInterface.Name := pRetVal;
end;

function TUADataSetFolderData.Get_PublishedDataSets: _UAPublishedDataSetDataCollection;
begin
  Result := DefaultInterface.PublishedDataSets;
end;

function TUADataSetFolderData.Get_Subfolders: _UADataSetFolderDataCollection;
begin
  Result := DefaultInterface.Subfolders;
end;

function TUADataSetFolderData.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUADataSetFolderData.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUADataSetFolderData.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUADataSetFolderData.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUADataSetFolderDataCollection.Create: _UADataSetFolderDataCollection;
begin
  Result := CreateComObject(CLASS_UADataSetFolderDataCollection) as _UADataSetFolderDataCollection;
end;

class function CoUADataSetFolderDataCollection.CreateRemote(const MachineName: string): _UADataSetFolderDataCollection;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UADataSetFolderDataCollection) as _UADataSetFolderDataCollection;
end;

procedure TUADataSetFolderDataCollection.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{5BD9679C-77B7-4968-BA3A-F12936064F8B}';
    IntfIID:   '{AF4D7B01-EEFD-4553-8079-8211B679F3DA}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUADataSetFolderDataCollection.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UADataSetFolderDataCollection;
  end;
end;

procedure TUADataSetFolderDataCollection.ConnectTo(svrIntf: _UADataSetFolderDataCollection);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUADataSetFolderDataCollection.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUADataSetFolderDataCollection.GetDefaultInterface: _UADataSetFolderDataCollection;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUADataSetFolderDataCollection.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUADataSetFolderDataCollection.Destroy;
begin
  inherited Destroy;
end;

function TUADataSetFolderDataCollection.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUADataSetFolderDataCollection.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUADataSetFolderDataCollection.Get_Item(const key: WideString): _UADataSetFolderData;
begin
  Result := DefaultInterface.Item[key];
end;

function TUADataSetFolderDataCollection.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

function TUADataSetFolderDataCollection.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUADataSetFolderDataCollection.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUADataSetFolderDataCollection.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUADataSetFolderDataCollection.GetEnumerator: IEnumVARIANT;
begin
  Result := DefaultInterface.GetEnumerator;
end;

procedure TUADataSetFolderDataCollection.Add(Item: OleVariant);
begin
  DefaultInterface.Add(Item);
end;

procedure TUADataSetFolderDataCollection.Clear;
begin
  DefaultInterface.Clear;
end;

function TUADataSetFolderDataCollection.Contains(Item: OleVariant): WordBool;
begin
  Result := DefaultInterface.Contains(Item);
end;

function TUADataSetFolderDataCollection.IndexOf(Item: OleVariant): Integer;
begin
  Result := DefaultInterface.IndexOf(Item);
end;

function TUADataSetFolderDataCollection.Remove(const key: WideString): WordBool;
begin
  Result := DefaultInterface.Remove(key);
end;

procedure TUADataSetFolderDataCollection.RemoveAt(index: Integer);
begin
  DefaultInterface.RemoveAt(index);
end;

function TUADataSetFolderDataCollection.ToList: _ElasticVector;
begin
  Result := DefaultInterface.ToList;
end;

function TUADataSetFolderDataCollection.TryGetValue(const key: WideString; out Item: OleVariant): WordBool;
begin
  Result := DefaultInterface.TryGetValue(key, Item);
end;

function TUADataSetFolderDataCollection.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUADataSetReaderMessageParameters.Create: _UADataSetReaderMessageParameters;
begin
  Result := CreateComObject(CLASS_UADataSetReaderMessageParameters) as _UADataSetReaderMessageParameters;
end;

class function CoUADataSetReaderMessageParameters.CreateRemote(const MachineName: string): _UADataSetReaderMessageParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UADataSetReaderMessageParameters) as _UADataSetReaderMessageParameters;
end;

procedure TUADataSetReaderMessageParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{8C4017B8-8853-48C5-99FC-A457D4B6256E}';
    IntfIID:   '{C31CF355-AAB9-4CFB-B9DC-D79266DF4D37}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUADataSetReaderMessageParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UADataSetReaderMessageParameters;
  end;
end;

procedure TUADataSetReaderMessageParameters.ConnectTo(svrIntf: _UADataSetReaderMessageParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUADataSetReaderMessageParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUADataSetReaderMessageParameters.GetDefaultInterface: _UADataSetReaderMessageParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUADataSetReaderMessageParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUADataSetReaderMessageParameters.Destroy;
begin
  inherited Destroy;
end;

function TUADataSetReaderMessageParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUADataSetReaderMessageParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUADataSetReaderMessageParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUADataSetReaderMessageParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUADataSetReaderMessageParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUADataSetReaderMessageParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUADataSetReaderMessageParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUADataSetReaderMessageParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUABrokerDataSetReaderTransportParameters.Create: _UABrokerDataSetReaderTransportParameters;
begin
  Result := CreateComObject(CLASS_UABrokerDataSetReaderTransportParameters) as _UABrokerDataSetReaderTransportParameters;
end;

class function CoUABrokerDataSetReaderTransportParameters.CreateRemote(const MachineName: string): _UABrokerDataSetReaderTransportParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UABrokerDataSetReaderTransportParameters) as _UABrokerDataSetReaderTransportParameters;
end;

procedure TUABrokerDataSetReaderTransportParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{7E050655-33C0-4E26-AB6F-1CF72A2ECE7C}';
    IntfIID:   '{8811FE82-2CA0-41B5-A98B-7C5B57EC9605}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUABrokerDataSetReaderTransportParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UABrokerDataSetReaderTransportParameters;
  end;
end;

procedure TUABrokerDataSetReaderTransportParameters.ConnectTo(svrIntf: _UABrokerDataSetReaderTransportParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUABrokerDataSetReaderTransportParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUABrokerDataSetReaderTransportParameters.GetDefaultInterface: _UABrokerDataSetReaderTransportParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUABrokerDataSetReaderTransportParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUABrokerDataSetReaderTransportParameters.Destroy;
begin
  inherited Destroy;
end;

function TUABrokerDataSetReaderTransportParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUABrokerDataSetReaderTransportParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUABrokerDataSetReaderTransportParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUABrokerDataSetReaderTransportParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUABrokerDataSetReaderTransportParameters.Get_AuthenticationProfileUriString: WideString;
begin
  Result := DefaultInterface.AuthenticationProfileUriString;
end;

procedure TUABrokerDataSetReaderTransportParameters.Set_AuthenticationProfileUriString(const pRetVal: WideString);
begin
  DefaultInterface.AuthenticationProfileUriString := pRetVal;
end;

function TUABrokerDataSetReaderTransportParameters.Get_MetaDataQueueName: WideString;
begin
  Result := DefaultInterface.MetaDataQueueName;
end;

procedure TUABrokerDataSetReaderTransportParameters.Set_MetaDataQueueName(const pRetVal: WideString);
begin
  DefaultInterface.MetaDataQueueName := pRetVal;
end;

function TUABrokerDataSetReaderTransportParameters.Get_QueueName: WideString;
begin
  Result := DefaultInterface.QueueName;
end;

procedure TUABrokerDataSetReaderTransportParameters.Set_QueueName(const pRetVal: WideString);
begin
  DefaultInterface.QueueName := pRetVal;
end;

function TUABrokerDataSetReaderTransportParameters.Get_RequestedDeliveryGuarantee: UABrokerTransportQualityOfService;
begin
  Result := DefaultInterface.RequestedDeliveryGuarantee;
end;

procedure TUABrokerDataSetReaderTransportParameters.Set_RequestedDeliveryGuarantee(pRetVal: UABrokerTransportQualityOfService);
begin
  DefaultInterface.RequestedDeliveryGuarantee := pRetVal;
end;

function TUABrokerDataSetReaderTransportParameters.Get_ResourceUriString: WideString;
begin
  Result := DefaultInterface.ResourceUriString;
end;

procedure TUABrokerDataSetReaderTransportParameters.Set_ResourceUriString(const pRetVal: WideString);
begin
  DefaultInterface.ResourceUriString := pRetVal;
end;

function TUABrokerDataSetReaderTransportParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUABrokerDataSetReaderTransportParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUABrokerDataSetReaderTransportParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUABrokerDataSetReaderTransportParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUADataSetWriterDataCollection.Create: _UADataSetWriterDataCollection;
begin
  Result := CreateComObject(CLASS_UADataSetWriterDataCollection) as _UADataSetWriterDataCollection;
end;

class function CoUADataSetWriterDataCollection.CreateRemote(const MachineName: string): _UADataSetWriterDataCollection;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UADataSetWriterDataCollection) as _UADataSetWriterDataCollection;
end;

procedure TUADataSetWriterDataCollection.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{11C65BF7-0789-48D3-AAA1-6BCC5F7D52CF}';
    IntfIID:   '{E043D88F-49AF-45AB-B9D1-B67F27BC775B}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUADataSetWriterDataCollection.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UADataSetWriterDataCollection;
  end;
end;

procedure TUADataSetWriterDataCollection.ConnectTo(svrIntf: _UADataSetWriterDataCollection);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUADataSetWriterDataCollection.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUADataSetWriterDataCollection.GetDefaultInterface: _UADataSetWriterDataCollection;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUADataSetWriterDataCollection.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUADataSetWriterDataCollection.Destroy;
begin
  inherited Destroy;
end;

function TUADataSetWriterDataCollection.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUADataSetWriterDataCollection.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUADataSetWriterDataCollection.Get_Item(const key: WideString): _UADataSetWriterData;
begin
  Result := DefaultInterface.Item[key];
end;

function TUADataSetWriterDataCollection.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

function TUADataSetWriterDataCollection.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUADataSetWriterDataCollection.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUADataSetWriterDataCollection.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUADataSetWriterDataCollection.GetEnumerator: IEnumVARIANT;
begin
  Result := DefaultInterface.GetEnumerator;
end;

procedure TUADataSetWriterDataCollection.Add(Item: OleVariant);
begin
  DefaultInterface.Add(Item);
end;

procedure TUADataSetWriterDataCollection.Clear;
begin
  DefaultInterface.Clear;
end;

function TUADataSetWriterDataCollection.Contains(Item: OleVariant): WordBool;
begin
  Result := DefaultInterface.Contains(Item);
end;

function TUADataSetWriterDataCollection.IndexOf(Item: OleVariant): Integer;
begin
  Result := DefaultInterface.IndexOf(Item);
end;

function TUADataSetWriterDataCollection.Remove(const key: WideString): WordBool;
begin
  Result := DefaultInterface.Remove(key);
end;

procedure TUADataSetWriterDataCollection.RemoveAt(index: Integer);
begin
  DefaultInterface.RemoveAt(index);
end;

function TUADataSetWriterDataCollection.ToList: _ElasticVector;
begin
  Result := DefaultInterface.ToList;
end;

function TUADataSetWriterDataCollection.TryGetValue(const key: WideString; out Item: OleVariant): WordBool;
begin
  Result := DefaultInterface.TryGetValue(key, Item);
end;

function TUADataSetWriterDataCollection.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUADataSetWriterElement.Create: _UADataSetWriterElement;
begin
  Result := CreateComObject(CLASS_UADataSetWriterElement) as _UADataSetWriterElement;
end;

class function CoUADataSetWriterElement.CreateRemote(const MachineName: string): _UADataSetWriterElement;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UADataSetWriterElement) as _UADataSetWriterElement;
end;

procedure TUADataSetWriterElement.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{8583E60F-A939-4FA8-A864-1BFDA1F7FF8D}';
    IntfIID:   '{62E37EEA-59BE-4E48-B423-4D5598B347B2}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUADataSetWriterElement.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UADataSetWriterElement;
  end;
end;

procedure TUADataSetWriterElement.ConnectTo(svrIntf: _UADataSetWriterElement);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUADataSetWriterElement.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUADataSetWriterElement.GetDefaultInterface: _UADataSetWriterElement;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUADataSetWriterElement.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUADataSetWriterElement.Destroy;
begin
  inherited Destroy;
end;

function TUADataSetWriterElement.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUADataSetWriterElement.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUADataSetWriterElement.Get_CustomPropertyValueDictionary: _UAKeyValueDictionary;
begin
  Result := DefaultInterface.CustomPropertyValueDictionary;
end;

procedure TUADataSetWriterElement._Set_CustomPropertyValueDictionary(const pRetVal: _UAKeyValueDictionary);
begin
  DefaultInterface.CustomPropertyValueDictionary := pRetVal;
end;

function TUADataSetWriterElement.Get_Name: WideString;
begin
  Result := DefaultInterface.Name;
end;

procedure TUADataSetWriterElement.Set_Name(const pRetVal: WideString);
begin
  DefaultInterface.Name := pRetVal;
end;

function TUADataSetWriterElement.Get_Enabled: WordBool;
begin
  Result := DefaultInterface.Enabled;
end;

procedure TUADataSetWriterElement.Set_Enabled(pRetVal: WordBool);
begin
  DefaultInterface.Enabled := pRetVal;
end;

function TUADataSetWriterElement.Get_DataSetFieldContentMask: UADataSetFieldContentMask;
begin
  Result := DefaultInterface.DataSetFieldContentMask;
end;

procedure TUADataSetWriterElement.Set_DataSetFieldContentMask(pRetVal: UADataSetFieldContentMask);
begin
  DefaultInterface.DataSetFieldContentMask := pRetVal;
end;

function TUADataSetWriterElement.Get_DataSetWriterId: Integer;
begin
  Result := DefaultInterface.DataSetWriterId;
end;

procedure TUADataSetWriterElement.Set_DataSetWriterId(pRetVal: Integer);
begin
  DefaultInterface.DataSetWriterId := pRetVal;
end;

function TUADataSetWriterElement.Get_KeyFrameCount: Int64;
begin
  Result := DefaultInterface.KeyFrameCount;
end;

procedure TUADataSetWriterElement.Set_KeyFrameCount(pRetVal: Int64);
begin
  DefaultInterface.KeyFrameCount := pRetVal;
end;

function TUADataSetWriterElement.Get_KeyFrameCountInt32: Integer;
begin
  Result := DefaultInterface.KeyFrameCountInt32;
end;

procedure TUADataSetWriterElement.Set_KeyFrameCountInt32(pRetVal: Integer);
begin
  DefaultInterface.KeyFrameCountInt32 := pRetVal;
end;

function TUADataSetWriterElement.Get_MessageParameters: _UADataSetWriterMessageParameters;
begin
  Result := DefaultInterface.MessageParameters;
end;

procedure TUADataSetWriterElement._Set_MessageParameters(const pRetVal: _UADataSetWriterMessageParameters);
begin
  DefaultInterface.MessageParameters := pRetVal;
end;

function TUADataSetWriterElement.Get_PublishedDataSetName: WideString;
begin
  Result := DefaultInterface.PublishedDataSetName;
end;

procedure TUADataSetWriterElement.Set_PublishedDataSetName(const pRetVal: WideString);
begin
  DefaultInterface.PublishedDataSetName := pRetVal;
end;

function TUADataSetWriterElement.Get_TransportParameters: _UADataSetWriterTransportParameters;
begin
  Result := DefaultInterface.TransportParameters;
end;

procedure TUADataSetWriterElement._Set_TransportParameters(const pRetVal: _UADataSetWriterTransportParameters);
begin
  DefaultInterface.TransportParameters := pRetVal;
end;

function TUADataSetWriterElement.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUADataSetWriterElement.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUADataSetWriterElement.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUADataSetWriterElement.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUADataSetWriterElement.ToUADataSetWriterDescriptor: _UADataSetWriterDescriptor;
begin
  Result := DefaultInterface.ToUADataSetWriterDescriptor;
end;

class function CoUADataSetWriterLocator.Create: _UADataSetWriterLocator;
begin
  Result := CreateComObject(CLASS_UADataSetWriterLocator) as _UADataSetWriterLocator;
end;

class function CoUADataSetWriterLocator.CreateRemote(const MachineName: string): _UADataSetWriterLocator;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UADataSetWriterLocator) as _UADataSetWriterLocator;
end;

procedure TUADataSetWriterLocator.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{C999F2DB-0B73-4D60-9A65-DAC6F244FF80}';
    IntfIID:   '{F926848D-B391-42A2-BB52-EAE387A5371B}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUADataSetWriterLocator.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UADataSetWriterLocator;
  end;
end;

procedure TUADataSetWriterLocator.ConnectTo(svrIntf: _UADataSetWriterLocator);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUADataSetWriterLocator.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUADataSetWriterLocator.GetDefaultInterface: _UADataSetWriterLocator;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUADataSetWriterLocator.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUADataSetWriterLocator.Destroy;
begin
  inherited Destroy;
end;

function TUADataSetWriterLocator.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUADataSetWriterLocator.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUADataSetWriterLocator.Get_DataSetWriterName: WideString;
begin
  Result := DefaultInterface.DataSetWriterName;
end;

procedure TUADataSetWriterLocator.Set_DataSetWriterName(const pRetVal: WideString);
begin
  DefaultInterface.DataSetWriterName := pRetVal;
end;

function TUADataSetWriterLocator.Get_PubSubConnectionName: WideString;
begin
  Result := DefaultInterface.PubSubConnectionName;
end;

procedure TUADataSetWriterLocator.Set_PubSubConnectionName(const pRetVal: WideString);
begin
  DefaultInterface.PubSubConnectionName := pRetVal;
end;

function TUADataSetWriterLocator.Get_WriterGroupName: WideString;
begin
  Result := DefaultInterface.WriterGroupName;
end;

procedure TUADataSetWriterLocator.Set_WriterGroupName(const pRetVal: WideString);
begin
  DefaultInterface.WriterGroupName := pRetVal;
end;

function TUADataSetWriterLocator.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUADataSetWriterLocator.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUADataSetWriterLocator.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUADataSetWriterLocator.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUABrokerDataSetWriterTransportParameters.Create: _UABrokerDataSetWriterTransportParameters;
begin
  Result := CreateComObject(CLASS_UABrokerDataSetWriterTransportParameters) as _UABrokerDataSetWriterTransportParameters;
end;

class function CoUABrokerDataSetWriterTransportParameters.CreateRemote(const MachineName: string): _UABrokerDataSetWriterTransportParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UABrokerDataSetWriterTransportParameters) as _UABrokerDataSetWriterTransportParameters;
end;

procedure TUABrokerDataSetWriterTransportParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{47D30246-B8AD-419C-874F-735E50582E88}';
    IntfIID:   '{CB810C59-3CA9-4D5C-B5DE-B5A3A31DA2F5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUABrokerDataSetWriterTransportParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UABrokerDataSetWriterTransportParameters;
  end;
end;

procedure TUABrokerDataSetWriterTransportParameters.ConnectTo(svrIntf: _UABrokerDataSetWriterTransportParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUABrokerDataSetWriterTransportParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUABrokerDataSetWriterTransportParameters.GetDefaultInterface: _UABrokerDataSetWriterTransportParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUABrokerDataSetWriterTransportParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUABrokerDataSetWriterTransportParameters.Destroy;
begin
  inherited Destroy;
end;

function TUABrokerDataSetWriterTransportParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUABrokerDataSetWriterTransportParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUABrokerDataSetWriterTransportParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUABrokerDataSetWriterTransportParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUABrokerDataSetWriterTransportParameters.Get_AuthenticationProfileUriString: WideString;
begin
  Result := DefaultInterface.AuthenticationProfileUriString;
end;

procedure TUABrokerDataSetWriterTransportParameters.Set_AuthenticationProfileUriString(const pRetVal: WideString);
begin
  DefaultInterface.AuthenticationProfileUriString := pRetVal;
end;

function TUABrokerDataSetWriterTransportParameters.Get_MetaDataQueueName: WideString;
begin
  Result := DefaultInterface.MetaDataQueueName;
end;

procedure TUABrokerDataSetWriterTransportParameters.Set_MetaDataQueueName(const pRetVal: WideString);
begin
  DefaultInterface.MetaDataQueueName := pRetVal;
end;

function TUABrokerDataSetWriterTransportParameters.Get_MetaDataUpdateTime: Double;
begin
  Result := DefaultInterface.MetaDataUpdateTime;
end;

procedure TUABrokerDataSetWriterTransportParameters.Set_MetaDataUpdateTime(pRetVal: Double);
begin
  DefaultInterface.MetaDataUpdateTime := pRetVal;
end;

function TUABrokerDataSetWriterTransportParameters.Get_QueueName: WideString;
begin
  Result := DefaultInterface.QueueName;
end;

procedure TUABrokerDataSetWriterTransportParameters.Set_QueueName(const pRetVal: WideString);
begin
  DefaultInterface.QueueName := pRetVal;
end;

function TUABrokerDataSetWriterTransportParameters.Get_RequestedDeliveryGuarantee: UABrokerTransportQualityOfService;
begin
  Result := DefaultInterface.RequestedDeliveryGuarantee;
end;

procedure TUABrokerDataSetWriterTransportParameters.Set_RequestedDeliveryGuarantee(pRetVal: UABrokerTransportQualityOfService);
begin
  DefaultInterface.RequestedDeliveryGuarantee := pRetVal;
end;

function TUABrokerDataSetWriterTransportParameters.Get_ResourceUriString: WideString;
begin
  Result := DefaultInterface.ResourceUriString;
end;

procedure TUABrokerDataSetWriterTransportParameters.Set_ResourceUriString(const pRetVal: WideString);
begin
  DefaultInterface.ResourceUriString := pRetVal;
end;

function TUABrokerDataSetWriterTransportParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUABrokerDataSetWriterTransportParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUABrokerDataSetWriterTransportParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUABrokerDataSetWriterTransportParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUAFieldMetaDataCollection.Create: _UAFieldMetaDataCollection;
begin
  Result := CreateComObject(CLASS_UAFieldMetaDataCollection) as _UAFieldMetaDataCollection;
end;

class function CoUAFieldMetaDataCollection.CreateRemote(const MachineName: string): _UAFieldMetaDataCollection;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAFieldMetaDataCollection) as _UAFieldMetaDataCollection;
end;

procedure TUAFieldMetaDataCollection.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{56F0D16D-8B4F-433B-95D4-BAF9D8CFD30B}';
    IntfIID:   '{F87FCA00-9D53-4ABF-9D3F-03BD1CD9F46E}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAFieldMetaDataCollection.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAFieldMetaDataCollection;
  end;
end;

procedure TUAFieldMetaDataCollection.ConnectTo(svrIntf: _UAFieldMetaDataCollection);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAFieldMetaDataCollection.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAFieldMetaDataCollection.GetDefaultInterface: _UAFieldMetaDataCollection;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAFieldMetaDataCollection.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAFieldMetaDataCollection.Destroy;
begin
  inherited Destroy;
end;

function TUAFieldMetaDataCollection.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAFieldMetaDataCollection.Get_Item(index: Integer): _UAFieldMetaData;
begin
  Result := DefaultInterface.Item[index];
end;

procedure TUAFieldMetaDataCollection._Set_Item(index: Integer; const pRetVal: _UAFieldMetaData);
begin
  DefaultInterface.Item[index] := pRetVal;
end;

function TUAFieldMetaDataCollection.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

function TUAFieldMetaDataCollection.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAFieldMetaDataCollection.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAFieldMetaDataCollection.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAFieldMetaDataCollection.GetEnumerator: IEnumVARIANT;
begin
  Result := DefaultInterface.GetEnumerator;
end;

procedure TUAFieldMetaDataCollection.Add(Item: OleVariant);
begin
  DefaultInterface.Add(Item);
end;

procedure TUAFieldMetaDataCollection.Clear;
begin
  DefaultInterface.Clear;
end;

function TUAFieldMetaDataCollection.Contains(Item: OleVariant): WordBool;
begin
  Result := DefaultInterface.Contains(Item);
end;

function TUAFieldMetaDataCollection.IndexOf(Item: OleVariant): Integer;
begin
  Result := DefaultInterface.IndexOf(Item);
end;

procedure TUAFieldMetaDataCollection.Insert(index: Integer; Item: OleVariant);
begin
  DefaultInterface.Insert(index, Item);
end;

function TUAFieldMetaDataCollection.Remove(Item: OleVariant): WordBool;
begin
  Result := DefaultInterface.Remove(Item);
end;

procedure TUAFieldMetaDataCollection.RemoveAt(index: Integer);
begin
  DefaultInterface.RemoveAt(index);
end;

function TUAFieldMetaDataCollection.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUAJsonDataSetReaderMessageParameters.Create: _UAJsonDataSetReaderMessageParameters;
begin
  Result := CreateComObject(CLASS_UAJsonDataSetReaderMessageParameters) as _UAJsonDataSetReaderMessageParameters;
end;

class function CoUAJsonDataSetReaderMessageParameters.CreateRemote(const MachineName: string): _UAJsonDataSetReaderMessageParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAJsonDataSetReaderMessageParameters) as _UAJsonDataSetReaderMessageParameters;
end;

procedure TUAJsonDataSetReaderMessageParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{58FC15DB-B991-4CC1-9A8E-ECBF4EF1FF50}';
    IntfIID:   '{1AFA8307-A142-4A4A-91E3-FEB7D2ED9270}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAJsonDataSetReaderMessageParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAJsonDataSetReaderMessageParameters;
  end;
end;

procedure TUAJsonDataSetReaderMessageParameters.ConnectTo(svrIntf: _UAJsonDataSetReaderMessageParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAJsonDataSetReaderMessageParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAJsonDataSetReaderMessageParameters.GetDefaultInterface: _UAJsonDataSetReaderMessageParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAJsonDataSetReaderMessageParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAJsonDataSetReaderMessageParameters.Destroy;
begin
  inherited Destroy;
end;

function TUAJsonDataSetReaderMessageParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAJsonDataSetReaderMessageParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAJsonDataSetReaderMessageParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUAJsonDataSetReaderMessageParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUAJsonDataSetReaderMessageParameters.Get_DataSetMessageContentMask: UAJsonDataSetMessageContentMask;
begin
  Result := DefaultInterface.DataSetMessageContentMask;
end;

procedure TUAJsonDataSetReaderMessageParameters.Set_DataSetMessageContentMask(pRetVal: UAJsonDataSetMessageContentMask);
begin
  DefaultInterface.DataSetMessageContentMask := pRetVal;
end;

function TUAJsonDataSetReaderMessageParameters.Get_NetworkMessageContentMask: UAJsonNetworkMessageContentMask;
begin
  Result := DefaultInterface.NetworkMessageContentMask;
end;

procedure TUAJsonDataSetReaderMessageParameters.Set_NetworkMessageContentMask(pRetVal: UAJsonNetworkMessageContentMask);
begin
  DefaultInterface.NetworkMessageContentMask := pRetVal;
end;

function TUAJsonDataSetReaderMessageParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAJsonDataSetReaderMessageParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAJsonDataSetReaderMessageParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAJsonDataSetReaderMessageParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUAJsonDataSetWriterMessageParameters.Create: _UAJsonDataSetWriterMessageParameters;
begin
  Result := CreateComObject(CLASS_UAJsonDataSetWriterMessageParameters) as _UAJsonDataSetWriterMessageParameters;
end;

class function CoUAJsonDataSetWriterMessageParameters.CreateRemote(const MachineName: string): _UAJsonDataSetWriterMessageParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAJsonDataSetWriterMessageParameters) as _UAJsonDataSetWriterMessageParameters;
end;

procedure TUAJsonDataSetWriterMessageParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{56EEFDD5-7197-4496-8320-51E147EF1AC8}';
    IntfIID:   '{001D188D-67A3-4BE3-82FC-9EE06DF4E527}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAJsonDataSetWriterMessageParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAJsonDataSetWriterMessageParameters;
  end;
end;

procedure TUAJsonDataSetWriterMessageParameters.ConnectTo(svrIntf: _UAJsonDataSetWriterMessageParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAJsonDataSetWriterMessageParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAJsonDataSetWriterMessageParameters.GetDefaultInterface: _UAJsonDataSetWriterMessageParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAJsonDataSetWriterMessageParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAJsonDataSetWriterMessageParameters.Destroy;
begin
  inherited Destroy;
end;

function TUAJsonDataSetWriterMessageParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAJsonDataSetWriterMessageParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAJsonDataSetWriterMessageParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUAJsonDataSetWriterMessageParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUAJsonDataSetWriterMessageParameters.Get_DataSetMessageContentMask: UAJsonDataSetMessageContentMask;
begin
  Result := DefaultInterface.DataSetMessageContentMask;
end;

procedure TUAJsonDataSetWriterMessageParameters.Set_DataSetMessageContentMask(pRetVal: UAJsonDataSetMessageContentMask);
begin
  DefaultInterface.DataSetMessageContentMask := pRetVal;
end;

function TUAJsonDataSetWriterMessageParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAJsonDataSetWriterMessageParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAJsonDataSetWriterMessageParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAJsonDataSetWriterMessageParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUAPublishedDataSetDataCollection.Create: _UAPublishedDataSetDataCollection;
begin
  Result := CreateComObject(CLASS_UAPublishedDataSetDataCollection) as _UAPublishedDataSetDataCollection;
end;

class function CoUAPublishedDataSetDataCollection.CreateRemote(const MachineName: string): _UAPublishedDataSetDataCollection;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAPublishedDataSetDataCollection) as _UAPublishedDataSetDataCollection;
end;

procedure TUAPublishedDataSetDataCollection.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{84FB0CD5-AC87-4C98-9E52-F314F1BA743B}';
    IntfIID:   '{AA28B62B-A8E5-4974-852C-F533DA8DD8DF}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAPublishedDataSetDataCollection.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAPublishedDataSetDataCollection;
  end;
end;

procedure TUAPublishedDataSetDataCollection.ConnectTo(svrIntf: _UAPublishedDataSetDataCollection);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAPublishedDataSetDataCollection.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAPublishedDataSetDataCollection.GetDefaultInterface: _UAPublishedDataSetDataCollection;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAPublishedDataSetDataCollection.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAPublishedDataSetDataCollection.Destroy;
begin
  inherited Destroy;
end;

function TUAPublishedDataSetDataCollection.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAPublishedDataSetDataCollection.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAPublishedDataSetDataCollection.Get_Item(const key: WideString): _UAPublishedDataSetData;
begin
  Result := DefaultInterface.Item[key];
end;

function TUAPublishedDataSetDataCollection.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

function TUAPublishedDataSetDataCollection.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAPublishedDataSetDataCollection.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAPublishedDataSetDataCollection.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAPublishedDataSetDataCollection.GetEnumerator: IEnumVARIANT;
begin
  Result := DefaultInterface.GetEnumerator;
end;

procedure TUAPublishedDataSetDataCollection.Add(Item: OleVariant);
begin
  DefaultInterface.Add(Item);
end;

procedure TUAPublishedDataSetDataCollection.Clear;
begin
  DefaultInterface.Clear;
end;

function TUAPublishedDataSetDataCollection.Contains(Item: OleVariant): WordBool;
begin
  Result := DefaultInterface.Contains(Item);
end;

function TUAPublishedDataSetDataCollection.IndexOf(Item: OleVariant): Integer;
begin
  Result := DefaultInterface.IndexOf(Item);
end;

function TUAPublishedDataSetDataCollection.Remove(const key: WideString): WordBool;
begin
  Result := DefaultInterface.Remove(key);
end;

procedure TUAPublishedDataSetDataCollection.RemoveAt(index: Integer);
begin
  DefaultInterface.RemoveAt(index);
end;

function TUAPublishedDataSetDataCollection.ToList: _ElasticVector;
begin
  Result := DefaultInterface.ToList;
end;

function TUAPublishedDataSetDataCollection.TryGetValue(const key: WideString; out Item: OleVariant): WordBool;
begin
  Result := DefaultInterface.TryGetValue(key, Item);
end;

function TUAPublishedDataSetDataCollection.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUAPublishedDataSetData.Create: _UAPublishedDataSetData;
begin
  Result := CreateComObject(CLASS_UAPublishedDataSetData) as _UAPublishedDataSetData;
end;

class function CoUAPublishedDataSetData.CreateRemote(const MachineName: string): _UAPublishedDataSetData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAPublishedDataSetData) as _UAPublishedDataSetData;
end;

procedure TUAPublishedDataSetData.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{CB4CFFFE-6C17-4310-AD0D-B5574BE496AA}';
    IntfIID:   '{453E8464-E93B-413F-B99D-C95F34F8CCA6}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAPublishedDataSetData.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAPublishedDataSetData;
  end;
end;

procedure TUAPublishedDataSetData.ConnectTo(svrIntf: _UAPublishedDataSetData);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAPublishedDataSetData.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAPublishedDataSetData.GetDefaultInterface: _UAPublishedDataSetData;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAPublishedDataSetData.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAPublishedDataSetData.Destroy;
begin
  inherited Destroy;
end;

function TUAPublishedDataSetData.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAPublishedDataSetData.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAPublishedDataSetData.Get_ConfigurationVersion: _UAConfigurationVersion;
begin
  Result := DefaultInterface.ConfigurationVersion;
end;

procedure TUAPublishedDataSetData._Set_ConfigurationVersion(const pRetVal: _UAConfigurationVersion);
begin
  DefaultInterface.ConfigurationVersion := pRetVal;
end;

function TUAPublishedDataSetData.Get_DataSetClassId: TGUID;
begin
  Result := DefaultInterface.DataSetClassId;
end;

procedure TUAPublishedDataSetData.Set_DataSetClassId(pRetVal: TGUID);
begin
  DefaultInterface.DataSetClassId := pRetVal;
end;

function TUAPublishedDataSetData.Get_DataSetClassIdString: WideString;
begin
  Result := DefaultInterface.DataSetClassIdString;
end;

procedure TUAPublishedDataSetData.Set_DataSetClassIdString(const pRetVal: WideString);
begin
  DefaultInterface.DataSetClassIdString := pRetVal;
end;

function TUAPublishedDataSetData.Get_ExtensionFieldValueDictionary: _UAKeyValueDictionary;
begin
  Result := DefaultInterface.ExtensionFieldValueDictionary;
end;

procedure TUAPublishedDataSetData._Set_ExtensionFieldValueDictionary(const pRetVal: _UAKeyValueDictionary);
begin
  DefaultInterface.ExtensionFieldValueDictionary := pRetVal;
end;

function TUAPublishedDataSetData.Get_HasDataSetClassId: WordBool;
begin
  Result := DefaultInterface.HasDataSetClassId;
end;

function TUAPublishedDataSetData.Get_Name: WideString;
begin
  Result := DefaultInterface.Name;
end;

procedure TUAPublishedDataSetData.Set_Name(const pRetVal: WideString);
begin
  DefaultInterface.Name := pRetVal;
end;

function TUAPublishedDataSetData.Get_DataSetMetaData: _UADataSetMetaData;
begin
  Result := DefaultInterface.DataSetMetaData;
end;

procedure TUAPublishedDataSetData._Set_DataSetMetaData(const pRetVal: _UADataSetMetaData);
begin
  DefaultInterface.DataSetMetaData := pRetVal;
end;

function TUAPublishedDataSetData.Get_DataSetSourceElement: _UAPublishedDataSetSourceElement;
begin
  Result := DefaultInterface.DataSetSourceElement;
end;

procedure TUAPublishedDataSetData._Set_DataSetSourceElement(const pRetVal: _UAPublishedDataSetSourceElement);
begin
  DefaultInterface.DataSetSourceElement := pRetVal;
end;

function TUAPublishedDataSetData.Get_DataSetFolderPath: _StringCollection;
begin
  Result := DefaultInterface.DataSetFolderPath;
end;

procedure TUAPublishedDataSetData._Set_DataSetFolderPath(const pRetVal: _StringCollection);
begin
  DefaultInterface.DataSetFolderPath := pRetVal;
end;

function TUAPublishedDataSetData.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAPublishedDataSetData.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAPublishedDataSetData.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAPublishedDataSetData.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUAPublishedDataItemsElement.Create: _UAPublishedDataItemsElement;
begin
  Result := CreateComObject(CLASS_UAPublishedDataItemsElement) as _UAPublishedDataItemsElement;
end;

class function CoUAPublishedDataItemsElement.CreateRemote(const MachineName: string): _UAPublishedDataItemsElement;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAPublishedDataItemsElement) as _UAPublishedDataItemsElement;
end;

procedure TUAPublishedDataItemsElement.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{71B5EB57-11E6-4557-BFF6-729422DDEB82}';
    IntfIID:   '{1D65B0A6-261F-4DA2-9878-8CFB173FDE6B}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAPublishedDataItemsElement.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAPublishedDataItemsElement;
  end;
end;

procedure TUAPublishedDataItemsElement.ConnectTo(svrIntf: _UAPublishedDataItemsElement);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAPublishedDataItemsElement.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAPublishedDataItemsElement.GetDefaultInterface: _UAPublishedDataItemsElement;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAPublishedDataItemsElement.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAPublishedDataItemsElement.Destroy;
begin
  inherited Destroy;
end;

function TUAPublishedDataItemsElement.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAPublishedDataItemsElement.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAPublishedDataItemsElement.Get_PublishedVariables: _UAPublishedVariableDataCollection;
begin
  Result := DefaultInterface.PublishedVariables;
end;

function TUAPublishedDataItemsElement.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAPublishedDataItemsElement.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAPublishedDataItemsElement.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAPublishedDataItemsElement.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUAPublishedDataItemsElement.AsPublishedDataItemsElement: _UAPublishedDataItemsElement;
begin
  Result := DefaultInterface.AsPublishedDataItemsElement;
end;

function TUAPublishedDataItemsElement.AsPublishedEventsElement: _UAPublishedEventsElement;
begin
  Result := DefaultInterface.AsPublishedEventsElement;
end;

class function CoUAPublishedEventsElement.Create: _UAPublishedEventsElement;
begin
  Result := CreateComObject(CLASS_UAPublishedEventsElement) as _UAPublishedEventsElement;
end;

class function CoUAPublishedEventsElement.CreateRemote(const MachineName: string): _UAPublishedEventsElement;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAPublishedEventsElement) as _UAPublishedEventsElement;
end;

procedure TUAPublishedEventsElement.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{DD9B75E7-AEFC-492B-9EB3-E28608767E1A}';
    IntfIID:   '{8E0FC48E-841B-4C19-9D08-DD6718CC628A}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAPublishedEventsElement.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAPublishedEventsElement;
  end;
end;

procedure TUAPublishedEventsElement.ConnectTo(svrIntf: _UAPublishedEventsElement);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAPublishedEventsElement.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAPublishedEventsElement.GetDefaultInterface: _UAPublishedEventsElement;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAPublishedEventsElement.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAPublishedEventsElement.Destroy;
begin
  inherited Destroy;
end;

function TUAPublishedEventsElement.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAPublishedEventsElement.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAPublishedEventsElement.Get_ContentFilter: _UAContentFilterElement;
begin
  Result := DefaultInterface.ContentFilter;
end;

procedure TUAPublishedEventsElement._Set_ContentFilter(const pRetVal: _UAContentFilterElement);
begin
  DefaultInterface.ContentFilter := pRetVal;
end;

function TUAPublishedEventsElement.Get_EventNotifier: _UANodeDescriptor;
begin
  Result := DefaultInterface.EventNotifier;
end;

procedure TUAPublishedEventsElement._Set_EventNotifier(const pRetVal: _UANodeDescriptor);
begin
  DefaultInterface.EventNotifier := pRetVal;
end;

function TUAPublishedEventsElement.Get_SelectedFields: _UASimpleAttributeOperandCollection;
begin
  Result := DefaultInterface.SelectedFields;
end;

procedure TUAPublishedEventsElement._Set_SelectedFields(const pRetVal: _UASimpleAttributeOperandCollection);
begin
  DefaultInterface.SelectedFields := pRetVal;
end;

function TUAPublishedEventsElement.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAPublishedEventsElement.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAPublishedEventsElement.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAPublishedEventsElement.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUAPublishedEventsElement.AsPublishedDataItemsElement: _UAPublishedDataItemsElement;
begin
  Result := DefaultInterface.AsPublishedDataItemsElement;
end;

function TUAPublishedEventsElement.AsPublishedEventsElement: _UAPublishedEventsElement;
begin
  Result := DefaultInterface.AsPublishedEventsElement;
end;

class function CoUAPublishedVariableData.Create: _UAPublishedVariableData;
begin
  Result := CreateComObject(CLASS_UAPublishedVariableData) as _UAPublishedVariableData;
end;

class function CoUAPublishedVariableData.CreateRemote(const MachineName: string): _UAPublishedVariableData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAPublishedVariableData) as _UAPublishedVariableData;
end;

procedure TUAPublishedVariableData.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{DA798E7B-F9EE-4C63-B134-AF1F7DA9C077}';
    IntfIID:   '{43B8EC27-B084-432B-8272-1F43314A8B09}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAPublishedVariableData.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAPublishedVariableData;
  end;
end;

procedure TUAPublishedVariableData.ConnectTo(svrIntf: _UAPublishedVariableData);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAPublishedVariableData.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAPublishedVariableData.GetDefaultInterface: _UAPublishedVariableData;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAPublishedVariableData.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAPublishedVariableData.Destroy;
begin
  inherited Destroy;
end;

function TUAPublishedVariableData.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAPublishedVariableData.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAPublishedVariableData.Get_AttributeId: UAAttributeId;
begin
  Result := DefaultInterface.AttributeId;
end;

procedure TUAPublishedVariableData.Set_AttributeId(pRetVal: UAAttributeId);
begin
  DefaultInterface.AttributeId := pRetVal;
end;

function TUAPublishedVariableData.Get_DeadbandType: UADeadbandType;
begin
  Result := DefaultInterface.DeadbandType;
end;

procedure TUAPublishedVariableData.Set_DeadbandType(pRetVal: UADeadbandType);
begin
  DefaultInterface.DeadbandType := pRetVal;
end;

function TUAPublishedVariableData.Get_DeadbandValue: Double;
begin
  Result := DefaultInterface.DeadbandValue;
end;

procedure TUAPublishedVariableData.Set_DeadbandValue(pRetVal: Double);
begin
  DefaultInterface.DeadbandValue := pRetVal;
end;

function TUAPublishedVariableData.Get_IndexRangeList: _UAIndexRangeList;
begin
  Result := DefaultInterface.IndexRangeList;
end;

procedure TUAPublishedVariableData._Set_IndexRangeList(const pRetVal: _UAIndexRangeList);
begin
  DefaultInterface.IndexRangeList := pRetVal;
end;

function TUAPublishedVariableData.Get_MetaDataPropertyNameSet: _UAQualifiedNameSet;
begin
  Result := DefaultInterface.MetaDataPropertyNameSet;
end;

procedure TUAPublishedVariableData._Set_MetaDataPropertyNameSet(const pRetVal: _UAQualifiedNameSet);
begin
  DefaultInterface.MetaDataPropertyNameSet := pRetVal;
end;

function TUAPublishedVariableData.Get_PublishedVariable: _UANodeId;
begin
  Result := DefaultInterface.PublishedVariable;
end;

procedure TUAPublishedVariableData._Set_PublishedVariable(const pRetVal: _UANodeId);
begin
  DefaultInterface.PublishedVariable := pRetVal;
end;

function TUAPublishedVariableData.Get_SamplingIntervalHint: Double;
begin
  Result := DefaultInterface.SamplingIntervalHint;
end;

procedure TUAPublishedVariableData.Set_SamplingIntervalHint(pRetVal: Double);
begin
  DefaultInterface.SamplingIntervalHint := pRetVal;
end;

function TUAPublishedVariableData.Get_SubstituteValue: OleVariant;
begin
  Result := DefaultInterface.SubstituteValue;
end;

procedure TUAPublishedVariableData._Set_SubstituteValue(pRetVal: OleVariant);
begin
  DefaultInterface.SubstituteValue := pRetVal;
end;

function TUAPublishedVariableData.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAPublishedVariableData.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAPublishedVariableData.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAPublishedVariableData.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

procedure TUAPublishedVariableData.SetSubstituteValue(SubstituteValue: OleVariant);
begin
  DefaultInterface.SetSubstituteValue(SubstituteValue);
end;

class function CoUAPublishedVariableDataCollection.Create: _UAPublishedVariableDataCollection;
begin
  Result := CreateComObject(CLASS_UAPublishedVariableDataCollection) as _UAPublishedVariableDataCollection;
end;

class function CoUAPublishedVariableDataCollection.CreateRemote(const MachineName: string): _UAPublishedVariableDataCollection;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAPublishedVariableDataCollection) as _UAPublishedVariableDataCollection;
end;

procedure TUAPublishedVariableDataCollection.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{C80DEA50-8085-4C82-9370-3981948EABC0}';
    IntfIID:   '{DD86E744-C8F9-4074-A726-9790AC6B512B}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAPublishedVariableDataCollection.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAPublishedVariableDataCollection;
  end;
end;

procedure TUAPublishedVariableDataCollection.ConnectTo(svrIntf: _UAPublishedVariableDataCollection);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAPublishedVariableDataCollection.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAPublishedVariableDataCollection.GetDefaultInterface: _UAPublishedVariableDataCollection;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAPublishedVariableDataCollection.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAPublishedVariableDataCollection.Destroy;
begin
  inherited Destroy;
end;

function TUAPublishedVariableDataCollection.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAPublishedVariableDataCollection.Get_Item(index: Integer): _UAPublishedVariableData;
begin
  Result := DefaultInterface.Item[index];
end;

procedure TUAPublishedVariableDataCollection._Set_Item(index: Integer; 
                                                       const pRetVal: _UAPublishedVariableData);
begin
  DefaultInterface.Item[index] := pRetVal;
end;

function TUAPublishedVariableDataCollection.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

function TUAPublishedVariableDataCollection.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAPublishedVariableDataCollection.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAPublishedVariableDataCollection.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAPublishedVariableDataCollection.GetEnumerator: IEnumVARIANT;
begin
  Result := DefaultInterface.GetEnumerator;
end;

procedure TUAPublishedVariableDataCollection.Add(Item: OleVariant);
begin
  DefaultInterface.Add(Item);
end;

procedure TUAPublishedVariableDataCollection.Clear;
begin
  DefaultInterface.Clear;
end;

function TUAPublishedVariableDataCollection.Contains(Item: OleVariant): WordBool;
begin
  Result := DefaultInterface.Contains(Item);
end;

function TUAPublishedVariableDataCollection.IndexOf(Item: OleVariant): Integer;
begin
  Result := DefaultInterface.IndexOf(Item);
end;

procedure TUAPublishedVariableDataCollection.Insert(index: Integer; Item: OleVariant);
begin
  DefaultInterface.Insert(index, Item);
end;

function TUAPublishedVariableDataCollection.Remove(Item: OleVariant): WordBool;
begin
  Result := DefaultInterface.Remove(Item);
end;

procedure TUAPublishedVariableDataCollection.RemoveAt(index: Integer);
begin
  DefaultInterface.RemoveAt(index);
end;

function TUAPublishedVariableDataCollection.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUADataSetWriterData.Create: _UADataSetWriterData;
begin
  Result := CreateComObject(CLASS_UADataSetWriterData) as _UADataSetWriterData;
end;

class function CoUADataSetWriterData.CreateRemote(const MachineName: string): _UADataSetWriterData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UADataSetWriterData) as _UADataSetWriterData;
end;

procedure TUADataSetWriterData.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{F65540FA-7B52-42F1-A571-25072BB31CFE}';
    IntfIID:   '{4BBFC129-C3EF-4684-8947-84EB6F97D54D}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUADataSetWriterData.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UADataSetWriterData;
  end;
end;

procedure TUADataSetWriterData.ConnectTo(svrIntf: _UADataSetWriterData);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUADataSetWriterData.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUADataSetWriterData.GetDefaultInterface: _UADataSetWriterData;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUADataSetWriterData.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUADataSetWriterData.Destroy;
begin
  inherited Destroy;
end;

function TUADataSetWriterData.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUADataSetWriterData.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUADataSetWriterData.Get_CustomPropertyValueDictionary: _UAKeyValueDictionary;
begin
  Result := DefaultInterface.CustomPropertyValueDictionary;
end;

procedure TUADataSetWriterData._Set_CustomPropertyValueDictionary(const pRetVal: _UAKeyValueDictionary);
begin
  DefaultInterface.CustomPropertyValueDictionary := pRetVal;
end;

function TUADataSetWriterData.Get_Name: WideString;
begin
  Result := DefaultInterface.Name;
end;

procedure TUADataSetWriterData.Set_Name(const pRetVal: WideString);
begin
  DefaultInterface.Name := pRetVal;
end;

function TUADataSetWriterData.Get_Enabled: WordBool;
begin
  Result := DefaultInterface.Enabled;
end;

procedure TUADataSetWriterData.Set_Enabled(pRetVal: WordBool);
begin
  DefaultInterface.Enabled := pRetVal;
end;

function TUADataSetWriterData.Get_DataSetFieldContentMask: UADataSetFieldContentMask;
begin
  Result := DefaultInterface.DataSetFieldContentMask;
end;

procedure TUADataSetWriterData.Set_DataSetFieldContentMask(pRetVal: UADataSetFieldContentMask);
begin
  DefaultInterface.DataSetFieldContentMask := pRetVal;
end;

function TUADataSetWriterData.Get_DataSetWriterId: Integer;
begin
  Result := DefaultInterface.DataSetWriterId;
end;

procedure TUADataSetWriterData.Set_DataSetWriterId(pRetVal: Integer);
begin
  DefaultInterface.DataSetWriterId := pRetVal;
end;

function TUADataSetWriterData.Get_KeyFrameCount: Int64;
begin
  Result := DefaultInterface.KeyFrameCount;
end;

procedure TUADataSetWriterData.Set_KeyFrameCount(pRetVal: Int64);
begin
  DefaultInterface.KeyFrameCount := pRetVal;
end;

function TUADataSetWriterData.Get_KeyFrameCountInt32: Integer;
begin
  Result := DefaultInterface.KeyFrameCountInt32;
end;

procedure TUADataSetWriterData.Set_KeyFrameCountInt32(pRetVal: Integer);
begin
  DefaultInterface.KeyFrameCountInt32 := pRetVal;
end;

function TUADataSetWriterData.Get_MessageParameters: _UADataSetWriterMessageParameters;
begin
  Result := DefaultInterface.MessageParameters;
end;

procedure TUADataSetWriterData._Set_MessageParameters(const pRetVal: _UADataSetWriterMessageParameters);
begin
  DefaultInterface.MessageParameters := pRetVal;
end;

function TUADataSetWriterData.Get_PublishedDataSetName: WideString;
begin
  Result := DefaultInterface.PublishedDataSetName;
end;

procedure TUADataSetWriterData.Set_PublishedDataSetName(const pRetVal: WideString);
begin
  DefaultInterface.PublishedDataSetName := pRetVal;
end;

function TUADataSetWriterData.Get_TransportParameters: _UADataSetWriterTransportParameters;
begin
  Result := DefaultInterface.TransportParameters;
end;

procedure TUADataSetWriterData._Set_TransportParameters(const pRetVal: _UADataSetWriterTransportParameters);
begin
  DefaultInterface.TransportParameters := pRetVal;
end;

function TUADataSetWriterData.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUADataSetWriterData.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUADataSetWriterData.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUADataSetWriterData.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUADataSetWriterData.ToUADataSetWriterDescriptor: _UADataSetWriterDescriptor;
begin
  Result := DefaultInterface.ToUADataSetWriterDescriptor;
end;

class function CoUAPubSubConfigurationData.Create: _UAPubSubConfigurationData;
begin
  Result := CreateComObject(CLASS_UAPubSubConfigurationData) as _UAPubSubConfigurationData;
end;

class function CoUAPubSubConfigurationData.CreateRemote(const MachineName: string): _UAPubSubConfigurationData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAPubSubConfigurationData) as _UAPubSubConfigurationData;
end;

procedure TUAPubSubConfigurationData.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{2A9B9D29-D0AC-4142-9AEA-1052212CE29C}';
    IntfIID:   '{00889884-908B-4644-A325-01ED63D49D78}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAPubSubConfigurationData.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAPubSubConfigurationData;
  end;
end;

procedure TUAPubSubConfigurationData.ConnectTo(svrIntf: _UAPubSubConfigurationData);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAPubSubConfigurationData.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAPubSubConfigurationData.GetDefaultInterface: _UAPubSubConfigurationData;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAPubSubConfigurationData.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAPubSubConfigurationData.Destroy;
begin
  inherited Destroy;
end;

function TUAPubSubConfigurationData.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAPubSubConfigurationData.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAPubSubConfigurationData.Get_Enabled: WordBool;
begin
  Result := DefaultInterface.Enabled;
end;

procedure TUAPubSubConfigurationData.Set_Enabled(pRetVal: WordBool);
begin
  DefaultInterface.Enabled := pRetVal;
end;

function TUAPubSubConfigurationData.Get_SecurityKeyServices: _UADiscoveryElementCollection;
begin
  Result := DefaultInterface.SecurityKeyServices;
end;

procedure TUAPubSubConfigurationData._Set_SecurityKeyServices(const pRetVal: _UADiscoveryElementCollection);
begin
  DefaultInterface.SecurityKeyServices := pRetVal;
end;

function TUAPubSubConfigurationData.Get_Connections: _UAPubSubConnectionDataCollection;
begin
  Result := DefaultInterface.Connections;
end;

function TUAPubSubConfigurationData.Get_PublishedDataSets: _UADataSetFolderData;
begin
  Result := DefaultInterface.PublishedDataSets;
end;

function TUAPubSubConfigurationData.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAPubSubConfigurationData.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAPubSubConfigurationData.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAPubSubConfigurationData.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUAPubSubConnectionDataCollection.Create: _UAPubSubConnectionDataCollection;
begin
  Result := CreateComObject(CLASS_UAPubSubConnectionDataCollection) as _UAPubSubConnectionDataCollection;
end;

class function CoUAPubSubConnectionDataCollection.CreateRemote(const MachineName: string): _UAPubSubConnectionDataCollection;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAPubSubConnectionDataCollection) as _UAPubSubConnectionDataCollection;
end;

procedure TUAPubSubConnectionDataCollection.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{03FCE393-BE17-49F7-8281-3767085C0E33}';
    IntfIID:   '{795F2CA1-CBE3-4BA7-BA12-889A012847DE}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAPubSubConnectionDataCollection.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAPubSubConnectionDataCollection;
  end;
end;

procedure TUAPubSubConnectionDataCollection.ConnectTo(svrIntf: _UAPubSubConnectionDataCollection);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAPubSubConnectionDataCollection.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAPubSubConnectionDataCollection.GetDefaultInterface: _UAPubSubConnectionDataCollection;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAPubSubConnectionDataCollection.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAPubSubConnectionDataCollection.Destroy;
begin
  inherited Destroy;
end;

function TUAPubSubConnectionDataCollection.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAPubSubConnectionDataCollection.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAPubSubConnectionDataCollection.Get_Item(const key: WideString): _UAPubSubConnectionData;
begin
  Result := DefaultInterface.Item[key];
end;

function TUAPubSubConnectionDataCollection.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

function TUAPubSubConnectionDataCollection.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAPubSubConnectionDataCollection.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAPubSubConnectionDataCollection.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAPubSubConnectionDataCollection.GetEnumerator: IEnumVARIANT;
begin
  Result := DefaultInterface.GetEnumerator;
end;

procedure TUAPubSubConnectionDataCollection.Add(Item: OleVariant);
begin
  DefaultInterface.Add(Item);
end;

procedure TUAPubSubConnectionDataCollection.Clear;
begin
  DefaultInterface.Clear;
end;

function TUAPubSubConnectionDataCollection.Contains(Item: OleVariant): WordBool;
begin
  Result := DefaultInterface.Contains(Item);
end;

function TUAPubSubConnectionDataCollection.IndexOf(Item: OleVariant): Integer;
begin
  Result := DefaultInterface.IndexOf(Item);
end;

function TUAPubSubConnectionDataCollection.Remove(const key: WideString): WordBool;
begin
  Result := DefaultInterface.Remove(key);
end;

procedure TUAPubSubConnectionDataCollection.RemoveAt(index: Integer);
begin
  DefaultInterface.RemoveAt(index);
end;

function TUAPubSubConnectionDataCollection.ToList: _ElasticVector;
begin
  Result := DefaultInterface.ToList;
end;

function TUAPubSubConnectionDataCollection.TryGetValue(const key: WideString; out Item: OleVariant): WordBool;
begin
  Result := DefaultInterface.TryGetValue(key, Item);
end;

function TUAPubSubConnectionDataCollection.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUAPubSubConnectionData.Create: _UAPubSubConnectionData;
begin
  Result := CreateComObject(CLASS_UAPubSubConnectionData) as _UAPubSubConnectionData;
end;

class function CoUAPubSubConnectionData.CreateRemote(const MachineName: string): _UAPubSubConnectionData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAPubSubConnectionData) as _UAPubSubConnectionData;
end;

procedure TUAPubSubConnectionData.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{E09DDAED-93A6-4178-A5F1-0BDA213A4827}';
    IntfIID:   '{57492A54-EC53-40BB-BFCE-E34EF63E366C}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAPubSubConnectionData.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAPubSubConnectionData;
  end;
end;

procedure TUAPubSubConnectionData.ConnectTo(svrIntf: _UAPubSubConnectionData);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAPubSubConnectionData.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAPubSubConnectionData.GetDefaultInterface: _UAPubSubConnectionData;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAPubSubConnectionData.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAPubSubConnectionData.Destroy;
begin
  inherited Destroy;
end;

function TUAPubSubConnectionData.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAPubSubConnectionData.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAPubSubConnectionData.Get_CustomPropertyValueDictionary: _UAKeyValueDictionary;
begin
  Result := DefaultInterface.CustomPropertyValueDictionary;
end;

procedure TUAPubSubConnectionData._Set_CustomPropertyValueDictionary(const pRetVal: _UAKeyValueDictionary);
begin
  DefaultInterface.CustomPropertyValueDictionary := pRetVal;
end;

function TUAPubSubConnectionData.Get_Name: WideString;
begin
  Result := DefaultInterface.Name;
end;

procedure TUAPubSubConnectionData.Set_Name(const pRetVal: WideString);
begin
  DefaultInterface.Name := pRetVal;
end;

function TUAPubSubConnectionData.Get_Enabled: WordBool;
begin
  Result := DefaultInterface.Enabled;
end;

procedure TUAPubSubConnectionData.Set_Enabled(pRetVal: WordBool);
begin
  DefaultInterface.Enabled := pRetVal;
end;

function TUAPubSubConnectionData.Get_NetworkAddress: _NetworkAddress;
begin
  Result := DefaultInterface.NetworkAddress;
end;

procedure TUAPubSubConnectionData._Set_NetworkAddress(const pRetVal: _NetworkAddress);
begin
  DefaultInterface.NetworkAddress := pRetVal;
end;

function TUAPubSubConnectionData.Get_PublisherId: _UAPublisherId;
begin
  Result := DefaultInterface.PublisherId;
end;

procedure TUAPubSubConnectionData._Set_PublisherId(const pRetVal: _UAPublisherId);
begin
  DefaultInterface.PublisherId := pRetVal;
end;

function TUAPubSubConnectionData.Get_TransportParameters: _UAConnectionTransportParameters;
begin
  Result := DefaultInterface.TransportParameters;
end;

procedure TUAPubSubConnectionData._Set_TransportParameters(const pRetVal: _UAConnectionTransportParameters);
begin
  DefaultInterface.TransportParameters := pRetVal;
end;

function TUAPubSubConnectionData.Get_TransportProfileUriString: WideString;
begin
  Result := DefaultInterface.TransportProfileUriString;
end;

procedure TUAPubSubConnectionData.Set_TransportProfileUriString(const pRetVal: WideString);
begin
  DefaultInterface.TransportProfileUriString := pRetVal;
end;

function TUAPubSubConnectionData.Get_WriterGroups: _UAWriterGroupDataCollection;
begin
  Result := DefaultInterface.WriterGroups;
end;

function TUAPubSubConnectionData.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAPubSubConnectionData.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAPubSubConnectionData.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAPubSubConnectionData.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUAPubSubConnectionData.ToUAPubSubConnectionDescriptor: _UAPubSubConnectionDescriptor;
begin
  Result := DefaultInterface.ToUAPubSubConnectionDescriptor;
end;

class function CoUAFieldMetaData.Create: _UAFieldMetaData;
begin
  Result := CreateComObject(CLASS_UAFieldMetaData) as _UAFieldMetaData;
end;

class function CoUAFieldMetaData.CreateRemote(const MachineName: string): _UAFieldMetaData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAFieldMetaData) as _UAFieldMetaData;
end;

procedure TUAFieldMetaData.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{5A7A0C93-FFB3-4ABE-BAD2-654047BE9419}';
    IntfIID:   '{05A7FEF5-81F6-457D-B04D-883BBF8BC312}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAFieldMetaData.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAFieldMetaData;
  end;
end;

procedure TUAFieldMetaData.ConnectTo(svrIntf: _UAFieldMetaData);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAFieldMetaData.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAFieldMetaData.GetDefaultInterface: _UAFieldMetaData;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAFieldMetaData.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAFieldMetaData.Destroy;
begin
  inherited Destroy;
end;

function TUAFieldMetaData.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAFieldMetaData.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAFieldMetaData.Get_CustomPropertyValueDictionary: _UAKeyValueDictionary;
begin
  Result := DefaultInterface.CustomPropertyValueDictionary;
end;

procedure TUAFieldMetaData._Set_CustomPropertyValueDictionary(const pRetVal: _UAKeyValueDictionary);
begin
  DefaultInterface.CustomPropertyValueDictionary := pRetVal;
end;

function TUAFieldMetaData.Get_Name: WideString;
begin
  Result := DefaultInterface.Name;
end;

procedure TUAFieldMetaData.Set_Name(const pRetVal: WideString);
begin
  DefaultInterface.Name := pRetVal;
end;

function TUAFieldMetaData.Get_ArrayDimensions: PSafeArray;
begin
  Result := DefaultInterface.ArrayDimensions;
end;

procedure TUAFieldMetaData.Set_ArrayDimensions(pRetVal: PSafeArray);
begin
  DefaultInterface.ArrayDimensions := pRetVal;
end;

function TUAFieldMetaData.Get_BuiltInType: UABuiltInType;
begin
  Result := DefaultInterface.BuiltInType;
end;

procedure TUAFieldMetaData.Set_BuiltInType(pRetVal: UABuiltInType);
begin
  DefaultInterface.BuiltInType := pRetVal;
end;

function TUAFieldMetaData.Get_DataSetFieldFlags: UADataSetFieldFlags;
begin
  Result := DefaultInterface.DataSetFieldFlags;
end;

procedure TUAFieldMetaData.Set_DataSetFieldFlags(pRetVal: UADataSetFieldFlags);
begin
  DefaultInterface.DataSetFieldFlags := pRetVal;
end;

function TUAFieldMetaData.Get_DataSetFieldId: TGUID;
begin
  Result := DefaultInterface.DataSetFieldId;
end;

procedure TUAFieldMetaData.Set_DataSetFieldId(pRetVal: TGUID);
begin
  DefaultInterface.DataSetFieldId := pRetVal;
end;

function TUAFieldMetaData.Get_DataSetFieldIdString: WideString;
begin
  Result := DefaultInterface.DataSetFieldIdString;
end;

procedure TUAFieldMetaData.Set_DataSetFieldIdString(const pRetVal: WideString);
begin
  DefaultInterface.DataSetFieldIdString := pRetVal;
end;

function TUAFieldMetaData.Get_DataTypeId: _UANodeId;
begin
  Result := DefaultInterface.DataTypeId;
end;

procedure TUAFieldMetaData._Set_DataTypeId(const pRetVal: _UANodeId);
begin
  DefaultInterface.DataTypeId := pRetVal;
end;

function TUAFieldMetaData.Get_Description: WideString;
begin
  Result := DefaultInterface.Description;
end;

procedure TUAFieldMetaData.Set_Description(const pRetVal: WideString);
begin
  DefaultInterface.Description := pRetVal;
end;

function TUAFieldMetaData.Get_MaximumStringLength: Int64;
begin
  Result := DefaultInterface.MaximumStringLength;
end;

procedure TUAFieldMetaData.Set_MaximumStringLength(pRetVal: Int64);
begin
  DefaultInterface.MaximumStringLength := pRetVal;
end;

function TUAFieldMetaData.Get_MaximumStringLengthInt32: Integer;
begin
  Result := DefaultInterface.MaximumStringLengthInt32;
end;

procedure TUAFieldMetaData.Set_MaximumStringLengthInt32(pRetVal: Integer);
begin
  DefaultInterface.MaximumStringLengthInt32 := pRetVal;
end;

function TUAFieldMetaData.Get_ValueRank: Integer;
begin
  Result := DefaultInterface.ValueRank;
end;

procedure TUAFieldMetaData.Set_ValueRank(pRetVal: Integer);
begin
  DefaultInterface.ValueRank := pRetVal;
end;

function TUAFieldMetaData.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAFieldMetaData.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAFieldMetaData.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAFieldMetaData.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

procedure TUAFieldMetaData.SetArrayDimensions(var value: PSafeArray);
begin
  DefaultInterface.SetArrayDimensions(value);
end;

class function CoUAUadpDataSetReaderMessageParameters.Create: _UAUadpDataSetReaderMessageParameters;
begin
  Result := CreateComObject(CLASS_UAUadpDataSetReaderMessageParameters) as _UAUadpDataSetReaderMessageParameters;
end;

class function CoUAUadpDataSetReaderMessageParameters.CreateRemote(const MachineName: string): _UAUadpDataSetReaderMessageParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAUadpDataSetReaderMessageParameters) as _UAUadpDataSetReaderMessageParameters;
end;

procedure TUAUadpDataSetReaderMessageParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{0A8F0B9A-E56B-4F0D-81DE-880F561E2744}';
    IntfIID:   '{94568946-BD82-4EEF-96D2-A90046059B44}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAUadpDataSetReaderMessageParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAUadpDataSetReaderMessageParameters;
  end;
end;

procedure TUAUadpDataSetReaderMessageParameters.ConnectTo(svrIntf: _UAUadpDataSetReaderMessageParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAUadpDataSetReaderMessageParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAUadpDataSetReaderMessageParameters.GetDefaultInterface: _UAUadpDataSetReaderMessageParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAUadpDataSetReaderMessageParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAUadpDataSetReaderMessageParameters.Destroy;
begin
  inherited Destroy;
end;

function TUAUadpDataSetReaderMessageParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAUadpDataSetReaderMessageParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAUadpDataSetReaderMessageParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUAUadpDataSetReaderMessageParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUAUadpDataSetReaderMessageParameters.Get_DataSetClassId: TGUID;
begin
  Result := DefaultInterface.DataSetClassId;
end;

procedure TUAUadpDataSetReaderMessageParameters.Set_DataSetClassId(pRetVal: TGUID);
begin
  DefaultInterface.DataSetClassId := pRetVal;
end;

function TUAUadpDataSetReaderMessageParameters.Get_DataSetClassIdString: WideString;
begin
  Result := DefaultInterface.DataSetClassIdString;
end;

procedure TUAUadpDataSetReaderMessageParameters.Set_DataSetClassIdString(const pRetVal: WideString);
begin
  DefaultInterface.DataSetClassIdString := pRetVal;
end;

function TUAUadpDataSetReaderMessageParameters.Get_DataSetMessageContentMask: UAUadpDataSetMessageContentMask;
begin
  Result := DefaultInterface.DataSetMessageContentMask;
end;

procedure TUAUadpDataSetReaderMessageParameters.Set_DataSetMessageContentMask(pRetVal: UAUadpDataSetMessageContentMask);
begin
  DefaultInterface.DataSetMessageContentMask := pRetVal;
end;

function TUAUadpDataSetReaderMessageParameters.Get_DataSetOffset: Integer;
begin
  Result := DefaultInterface.DataSetOffset;
end;

procedure TUAUadpDataSetReaderMessageParameters.Set_DataSetOffset(pRetVal: Integer);
begin
  DefaultInterface.DataSetOffset := pRetVal;
end;

function TUAUadpDataSetReaderMessageParameters.Get_GroupVersion: Int64;
begin
  Result := DefaultInterface.GroupVersion;
end;

procedure TUAUadpDataSetReaderMessageParameters.Set_GroupVersion(pRetVal: Int64);
begin
  DefaultInterface.GroupVersion := pRetVal;
end;

function TUAUadpDataSetReaderMessageParameters.Get_GroupVersionDateTime: TDateTime;
begin
  Result := DefaultInterface.GroupVersionDateTime;
end;

procedure TUAUadpDataSetReaderMessageParameters.Set_GroupVersionDateTime(pRetVal: TDateTime);
begin
  DefaultInterface.GroupVersionDateTime := pRetVal;
end;

function TUAUadpDataSetReaderMessageParameters.Get_GroupVersionInt32: Integer;
begin
  Result := DefaultInterface.GroupVersionInt32;
end;

procedure TUAUadpDataSetReaderMessageParameters.Set_GroupVersionInt32(pRetVal: Integer);
begin
  DefaultInterface.GroupVersionInt32 := pRetVal;
end;

function TUAUadpDataSetReaderMessageParameters.Get_NetworkMessageContentMask: UAUadpNetworkMessageContentMask;
begin
  Result := DefaultInterface.NetworkMessageContentMask;
end;

procedure TUAUadpDataSetReaderMessageParameters.Set_NetworkMessageContentMask(pRetVal: UAUadpNetworkMessageContentMask);
begin
  DefaultInterface.NetworkMessageContentMask := pRetVal;
end;

function TUAUadpDataSetReaderMessageParameters.Get_NetworkMessageNumber: Integer;
begin
  Result := DefaultInterface.NetworkMessageNumber;
end;

procedure TUAUadpDataSetReaderMessageParameters.Set_NetworkMessageNumber(pRetVal: Integer);
begin
  DefaultInterface.NetworkMessageNumber := pRetVal;
end;

function TUAUadpDataSetReaderMessageParameters.Get_ProcessingOffset: Double;
begin
  Result := DefaultInterface.ProcessingOffset;
end;

procedure TUAUadpDataSetReaderMessageParameters.Set_ProcessingOffset(pRetVal: Double);
begin
  DefaultInterface.ProcessingOffset := pRetVal;
end;

function TUAUadpDataSetReaderMessageParameters.Get_PublishingInterval: Double;
begin
  Result := DefaultInterface.PublishingInterval;
end;

procedure TUAUadpDataSetReaderMessageParameters.Set_PublishingInterval(pRetVal: Double);
begin
  DefaultInterface.PublishingInterval := pRetVal;
end;

function TUAUadpDataSetReaderMessageParameters.Get_ReceiveOffset: Double;
begin
  Result := DefaultInterface.ReceiveOffset;
end;

procedure TUAUadpDataSetReaderMessageParameters.Set_ReceiveOffset(pRetVal: Double);
begin
  DefaultInterface.ReceiveOffset := pRetVal;
end;

function TUAUadpDataSetReaderMessageParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAUadpDataSetReaderMessageParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAUadpDataSetReaderMessageParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAUadpDataSetReaderMessageParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUAUadpDataSetWriterMessageParameters.Create: _UAUadpDataSetWriterMessageParameters;
begin
  Result := CreateComObject(CLASS_UAUadpDataSetWriterMessageParameters) as _UAUadpDataSetWriterMessageParameters;
end;

class function CoUAUadpDataSetWriterMessageParameters.CreateRemote(const MachineName: string): _UAUadpDataSetWriterMessageParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAUadpDataSetWriterMessageParameters) as _UAUadpDataSetWriterMessageParameters;
end;

procedure TUAUadpDataSetWriterMessageParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{A4901D38-2639-48D3-BF2C-C3ADDF7C766A}';
    IntfIID:   '{FE711423-3518-4B4F-B2E0-FB14BF6E5927}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAUadpDataSetWriterMessageParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAUadpDataSetWriterMessageParameters;
  end;
end;

procedure TUAUadpDataSetWriterMessageParameters.ConnectTo(svrIntf: _UAUadpDataSetWriterMessageParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAUadpDataSetWriterMessageParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAUadpDataSetWriterMessageParameters.GetDefaultInterface: _UAUadpDataSetWriterMessageParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAUadpDataSetWriterMessageParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAUadpDataSetWriterMessageParameters.Destroy;
begin
  inherited Destroy;
end;

function TUAUadpDataSetWriterMessageParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAUadpDataSetWriterMessageParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAUadpDataSetWriterMessageParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUAUadpDataSetWriterMessageParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUAUadpDataSetWriterMessageParameters.Get_ConfiguredSize: Integer;
begin
  Result := DefaultInterface.ConfiguredSize;
end;

procedure TUAUadpDataSetWriterMessageParameters.Set_ConfiguredSize(pRetVal: Integer);
begin
  DefaultInterface.ConfiguredSize := pRetVal;
end;

function TUAUadpDataSetWriterMessageParameters.Get_DataSetMessageContentMask: UAUadpDataSetMessageContentMask;
begin
  Result := DefaultInterface.DataSetMessageContentMask;
end;

procedure TUAUadpDataSetWriterMessageParameters.Set_DataSetMessageContentMask(pRetVal: UAUadpDataSetMessageContentMask);
begin
  DefaultInterface.DataSetMessageContentMask := pRetVal;
end;

function TUAUadpDataSetWriterMessageParameters.Get_DataSetOffset: Integer;
begin
  Result := DefaultInterface.DataSetOffset;
end;

procedure TUAUadpDataSetWriterMessageParameters.Set_DataSetOffset(pRetVal: Integer);
begin
  DefaultInterface.DataSetOffset := pRetVal;
end;

function TUAUadpDataSetWriterMessageParameters.Get_NetworkMessageNumber: Integer;
begin
  Result := DefaultInterface.NetworkMessageNumber;
end;

procedure TUAUadpDataSetWriterMessageParameters.Set_NetworkMessageNumber(pRetVal: Integer);
begin
  DefaultInterface.NetworkMessageNumber := pRetVal;
end;

function TUAUadpDataSetWriterMessageParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAUadpDataSetWriterMessageParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAUadpDataSetWriterMessageParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAUadpDataSetWriterMessageParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUAUadpWriterGroupMessageParameters.Create: _UAUadpWriterGroupMessageParameters;
begin
  Result := CreateComObject(CLASS_UAUadpWriterGroupMessageParameters) as _UAUadpWriterGroupMessageParameters;
end;

class function CoUAUadpWriterGroupMessageParameters.CreateRemote(const MachineName: string): _UAUadpWriterGroupMessageParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAUadpWriterGroupMessageParameters) as _UAUadpWriterGroupMessageParameters;
end;

procedure TUAUadpWriterGroupMessageParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{0ECBC727-F520-4A4C-B4DC-02CC47814DE8}';
    IntfIID:   '{868E2586-8FE3-447D-89F8-5B6787B75775}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAUadpWriterGroupMessageParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAUadpWriterGroupMessageParameters;
  end;
end;

procedure TUAUadpWriterGroupMessageParameters.ConnectTo(svrIntf: _UAUadpWriterGroupMessageParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAUadpWriterGroupMessageParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAUadpWriterGroupMessageParameters.GetDefaultInterface: _UAUadpWriterGroupMessageParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAUadpWriterGroupMessageParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAUadpWriterGroupMessageParameters.Destroy;
begin
  inherited Destroy;
end;

function TUAUadpWriterGroupMessageParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAUadpWriterGroupMessageParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAUadpWriterGroupMessageParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUAUadpWriterGroupMessageParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUAUadpWriterGroupMessageParameters.Get_DataSetOrdering: UADataSetOrdering;
begin
  Result := DefaultInterface.DataSetOrdering;
end;

procedure TUAUadpWriterGroupMessageParameters.Set_DataSetOrdering(pRetVal: UADataSetOrdering);
begin
  DefaultInterface.DataSetOrdering := pRetVal;
end;

function TUAUadpWriterGroupMessageParameters.Get_GroupVersion: Int64;
begin
  Result := DefaultInterface.GroupVersion;
end;

procedure TUAUadpWriterGroupMessageParameters.Set_GroupVersion(pRetVal: Int64);
begin
  DefaultInterface.GroupVersion := pRetVal;
end;

function TUAUadpWriterGroupMessageParameters.Get_GroupVersionDateTime: TDateTime;
begin
  Result := DefaultInterface.GroupVersionDateTime;
end;

procedure TUAUadpWriterGroupMessageParameters.Set_GroupVersionDateTime(pRetVal: TDateTime);
begin
  DefaultInterface.GroupVersionDateTime := pRetVal;
end;

function TUAUadpWriterGroupMessageParameters.Get_GroupVersionInt32: Integer;
begin
  Result := DefaultInterface.GroupVersionInt32;
end;

procedure TUAUadpWriterGroupMessageParameters.Set_GroupVersionInt32(pRetVal: Integer);
begin
  DefaultInterface.GroupVersionInt32 := pRetVal;
end;

function TUAUadpWriterGroupMessageParameters.Get_NetworkMessageContentMask: UAUadpNetworkMessageContentMask;
begin
  Result := DefaultInterface.NetworkMessageContentMask;
end;

procedure TUAUadpWriterGroupMessageParameters.Set_NetworkMessageContentMask(pRetVal: UAUadpNetworkMessageContentMask);
begin
  DefaultInterface.NetworkMessageContentMask := pRetVal;
end;

function TUAUadpWriterGroupMessageParameters.Get_PublishingOffset: Double;
begin
  Result := DefaultInterface.PublishingOffset;
end;

procedure TUAUadpWriterGroupMessageParameters.Set_PublishingOffset(pRetVal: Double);
begin
  DefaultInterface.PublishingOffset := pRetVal;
end;

function TUAUadpWriterGroupMessageParameters.Get_PublishingOffsets: PSafeArray;
begin
  Result := DefaultInterface.PublishingOffsets;
end;

procedure TUAUadpWriterGroupMessageParameters.Set_PublishingOffsets(pRetVal: PSafeArray);
begin
  DefaultInterface.PublishingOffsets := pRetVal;
end;

function TUAUadpWriterGroupMessageParameters.Get_SamplingOffset: Double;
begin
  Result := DefaultInterface.SamplingOffset;
end;

procedure TUAUadpWriterGroupMessageParameters.Set_SamplingOffset(pRetVal: Double);
begin
  DefaultInterface.SamplingOffset := pRetVal;
end;

function TUAUadpWriterGroupMessageParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAUadpWriterGroupMessageParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAUadpWriterGroupMessageParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAUadpWriterGroupMessageParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

procedure TUAUadpWriterGroupMessageParameters.SetPublishingOffsets(var value: PSafeArray);
begin
  DefaultInterface.SetPublishingOffsets(value);
end;

class function CoUAWriterGroupData.Create: _UAWriterGroupData;
begin
  Result := CreateComObject(CLASS_UAWriterGroupData) as _UAWriterGroupData;
end;

class function CoUAWriterGroupData.CreateRemote(const MachineName: string): _UAWriterGroupData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAWriterGroupData) as _UAWriterGroupData;
end;

procedure TUAWriterGroupData.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{9BD469EB-DAD7-4629-84AA-9AEE8EC3B295}';
    IntfIID:   '{5DA5F2AF-FFBD-4403-8563-477BD4198356}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAWriterGroupData.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAWriterGroupData;
  end;
end;

procedure TUAWriterGroupData.ConnectTo(svrIntf: _UAWriterGroupData);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAWriterGroupData.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAWriterGroupData.GetDefaultInterface: _UAWriterGroupData;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAWriterGroupData.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAWriterGroupData.Destroy;
begin
  inherited Destroy;
end;

function TUAWriterGroupData.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAWriterGroupData.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAWriterGroupData.Get_CustomPropertyValueDictionary: _UAKeyValueDictionary;
begin
  Result := DefaultInterface.CustomPropertyValueDictionary;
end;

procedure TUAWriterGroupData._Set_CustomPropertyValueDictionary(const pRetVal: _UAKeyValueDictionary);
begin
  DefaultInterface.CustomPropertyValueDictionary := pRetVal;
end;

function TUAWriterGroupData.Get_Name: WideString;
begin
  Result := DefaultInterface.Name;
end;

procedure TUAWriterGroupData.Set_Name(const pRetVal: WideString);
begin
  DefaultInterface.Name := pRetVal;
end;

function TUAWriterGroupData.Get_Enabled: WordBool;
begin
  Result := DefaultInterface.Enabled;
end;

procedure TUAWriterGroupData.Set_Enabled(pRetVal: WordBool);
begin
  DefaultInterface.Enabled := pRetVal;
end;

function TUAWriterGroupData.Get_MaximumNetworkMessageSize: Int64;
begin
  Result := DefaultInterface.MaximumNetworkMessageSize;
end;

procedure TUAWriterGroupData.Set_MaximumNetworkMessageSize(pRetVal: Int64);
begin
  DefaultInterface.MaximumNetworkMessageSize := pRetVal;
end;

function TUAWriterGroupData.Get_MaximumNetworkMessageSizeInt32: Integer;
begin
  Result := DefaultInterface.MaximumNetworkMessageSizeInt32;
end;

procedure TUAWriterGroupData.Set_MaximumNetworkMessageSizeInt32(pRetVal: Integer);
begin
  DefaultInterface.MaximumNetworkMessageSizeInt32 := pRetVal;
end;

function TUAWriterGroupData.Get_securityGroupId: WideString;
begin
  Result := DefaultInterface.securityGroupId;
end;

procedure TUAWriterGroupData.Set_securityGroupId(const pRetVal: WideString);
begin
  DefaultInterface.securityGroupId := pRetVal;
end;

function TUAWriterGroupData.Get_SecurityKeyServices: _UADiscoveryElementCollection;
begin
  Result := DefaultInterface.SecurityKeyServices;
end;

procedure TUAWriterGroupData._Set_SecurityKeyServices(const pRetVal: _UADiscoveryElementCollection);
begin
  DefaultInterface.SecurityKeyServices := pRetVal;
end;

function TUAWriterGroupData.Get_SecurityMode: UAMessageSecurityModes;
begin
  Result := DefaultInterface.SecurityMode;
end;

procedure TUAWriterGroupData.Set_SecurityMode(pRetVal: UAMessageSecurityModes);
begin
  DefaultInterface.SecurityMode := pRetVal;
end;

function TUAWriterGroupData.Get_HeaderLayoutUriString: WideString;
begin
  Result := DefaultInterface.HeaderLayoutUriString;
end;

procedure TUAWriterGroupData.Set_HeaderLayoutUriString(const pRetVal: WideString);
begin
  DefaultInterface.HeaderLayoutUriString := pRetVal;
end;

function TUAWriterGroupData.Get_KeepAliveTime: Double;
begin
  Result := DefaultInterface.KeepAliveTime;
end;

procedure TUAWriterGroupData.Set_KeepAliveTime(pRetVal: Double);
begin
  DefaultInterface.KeepAliveTime := pRetVal;
end;

function TUAWriterGroupData.Get_LocaleIds: _StringCollection;
begin
  Result := DefaultInterface.LocaleIds;
end;

procedure TUAWriterGroupData._Set_LocaleIds(const pRetVal: _StringCollection);
begin
  DefaultInterface.LocaleIds := pRetVal;
end;

function TUAWriterGroupData.Get_MessageParameters: _UAWriterGroupMessageParameters;
begin
  Result := DefaultInterface.MessageParameters;
end;

procedure TUAWriterGroupData._Set_MessageParameters(const pRetVal: _UAWriterGroupMessageParameters);
begin
  DefaultInterface.MessageParameters := pRetVal;
end;

function TUAWriterGroupData.Get_Priority: Byte;
begin
  Result := DefaultInterface.Priority;
end;

procedure TUAWriterGroupData.Set_Priority(pRetVal: Byte);
begin
  DefaultInterface.Priority := pRetVal;
end;

function TUAWriterGroupData.Get_PublishingInterval: Double;
begin
  Result := DefaultInterface.PublishingInterval;
end;

procedure TUAWriterGroupData.Set_PublishingInterval(pRetVal: Double);
begin
  DefaultInterface.PublishingInterval := pRetVal;
end;

function TUAWriterGroupData.Get_TransportParameters: _UAWriterGroupTransportParameters;
begin
  Result := DefaultInterface.TransportParameters;
end;

procedure TUAWriterGroupData._Set_TransportParameters(const pRetVal: _UAWriterGroupTransportParameters);
begin
  DefaultInterface.TransportParameters := pRetVal;
end;

function TUAWriterGroupData.Get_WriterGroupId: Integer;
begin
  Result := DefaultInterface.WriterGroupId;
end;

procedure TUAWriterGroupData.Set_WriterGroupId(pRetVal: Integer);
begin
  DefaultInterface.WriterGroupId := pRetVal;
end;

function TUAWriterGroupData.Get_DataSetWriters: _UADataSetWriterDataCollection;
begin
  Result := DefaultInterface.DataSetWriters;
end;

function TUAWriterGroupData.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAWriterGroupData.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAWriterGroupData.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAWriterGroupData.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUAWriterGroupData.ToUAWriterGroupDescriptor: _UAWriterGroupDescriptor;
begin
  Result := DefaultInterface.ToUAWriterGroupDescriptor;
end;

class function CoUAWriterGroupDataCollection.Create: _UAWriterGroupDataCollection;
begin
  Result := CreateComObject(CLASS_UAWriterGroupDataCollection) as _UAWriterGroupDataCollection;
end;

class function CoUAWriterGroupDataCollection.CreateRemote(const MachineName: string): _UAWriterGroupDataCollection;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAWriterGroupDataCollection) as _UAWriterGroupDataCollection;
end;

procedure TUAWriterGroupDataCollection.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{BA262886-6999-4975-9D30-662202EAE572}';
    IntfIID:   '{A1B16ABF-A926-4FFC-94F9-0DD757199E8A}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAWriterGroupDataCollection.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAWriterGroupDataCollection;
  end;
end;

procedure TUAWriterGroupDataCollection.ConnectTo(svrIntf: _UAWriterGroupDataCollection);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAWriterGroupDataCollection.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAWriterGroupDataCollection.GetDefaultInterface: _UAWriterGroupDataCollection;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAWriterGroupDataCollection.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAWriterGroupDataCollection.Destroy;
begin
  inherited Destroy;
end;

function TUAWriterGroupDataCollection.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAWriterGroupDataCollection.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAWriterGroupDataCollection.Get_Item(const key: WideString): _UAWriterGroupData;
begin
  Result := DefaultInterface.Item[key];
end;

function TUAWriterGroupDataCollection.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

function TUAWriterGroupDataCollection.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAWriterGroupDataCollection.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAWriterGroupDataCollection.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAWriterGroupDataCollection.GetEnumerator: IEnumVARIANT;
begin
  Result := DefaultInterface.GetEnumerator;
end;

procedure TUAWriterGroupDataCollection.Add(Item: OleVariant);
begin
  DefaultInterface.Add(Item);
end;

procedure TUAWriterGroupDataCollection.Clear;
begin
  DefaultInterface.Clear;
end;

function TUAWriterGroupDataCollection.Contains(Item: OleVariant): WordBool;
begin
  Result := DefaultInterface.Contains(Item);
end;

function TUAWriterGroupDataCollection.IndexOf(Item: OleVariant): Integer;
begin
  Result := DefaultInterface.IndexOf(Item);
end;

function TUAWriterGroupDataCollection.Remove(const key: WideString): WordBool;
begin
  Result := DefaultInterface.Remove(key);
end;

procedure TUAWriterGroupDataCollection.RemoveAt(index: Integer);
begin
  DefaultInterface.RemoveAt(index);
end;

function TUAWriterGroupDataCollection.ToList: _ElasticVector;
begin
  Result := DefaultInterface.ToList;
end;

function TUAWriterGroupDataCollection.TryGetValue(const key: WideString; out Item: OleVariant): WordBool;
begin
  Result := DefaultInterface.TryGetValue(key, Item);
end;

function TUAWriterGroupDataCollection.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUAWriterGroupElement.Create: _UAWriterGroupElement;
begin
  Result := CreateComObject(CLASS_UAWriterGroupElement) as _UAWriterGroupElement;
end;

class function CoUAWriterGroupElement.CreateRemote(const MachineName: string): _UAWriterGroupElement;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAWriterGroupElement) as _UAWriterGroupElement;
end;

procedure TUAWriterGroupElement.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{F041BA29-2F48-48AD-BA2C-9C130BCF3B74}';
    IntfIID:   '{79FAE3C0-5B78-4A99-963C-6148E2583C97}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAWriterGroupElement.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAWriterGroupElement;
  end;
end;

procedure TUAWriterGroupElement.ConnectTo(svrIntf: _UAWriterGroupElement);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAWriterGroupElement.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAWriterGroupElement.GetDefaultInterface: _UAWriterGroupElement;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAWriterGroupElement.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAWriterGroupElement.Destroy;
begin
  inherited Destroy;
end;

function TUAWriterGroupElement.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAWriterGroupElement.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAWriterGroupElement.Get_CustomPropertyValueDictionary: _UAKeyValueDictionary;
begin
  Result := DefaultInterface.CustomPropertyValueDictionary;
end;

procedure TUAWriterGroupElement._Set_CustomPropertyValueDictionary(const pRetVal: _UAKeyValueDictionary);
begin
  DefaultInterface.CustomPropertyValueDictionary := pRetVal;
end;

function TUAWriterGroupElement.Get_Name: WideString;
begin
  Result := DefaultInterface.Name;
end;

procedure TUAWriterGroupElement.Set_Name(const pRetVal: WideString);
begin
  DefaultInterface.Name := pRetVal;
end;

function TUAWriterGroupElement.Get_Enabled: WordBool;
begin
  Result := DefaultInterface.Enabled;
end;

procedure TUAWriterGroupElement.Set_Enabled(pRetVal: WordBool);
begin
  DefaultInterface.Enabled := pRetVal;
end;

function TUAWriterGroupElement.Get_MaximumNetworkMessageSize: Int64;
begin
  Result := DefaultInterface.MaximumNetworkMessageSize;
end;

procedure TUAWriterGroupElement.Set_MaximumNetworkMessageSize(pRetVal: Int64);
begin
  DefaultInterface.MaximumNetworkMessageSize := pRetVal;
end;

function TUAWriterGroupElement.Get_MaximumNetworkMessageSizeInt32: Integer;
begin
  Result := DefaultInterface.MaximumNetworkMessageSizeInt32;
end;

procedure TUAWriterGroupElement.Set_MaximumNetworkMessageSizeInt32(pRetVal: Integer);
begin
  DefaultInterface.MaximumNetworkMessageSizeInt32 := pRetVal;
end;

function TUAWriterGroupElement.Get_securityGroupId: WideString;
begin
  Result := DefaultInterface.securityGroupId;
end;

procedure TUAWriterGroupElement.Set_securityGroupId(const pRetVal: WideString);
begin
  DefaultInterface.securityGroupId := pRetVal;
end;

function TUAWriterGroupElement.Get_SecurityKeyServices: _UADiscoveryElementCollection;
begin
  Result := DefaultInterface.SecurityKeyServices;
end;

procedure TUAWriterGroupElement._Set_SecurityKeyServices(const pRetVal: _UADiscoveryElementCollection);
begin
  DefaultInterface.SecurityKeyServices := pRetVal;
end;

function TUAWriterGroupElement.Get_SecurityMode: UAMessageSecurityModes;
begin
  Result := DefaultInterface.SecurityMode;
end;

procedure TUAWriterGroupElement.Set_SecurityMode(pRetVal: UAMessageSecurityModes);
begin
  DefaultInterface.SecurityMode := pRetVal;
end;

function TUAWriterGroupElement.Get_HeaderLayoutUriString: WideString;
begin
  Result := DefaultInterface.HeaderLayoutUriString;
end;

procedure TUAWriterGroupElement.Set_HeaderLayoutUriString(const pRetVal: WideString);
begin
  DefaultInterface.HeaderLayoutUriString := pRetVal;
end;

function TUAWriterGroupElement.Get_KeepAliveTime: Double;
begin
  Result := DefaultInterface.KeepAliveTime;
end;

procedure TUAWriterGroupElement.Set_KeepAliveTime(pRetVal: Double);
begin
  DefaultInterface.KeepAliveTime := pRetVal;
end;

function TUAWriterGroupElement.Get_LocaleIds: _StringCollection;
begin
  Result := DefaultInterface.LocaleIds;
end;

procedure TUAWriterGroupElement._Set_LocaleIds(const pRetVal: _StringCollection);
begin
  DefaultInterface.LocaleIds := pRetVal;
end;

function TUAWriterGroupElement.Get_MessageParameters: _UAWriterGroupMessageParameters;
begin
  Result := DefaultInterface.MessageParameters;
end;

procedure TUAWriterGroupElement._Set_MessageParameters(const pRetVal: _UAWriterGroupMessageParameters);
begin
  DefaultInterface.MessageParameters := pRetVal;
end;

function TUAWriterGroupElement.Get_Priority: Byte;
begin
  Result := DefaultInterface.Priority;
end;

procedure TUAWriterGroupElement.Set_Priority(pRetVal: Byte);
begin
  DefaultInterface.Priority := pRetVal;
end;

function TUAWriterGroupElement.Get_PublishingInterval: Double;
begin
  Result := DefaultInterface.PublishingInterval;
end;

procedure TUAWriterGroupElement.Set_PublishingInterval(pRetVal: Double);
begin
  DefaultInterface.PublishingInterval := pRetVal;
end;

function TUAWriterGroupElement.Get_TransportParameters: _UAWriterGroupTransportParameters;
begin
  Result := DefaultInterface.TransportParameters;
end;

procedure TUAWriterGroupElement._Set_TransportParameters(const pRetVal: _UAWriterGroupTransportParameters);
begin
  DefaultInterface.TransportParameters := pRetVal;
end;

function TUAWriterGroupElement.Get_WriterGroupId: Integer;
begin
  Result := DefaultInterface.WriterGroupId;
end;

procedure TUAWriterGroupElement.Set_WriterGroupId(pRetVal: Integer);
begin
  DefaultInterface.WriterGroupId := pRetVal;
end;

function TUAWriterGroupElement.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAWriterGroupElement.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAWriterGroupElement.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAWriterGroupElement.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUAWriterGroupElement.ToUAWriterGroupDescriptor: _UAWriterGroupDescriptor;
begin
  Result := DefaultInterface.ToUAWriterGroupDescriptor;
end;

class function CoUAJsonWriterGroupMessageParameters.Create: _UAJsonWriterGroupMessageParameters;
begin
  Result := CreateComObject(CLASS_UAJsonWriterGroupMessageParameters) as _UAJsonWriterGroupMessageParameters;
end;

class function CoUAJsonWriterGroupMessageParameters.CreateRemote(const MachineName: string): _UAJsonWriterGroupMessageParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAJsonWriterGroupMessageParameters) as _UAJsonWriterGroupMessageParameters;
end;

procedure TUAJsonWriterGroupMessageParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{A0F46848-F1F2-4052-BDB7-A58A81AA95FC}';
    IntfIID:   '{2688FC99-7DB9-4D3D-88E5-3DD6C7B1FC93}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAJsonWriterGroupMessageParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAJsonWriterGroupMessageParameters;
  end;
end;

procedure TUAJsonWriterGroupMessageParameters.ConnectTo(svrIntf: _UAJsonWriterGroupMessageParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAJsonWriterGroupMessageParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAJsonWriterGroupMessageParameters.GetDefaultInterface: _UAJsonWriterGroupMessageParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAJsonWriterGroupMessageParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAJsonWriterGroupMessageParameters.Destroy;
begin
  inherited Destroy;
end;

function TUAJsonWriterGroupMessageParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAJsonWriterGroupMessageParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAJsonWriterGroupMessageParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUAJsonWriterGroupMessageParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUAJsonWriterGroupMessageParameters.Get_NetworkMessageContentMask: UAJsonNetworkMessageContentMask;
begin
  Result := DefaultInterface.NetworkMessageContentMask;
end;

procedure TUAJsonWriterGroupMessageParameters.Set_NetworkMessageContentMask(pRetVal: UAJsonNetworkMessageContentMask);
begin
  DefaultInterface.NetworkMessageContentMask := pRetVal;
end;

function TUAJsonWriterGroupMessageParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAJsonWriterGroupMessageParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAJsonWriterGroupMessageParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAJsonWriterGroupMessageParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUABrokerWriterGroupTransportParameters.Create: _UABrokerWriterGroupTransportParameters;
begin
  Result := CreateComObject(CLASS_UABrokerWriterGroupTransportParameters) as _UABrokerWriterGroupTransportParameters;
end;

class function CoUABrokerWriterGroupTransportParameters.CreateRemote(const MachineName: string): _UABrokerWriterGroupTransportParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UABrokerWriterGroupTransportParameters) as _UABrokerWriterGroupTransportParameters;
end;

procedure TUABrokerWriterGroupTransportParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{BC616BD5-BE56-4EC5-8586-25A2628D50CC}';
    IntfIID:   '{7EFE6A1D-9A41-4CC1-8530-035665BE13AF}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUABrokerWriterGroupTransportParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UABrokerWriterGroupTransportParameters;
  end;
end;

procedure TUABrokerWriterGroupTransportParameters.ConnectTo(svrIntf: _UABrokerWriterGroupTransportParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUABrokerWriterGroupTransportParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUABrokerWriterGroupTransportParameters.GetDefaultInterface: _UABrokerWriterGroupTransportParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUABrokerWriterGroupTransportParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUABrokerWriterGroupTransportParameters.Destroy;
begin
  inherited Destroy;
end;

function TUABrokerWriterGroupTransportParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUABrokerWriterGroupTransportParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUABrokerWriterGroupTransportParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUABrokerWriterGroupTransportParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUABrokerWriterGroupTransportParameters.Get_AuthenticationProfileUriString: WideString;
begin
  Result := DefaultInterface.AuthenticationProfileUriString;
end;

procedure TUABrokerWriterGroupTransportParameters.Set_AuthenticationProfileUriString(const pRetVal: WideString);
begin
  DefaultInterface.AuthenticationProfileUriString := pRetVal;
end;

function TUABrokerWriterGroupTransportParameters.Get_QueueName: WideString;
begin
  Result := DefaultInterface.QueueName;
end;

procedure TUABrokerWriterGroupTransportParameters.Set_QueueName(const pRetVal: WideString);
begin
  DefaultInterface.QueueName := pRetVal;
end;

function TUABrokerWriterGroupTransportParameters.Get_RequestedDeliveryGuarantee: UABrokerTransportQualityOfService;
begin
  Result := DefaultInterface.RequestedDeliveryGuarantee;
end;

procedure TUABrokerWriterGroupTransportParameters.Set_RequestedDeliveryGuarantee(pRetVal: UABrokerTransportQualityOfService);
begin
  DefaultInterface.RequestedDeliveryGuarantee := pRetVal;
end;

function TUABrokerWriterGroupTransportParameters.Get_ResourceUriString: WideString;
begin
  Result := DefaultInterface.ResourceUriString;
end;

procedure TUABrokerWriterGroupTransportParameters.Set_ResourceUriString(const pRetVal: WideString);
begin
  DefaultInterface.ResourceUriString := pRetVal;
end;

function TUABrokerWriterGroupTransportParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUABrokerWriterGroupTransportParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUABrokerWriterGroupTransportParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUABrokerWriterGroupTransportParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoEasyUASubscriberSelector.Create: _EasyUASubscriberSelector;
begin
  Result := CreateComObject(CLASS_EasyUASubscriberSelector) as _EasyUASubscriberSelector;
end;

class function CoEasyUASubscriberSelector.CreateRemote(const MachineName: string): _EasyUASubscriberSelector;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EasyUASubscriberSelector) as _EasyUASubscriberSelector;
end;

procedure TEasyUASubscriberSelector.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{A73E01B4-954E-466C-BF54-5CE811A7A7D7}';
    IntfIID:   '{1A47BBB1-9F4D-4CFE-A3E6-E17A38121CAA}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TEasyUASubscriberSelector.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _EasyUASubscriberSelector;
  end;
end;

procedure TEasyUASubscriberSelector.ConnectTo(svrIntf: _EasyUASubscriberSelector);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TEasyUASubscriberSelector.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TEasyUASubscriberSelector.GetDefaultInterface: _EasyUASubscriberSelector;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TEasyUASubscriberSelector.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TEasyUASubscriberSelector.Destroy;
begin
  inherited Destroy;
end;

function TEasyUASubscriberSelector.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TEasyUASubscriberSelector.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TEasyUASubscriberSelector.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TEasyUASubscriberSelector.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TEasyUASubscriberSelector.Get_Differentiator: WideString;
begin
  Result := DefaultInterface.Differentiator;
end;

procedure TEasyUASubscriberSelector.Set_Differentiator(const pRetVal: WideString);
begin
  DefaultInterface.Differentiator := pRetVal;
end;

function TEasyUASubscriberSelector.Get_InstanceParameters: _EasyUASubscriberInstanceParameters;
begin
  Result := DefaultInterface.InstanceParameters;
end;

procedure TEasyUASubscriberSelector._Set_InstanceParameters(const pRetVal: _EasyUASubscriberInstanceParameters);
begin
  DefaultInterface.InstanceParameters := pRetVal;
end;

function TEasyUASubscriberSelector.Get_Isolated: WordBool;
begin
  Result := DefaultInterface.Isolated;
end;

procedure TEasyUASubscriberSelector.Set_Isolated(pRetVal: WordBool);
begin
  DefaultInterface.Isolated := pRetVal;
end;

function TEasyUASubscriberSelector.Get_IsolatedParameters: _EasyUASubscriberAdaptableParameters;
begin
  Result := DefaultInterface.IsolatedParameters;
end;

procedure TEasyUASubscriberSelector._Set_IsolatedParameters(const pRetVal: _EasyUASubscriberAdaptableParameters);
begin
  DefaultInterface.IsolatedParameters := pRetVal;
end;

function TEasyUASubscriberSelector.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TEasyUASubscriberSelector.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TEasyUASubscriberSelector.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TEasyUASubscriberSelector.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

procedure TEasyUASubscriberSelector.Reset;
begin
  DefaultInterface.Reset;
end;

class function CoUADataSetFieldData.Create: _UADataSetFieldData;
begin
  Result := CreateComObject(CLASS_UADataSetFieldData) as _UADataSetFieldData;
end;

class function CoUADataSetFieldData.CreateRemote(const MachineName: string): _UADataSetFieldData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UADataSetFieldData) as _UADataSetFieldData;
end;

procedure TUADataSetFieldData.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{7CD4DBEC-7E71-4AF5-9479-7B9129E69941}';
    IntfIID:   '{9E9EC982-3335-41D9-9A51-808C63C865EB}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUADataSetFieldData.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UADataSetFieldData;
  end;
end;

procedure TUADataSetFieldData.ConnectTo(svrIntf: _UADataSetFieldData);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUADataSetFieldData.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUADataSetFieldData.GetDefaultInterface: _UADataSetFieldData;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUADataSetFieldData.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUADataSetFieldData.Destroy;
begin
  inherited Destroy;
end;

function TUADataSetFieldData.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUADataSetFieldData.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUADataSetFieldData.Get_ToString_2(const format: WideString; 
                                            const formatProvider: IFormatProvider): WideString;
begin
  Result := DefaultInterface.ToString_2[format, formatProvider];
end;

function TUADataSetFieldData.Get_ToString_3(const format: WideString): WideString;
begin
  Result := DefaultInterface.ToString_3[format];
end;

function TUADataSetFieldData.Get_HasBadStatus: WordBool;
begin
  Result := DefaultInterface.HasBadStatus;
end;

function TUADataSetFieldData.Get_HasGoodStatus: WordBool;
begin
  Result := DefaultInterface.HasGoodStatus;
end;

function TUADataSetFieldData.Get_HasServerTimestamp: WordBool;
begin
  Result := DefaultInterface.HasServerTimestamp;
end;

function TUADataSetFieldData.Get_HasSourceTimestamp: WordBool;
begin
  Result := DefaultInterface.HasSourceTimestamp;
end;

function TUADataSetFieldData.Get_HasUncertainStatus: WordBool;
begin
  Result := DefaultInterface.HasUncertainStatus;
end;

function TUADataSetFieldData.Get_HasValue: WordBool;
begin
  Result := DefaultInterface.HasValue;
end;

function TUADataSetFieldData.Get_ServerPicoseconds: Integer;
begin
  Result := DefaultInterface.ServerPicoseconds;
end;

procedure TUADataSetFieldData.Set_ServerPicoseconds(pRetVal: Integer);
begin
  DefaultInterface.ServerPicoseconds := pRetVal;
end;

function TUADataSetFieldData.Get_ServerTimestamp: TDateTime;
begin
  Result := DefaultInterface.ServerTimestamp;
end;

procedure TUADataSetFieldData.Set_ServerTimestamp(pRetVal: TDateTime);
begin
  DefaultInterface.ServerTimestamp := pRetVal;
end;

function TUADataSetFieldData.Get_ServerTimestampDouble: Double;
begin
  Result := DefaultInterface.ServerTimestampDouble;
end;

procedure TUADataSetFieldData.Set_ServerTimestampDouble(pRetVal: Double);
begin
  DefaultInterface.ServerTimestampDouble := pRetVal;
end;

function TUADataSetFieldData.Get_ServerTimestampLocal: TDateTime;
begin
  Result := DefaultInterface.ServerTimestampLocal;
end;

procedure TUADataSetFieldData.Set_ServerTimestampLocal(pRetVal: TDateTime);
begin
  DefaultInterface.ServerTimestampLocal := pRetVal;
end;

function TUADataSetFieldData.Get_ServerTimestampLocalDouble: Double;
begin
  Result := DefaultInterface.ServerTimestampLocalDouble;
end;

procedure TUADataSetFieldData.Set_ServerTimestampLocalDouble(pRetVal: Double);
begin
  DefaultInterface.ServerTimestampLocalDouble := pRetVal;
end;

function TUADataSetFieldData.Get_SourcePicoseconds: Integer;
begin
  Result := DefaultInterface.SourcePicoseconds;
end;

procedure TUADataSetFieldData.Set_SourcePicoseconds(pRetVal: Integer);
begin
  DefaultInterface.SourcePicoseconds := pRetVal;
end;

function TUADataSetFieldData.Get_SourceTimestamp: TDateTime;
begin
  Result := DefaultInterface.SourceTimestamp;
end;

procedure TUADataSetFieldData.Set_SourceTimestamp(pRetVal: TDateTime);
begin
  DefaultInterface.SourceTimestamp := pRetVal;
end;

function TUADataSetFieldData.Get_SourceTimestampDouble: Double;
begin
  Result := DefaultInterface.SourceTimestampDouble;
end;

procedure TUADataSetFieldData.Set_SourceTimestampDouble(pRetVal: Double);
begin
  DefaultInterface.SourceTimestampDouble := pRetVal;
end;

function TUADataSetFieldData.Get_SourceTimestampLocal: TDateTime;
begin
  Result := DefaultInterface.SourceTimestampLocal;
end;

procedure TUADataSetFieldData.Set_SourceTimestampLocal(pRetVal: TDateTime);
begin
  DefaultInterface.SourceTimestampLocal := pRetVal;
end;

function TUADataSetFieldData.Get_SourceTimestampLocalDouble: Double;
begin
  Result := DefaultInterface.SourceTimestampLocalDouble;
end;

procedure TUADataSetFieldData.Set_SourceTimestampLocalDouble(pRetVal: Double);
begin
  DefaultInterface.SourceTimestampLocalDouble := pRetVal;
end;

function TUADataSetFieldData.Get_StatusCode: _UAStatusCode;
begin
  Result := DefaultInterface.StatusCode;
end;

procedure TUADataSetFieldData._Set_StatusCode(const pRetVal: _UAStatusCode);
begin
  DefaultInterface.StatusCode := pRetVal;
end;

function TUADataSetFieldData.Get_StatusInfo: StatusInfo;
begin
  Result := DefaultInterface.StatusInfo;
end;

function TUADataSetFieldData.Get_value: OleVariant;
begin
  Result := DefaultInterface.value;
end;

procedure TUADataSetFieldData._Set_value(pRetVal: OleVariant);
begin
  DefaultInterface.value := pRetVal;
end;

function TUADataSetFieldData.Get_ValueType: _Type;
begin
  Result := DefaultInterface.ValueType;
end;

function TUADataSetFieldData.Get_ValueTypeName: WideString;
begin
  Result := DefaultInterface.ValueTypeName;
end;

function TUADataSetFieldData.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUADataSetFieldData.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUADataSetFieldData.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUADataSetFieldData.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUADataSetFieldData.DisplayValue: WideString;
begin
  Result := DefaultInterface.DisplayValue;
end;

procedure TUADataSetFieldData.SetValue(value: OleVariant);
begin
  DefaultInterface.SetValue(value);
end;

class function CoUADataSetSubscriptionDescriptor.Create: _UADataSetSubscriptionDescriptor;
begin
  Result := CreateComObject(CLASS_UADataSetSubscriptionDescriptor) as _UADataSetSubscriptionDescriptor;
end;

class function CoUADataSetSubscriptionDescriptor.CreateRemote(const MachineName: string): _UADataSetSubscriptionDescriptor;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UADataSetSubscriptionDescriptor) as _UADataSetSubscriptionDescriptor;
end;

procedure TUADataSetSubscriptionDescriptor.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{377752BF-B7E1-48BC-ABD3-F3E652C673C5}';
    IntfIID:   '{88F53C60-CAFC-43EA-ACAB-BE89C9BBEB6D}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUADataSetSubscriptionDescriptor.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UADataSetSubscriptionDescriptor;
  end;
end;

procedure TUADataSetSubscriptionDescriptor.ConnectTo(svrIntf: _UADataSetSubscriptionDescriptor);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUADataSetSubscriptionDescriptor.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUADataSetSubscriptionDescriptor.GetDefaultInterface: _UADataSetSubscriptionDescriptor;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUADataSetSubscriptionDescriptor.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUADataSetSubscriptionDescriptor.Destroy;
begin
  inherited Destroy;
end;

function TUADataSetSubscriptionDescriptor.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUADataSetSubscriptionDescriptor.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUADataSetSubscriptionDescriptor.Get_AliasName: WideString;
begin
  Result := DefaultInterface.AliasName;
end;

procedure TUADataSetSubscriptionDescriptor.Set_AliasName(const pRetVal: WideString);
begin
  DefaultInterface.AliasName := pRetVal;
end;

function TUADataSetSubscriptionDescriptor.Get_IsAliased: WordBool;
begin
  Result := DefaultInterface.IsAliased;
end;

function TUADataSetSubscriptionDescriptor.Get_AllowsResolution: WordBool;
begin
  Result := DefaultInterface.AllowsResolution;
end;

function TUADataSetSubscriptionDescriptor.Get_assumeTopicTree: WordBool;
begin
  Result := DefaultInterface.assumeTopicTree;
end;

procedure TUADataSetSubscriptionDescriptor.Set_assumeTopicTree(pRetVal: WordBool);
begin
  DefaultInterface.assumeTopicTree := pRetVal;
end;

function TUADataSetSubscriptionDescriptor.Get_CommunicationParameters: _UASubscriberCommunicationParameters;
begin
  Result := DefaultInterface.CommunicationParameters;
end;

procedure TUADataSetSubscriptionDescriptor._Set_CommunicationParameters(const pRetVal: _UASubscriberCommunicationParameters);
begin
  DefaultInterface.CommunicationParameters := pRetVal;
end;

function TUADataSetSubscriptionDescriptor.Get_ConnectionDescriptor: _UAPubSubConnectionDescriptor;
begin
  Result := DefaultInterface.ConnectionDescriptor;
end;

procedure TUADataSetSubscriptionDescriptor._Set_ConnectionDescriptor(const pRetVal: _UAPubSubConnectionDescriptor);
begin
  DefaultInterface.ConnectionDescriptor := pRetVal;
end;

function TUADataSetSubscriptionDescriptor.Get_DataSetMetaData: _UADataSetMetaData;
begin
  Result := DefaultInterface.DataSetMetaData;
end;

procedure TUADataSetSubscriptionDescriptor._Set_DataSetMetaData(const pRetVal: _UADataSetMetaData);
begin
  DefaultInterface.DataSetMetaData := pRetVal;
end;

function TUADataSetSubscriptionDescriptor.Get_EffectiveAssumeTopicTree: WordBool;
begin
  Result := DefaultInterface.EffectiveAssumeTopicTree;
end;

function TUADataSetSubscriptionDescriptor.Get_EffectiveMessageReceiveTimeout: Double;
begin
  Result := DefaultInterface.EffectiveMessageReceiveTimeout;
end;

function TUADataSetSubscriptionDescriptor.Get_EffectiveSecurityMode: UAMessageSecurityModes;
begin
  Result := DefaultInterface.EffectiveSecurityMode;
end;

function TUADataSetSubscriptionDescriptor.Get_Filter: _UASubscribeDataSetFilter;
begin
  Result := DefaultInterface.Filter;
end;

procedure TUADataSetSubscriptionDescriptor._Set_Filter(const pRetVal: _UASubscribeDataSetFilter);
begin
  DefaultInterface.Filter := pRetVal;
end;

function TUADataSetSubscriptionDescriptor.Get_FilterIsStrictlyPhysical: WordBool;
begin
  Result := DefaultInterface.FilterIsStrictlyPhysical;
end;

function TUADataSetSubscriptionDescriptor.Get_FilterRequiresResolution: WordBool;
begin
  Result := DefaultInterface.FilterRequiresResolution;
end;

function TUADataSetSubscriptionDescriptor.Get_HasConnectionDescriptor: WordBool;
begin
  Result := DefaultInterface.HasConnectionDescriptor;
end;

function TUADataSetSubscriptionDescriptor.Get_HasDataSetMetaData: WordBool;
begin
  Result := DefaultInterface.HasDataSetMetaData;
end;

function TUADataSetSubscriptionDescriptor.Get_HasPublishedDataSet: WordBool;
begin
  Result := DefaultInterface.HasPublishedDataSet;
end;

function TUADataSetSubscriptionDescriptor.Get_InferredMessageReceiveTimeout: Double;
begin
  Result := DefaultInterface.InferredMessageReceiveTimeout;
end;

function TUADataSetSubscriptionDescriptor.Get_InferredSecurityMode: UAMessageSecurityModes;
begin
  Result := DefaultInterface.InferredSecurityMode;
end;

function TUADataSetSubscriptionDescriptor.Get_IsNull: WordBool;
begin
  Result := DefaultInterface.IsNull;
end;

function TUADataSetSubscriptionDescriptor.Get_IsStrictlyPhysical: WordBool;
begin
  Result := DefaultInterface.IsStrictlyPhysical;
end;

function TUADataSetSubscriptionDescriptor.Get_PublishedDataSetName: WideString;
begin
  Result := DefaultInterface.PublishedDataSetName;
end;

procedure TUADataSetSubscriptionDescriptor.Set_PublishedDataSetName(const pRetVal: WideString);
begin
  DefaultInterface.PublishedDataSetName := pRetVal;
end;

function TUADataSetSubscriptionDescriptor.Get_RequiresResolution: WordBool;
begin
  Result := DefaultInterface.RequiresResolution;
end;

function TUADataSetSubscriptionDescriptor.Get_ResolverDescriptor: _UAPubSubResolverDescriptor;
begin
  Result := DefaultInterface.ResolverDescriptor;
end;

procedure TUADataSetSubscriptionDescriptor._Set_ResolverDescriptor(const pRetVal: _UAPubSubResolverDescriptor);
begin
  DefaultInterface.ResolverDescriptor := pRetVal;
end;

function TUADataSetSubscriptionDescriptor.Get_TopicPrefixHead: WideString;
begin
  Result := DefaultInterface.TopicPrefixHead;
end;

procedure TUADataSetSubscriptionDescriptor.Set_TopicPrefixHead(const pRetVal: WideString);
begin
  DefaultInterface.TopicPrefixHead := pRetVal;
end;

function TUADataSetSubscriptionDescriptor.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUADataSetSubscriptionDescriptor.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUADataSetSubscriptionDescriptor.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUADataSetSubscriptionDescriptor.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

procedure TUADataSetSubscriptionDescriptor.Logicalize(force: WordBool);
begin
  DefaultInterface.Logicalize(force);
end;

procedure TUADataSetSubscriptionDescriptor.Physicalize(force: WordBool);
begin
  DefaultInterface.Physicalize(force);
end;

class function CoUADataSetWriterDescriptor.Create: _UADataSetWriterDescriptor;
begin
  Result := CreateComObject(CLASS_UADataSetWriterDescriptor) as _UADataSetWriterDescriptor;
end;

class function CoUADataSetWriterDescriptor.CreateRemote(const MachineName: string): _UADataSetWriterDescriptor;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UADataSetWriterDescriptor) as _UADataSetWriterDescriptor;
end;

procedure TUADataSetWriterDescriptor.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{A41F2B7E-1CA2-4C35-ADC8-F53CEDDB4B30}';
    IntfIID:   '{B371E7E9-AF62-4F24-A74E-1660C93151C5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUADataSetWriterDescriptor.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UADataSetWriterDescriptor;
  end;
end;

procedure TUADataSetWriterDescriptor.ConnectTo(svrIntf: _UADataSetWriterDescriptor);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUADataSetWriterDescriptor.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUADataSetWriterDescriptor.GetDefaultInterface: _UADataSetWriterDescriptor;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUADataSetWriterDescriptor.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUADataSetWriterDescriptor.Destroy;
begin
  inherited Destroy;
end;

function TUADataSetWriterDescriptor.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUADataSetWriterDescriptor.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUADataSetWriterDescriptor.Get_CustomPropertyValueDictionary: _UAKeyValueDictionary;
begin
  Result := DefaultInterface.CustomPropertyValueDictionary;
end;

procedure TUADataSetWriterDescriptor._Set_CustomPropertyValueDictionary(const pRetVal: _UAKeyValueDictionary);
begin
  DefaultInterface.CustomPropertyValueDictionary := pRetVal;
end;

function TUADataSetWriterDescriptor.Get_HasName: WordBool;
begin
  Result := DefaultInterface.HasName;
end;

function TUADataSetWriterDescriptor.Get_IsNull: WordBool;
begin
  Result := DefaultInterface.IsNull;
end;

function TUADataSetWriterDescriptor.Get_Name: WideString;
begin
  Result := DefaultInterface.Name;
end;

procedure TUADataSetWriterDescriptor.Set_Name(const pRetVal: WideString);
begin
  DefaultInterface.Name := pRetVal;
end;

function TUADataSetWriterDescriptor.Get_DataSetWriterId: Integer;
begin
  Result := DefaultInterface.DataSetWriterId;
end;

procedure TUADataSetWriterDescriptor.Set_DataSetWriterId(pRetVal: Integer);
begin
  DefaultInterface.DataSetWriterId := pRetVal;
end;

function TUADataSetWriterDescriptor.Get_HasDataSetWriterId: WordBool;
begin
  Result := DefaultInterface.HasDataSetWriterId;
end;

function TUADataSetWriterDescriptor.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUADataSetWriterDescriptor.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUADataSetWriterDescriptor.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUADataSetWriterDescriptor.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUADataSetWriterDescriptor.IsStrictlyPhysical(const TransportProfileUriString: WideString; 
                                                       assumeTopicTree: WordBool): WordBool;
begin
  Result := DefaultInterface.IsStrictlyPhysical(TransportProfileUriString, assumeTopicTree);
end;

procedure TUADataSetWriterDescriptor.Physicalize(const TransportProfileUriString: WideString; 
                                                 assumeTopicTree: WordBool; force: WordBool);
begin
  DefaultInterface.Physicalize(TransportProfileUriString, assumeTopicTree, force);
end;

function TUADataSetWriterDescriptor.RequiresResolution(const TransportProfileUriString: WideString; 
                                                       assumeTopicTree: WordBool): WordBool;
begin
  Result := DefaultInterface.RequiresResolution(TransportProfileUriString, assumeTopicTree);
end;

procedure TUADataSetWriterDescriptor.Logicalize;
begin
  DefaultInterface.Logicalize;
end;

class function CoUAGuidDataSetFieldDataDictionary.Create: _UAGuidDataSetFieldDataDictionary;
begin
  Result := CreateComObject(CLASS_UAGuidDataSetFieldDataDictionary) as _UAGuidDataSetFieldDataDictionary;
end;

class function CoUAGuidDataSetFieldDataDictionary.CreateRemote(const MachineName: string): _UAGuidDataSetFieldDataDictionary;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAGuidDataSetFieldDataDictionary) as _UAGuidDataSetFieldDataDictionary;
end;

procedure TUAGuidDataSetFieldDataDictionary.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{D218789D-DCAC-4B12-87BC-AEA9D574FDD2}';
    IntfIID:   '{0BBD9BA4-2711-4BD7-B08A-1C15C092D3DA}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAGuidDataSetFieldDataDictionary.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAGuidDataSetFieldDataDictionary;
  end;
end;

procedure TUAGuidDataSetFieldDataDictionary.ConnectTo(svrIntf: _UAGuidDataSetFieldDataDictionary);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAGuidDataSetFieldDataDictionary.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAGuidDataSetFieldDataDictionary.GetDefaultInterface: _UAGuidDataSetFieldDataDictionary;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAGuidDataSetFieldDataDictionary.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAGuidDataSetFieldDataDictionary.Destroy;
begin
  inherited Destroy;
end;

function TUAGuidDataSetFieldDataDictionary.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAGuidDataSetFieldDataDictionary.Get_Item(key: OleVariant): _UADataSetFieldData;
begin
  Result := DefaultInterface.Item[key];
end;

procedure TUAGuidDataSetFieldDataDictionary._Set_Item(key: OleVariant; 
                                                      const pRetVal: _UADataSetFieldData);
begin
  DefaultInterface.Item[key] := pRetVal;
end;

function TUAGuidDataSetFieldDataDictionary.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

function TUAGuidDataSetFieldDataDictionary.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAGuidDataSetFieldDataDictionary.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAGuidDataSetFieldDataDictionary.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAGuidDataSetFieldDataDictionary.GetEnumerator: IEnumVARIANT;
begin
  Result := DefaultInterface.GetEnumerator;
end;

procedure TUAGuidDataSetFieldDataDictionary.Add(key: OleVariant; Item: OleVariant);
begin
  DefaultInterface.Add(key, Item);
end;

procedure TUAGuidDataSetFieldDataDictionary.Clear;
begin
  DefaultInterface.Clear;
end;

function TUAGuidDataSetFieldDataDictionary.ContainsKey(key: OleVariant): WordBool;
begin
  Result := DefaultInterface.ContainsKey(key);
end;

function TUAGuidDataSetFieldDataDictionary.Remove(key: OleVariant): WordBool;
begin
  Result := DefaultInterface.Remove(key);
end;

function TUAGuidDataSetFieldDataDictionary.TryGetValue(key: OleVariant; out value: OleVariant): WordBool;
begin
  Result := DefaultInterface.TryGetValue(key, value);
end;

function TUAGuidDataSetFieldDataDictionary.ContainsValue(value: OleVariant): WordBool;
begin
  Result := DefaultInterface.ContainsValue(value);
end;

class function CoUAPublisherId.Create: _UAPublisherId;
begin
  Result := CreateComObject(CLASS_UAPublisherId) as _UAPublisherId;
end;

class function CoUAPublisherId.CreateRemote(const MachineName: string): _UAPublisherId;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAPublisherId) as _UAPublisherId;
end;

procedure TUAPublisherId.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{E4ECD2E2-4E6A-4158-8FA1-4E9C6DAB5318}';
    IntfIID:   '{EE8D564D-05F4-4865-AB46-C255D8F9AE1F}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAPublisherId.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAPublisherId;
  end;
end;

procedure TUAPublisherId.ConnectTo(svrIntf: _UAPublisherId);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAPublisherId.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAPublisherId.GetDefaultInterface: _UAPublisherId;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAPublisherId.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAPublisherId.Destroy;
begin
  inherited Destroy;
end;

function TUAPublisherId.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAPublisherId.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAPublisherId.Get_ExternalValue: OleVariant;
begin
  Result := DefaultInterface.ExternalValue;
end;

procedure TUAPublisherId._Set_ExternalValue(pRetVal: OleVariant);
begin
  DefaultInterface.ExternalValue := pRetVal;
end;

function TUAPublisherId.Get_InternalValue: OleVariant;
begin
  Result := DefaultInterface.InternalValue;
end;

procedure TUAPublisherId._Set_InternalValue(pRetVal: OleVariant);
begin
  DefaultInterface.InternalValue := pRetVal;
end;

function TUAPublisherId.Get_IsNull: WordBool;
begin
  Result := DefaultInterface.IsNull;
end;

function TUAPublisherId.Get_IsNumericType: WordBool;
begin
  Result := DefaultInterface.IsNumericType;
end;

function TUAPublisherId.Get_NumericIdentifier: TDecimal;
begin
  Result := DefaultInterface.NumericIdentifier;
end;

function TUAPublisherId.Get_NumericIdentifierString: WideString;
begin
  Result := DefaultInterface.NumericIdentifierString;
end;

function TUAPublisherId.Get_NumericIdentifierUInt64: Largeuint;
begin
  Result := DefaultInterface.NumericIdentifierUInt64;
end;

function TUAPublisherId.Get_PublisherIdType: UAPublisherIdType;
begin
  Result := DefaultInterface.PublisherIdType;
end;

procedure TUAPublisherId.Set_PublisherIdType(pRetVal: UAPublisherIdType);
begin
  DefaultInterface.PublisherIdType := pRetVal;
end;

function TUAPublisherId.Get_StringIdentifier: WideString;
begin
  Result := DefaultInterface.StringIdentifier;
end;

function TUAPublisherId.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAPublisherId.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAPublisherId.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAPublisherId.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUAPublisherId.CompareTo(other: OleVariant): Integer;
begin
  Result := DefaultInterface.CompareTo(other);
end;

procedure TUAPublisherId.Reset;
begin
  DefaultInterface.Reset;
end;

procedure TUAPublisherId.SetByteIdentifier(byteIdentifier: Byte);
begin
  DefaultInterface.SetByteIdentifier(byteIdentifier);
end;

procedure TUAPublisherId.SetExternalValue(ExternalValue: OleVariant);
begin
  DefaultInterface.SetExternalValue(ExternalValue);
end;

procedure TUAPublisherId.SetIdentifier(PublisherIdType: UAPublisherIdType; identifier: OleVariant);
begin
  DefaultInterface.SetIdentifier(PublisherIdType, identifier);
end;

procedure TUAPublisherId.SetInternalValue(InternalValue: OleVariant);
begin
  DefaultInterface.SetInternalValue(InternalValue);
end;

procedure TUAPublisherId.SetStringIdentifier(const StringIdentifier: WideString);
begin
  DefaultInterface.SetStringIdentifier(StringIdentifier);
end;

procedure TUAPublisherId.SetUInt16Identifier(uint16Identifier: Integer);
begin
  DefaultInterface.SetUInt16Identifier(uint16Identifier);
end;

procedure TUAPublisherId.SetUInt32Identifier(uint32Identifier: Int64);
begin
  DefaultInterface.SetUInt32Identifier(uint32Identifier);
end;

procedure TUAPublisherId.SetUInt64Identifier(uint64Identifier: TDecimal);
begin
  DefaultInterface.SetUInt64Identifier(uint64Identifier);
end;

class function CoUAPubSubCommunicationParameters.Create: _UAPubSubCommunicationParameters;
begin
  Result := CreateComObject(CLASS_UAPubSubCommunicationParameters) as _UAPubSubCommunicationParameters;
end;

class function CoUAPubSubCommunicationParameters.CreateRemote(const MachineName: string): _UAPubSubCommunicationParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAPubSubCommunicationParameters) as _UAPubSubCommunicationParameters;
end;

procedure TUAPubSubCommunicationParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{D6953030-0FD2-42FC-AF26-B88E95B04EC8}';
    IntfIID:   '{D78C7E17-0E17-4081-A467-032E66AEC298}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAPubSubCommunicationParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAPubSubCommunicationParameters;
  end;
end;

procedure TUAPubSubCommunicationParameters.ConnectTo(svrIntf: _UAPubSubCommunicationParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAPubSubCommunicationParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAPubSubCommunicationParameters.GetDefaultInterface: _UAPubSubCommunicationParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAPubSubCommunicationParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAPubSubCommunicationParameters.Destroy;
begin
  inherited Destroy;
end;

function TUAPubSubCommunicationParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAPubSubCommunicationParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAPubSubCommunicationParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUAPubSubCommunicationParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUAPubSubCommunicationParameters.Get_DataSetFieldContentMask: UADataSetFieldContentMask;
begin
  Result := DefaultInterface.DataSetFieldContentMask;
end;

procedure TUAPubSubCommunicationParameters.Set_DataSetFieldContentMask(pRetVal: UADataSetFieldContentMask);
begin
  DefaultInterface.DataSetFieldContentMask := pRetVal;
end;

function TUAPubSubCommunicationParameters.Get_ManagedSecurityGroupParameters: _ManagedSecurityGroupParameters;
begin
  Result := DefaultInterface.ManagedSecurityGroupParameters;
end;

procedure TUAPubSubCommunicationParameters._Set_ManagedSecurityGroupParameters(const pRetVal: _ManagedSecurityGroupParameters);
begin
  DefaultInterface.ManagedSecurityGroupParameters := pRetVal;
end;

function TUAPubSubCommunicationParameters.Get_MaximumNetworkMessageSize: Int64;
begin
  Result := DefaultInterface.MaximumNetworkMessageSize;
end;

procedure TUAPubSubCommunicationParameters.Set_MaximumNetworkMessageSize(pRetVal: Int64);
begin
  DefaultInterface.MaximumNetworkMessageSize := pRetVal;
end;

function TUAPubSubCommunicationParameters.Get_MaximumNetworkMessageSizeInt32: Integer;
begin
  Result := DefaultInterface.MaximumNetworkMessageSizeInt32;
end;

procedure TUAPubSubCommunicationParameters.Set_MaximumNetworkMessageSizeInt32(pRetVal: Integer);
begin
  DefaultInterface.MaximumNetworkMessageSizeInt32 := pRetVal;
end;

function TUAPubSubCommunicationParameters.Get_securityGroupId: WideString;
begin
  Result := DefaultInterface.securityGroupId;
end;

procedure TUAPubSubCommunicationParameters.Set_securityGroupId(const pRetVal: WideString);
begin
  DefaultInterface.securityGroupId := pRetVal;
end;

function TUAPubSubCommunicationParameters.Get_SecurityKeyServices: _UAEndpointDescriptorCollection;
begin
  Result := DefaultInterface.SecurityKeyServices;
end;

procedure TUAPubSubCommunicationParameters._Set_SecurityKeyServices(const pRetVal: _UAEndpointDescriptorCollection);
begin
  DefaultInterface.SecurityKeyServices := pRetVal;
end;

function TUAPubSubCommunicationParameters.Get_SecurityKeyServiceTemplate: _UAEndpointDescriptor;
begin
  Result := DefaultInterface.SecurityKeyServiceTemplate;
end;

procedure TUAPubSubCommunicationParameters._Set_SecurityKeyServiceTemplate(const pRetVal: _UAEndpointDescriptor);
begin
  DefaultInterface.SecurityKeyServiceTemplate := pRetVal;
end;

function TUAPubSubCommunicationParameters.Get_SecurityMode: UAMessageSecurityModes;
begin
  Result := DefaultInterface.SecurityMode;
end;

procedure TUAPubSubCommunicationParameters.Set_SecurityMode(pRetVal: UAMessageSecurityModes);
begin
  DefaultInterface.SecurityMode := pRetVal;
end;

function TUAPubSubCommunicationParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAPubSubCommunicationParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAPubSubCommunicationParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAPubSubCommunicationParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUAPubSubConnectionDescriptor.Create: _UAPubSubConnectionDescriptor;
begin
  Result := CreateComObject(CLASS_UAPubSubConnectionDescriptor) as _UAPubSubConnectionDescriptor;
end;

class function CoUAPubSubConnectionDescriptor.CreateRemote(const MachineName: string): _UAPubSubConnectionDescriptor;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAPubSubConnectionDescriptor) as _UAPubSubConnectionDescriptor;
end;

procedure TUAPubSubConnectionDescriptor.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{FA4F1AAD-822C-4F58-B480-F9189E994018}';
    IntfIID:   '{4A0D460D-B71A-4009-9EB7-A081AC6AACEA}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAPubSubConnectionDescriptor.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAPubSubConnectionDescriptor;
  end;
end;

procedure TUAPubSubConnectionDescriptor.ConnectTo(svrIntf: _UAPubSubConnectionDescriptor);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAPubSubConnectionDescriptor.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAPubSubConnectionDescriptor.GetDefaultInterface: _UAPubSubConnectionDescriptor;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAPubSubConnectionDescriptor.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAPubSubConnectionDescriptor.Destroy;
begin
  inherited Destroy;
end;

function TUAPubSubConnectionDescriptor.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAPubSubConnectionDescriptor.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAPubSubConnectionDescriptor.Get_CustomPropertyValueDictionary: _UAKeyValueDictionary;
begin
  Result := DefaultInterface.CustomPropertyValueDictionary;
end;

procedure TUAPubSubConnectionDescriptor._Set_CustomPropertyValueDictionary(const pRetVal: _UAKeyValueDictionary);
begin
  DefaultInterface.CustomPropertyValueDictionary := pRetVal;
end;

function TUAPubSubConnectionDescriptor.Get_HasName: WordBool;
begin
  Result := DefaultInterface.HasName;
end;

function TUAPubSubConnectionDescriptor.Get_IsNull: WordBool;
begin
  Result := DefaultInterface.IsNull;
end;

function TUAPubSubConnectionDescriptor.Get_Name: WideString;
begin
  Result := DefaultInterface.Name;
end;

procedure TUAPubSubConnectionDescriptor.Set_Name(const pRetVal: WideString);
begin
  DefaultInterface.Name := pRetVal;
end;

function TUAPubSubConnectionDescriptor.Get_BrokerConnectionTransportParameters: _UABrokerConnectionTransportParameters;
begin
  Result := DefaultInterface.BrokerConnectionTransportParameters;
end;

procedure TUAPubSubConnectionDescriptor._Set_BrokerConnectionTransportParameters(const pRetVal: _UABrokerConnectionTransportParameters);
begin
  DefaultInterface.BrokerConnectionTransportParameters := pRetVal;
end;

function TUAPubSubConnectionDescriptor.Get_ConnectionTransportParameters: _UAConnectionTransportParameters;
begin
  Result := DefaultInterface.ConnectionTransportParameters;
end;

procedure TUAPubSubConnectionDescriptor._Set_ConnectionTransportParameters(const pRetVal: _UAConnectionTransportParameters);
begin
  DefaultInterface.ConnectionTransportParameters := pRetVal;
end;

function TUAPubSubConnectionDescriptor.Get_DatagramConnectionTransportParameters: _UADatagramConnectionTransportParameters;
begin
  Result := DefaultInterface.DatagramConnectionTransportParameters;
end;

procedure TUAPubSubConnectionDescriptor._Set_DatagramConnectionTransportParameters(const pRetVal: _UADatagramConnectionTransportParameters);
begin
  DefaultInterface.DatagramConnectionTransportParameters := pRetVal;
end;

function TUAPubSubConnectionDescriptor.Get_EffectiveConnectionTransportParameters: _UAConnectionTransportParameters;
begin
  Result := DefaultInterface.EffectiveConnectionTransportParameters;
end;

function TUAPubSubConnectionDescriptor.Get_EffectiveTransportProfileUriString: WideString;
begin
  Result := DefaultInterface.EffectiveTransportProfileUriString;
end;

function TUAPubSubConnectionDescriptor.Get_HasNetworkAddress: WordBool;
begin
  Result := DefaultInterface.HasNetworkAddress;
end;

function TUAPubSubConnectionDescriptor.Get_ImpliedTransportProfileUriString: WideString;
begin
  Result := DefaultInterface.ImpliedTransportProfileUriString;
end;

function TUAPubSubConnectionDescriptor.Get_InferredTransportProfileUriString: WideString;
begin
  Result := DefaultInterface.InferredTransportProfileUriString;
end;

function TUAPubSubConnectionDescriptor.Get_NetworkAddress: _NetworkAddress;
begin
  Result := DefaultInterface.NetworkAddress;
end;

procedure TUAPubSubConnectionDescriptor._Set_NetworkAddress(const pRetVal: _NetworkAddress);
begin
  DefaultInterface.NetworkAddress := pRetVal;
end;

function TUAPubSubConnectionDescriptor.Get_ResourceAddress: _ResourceAddress;
begin
  Result := DefaultInterface.ResourceAddress;
end;

procedure TUAPubSubConnectionDescriptor._Set_ResourceAddress(const pRetVal: _ResourceAddress);
begin
  DefaultInterface.ResourceAddress := pRetVal;
end;

function TUAPubSubConnectionDescriptor.Get_TransportProfileName: WideString;
begin
  Result := DefaultInterface.TransportProfileName;
end;

procedure TUAPubSubConnectionDescriptor.Set_TransportProfileName(const pRetVal: WideString);
begin
  DefaultInterface.TransportProfileName := pRetVal;
end;

function TUAPubSubConnectionDescriptor.Get_TransportProfileUriString: WideString;
begin
  Result := DefaultInterface.TransportProfileUriString;
end;

procedure TUAPubSubConnectionDescriptor.Set_TransportProfileUriString(const pRetVal: WideString);
begin
  DefaultInterface.TransportProfileUriString := pRetVal;
end;

function TUAPubSubConnectionDescriptor.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAPubSubConnectionDescriptor.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAPubSubConnectionDescriptor.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAPubSubConnectionDescriptor.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUAPubSubConnectionDescriptor.IsStrictlyPhysical(const TransportProfileUriString: WideString; 
                                                          assumeTopicTree: WordBool): WordBool;
begin
  Result := DefaultInterface.IsStrictlyPhysical(TransportProfileUriString, assumeTopicTree);
end;

procedure TUAPubSubConnectionDescriptor.Physicalize(const TransportProfileUriString: WideString; 
                                                    assumeTopicTree: WordBool; force: WordBool);
begin
  DefaultInterface.Physicalize(TransportProfileUriString, assumeTopicTree, force);
end;

function TUAPubSubConnectionDescriptor.RequiresResolution(const TransportProfileUriString: WideString; 
                                                          assumeTopicTree: WordBool): WordBool;
begin
  Result := DefaultInterface.RequiresResolution(TransportProfileUriString, assumeTopicTree);
end;

procedure TUAPubSubConnectionDescriptor.Logicalize;
begin
  DefaultInterface.Logicalize;
end;

procedure TUAPubSubConnectionDescriptor.UseEthernetCaptureFile(const captureFileName: WideString);
begin
  DefaultInterface.UseEthernetCaptureFile(captureFileName);
end;

procedure TUAPubSubConnectionDescriptor.UseUdpCaptureFile(const captureFileName: WideString);
begin
  DefaultInterface.UseUdpCaptureFile(captureFileName);
end;

class function CoUADataSetHeader.Create: _UADataSetHeader;
begin
  Result := CreateComObject(CLASS_UADataSetHeader) as _UADataSetHeader;
end;

class function CoUADataSetHeader.CreateRemote(const MachineName: string): _UADataSetHeader;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UADataSetHeader) as _UADataSetHeader;
end;

procedure TUADataSetHeader.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{39CBB05F-52B1-4130-8EE6-08CF3C3370BE}';
    IntfIID:   '{4FA1A49E-CC33-40A1-8CF2-8DBE6E7F2E50}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUADataSetHeader.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UADataSetHeader;
  end;
end;

procedure TUADataSetHeader.ConnectTo(svrIntf: _UADataSetHeader);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUADataSetHeader.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUADataSetHeader.GetDefaultInterface: _UADataSetHeader;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUADataSetHeader.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUADataSetHeader.Destroy;
begin
  inherited Destroy;
end;

function TUADataSetHeader.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUADataSetHeader.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUADataSetHeader.Get_DataSetWriterId: Integer;
begin
  Result := DefaultInterface.DataSetWriterId;
end;

procedure TUADataSetHeader.Set_DataSetWriterId(pRetVal: Integer);
begin
  DefaultInterface.DataSetWriterId := pRetVal;
end;

function TUADataSetHeader.Get_DataSetWriterName: WideString;
begin
  Result := DefaultInterface.DataSetWriterName;
end;

procedure TUADataSetHeader.Set_DataSetWriterName(const pRetVal: WideString);
begin
  DefaultInterface.DataSetWriterName := pRetVal;
end;

function TUADataSetHeader.Get_HasDataSetWriterId: WordBool;
begin
  Result := DefaultInterface.HasDataSetWriterId;
end;

function TUADataSetHeader.Get_HasDataSetWriterName: WordBool;
begin
  Result := DefaultInterface.HasDataSetWriterName;
end;

function TUADataSetHeader.Get_HasPublisherId: WordBool;
begin
  Result := DefaultInterface.HasPublisherId;
end;

function TUADataSetHeader.Get_HasWriterGroupId: WordBool;
begin
  Result := DefaultInterface.HasWriterGroupId;
end;

function TUADataSetHeader.Get_HasWriterGroupName: WordBool;
begin
  Result := DefaultInterface.HasWriterGroupName;
end;

function TUADataSetHeader.Get_PublisherId: _UAPublisherId;
begin
  Result := DefaultInterface.PublisherId;
end;

procedure TUADataSetHeader._Set_PublisherId(const pRetVal: _UAPublisherId);
begin
  DefaultInterface.PublisherId := pRetVal;
end;

function TUADataSetHeader.Get_WriterGroupId: Integer;
begin
  Result := DefaultInterface.WriterGroupId;
end;

procedure TUADataSetHeader.Set_WriterGroupId(pRetVal: Integer);
begin
  DefaultInterface.WriterGroupId := pRetVal;
end;

function TUADataSetHeader.Get_WriterGroupName: WideString;
begin
  Result := DefaultInterface.WriterGroupName;
end;

procedure TUADataSetHeader.Set_WriterGroupName(const pRetVal: WideString);
begin
  DefaultInterface.WriterGroupName := pRetVal;
end;

function TUADataSetHeader.Get_Compressed: WordBool;
begin
  Result := DefaultInterface.Compressed;
end;

procedure TUADataSetHeader.Set_Compressed(pRetVal: WordBool);
begin
  DefaultInterface.Compressed := pRetVal;
end;

function TUADataSetHeader.Get_ConfigurationVersion: _UAConfigurationVersion;
begin
  Result := DefaultInterface.ConfigurationVersion;
end;

procedure TUADataSetHeader._Set_ConfigurationVersion(const pRetVal: _UAConfigurationVersion);
begin
  DefaultInterface.ConfigurationVersion := pRetVal;
end;

function TUADataSetHeader.Get_DataSetClassId: TGUID;
begin
  Result := DefaultInterface.DataSetClassId;
end;

procedure TUADataSetHeader.Set_DataSetClassId(pRetVal: TGUID);
begin
  DefaultInterface.DataSetClassId := pRetVal;
end;

function TUADataSetHeader.Get_DataSetClassIdString: WideString;
begin
  Result := DefaultInterface.DataSetClassIdString;
end;

procedure TUADataSetHeader.Set_DataSetClassIdString(const pRetVal: WideString);
begin
  DefaultInterface.DataSetClassIdString := pRetVal;
end;

function TUADataSetHeader.Get_Encrypted: WordBool;
begin
  Result := DefaultInterface.Encrypted;
end;

procedure TUADataSetHeader.Set_Encrypted(pRetVal: WordBool);
begin
  DefaultInterface.Encrypted := pRetVal;
end;

function TUADataSetHeader.Get_HasConfigurationVersion: WordBool;
begin
  Result := DefaultInterface.HasConfigurationVersion;
end;

function TUADataSetHeader.Get_HasDataSetClassId: WordBool;
begin
  Result := DefaultInterface.HasDataSetClassId;
end;

function TUADataSetHeader.Get_HasOrigin: WordBool;
begin
  Result := DefaultInterface.HasOrigin;
end;

function TUADataSetHeader.Get_MessageMappingName: WideString;
begin
  Result := DefaultInterface.MessageMappingName;
end;

procedure TUADataSetHeader.Set_MessageMappingName(const pRetVal: WideString);
begin
  DefaultInterface.MessageMappingName := pRetVal;
end;

function TUADataSetHeader.Get_Origin: OleVariant;
begin
  Result := DefaultInterface.Origin;
end;

procedure TUADataSetHeader._Set_Origin(pRetVal: OleVariant);
begin
  DefaultInterface.Origin := pRetVal;
end;

function TUADataSetHeader.Get_Retain: WordBool;
begin
  Result := DefaultInterface.Retain;
end;

procedure TUADataSetHeader.Set_Retain(pRetVal: WordBool);
begin
  DefaultInterface.Retain := pRetVal;
end;

function TUADataSetHeader.Get_Signed: WordBool;
begin
  Result := DefaultInterface.Signed;
end;

procedure TUADataSetHeader.Set_Signed(pRetVal: WordBool);
begin
  DefaultInterface.Signed := pRetVal;
end;

function TUADataSetHeader.Get_TransportMappingName: WideString;
begin
  Result := DefaultInterface.TransportMappingName;
end;

procedure TUADataSetHeader.Set_TransportMappingName(const pRetVal: WideString);
begin
  DefaultInterface.TransportMappingName := pRetVal;
end;

function TUADataSetHeader.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUADataSetHeader.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUADataSetHeader.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUADataSetHeader.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUADataSetHeader.CompareTo(other: OleVariant): Integer;
begin
  Result := DefaultInterface.CompareTo(other);
end;

procedure TUADataSetHeader.SetOrigin(value: OleVariant);
begin
  DefaultInterface.SetOrigin(value);
end;

class function CoUADataSetData.Create: _UADataSetData;
begin
  Result := CreateComObject(CLASS_UADataSetData) as _UADataSetData;
end;

class function CoUADataSetData.CreateRemote(const MachineName: string): _UADataSetData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UADataSetData) as _UADataSetData;
end;

procedure TUADataSetData.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{864F7486-7BA9-45DF-8904-413D0AB26EA4}';
    IntfIID:   '{C6BA7AC5-78F1-4C81-AD6E-0D0D53D4F352}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUADataSetData.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UADataSetData;
  end;
end;

procedure TUADataSetData.ConnectTo(svrIntf: _UADataSetData);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUADataSetData.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUADataSetData.GetDefaultInterface: _UADataSetData;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUADataSetData.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUADataSetData.Destroy;
begin
  inherited Destroy;
end;

function TUADataSetData.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUADataSetData.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUADataSetData.Get_DataSetWriterId: Integer;
begin
  Result := DefaultInterface.DataSetWriterId;
end;

procedure TUADataSetData.Set_DataSetWriterId(pRetVal: Integer);
begin
  DefaultInterface.DataSetWriterId := pRetVal;
end;

function TUADataSetData.Get_DataSetWriterName: WideString;
begin
  Result := DefaultInterface.DataSetWriterName;
end;

procedure TUADataSetData.Set_DataSetWriterName(const pRetVal: WideString);
begin
  DefaultInterface.DataSetWriterName := pRetVal;
end;

function TUADataSetData.Get_HasDataSetWriterId: WordBool;
begin
  Result := DefaultInterface.HasDataSetWriterId;
end;

function TUADataSetData.Get_HasDataSetWriterName: WordBool;
begin
  Result := DefaultInterface.HasDataSetWriterName;
end;

function TUADataSetData.Get_HasPublisherId: WordBool;
begin
  Result := DefaultInterface.HasPublisherId;
end;

function TUADataSetData.Get_HasWriterGroupId: WordBool;
begin
  Result := DefaultInterface.HasWriterGroupId;
end;

function TUADataSetData.Get_HasWriterGroupName: WordBool;
begin
  Result := DefaultInterface.HasWriterGroupName;
end;

function TUADataSetData.Get_PublisherId: _UAPublisherId;
begin
  Result := DefaultInterface.PublisherId;
end;

procedure TUADataSetData._Set_PublisherId(const pRetVal: _UAPublisherId);
begin
  DefaultInterface.PublisherId := pRetVal;
end;

function TUADataSetData.Get_WriterGroupId: Integer;
begin
  Result := DefaultInterface.WriterGroupId;
end;

procedure TUADataSetData.Set_WriterGroupId(pRetVal: Integer);
begin
  DefaultInterface.WriterGroupId := pRetVal;
end;

function TUADataSetData.Get_WriterGroupName: WideString;
begin
  Result := DefaultInterface.WriterGroupName;
end;

procedure TUADataSetData.Set_WriterGroupName(const pRetVal: WideString);
begin
  DefaultInterface.WriterGroupName := pRetVal;
end;

function TUADataSetData.Get_Compressed: WordBool;
begin
  Result := DefaultInterface.Compressed;
end;

procedure TUADataSetData.Set_Compressed(pRetVal: WordBool);
begin
  DefaultInterface.Compressed := pRetVal;
end;

function TUADataSetData.Get_ConfigurationVersion: _UAConfigurationVersion;
begin
  Result := DefaultInterface.ConfigurationVersion;
end;

procedure TUADataSetData._Set_ConfigurationVersion(const pRetVal: _UAConfigurationVersion);
begin
  DefaultInterface.ConfigurationVersion := pRetVal;
end;

function TUADataSetData.Get_DataSetClassId: TGUID;
begin
  Result := DefaultInterface.DataSetClassId;
end;

procedure TUADataSetData.Set_DataSetClassId(pRetVal: TGUID);
begin
  DefaultInterface.DataSetClassId := pRetVal;
end;

function TUADataSetData.Get_DataSetClassIdString: WideString;
begin
  Result := DefaultInterface.DataSetClassIdString;
end;

procedure TUADataSetData.Set_DataSetClassIdString(const pRetVal: WideString);
begin
  DefaultInterface.DataSetClassIdString := pRetVal;
end;

function TUADataSetData.Get_Encrypted: WordBool;
begin
  Result := DefaultInterface.Encrypted;
end;

procedure TUADataSetData.Set_Encrypted(pRetVal: WordBool);
begin
  DefaultInterface.Encrypted := pRetVal;
end;

function TUADataSetData.Get_HasConfigurationVersion: WordBool;
begin
  Result := DefaultInterface.HasConfigurationVersion;
end;

function TUADataSetData.Get_HasDataSetClassId: WordBool;
begin
  Result := DefaultInterface.HasDataSetClassId;
end;

function TUADataSetData.Get_HasOrigin: WordBool;
begin
  Result := DefaultInterface.HasOrigin;
end;

function TUADataSetData.Get_MessageMappingName: WideString;
begin
  Result := DefaultInterface.MessageMappingName;
end;

procedure TUADataSetData.Set_MessageMappingName(const pRetVal: WideString);
begin
  DefaultInterface.MessageMappingName := pRetVal;
end;

function TUADataSetData.Get_Origin: OleVariant;
begin
  Result := DefaultInterface.Origin;
end;

procedure TUADataSetData._Set_Origin(pRetVal: OleVariant);
begin
  DefaultInterface.Origin := pRetVal;
end;

function TUADataSetData.Get_Retain: WordBool;
begin
  Result := DefaultInterface.Retain;
end;

procedure TUADataSetData.Set_Retain(pRetVal: WordBool);
begin
  DefaultInterface.Retain := pRetVal;
end;

function TUADataSetData.Get_Signed: WordBool;
begin
  Result := DefaultInterface.Signed;
end;

procedure TUADataSetData.Set_Signed(pRetVal: WordBool);
begin
  DefaultInterface.Signed := pRetVal;
end;

function TUADataSetData.Get_TransportMappingName: WideString;
begin
  Result := DefaultInterface.TransportMappingName;
end;

procedure TUADataSetData.Set_TransportMappingName(const pRetVal: WideString);
begin
  DefaultInterface.TransportMappingName := pRetVal;
end;

function TUADataSetData.Get_DataSetMetaData: _UADataSetMetaData;
begin
  Result := DefaultInterface.DataSetMetaData;
end;

procedure TUADataSetData._Set_DataSetMetaData(const pRetVal: _UADataSetMetaData);
begin
  DefaultInterface.DataSetMetaData := pRetVal;
end;

function TUADataSetData.Get_FieldDataDictionary: _UAStringDataSetFieldDataDictionary;
begin
  Result := DefaultInterface.FieldDataDictionary;
end;

procedure TUADataSetData._Set_FieldDataDictionary(const pRetVal: _UAStringDataSetFieldDataDictionary);
begin
  DefaultInterface.FieldDataDictionary := pRetVal;
end;

function TUADataSetData.Get_FieldDataDictionaryById: _UAGuidDataSetFieldDataDictionary;
begin
  Result := DefaultInterface.FieldDataDictionaryById;
end;

procedure TUADataSetData._Set_FieldDataDictionaryById(const pRetVal: _UAGuidDataSetFieldDataDictionary);
begin
  DefaultInterface.FieldDataDictionaryById := pRetVal;
end;

function TUADataSetData.Get_HasDataSetMetaData: WordBool;
begin
  Result := DefaultInterface.HasDataSetMetaData;
end;

function TUADataSetData.Get_HasTimestamp: WordBool;
begin
  Result := DefaultInterface.HasTimestamp;
end;

function TUADataSetData.Get_IsData: WordBool;
begin
  Result := DefaultInterface.IsData;
end;

procedure TUADataSetData.Set_IsData(pRetVal: WordBool);
begin
  DefaultInterface.IsData := pRetVal;
end;

function TUADataSetData.Get_IsEvent: WordBool;
begin
  Result := DefaultInterface.IsEvent;
end;

procedure TUADataSetData.Set_IsEvent(pRetVal: WordBool);
begin
  DefaultInterface.IsEvent := pRetVal;
end;

function TUADataSetData.Get_Picoseconds: Integer;
begin
  Result := DefaultInterface.Picoseconds;
end;

procedure TUADataSetData.Set_Picoseconds(pRetVal: Integer);
begin
  DefaultInterface.Picoseconds := pRetVal;
end;

function TUADataSetData.Get_StatusCode: _UAStatusCode;
begin
  Result := DefaultInterface.StatusCode;
end;

procedure TUADataSetData._Set_StatusCode(const pRetVal: _UAStatusCode);
begin
  DefaultInterface.StatusCode := pRetVal;
end;

function TUADataSetData.Get_Timestamp: TDateTime;
begin
  Result := DefaultInterface.Timestamp;
end;

procedure TUADataSetData.Set_Timestamp(pRetVal: TDateTime);
begin
  DefaultInterface.Timestamp := pRetVal;
end;

function TUADataSetData.Get_TimestampDouble: Double;
begin
  Result := DefaultInterface.TimestampDouble;
end;

procedure TUADataSetData.Set_TimestampDouble(pRetVal: Double);
begin
  DefaultInterface.TimestampDouble := pRetVal;
end;

function TUADataSetData.Get_TimestampLocal: TDateTime;
begin
  Result := DefaultInterface.TimestampLocal;
end;

procedure TUADataSetData.Set_TimestampLocal(pRetVal: TDateTime);
begin
  DefaultInterface.TimestampLocal := pRetVal;
end;

function TUADataSetData.Get_TimestampLocalDouble: Double;
begin
  Result := DefaultInterface.TimestampLocalDouble;
end;

procedure TUADataSetData.Set_TimestampLocalDouble(pRetVal: Double);
begin
  DefaultInterface.TimestampLocalDouble := pRetVal;
end;

function TUADataSetData.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUADataSetData.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUADataSetData.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUADataSetData.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUADataSetData.CompareTo(other: OleVariant): Integer;
begin
  Result := DefaultInterface.CompareTo(other);
end;

procedure TUADataSetData.SetOrigin(value: OleVariant);
begin
  DefaultInterface.SetOrigin(value);
end;

function TUADataSetData.GetDataSetTypeString: WideString;
begin
  Result := DefaultInterface.GetDataSetTypeString;
end;

class function CoUADataSetFieldDescriptor.Create: _UADataSetFieldDescriptor;
begin
  Result := CreateComObject(CLASS_UADataSetFieldDescriptor) as _UADataSetFieldDescriptor;
end;

class function CoUADataSetFieldDescriptor.CreateRemote(const MachineName: string): _UADataSetFieldDescriptor;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UADataSetFieldDescriptor) as _UADataSetFieldDescriptor;
end;

procedure TUADataSetFieldDescriptor.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{DF4C2F09-8466-4C04-8E01-2BACCC66FDF4}';
    IntfIID:   '{2ECD7F80-C6A5-4EFE-BE12-75B351A230E8}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUADataSetFieldDescriptor.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UADataSetFieldDescriptor;
  end;
end;

procedure TUADataSetFieldDescriptor.ConnectTo(svrIntf: _UADataSetFieldDescriptor);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUADataSetFieldDescriptor.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUADataSetFieldDescriptor.GetDefaultInterface: _UADataSetFieldDescriptor;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUADataSetFieldDescriptor.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUADataSetFieldDescriptor.Destroy;
begin
  inherited Destroy;
end;

function TUADataSetFieldDescriptor.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUADataSetFieldDescriptor.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUADataSetFieldDescriptor.Get_CustomPropertyValueDictionary: _UAKeyValueDictionary;
begin
  Result := DefaultInterface.CustomPropertyValueDictionary;
end;

procedure TUADataSetFieldDescriptor._Set_CustomPropertyValueDictionary(const pRetVal: _UAKeyValueDictionary);
begin
  DefaultInterface.CustomPropertyValueDictionary := pRetVal;
end;

function TUADataSetFieldDescriptor.Get_HasName: WordBool;
begin
  Result := DefaultInterface.HasName;
end;

function TUADataSetFieldDescriptor.Get_IsNull: WordBool;
begin
  Result := DefaultInterface.IsNull;
end;

function TUADataSetFieldDescriptor.Get_Name: WideString;
begin
  Result := DefaultInterface.Name;
end;

procedure TUADataSetFieldDescriptor.Set_Name(const pRetVal: WideString);
begin
  DefaultInterface.Name := pRetVal;
end;

function TUADataSetFieldDescriptor.Get_DataSetFieldId: TGUID;
begin
  Result := DefaultInterface.DataSetFieldId;
end;

procedure TUADataSetFieldDescriptor.Set_DataSetFieldId(pRetVal: TGUID);
begin
  DefaultInterface.DataSetFieldId := pRetVal;
end;

function TUADataSetFieldDescriptor.Get_DataSetFieldIdString: WideString;
begin
  Result := DefaultInterface.DataSetFieldIdString;
end;

procedure TUADataSetFieldDescriptor.Set_DataSetFieldIdString(const pRetVal: WideString);
begin
  DefaultInterface.DataSetFieldIdString := pRetVal;
end;

function TUADataSetFieldDescriptor.Get_HasDataSetFieldId: WordBool;
begin
  Result := DefaultInterface.HasDataSetFieldId;
end;

function TUADataSetFieldDescriptor.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUADataSetFieldDescriptor.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUADataSetFieldDescriptor.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUADataSetFieldDescriptor.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUADataSetFieldDescriptor.IsStrictlyPhysical(const TransportProfileUriString: WideString; 
                                                      assumeTopicTree: WordBool): WordBool;
begin
  Result := DefaultInterface.IsStrictlyPhysical(TransportProfileUriString, assumeTopicTree);
end;

procedure TUADataSetFieldDescriptor.Physicalize(const TransportProfileUriString: WideString; 
                                                assumeTopicTree: WordBool; force: WordBool);
begin
  DefaultInterface.Physicalize(TransportProfileUriString, assumeTopicTree, force);
end;

function TUADataSetFieldDescriptor.RequiresResolution(const TransportProfileUriString: WideString; 
                                                      assumeTopicTree: WordBool): WordBool;
begin
  Result := DefaultInterface.RequiresResolution(TransportProfileUriString, assumeTopicTree);
end;

procedure TUADataSetFieldDescriptor.Logicalize;
begin
  DefaultInterface.Logicalize;
end;

class function CoUAPubSubResolverDescriptor.Create: _UAPubSubResolverDescriptor;
begin
  Result := CreateComObject(CLASS_UAPubSubResolverDescriptor) as _UAPubSubResolverDescriptor;
end;

class function CoUAPubSubResolverDescriptor.CreateRemote(const MachineName: string): _UAPubSubResolverDescriptor;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAPubSubResolverDescriptor) as _UAPubSubResolverDescriptor;
end;

procedure TUAPubSubResolverDescriptor.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{4643B35A-3CC9-44F3-9692-114C7D97B55C}';
    IntfIID:   '{6160E016-5591-48AC-8BD1-499459DDE6A4}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAPubSubResolverDescriptor.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAPubSubResolverDescriptor;
  end;
end;

procedure TUAPubSubResolverDescriptor.ConnectTo(svrIntf: _UAPubSubResolverDescriptor);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAPubSubResolverDescriptor.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAPubSubResolverDescriptor.GetDefaultInterface: _UAPubSubResolverDescriptor;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAPubSubResolverDescriptor.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAPubSubResolverDescriptor.Destroy;
begin
  inherited Destroy;
end;

function TUAPubSubResolverDescriptor.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAPubSubResolverDescriptor.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAPubSubResolverDescriptor.Get_IsNull: WordBool;
begin
  Result := DefaultInterface.IsNull;
end;

function TUAPubSubResolverDescriptor.Get_PublisherEndpointDescriptor: _UAEndpointDescriptor;
begin
  Result := DefaultInterface.PublisherEndpointDescriptor;
end;

procedure TUAPubSubResolverDescriptor._Set_PublisherEndpointDescriptor(const pRetVal: _UAEndpointDescriptor);
begin
  DefaultInterface.PublisherEndpointDescriptor := pRetVal;
end;

function TUAPubSubResolverDescriptor.Get_PublisherFileResourceDescriptor: _ResourceDescriptor;
begin
  Result := DefaultInterface.PublisherFileResourceDescriptor;
end;

procedure TUAPubSubResolverDescriptor._Set_PublisherFileResourceDescriptor(const pRetVal: _ResourceDescriptor);
begin
  DefaultInterface.PublisherFileResourceDescriptor := pRetVal;
end;

function TUAPubSubResolverDescriptor.Get_ResolverKind: UAPubSubResolverKind;
begin
  Result := DefaultInterface.ResolverKind;
end;

procedure TUAPubSubResolverDescriptor.Set_ResolverKind(pRetVal: UAPubSubResolverKind);
begin
  DefaultInterface.ResolverKind := pRetVal;
end;

function TUAPubSubResolverDescriptor.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAPubSubResolverDescriptor.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAPubSubResolverDescriptor.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAPubSubResolverDescriptor.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUAStringDataSetFieldDataDictionary.Create: _UAStringDataSetFieldDataDictionary;
begin
  Result := CreateComObject(CLASS_UAStringDataSetFieldDataDictionary) as _UAStringDataSetFieldDataDictionary;
end;

class function CoUAStringDataSetFieldDataDictionary.CreateRemote(const MachineName: string): _UAStringDataSetFieldDataDictionary;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAStringDataSetFieldDataDictionary) as _UAStringDataSetFieldDataDictionary;
end;

procedure TUAStringDataSetFieldDataDictionary.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{81F9F637-0BCA-4C66-B6F4-B57564F8C9CB}';
    IntfIID:   '{792FFFC4-2065-4D6B-B4DC-30ECDA74CC79}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAStringDataSetFieldDataDictionary.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAStringDataSetFieldDataDictionary;
  end;
end;

procedure TUAStringDataSetFieldDataDictionary.ConnectTo(svrIntf: _UAStringDataSetFieldDataDictionary);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAStringDataSetFieldDataDictionary.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAStringDataSetFieldDataDictionary.GetDefaultInterface: _UAStringDataSetFieldDataDictionary;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAStringDataSetFieldDataDictionary.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAStringDataSetFieldDataDictionary.Destroy;
begin
  inherited Destroy;
end;

function TUAStringDataSetFieldDataDictionary.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAStringDataSetFieldDataDictionary.Get_Item(key: OleVariant): _UADataSetFieldData;
begin
  Result := DefaultInterface.Item[key];
end;

procedure TUAStringDataSetFieldDataDictionary._Set_Item(key: OleVariant; 
                                                        const pRetVal: _UADataSetFieldData);
begin
  DefaultInterface.Item[key] := pRetVal;
end;

function TUAStringDataSetFieldDataDictionary.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

function TUAStringDataSetFieldDataDictionary.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAStringDataSetFieldDataDictionary.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAStringDataSetFieldDataDictionary.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAStringDataSetFieldDataDictionary.GetEnumerator: IEnumVARIANT;
begin
  Result := DefaultInterface.GetEnumerator;
end;

procedure TUAStringDataSetFieldDataDictionary.Add(key: OleVariant; Item: OleVariant);
begin
  DefaultInterface.Add(key, Item);
end;

procedure TUAStringDataSetFieldDataDictionary.Clear;
begin
  DefaultInterface.Clear;
end;

function TUAStringDataSetFieldDataDictionary.ContainsKey(key: OleVariant): WordBool;
begin
  Result := DefaultInterface.ContainsKey(key);
end;

function TUAStringDataSetFieldDataDictionary.Remove(key: OleVariant): WordBool;
begin
  Result := DefaultInterface.Remove(key);
end;

function TUAStringDataSetFieldDataDictionary.TryGetValue(key: OleVariant; out value: OleVariant): WordBool;
begin
  Result := DefaultInterface.TryGetValue(key, value);
end;

function TUAStringDataSetFieldDataDictionary.ContainsValue(value: OleVariant): WordBool;
begin
  Result := DefaultInterface.ContainsValue(value);
end;

class function CoUASubscribeDataSetFilter.Create: _UASubscribeDataSetFilter;
begin
  Result := CreateComObject(CLASS_UASubscribeDataSetFilter) as _UASubscribeDataSetFilter;
end;

class function CoUASubscribeDataSetFilter.CreateRemote(const MachineName: string): _UASubscribeDataSetFilter;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UASubscribeDataSetFilter) as _UASubscribeDataSetFilter;
end;

procedure TUASubscribeDataSetFilter.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{17ACF923-42E1-4B85-80BC-D92B38900BC6}';
    IntfIID:   '{8D97D14B-6B1E-4251-88B3-7BEBCDE13175}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUASubscribeDataSetFilter.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UASubscribeDataSetFilter;
  end;
end;

procedure TUASubscribeDataSetFilter.ConnectTo(svrIntf: _UASubscribeDataSetFilter);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUASubscribeDataSetFilter.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUASubscribeDataSetFilter.GetDefaultInterface: _UASubscribeDataSetFilter;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUASubscribeDataSetFilter.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUASubscribeDataSetFilter.Destroy;
begin
  inherited Destroy;
end;

function TUASubscribeDataSetFilter.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUASubscribeDataSetFilter.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUASubscribeDataSetFilter.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUASubscribeDataSetFilter.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUASubscribeDataSetFilter.Get_AllowDataMessages: WordBool;
begin
  Result := DefaultInterface.AllowDataMessages;
end;

procedure TUASubscribeDataSetFilter.Set_AllowDataMessages(pRetVal: WordBool);
begin
  DefaultInterface.AllowDataMessages := pRetVal;
end;

function TUASubscribeDataSetFilter.Get_AllowEventMessages: WordBool;
begin
  Result := DefaultInterface.AllowEventMessages;
end;

procedure TUASubscribeDataSetFilter.Set_AllowEventMessages(pRetVal: WordBool);
begin
  DefaultInterface.AllowEventMessages := pRetVal;
end;

function TUASubscribeDataSetFilter.Get_DataSetWriterDescriptor: _UADataSetWriterDescriptor;
begin
  Result := DefaultInterface.DataSetWriterDescriptor;
end;

procedure TUASubscribeDataSetFilter._Set_DataSetWriterDescriptor(const pRetVal: _UADataSetWriterDescriptor);
begin
  DefaultInterface.DataSetWriterDescriptor := pRetVal;
end;

function TUASubscribeDataSetFilter.Get_HasDataSetWriterDescriptor: WordBool;
begin
  Result := DefaultInterface.HasDataSetWriterDescriptor;
end;

function TUASubscribeDataSetFilter.Get_HasOriginPattern: WordBool;
begin
  Result := DefaultInterface.HasOriginPattern;
end;

function TUASubscribeDataSetFilter.Get_HasPublisherId: WordBool;
begin
  Result := DefaultInterface.HasPublisherId;
end;

function TUASubscribeDataSetFilter.Get_HasRequiredFieldValues: WordBool;
begin
  Result := DefaultInterface.HasRequiredFieldValues;
end;

function TUASubscribeDataSetFilter.Get_HasWriterGroupDescriptor: WordBool;
begin
  Result := DefaultInterface.HasWriterGroupDescriptor;
end;

function TUASubscribeDataSetFilter.Get_OriginPattern: WideString;
begin
  Result := DefaultInterface.OriginPattern;
end;

procedure TUASubscribeDataSetFilter.Set_OriginPattern(const pRetVal: WideString);
begin
  DefaultInterface.OriginPattern := pRetVal;
end;

function TUASubscribeDataSetFilter.Get_PublisherId: _UAPublisherId;
begin
  Result := DefaultInterface.PublisherId;
end;

procedure TUASubscribeDataSetFilter._Set_PublisherId(const pRetVal: _UAPublisherId);
begin
  DefaultInterface.PublisherId := pRetVal;
end;

function TUASubscribeDataSetFilter.Get_RequiredFieldValueDictionary: _StringObjectDictionary;
begin
  Result := DefaultInterface.RequiredFieldValueDictionary;
end;

procedure TUASubscribeDataSetFilter._Set_RequiredFieldValueDictionary(const pRetVal: _StringObjectDictionary);
begin
  DefaultInterface.RequiredFieldValueDictionary := pRetVal;
end;

function TUASubscribeDataSetFilter.Get_WriterGroupDescriptor: _UAWriterGroupDescriptor;
begin
  Result := DefaultInterface.WriterGroupDescriptor;
end;

procedure TUASubscribeDataSetFilter._Set_WriterGroupDescriptor(const pRetVal: _UAWriterGroupDescriptor);
begin
  DefaultInterface.WriterGroupDescriptor := pRetVal;
end;

function TUASubscribeDataSetFilter.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUASubscribeDataSetFilter.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUASubscribeDataSetFilter.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUASubscribeDataSetFilter.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUASubscribeDataSetFilter.IsStrictlyPhysical(const TransportProfileUriString: WideString; 
                                                      assumeTopicTree: WordBool): WordBool;
begin
  Result := DefaultInterface.IsStrictlyPhysical(TransportProfileUriString, assumeTopicTree);
end;

procedure TUASubscribeDataSetFilter.Logicalize;
begin
  DefaultInterface.Logicalize;
end;

procedure TUASubscribeDataSetFilter.Physicalize(const TransportProfileUriString: WideString; 
                                                assumeTopicTree: WordBool; force: WordBool);
begin
  DefaultInterface.Physicalize(TransportProfileUriString, assumeTopicTree, force);
end;

procedure TUASubscribeDataSetFilter.PhysicalizeRequiredFieldValues(const TransportProfileUriString: WideString; 
                                                                   force: WordBool);
begin
  DefaultInterface.PhysicalizeRequiredFieldValues(TransportProfileUriString, force);
end;

function TUASubscribeDataSetFilter.RequiredFieldValuesAreStrictlyPhysical(const TransportProfileUriString: WideString): WordBool;
begin
  Result := DefaultInterface.RequiredFieldValuesAreStrictlyPhysical(TransportProfileUriString);
end;

function TUASubscribeDataSetFilter.RequiredFieldValuesRequireResolution(const TransportProfileUriString: WideString): WordBool;
begin
  Result := DefaultInterface.RequiredFieldValuesRequireResolution(TransportProfileUriString);
end;

function TUASubscribeDataSetFilter.RequiresResolution(const TransportProfileUriString: WideString; 
                                                      assumeTopicTree: WordBool): WordBool;
begin
  Result := DefaultInterface.RequiresResolution(TransportProfileUriString, assumeTopicTree);
end;

class function CoUASubscriberCommunicationParameters.Create: _UASubscriberCommunicationParameters;
begin
  Result := CreateComObject(CLASS_UASubscriberCommunicationParameters) as _UASubscriberCommunicationParameters;
end;

class function CoUASubscriberCommunicationParameters.CreateRemote(const MachineName: string): _UASubscriberCommunicationParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UASubscriberCommunicationParameters) as _UASubscriberCommunicationParameters;
end;

procedure TUASubscriberCommunicationParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{DC6EDA08-F378-4709-B4E9-E0743BB8E283}';
    IntfIID:   '{5D65321B-169C-4DFE-B039-2F25C3D0BDA4}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUASubscriberCommunicationParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UASubscriberCommunicationParameters;
  end;
end;

procedure TUASubscriberCommunicationParameters.ConnectTo(svrIntf: _UASubscriberCommunicationParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUASubscriberCommunicationParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUASubscriberCommunicationParameters.GetDefaultInterface: _UASubscriberCommunicationParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUASubscriberCommunicationParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUASubscriberCommunicationParameters.Destroy;
begin
  inherited Destroy;
end;

function TUASubscriberCommunicationParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUASubscriberCommunicationParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUASubscriberCommunicationParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUASubscriberCommunicationParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUASubscriberCommunicationParameters.Get_DataSetFieldContentMask: UADataSetFieldContentMask;
begin
  Result := DefaultInterface.DataSetFieldContentMask;
end;

procedure TUASubscriberCommunicationParameters.Set_DataSetFieldContentMask(pRetVal: UADataSetFieldContentMask);
begin
  DefaultInterface.DataSetFieldContentMask := pRetVal;
end;

function TUASubscriberCommunicationParameters.Get_ManagedSecurityGroupParameters: _ManagedSecurityGroupParameters;
begin
  Result := DefaultInterface.ManagedSecurityGroupParameters;
end;

procedure TUASubscriberCommunicationParameters._Set_ManagedSecurityGroupParameters(const pRetVal: _ManagedSecurityGroupParameters);
begin
  DefaultInterface.ManagedSecurityGroupParameters := pRetVal;
end;

function TUASubscriberCommunicationParameters.Get_MaximumNetworkMessageSize: Int64;
begin
  Result := DefaultInterface.MaximumNetworkMessageSize;
end;

procedure TUASubscriberCommunicationParameters.Set_MaximumNetworkMessageSize(pRetVal: Int64);
begin
  DefaultInterface.MaximumNetworkMessageSize := pRetVal;
end;

function TUASubscriberCommunicationParameters.Get_MaximumNetworkMessageSizeInt32: Integer;
begin
  Result := DefaultInterface.MaximumNetworkMessageSizeInt32;
end;

procedure TUASubscriberCommunicationParameters.Set_MaximumNetworkMessageSizeInt32(pRetVal: Integer);
begin
  DefaultInterface.MaximumNetworkMessageSizeInt32 := pRetVal;
end;

function TUASubscriberCommunicationParameters.Get_securityGroupId: WideString;
begin
  Result := DefaultInterface.securityGroupId;
end;

procedure TUASubscriberCommunicationParameters.Set_securityGroupId(const pRetVal: WideString);
begin
  DefaultInterface.securityGroupId := pRetVal;
end;

function TUASubscriberCommunicationParameters.Get_SecurityKeyServices: _UAEndpointDescriptorCollection;
begin
  Result := DefaultInterface.SecurityKeyServices;
end;

procedure TUASubscriberCommunicationParameters._Set_SecurityKeyServices(const pRetVal: _UAEndpointDescriptorCollection);
begin
  DefaultInterface.SecurityKeyServices := pRetVal;
end;

function TUASubscriberCommunicationParameters.Get_SecurityKeyServiceTemplate: _UAEndpointDescriptor;
begin
  Result := DefaultInterface.SecurityKeyServiceTemplate;
end;

procedure TUASubscriberCommunicationParameters._Set_SecurityKeyServiceTemplate(const pRetVal: _UAEndpointDescriptor);
begin
  DefaultInterface.SecurityKeyServiceTemplate := pRetVal;
end;

function TUASubscriberCommunicationParameters.Get_SecurityMode: UAMessageSecurityModes;
begin
  Result := DefaultInterface.SecurityMode;
end;

procedure TUASubscriberCommunicationParameters.Set_SecurityMode(pRetVal: UAMessageSecurityModes);
begin
  DefaultInterface.SecurityMode := pRetVal;
end;

function TUASubscriberCommunicationParameters.Get_BrokerDataSetReaderTransportParameters: _UABrokerDataSetReaderTransportParameters;
begin
  Result := DefaultInterface.BrokerDataSetReaderTransportParameters;
end;

procedure TUASubscriberCommunicationParameters._Set_BrokerDataSetReaderTransportParameters(const pRetVal: _UABrokerDataSetReaderTransportParameters);
begin
  DefaultInterface.BrokerDataSetReaderTransportParameters := pRetVal;
end;

function TUASubscriberCommunicationParameters.Get_JsonDataSetReaderMessageParameters: _UAJsonDataSetReaderMessageParameters;
begin
  Result := DefaultInterface.JsonDataSetReaderMessageParameters;
end;

procedure TUASubscriberCommunicationParameters._Set_JsonDataSetReaderMessageParameters(const pRetVal: _UAJsonDataSetReaderMessageParameters);
begin
  DefaultInterface.JsonDataSetReaderMessageParameters := pRetVal;
end;

function TUASubscriberCommunicationParameters.Get_MessageReceiveTimeout: Double;
begin
  Result := DefaultInterface.MessageReceiveTimeout;
end;

procedure TUASubscriberCommunicationParameters.Set_MessageReceiveTimeout(pRetVal: Double);
begin
  DefaultInterface.MessageReceiveTimeout := pRetVal;
end;

function TUASubscriberCommunicationParameters.Get_UadpDataSetReaderMessageParameters: _UAUadpDataSetReaderMessageParameters;
begin
  Result := DefaultInterface.UadpDataSetReaderMessageParameters;
end;

procedure TUASubscriberCommunicationParameters._Set_UadpDataSetReaderMessageParameters(const pRetVal: _UAUadpDataSetReaderMessageParameters);
begin
  DefaultInterface.UadpDataSetReaderMessageParameters := pRetVal;
end;

function TUASubscriberCommunicationParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUASubscriberCommunicationParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUASubscriberCommunicationParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUASubscriberCommunicationParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUAWriterGroupDescriptor.Create: _UAWriterGroupDescriptor;
begin
  Result := CreateComObject(CLASS_UAWriterGroupDescriptor) as _UAWriterGroupDescriptor;
end;

class function CoUAWriterGroupDescriptor.CreateRemote(const MachineName: string): _UAWriterGroupDescriptor;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAWriterGroupDescriptor) as _UAWriterGroupDescriptor;
end;

procedure TUAWriterGroupDescriptor.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{F6D923CA-64D4-4B84-A47C-B4BAA6309A80}';
    IntfIID:   '{8C64A48B-E50A-492D-B094-21AB44F50A5A}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAWriterGroupDescriptor.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAWriterGroupDescriptor;
  end;
end;

procedure TUAWriterGroupDescriptor.ConnectTo(svrIntf: _UAWriterGroupDescriptor);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAWriterGroupDescriptor.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAWriterGroupDescriptor.GetDefaultInterface: _UAWriterGroupDescriptor;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAWriterGroupDescriptor.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAWriterGroupDescriptor.Destroy;
begin
  inherited Destroy;
end;

function TUAWriterGroupDescriptor.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAWriterGroupDescriptor.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAWriterGroupDescriptor.Get_CustomPropertyValueDictionary: _UAKeyValueDictionary;
begin
  Result := DefaultInterface.CustomPropertyValueDictionary;
end;

procedure TUAWriterGroupDescriptor._Set_CustomPropertyValueDictionary(const pRetVal: _UAKeyValueDictionary);
begin
  DefaultInterface.CustomPropertyValueDictionary := pRetVal;
end;

function TUAWriterGroupDescriptor.Get_HasName: WordBool;
begin
  Result := DefaultInterface.HasName;
end;

function TUAWriterGroupDescriptor.Get_IsNull: WordBool;
begin
  Result := DefaultInterface.IsNull;
end;

function TUAWriterGroupDescriptor.Get_Name: WideString;
begin
  Result := DefaultInterface.Name;
end;

procedure TUAWriterGroupDescriptor.Set_Name(const pRetVal: WideString);
begin
  DefaultInterface.Name := pRetVal;
end;

function TUAWriterGroupDescriptor.Get_HasWriterGroupId: WordBool;
begin
  Result := DefaultInterface.HasWriterGroupId;
end;

function TUAWriterGroupDescriptor.Get_WriterGroupId: Integer;
begin
  Result := DefaultInterface.WriterGroupId;
end;

procedure TUAWriterGroupDescriptor.Set_WriterGroupId(pRetVal: Integer);
begin
  DefaultInterface.WriterGroupId := pRetVal;
end;

function TUAWriterGroupDescriptor.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAWriterGroupDescriptor.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAWriterGroupDescriptor.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAWriterGroupDescriptor.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUAWriterGroupDescriptor.IsStrictlyPhysical(const TransportProfileUriString: WideString; 
                                                     assumeTopicTree: WordBool): WordBool;
begin
  Result := DefaultInterface.IsStrictlyPhysical(TransportProfileUriString, assumeTopicTree);
end;

procedure TUAWriterGroupDescriptor.Physicalize(const TransportProfileUriString: WideString; 
                                               assumeTopicTree: WordBool; force: WordBool);
begin
  DefaultInterface.Physicalize(TransportProfileUriString, assumeTopicTree, force);
end;

function TUAWriterGroupDescriptor.RequiresResolution(const TransportProfileUriString: WideString; 
                                                     assumeTopicTree: WordBool): WordBool;
begin
  Result := DefaultInterface.RequiresResolution(TransportProfileUriString, assumeTopicTree);
end;

procedure TUAWriterGroupDescriptor.Logicalize;
begin
  DefaultInterface.Logicalize;
end;

class function CoUAOptimizerPluginParameters.Create: _UAOptimizerPluginParameters;
begin
  Result := CreateComObject(CLASS_UAOptimizerPluginParameters) as _UAOptimizerPluginParameters;
end;

class function CoUAOptimizerPluginParameters.CreateRemote(const MachineName: string): _UAOptimizerPluginParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAOptimizerPluginParameters) as _UAOptimizerPluginParameters;
end;

procedure TUAOptimizerPluginParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{8C6F95B5-0430-409A-885E-C2885F597C93}';
    IntfIID:   '{C7CD4419-5C6D-46F6-9A9E-200C24B6B142}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAOptimizerPluginParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAOptimizerPluginParameters;
  end;
end;

procedure TUAOptimizerPluginParameters.ConnectTo(svrIntf: _UAOptimizerPluginParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAOptimizerPluginParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAOptimizerPluginParameters.GetDefaultInterface: _UAOptimizerPluginParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAOptimizerPluginParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAOptimizerPluginParameters.Destroy;
begin
  inherited Destroy;
end;

function TUAOptimizerPluginParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAOptimizerPluginParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAOptimizerPluginParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUAOptimizerPluginParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUAOptimizerPluginParameters.Get_EnableRequestMerging: WordBool;
begin
  Result := DefaultInterface.EnableRequestMerging;
end;

procedure TUAOptimizerPluginParameters.Set_EnableRequestMerging(pRetVal: WordBool);
begin
  DefaultInterface.EnableRequestMerging := pRetVal;
end;

function TUAOptimizerPluginParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAOptimizerPluginParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAOptimizerPluginParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAOptimizerPluginParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUAClientServerTables.Create: _UAServerTables;
begin
  Result := CreateComObject(CLASS_UAClientServerTables) as _UAServerTables;
end;

class function CoUAClientServerTables.CreateRemote(const MachineName: string): _UAServerTables;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAClientServerTables) as _UAServerTables;
end;

procedure TUAClientServerTables.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{EEE6F64F-325C-4EB4-ADF3-B492370941D5}';
    IntfIID:   '{EBC0E09E-8B2D-4629-99D2-2FAA6F937E96}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAClientServerTables.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAServerTables;
  end;
end;

procedure TUAClientServerTables.ConnectTo(svrIntf: _UAServerTables);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAClientServerTables.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAClientServerTables.GetDefaultInterface: _UAServerTables;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAClientServerTables.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAClientServerTables.Destroy;
begin
  inherited Destroy;
end;

function TUAClientServerTables.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAClientServerTables.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAClientServerTables.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAClientServerTables.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAClientServerTables.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAClientServerTables.GetNamespaceTable(endpointDescriptor: OleVariant): _ValueResult;
begin
  Result := DefaultInterface.GetNamespaceTable(endpointDescriptor);
end;

class function CoEasyUAClientComplexData.Create: _EasyUAClientComplexData;
begin
  Result := CreateComObject(CLASS_EasyUAClientComplexData) as _EasyUAClientComplexData;
end;

class function CoEasyUAClientComplexData.CreateRemote(const MachineName: string): _EasyUAClientComplexData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EasyUAClientComplexData) as _EasyUAClientComplexData;
end;

procedure TEasyUAClientComplexData.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{0A7CFDCD-1168-4F28-BD88-48A270FDC4DD}';
    IntfIID:   '{9BDDA562-192C-4394-ACF2-E2FE6B168DDB}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TEasyUAClientComplexData.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _EasyUAClientComplexData;
  end;
end;

procedure TEasyUAClientComplexData.ConnectTo(svrIntf: _EasyUAClientComplexData);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TEasyUAClientComplexData.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TEasyUAClientComplexData.GetDefaultInterface: _EasyUAClientComplexData;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TEasyUAClientComplexData.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TEasyUAClientComplexData.Destroy;
begin
  inherited Destroy;
end;

function TEasyUAClientComplexData.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TEasyUAClientComplexData.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TEasyUAClientComplexData.Get_DataTypeDefinitionProvider: _UADataTypeDefinitionProvider;
begin
  Result := DefaultInterface.DataTypeDefinitionProvider;
end;

function TEasyUAClientComplexData.Get_DataTypeDictionaryProvider: _UADataTypeDictionaryProvider;
begin
  Result := DefaultInterface.DataTypeDictionaryProvider;
end;

function TEasyUAClientComplexData.Get_DataTypeModelProvider: _UADataTypeModelProvider;
begin
  Result := DefaultInterface.DataTypeModelProvider;
end;

function TEasyUAClientComplexData.Get_ServerTables: _UAServerTables;
begin
  Result := DefaultInterface.ServerTables;
end;

function TEasyUAClientComplexData.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TEasyUAClientComplexData.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TEasyUAClientComplexData.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TEasyUAClientComplexData.FindDataTypeEncodingId(encodingNodeElementCollection: OleVariant; 
                                                         extensionObjectType: UAExtensionObjectType): _ValueResult;
begin
  Result := DefaultInterface.FindDataTypeEncodingId(encodingNodeElementCollection, 
                                                    extensionObjectType);
end;

function TEasyUAClientComplexData.FindDataTypeSystem(encodingName: OleVariant): _UADataTypeSystem;
begin
  Result := DefaultInterface.FindDataTypeSystem(encodingName);
end;

function TEasyUAClientComplexData.ResolveDataType(DataTypeId: OleVariant; encodingName: OleVariant): _ValueResult;
begin
  Result := DefaultInterface.ResolveDataType(DataTypeId, encodingName);
end;

function TEasyUAClientComplexData.ResolveDataTypes(dataTypeIdList: OleVariant; 
                                                   encodingName: OleVariant): PSafeArray;
begin
  Result := DefaultInterface.ResolveDataTypes(dataTypeIdList, encodingName);
end;

class function CoUAComplexDataSubscriberPluginParameters.Create: _UAComplexDataSubscriberPluginParameters;
begin
  Result := CreateComObject(CLASS_UAComplexDataSubscriberPluginParameters) as _UAComplexDataSubscriberPluginParameters;
end;

class function CoUAComplexDataSubscriberPluginParameters.CreateRemote(const MachineName: string): _UAComplexDataSubscriberPluginParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAComplexDataSubscriberPluginParameters) as _UAComplexDataSubscriberPluginParameters;
end;

procedure TUAComplexDataSubscriberPluginParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{D7927DA5-C6B1-454B-84A6-65DBA736B18B}';
    IntfIID:   '{6CFF89F1-3517-4259-8EFE-73F2FFA41AC4}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAComplexDataSubscriberPluginParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAComplexDataSubscriberPluginParameters;
  end;
end;

procedure TUAComplexDataSubscriberPluginParameters.ConnectTo(svrIntf: _UAComplexDataSubscriberPluginParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAComplexDataSubscriberPluginParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAComplexDataSubscriberPluginParameters.GetDefaultInterface: _UAComplexDataSubscriberPluginParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAComplexDataSubscriberPluginParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAComplexDataSubscriberPluginParameters.Destroy;
begin
  inherited Destroy;
end;

function TUAComplexDataSubscriberPluginParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAComplexDataSubscriberPluginParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAComplexDataSubscriberPluginParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUAComplexDataSubscriberPluginParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUAComplexDataSubscriberPluginParameters.Get_TryResolveMissingDataTypeEncodingIds: WordBool;
begin
  Result := DefaultInterface.TryResolveMissingDataTypeEncodingIds;
end;

procedure TUAComplexDataSubscriberPluginParameters.Set_TryResolveMissingDataTypeEncodingIds(pRetVal: WordBool);
begin
  DefaultInterface.TryResolveMissingDataTypeEncodingIds := pRetVal;
end;

function TUAComplexDataSubscriberPluginParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAComplexDataSubscriberPluginParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAComplexDataSubscriberPluginParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAComplexDataSubscriberPluginParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUAIndexRangeListFormatException.Create: _UAIndexRangeListFormatException;
begin
  Result := CreateComObject(CLASS_UAIndexRangeListFormatException) as _UAIndexRangeListFormatException;
end;

class function CoUAIndexRangeListFormatException.CreateRemote(const MachineName: string): _UAIndexRangeListFormatException;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAIndexRangeListFormatException) as _UAIndexRangeListFormatException;
end;

procedure TUAIndexRangeListFormatException.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{4013FA23-29D0-41C3-A3D3-05791B7B2D18}';
    IntfIID:   '{D801DA24-F1EC-467C-A285-BB550B14595A}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAIndexRangeListFormatException.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAIndexRangeListFormatException;
  end;
end;

procedure TUAIndexRangeListFormatException.ConnectTo(svrIntf: _UAIndexRangeListFormatException);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAIndexRangeListFormatException.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAIndexRangeListFormatException.GetDefaultInterface: _UAIndexRangeListFormatException;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAIndexRangeListFormatException.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAIndexRangeListFormatException.Destroy;
begin
  inherited Destroy;
end;

function TUAIndexRangeListFormatException.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAIndexRangeListFormatException.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAIndexRangeListFormatException.Get_Message: WideString;
begin
  Result := DefaultInterface.Message;
end;

function TUAIndexRangeListFormatException.Get_StackTrace: WideString;
begin
  Result := DefaultInterface.StackTrace;
end;

function TUAIndexRangeListFormatException.Get_HelpLink: WideString;
begin
  Result := DefaultInterface.HelpLink;
end;

procedure TUAIndexRangeListFormatException.Set_HelpLink(const pRetVal: WideString);
begin
  DefaultInterface.HelpLink := pRetVal;
end;

function TUAIndexRangeListFormatException.Get_Source: WideString;
begin
  Result := DefaultInterface.Source;
end;

procedure TUAIndexRangeListFormatException.Set_Source(const pRetVal: WideString);
begin
  DefaultInterface.Source := pRetVal;
end;

function TUAIndexRangeListFormatException.Get_InnerException: _Exception;
begin
  Result := DefaultInterface.InnerException;
end;

function TUAIndexRangeListFormatException.Get_TargetSite: _MethodBase;
begin
  Result := DefaultInterface.TargetSite;
end;

function TUAIndexRangeListFormatException.Get_Data: _Dictionary;
begin
  Result := DefaultInterface.Data;
end;

function TUAIndexRangeListFormatException.Get_HResult: Integer;
begin
  Result := DefaultInterface.HResult;
end;

function TUAIndexRangeListFormatException.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAIndexRangeListFormatException.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAIndexRangeListFormatException.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAIndexRangeListFormatException.GetBaseException: _Exception;
begin
  Result := DefaultInterface.GetBaseException;
end;

procedure TUAIndexRangeListFormatException.GetObjectData(const info: _SerializationInfo; 
                                                         context: StreamingContext);
begin
  DefaultInterface.GetObjectData(info, context);
end;

class function CoUAIndexRangeListParser.Create: _UAIndexRangeListParser;
begin
  Result := CreateComObject(CLASS_UAIndexRangeListParser) as _UAIndexRangeListParser;
end;

class function CoUAIndexRangeListParser.CreateRemote(const MachineName: string): _UAIndexRangeListParser;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAIndexRangeListParser) as _UAIndexRangeListParser;
end;

procedure TUAIndexRangeListParser.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{0AF3C950-EB6C-40BD-AE70-03A5BCF35264}';
    IntfIID:   '{2D049F8D-01D9-4D55-8311-1F9E4F5389CA}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAIndexRangeListParser.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAIndexRangeListParser;
  end;
end;

procedure TUAIndexRangeListParser.ConnectTo(svrIntf: _UAIndexRangeListParser);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAIndexRangeListParser.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAIndexRangeListParser.GetDefaultInterface: _UAIndexRangeListParser;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAIndexRangeListParser.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAIndexRangeListParser.Destroy;
begin
  inherited Destroy;
end;

function TUAIndexRangeListParser.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAIndexRangeListParser.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAIndexRangeListParser.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAIndexRangeListParser.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAIndexRangeListParser.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAIndexRangeListParser.Parse(const formattedText: WideString): _UAIndexRangeList;
begin
  Result := DefaultInterface.Parse(formattedText);
end;

function TUAIndexRangeListParser.TryParse(const s: WideString; out IndexRangeList: OleVariant): _StringParsingError;
begin
  Result := DefaultInterface.TryParse(s, IndexRangeList);
end;

class function CoUANodeArguments.Create: _UANodeArguments;
begin
  Result := CreateComObject(CLASS_UANodeArguments) as _UANodeArguments;
end;

class function CoUANodeArguments.CreateRemote(const MachineName: string): _UANodeArguments;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UANodeArguments) as _UANodeArguments;
end;

procedure TUANodeArguments.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{4770A502-3F61-4EB1-8C28-312835DA08B0}';
    IntfIID:   '{967B94A7-9081-4F7F-A66F-66C4C52BB55F}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUANodeArguments.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UANodeArguments;
  end;
end;

procedure TUANodeArguments.ConnectTo(svrIntf: _UANodeArguments);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUANodeArguments.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUANodeArguments.GetDefaultInterface: _UANodeArguments;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUANodeArguments.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUANodeArguments.Destroy;
begin
  inherited Destroy;
end;

function TUANodeArguments.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUANodeArguments.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUANodeArguments.Get_State: OleVariant;
begin
  Result := DefaultInterface.State;
end;

procedure TUANodeArguments._Set_State(pRetVal: OleVariant);
begin
  DefaultInterface.State := pRetVal;
end;

function TUANodeArguments.Get_endpointDescriptor: _UAEndpointDescriptor;
begin
  Result := DefaultInterface.endpointDescriptor;
end;

procedure TUANodeArguments._Set_endpointDescriptor(const pRetVal: _UAEndpointDescriptor);
begin
  DefaultInterface.endpointDescriptor := pRetVal;
end;

function TUANodeArguments.Get_NodeDescriptor: _UANodeDescriptor;
begin
  Result := DefaultInterface.NodeDescriptor;
end;

procedure TUANodeArguments._Set_NodeDescriptor(const pRetVal: _UANodeDescriptor);
begin
  DefaultInterface.NodeDescriptor := pRetVal;
end;

function TUANodeArguments.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUANodeArguments.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUANodeArguments.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUANodeArguments.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUANodeArguments.MemberwiseClone: _OperationArguments;
begin
  Result := DefaultInterface.MemberwiseClone;
end;

procedure TUANodeArguments.SetState(State: OleVariant);
begin
  DefaultInterface.SetState(State);
end;

class function CoEasyUADataChangeNotificationEventArgs.Create: _EasyUADataChangeNotificationEventArgs;
begin
  Result := CreateComObject(CLASS_EasyUADataChangeNotificationEventArgs) as _EasyUADataChangeNotificationEventArgs;
end;

class function CoEasyUADataChangeNotificationEventArgs.CreateRemote(const MachineName: string): _EasyUADataChangeNotificationEventArgs;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EasyUADataChangeNotificationEventArgs) as _EasyUADataChangeNotificationEventArgs;
end;

procedure TEasyUADataChangeNotificationEventArgs.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{5C9CCACB-A2CF-45FE-BD50-D7F9620868A1}';
    IntfIID:   '{D9986E34-5210-4D35-B972-3AB17C807361}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TEasyUADataChangeNotificationEventArgs.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _EasyUADataChangeNotificationEventArgs;
  end;
end;

procedure TEasyUADataChangeNotificationEventArgs.ConnectTo(svrIntf: _EasyUADataChangeNotificationEventArgs);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TEasyUADataChangeNotificationEventArgs.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TEasyUADataChangeNotificationEventArgs.GetDefaultInterface: _EasyUADataChangeNotificationEventArgs;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TEasyUADataChangeNotificationEventArgs.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TEasyUADataChangeNotificationEventArgs.Destroy;
begin
  inherited Destroy;
end;

function TEasyUADataChangeNotificationEventArgs.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TEasyUADataChangeNotificationEventArgs.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TEasyUADataChangeNotificationEventArgs.Get_Diagnostics: _ExceptionCollection;
begin
  Result := DefaultInterface.Diagnostics;
end;

procedure TEasyUADataChangeNotificationEventArgs._Set_Diagnostics(const pRetVal: _ExceptionCollection);
begin
  DefaultInterface.Diagnostics := pRetVal;
end;

function TEasyUADataChangeNotificationEventArgs.Get_DiagnosticsCount: Integer;
begin
  Result := DefaultInterface.DiagnosticsCount;
end;

function TEasyUADataChangeNotificationEventArgs.Get_DiagnosticsSummary: WideString;
begin
  Result := DefaultInterface.DiagnosticsSummary;
end;

function TEasyUADataChangeNotificationEventArgs.Get_ErrorId: WideString;
begin
  Result := DefaultInterface.ErrorId;
end;

procedure TEasyUADataChangeNotificationEventArgs.Set_ErrorId(const pRetVal: WideString);
begin
  DefaultInterface.ErrorId := pRetVal;
end;

function TEasyUADataChangeNotificationEventArgs.Get_ErrorMessage: WideString;
begin
  Result := DefaultInterface.ErrorMessage;
end;

procedure TEasyUADataChangeNotificationEventArgs.Set_ErrorMessage(const pRetVal: WideString);
begin
  DefaultInterface.ErrorMessage := pRetVal;
end;

function TEasyUADataChangeNotificationEventArgs.Get_ErrorMessageBrief: WideString;
begin
  Result := DefaultInterface.ErrorMessageBrief;
end;

function TEasyUADataChangeNotificationEventArgs.Get_Exception: _Exception;
begin
  Result := DefaultInterface.Exception;
end;

procedure TEasyUADataChangeNotificationEventArgs._Set_Exception(const pRetVal: _Exception);
begin
  DefaultInterface.Exception := pRetVal;
end;

function TEasyUADataChangeNotificationEventArgs.Get_NormalizedDiagnostics: _NormalizedExceptionCollection;
begin
  Result := DefaultInterface.NormalizedDiagnostics;
end;

function TEasyUADataChangeNotificationEventArgs.Get_NormalizedException: _NormalizedException;
begin
  Result := DefaultInterface.NormalizedException;
end;

function TEasyUADataChangeNotificationEventArgs.Get_Succeeded: WordBool;
begin
  Result := DefaultInterface.Succeeded;
end;

function TEasyUADataChangeNotificationEventArgs.Get_Arguments: _EasyUAMonitoredItemArguments;
begin
  Result := DefaultInterface.Arguments;
end;

procedure TEasyUADataChangeNotificationEventArgs._Set_Arguments(const pRetVal: _EasyUAMonitoredItemArguments);
begin
  DefaultInterface.Arguments := pRetVal;
end;

function TEasyUADataChangeNotificationEventArgs.Get_AttributeData: _UAAttributeData;
begin
  Result := DefaultInterface.AttributeData;
end;

procedure TEasyUADataChangeNotificationEventArgs._Set_AttributeData(const pRetVal: _UAAttributeData);
begin
  DefaultInterface.AttributeData := pRetVal;
end;

function TEasyUADataChangeNotificationEventArgs.Get_StatusInfo: StatusInfo;
begin
  Result := DefaultInterface.StatusInfo;
end;

function TEasyUADataChangeNotificationEventArgs.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TEasyUADataChangeNotificationEventArgs.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TEasyUADataChangeNotificationEventArgs.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TEasyUADataChangeNotificationEventArgs.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TEasyUADataChangeNotificationEventArgs.MemberwiseClone: _OperationEventArgs;
begin
  Result := DefaultInterface.MemberwiseClone;
end;

function TEasyUADataChangeNotificationEventArgs.ToLongString: WideString;
begin
  Result := DefaultInterface.ToLongString;
end;

class function CoEasyUAEventNotificationEventArgs.Create: _EasyUAEventNotificationEventArgs;
begin
  Result := CreateComObject(CLASS_EasyUAEventNotificationEventArgs) as _EasyUAEventNotificationEventArgs;
end;

class function CoEasyUAEventNotificationEventArgs.CreateRemote(const MachineName: string): _EasyUAEventNotificationEventArgs;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EasyUAEventNotificationEventArgs) as _EasyUAEventNotificationEventArgs;
end;

procedure TEasyUAEventNotificationEventArgs.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{1E7ECB5E-16B7-4829-BAD4-7086E3173C75}';
    IntfIID:   '{7A12AC93-3C60-496F-959A-DD1732AB9740}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TEasyUAEventNotificationEventArgs.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _EasyUAEventNotificationEventArgs;
  end;
end;

procedure TEasyUAEventNotificationEventArgs.ConnectTo(svrIntf: _EasyUAEventNotificationEventArgs);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TEasyUAEventNotificationEventArgs.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TEasyUAEventNotificationEventArgs.GetDefaultInterface: _EasyUAEventNotificationEventArgs;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TEasyUAEventNotificationEventArgs.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TEasyUAEventNotificationEventArgs.Destroy;
begin
  inherited Destroy;
end;

function TEasyUAEventNotificationEventArgs.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TEasyUAEventNotificationEventArgs.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TEasyUAEventNotificationEventArgs.Get_Diagnostics: _ExceptionCollection;
begin
  Result := DefaultInterface.Diagnostics;
end;

procedure TEasyUAEventNotificationEventArgs._Set_Diagnostics(const pRetVal: _ExceptionCollection);
begin
  DefaultInterface.Diagnostics := pRetVal;
end;

function TEasyUAEventNotificationEventArgs.Get_DiagnosticsCount: Integer;
begin
  Result := DefaultInterface.DiagnosticsCount;
end;

function TEasyUAEventNotificationEventArgs.Get_DiagnosticsSummary: WideString;
begin
  Result := DefaultInterface.DiagnosticsSummary;
end;

function TEasyUAEventNotificationEventArgs.Get_ErrorId: WideString;
begin
  Result := DefaultInterface.ErrorId;
end;

procedure TEasyUAEventNotificationEventArgs.Set_ErrorId(const pRetVal: WideString);
begin
  DefaultInterface.ErrorId := pRetVal;
end;

function TEasyUAEventNotificationEventArgs.Get_ErrorMessage: WideString;
begin
  Result := DefaultInterface.ErrorMessage;
end;

procedure TEasyUAEventNotificationEventArgs.Set_ErrorMessage(const pRetVal: WideString);
begin
  DefaultInterface.ErrorMessage := pRetVal;
end;

function TEasyUAEventNotificationEventArgs.Get_ErrorMessageBrief: WideString;
begin
  Result := DefaultInterface.ErrorMessageBrief;
end;

function TEasyUAEventNotificationEventArgs.Get_Exception: _Exception;
begin
  Result := DefaultInterface.Exception;
end;

procedure TEasyUAEventNotificationEventArgs._Set_Exception(const pRetVal: _Exception);
begin
  DefaultInterface.Exception := pRetVal;
end;

function TEasyUAEventNotificationEventArgs.Get_NormalizedDiagnostics: _NormalizedExceptionCollection;
begin
  Result := DefaultInterface.NormalizedDiagnostics;
end;

function TEasyUAEventNotificationEventArgs.Get_NormalizedException: _NormalizedException;
begin
  Result := DefaultInterface.NormalizedException;
end;

function TEasyUAEventNotificationEventArgs.Get_Succeeded: WordBool;
begin
  Result := DefaultInterface.Succeeded;
end;

function TEasyUAEventNotificationEventArgs.Get_Arguments: _EasyUAMonitoredItemArguments;
begin
  Result := DefaultInterface.Arguments;
end;

procedure TEasyUAEventNotificationEventArgs._Set_Arguments(const pRetVal: _EasyUAMonitoredItemArguments);
begin
  DefaultInterface.Arguments := pRetVal;
end;

function TEasyUAEventNotificationEventArgs.Get_EventData: _UAEventData;
begin
  Result := DefaultInterface.EventData;
end;

procedure TEasyUAEventNotificationEventArgs._Set_EventData(const pRetVal: _UAEventData);
begin
  DefaultInterface.EventData := pRetVal;
end;

function TEasyUAEventNotificationEventArgs.Get_Refresh: WordBool;
begin
  Result := DefaultInterface.Refresh;
end;

procedure TEasyUAEventNotificationEventArgs.Set_Refresh(pRetVal: WordBool);
begin
  DefaultInterface.Refresh := pRetVal;
end;

function TEasyUAEventNotificationEventArgs.Get_RefreshComplete: WordBool;
begin
  Result := DefaultInterface.RefreshComplete;
end;

procedure TEasyUAEventNotificationEventArgs.Set_RefreshComplete(pRetVal: WordBool);
begin
  DefaultInterface.RefreshComplete := pRetVal;
end;

function TEasyUAEventNotificationEventArgs.Get_RefreshInitiated: WordBool;
begin
  Result := DefaultInterface.RefreshInitiated;
end;

procedure TEasyUAEventNotificationEventArgs.Set_RefreshInitiated(pRetVal: WordBool);
begin
  DefaultInterface.RefreshInitiated := pRetVal;
end;

function TEasyUAEventNotificationEventArgs.Get_StatusInfo: StatusInfo;
begin
  Result := DefaultInterface.StatusInfo;
end;

function TEasyUAEventNotificationEventArgs.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TEasyUAEventNotificationEventArgs.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TEasyUAEventNotificationEventArgs.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TEasyUAEventNotificationEventArgs.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TEasyUAEventNotificationEventArgs.MemberwiseClone: _OperationEventArgs;
begin
  Result := DefaultInterface.MemberwiseClone;
end;

function TEasyUAEventNotificationEventArgs.ToLongString: WideString;
begin
  Result := DefaultInterface.ToLongString;
end;

class function CoEasyUAMonitoredItemArgumentsDictionary.Create: _EasyUAMonitoredItemArgumentsDictionary;
begin
  Result := CreateComObject(CLASS_EasyUAMonitoredItemArgumentsDictionary) as _EasyUAMonitoredItemArgumentsDictionary;
end;

class function CoEasyUAMonitoredItemArgumentsDictionary.CreateRemote(const MachineName: string): _EasyUAMonitoredItemArgumentsDictionary;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EasyUAMonitoredItemArgumentsDictionary) as _EasyUAMonitoredItemArgumentsDictionary;
end;

procedure TEasyUAMonitoredItemArgumentsDictionary.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{06DB93B8-53BA-4921-8052-E7AE67154806}';
    IntfIID:   '{C5A59EF9-A3FD-4153-9BA0-F8C73875FE3D}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TEasyUAMonitoredItemArgumentsDictionary.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _EasyUAMonitoredItemArgumentsDictionary;
  end;
end;

procedure TEasyUAMonitoredItemArgumentsDictionary.ConnectTo(svrIntf: _EasyUAMonitoredItemArgumentsDictionary);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TEasyUAMonitoredItemArgumentsDictionary.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TEasyUAMonitoredItemArgumentsDictionary.GetDefaultInterface: _EasyUAMonitoredItemArgumentsDictionary;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TEasyUAMonitoredItemArgumentsDictionary.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TEasyUAMonitoredItemArgumentsDictionary.Destroy;
begin
  inherited Destroy;
end;

function TEasyUAMonitoredItemArgumentsDictionary.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TEasyUAMonitoredItemArgumentsDictionary.Get_Item(key: Integer): _EasyUAMonitoredItemArguments;
begin
  Result := DefaultInterface.Item[key];
end;

procedure TEasyUAMonitoredItemArgumentsDictionary._Set_Item(key: Integer; 
                                                            const pRetVal: _EasyUAMonitoredItemArguments);
begin
  DefaultInterface.Item[key] := pRetVal;
end;

function TEasyUAMonitoredItemArgumentsDictionary.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

function TEasyUAMonitoredItemArgumentsDictionary.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TEasyUAMonitoredItemArgumentsDictionary.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TEasyUAMonitoredItemArgumentsDictionary.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TEasyUAMonitoredItemArgumentsDictionary.GetEnumerator: IEnumVARIANT;
begin
  Result := DefaultInterface.GetEnumerator;
end;

procedure TEasyUAMonitoredItemArgumentsDictionary.Add(key: Integer; Item: OleVariant);
begin
  DefaultInterface.Add(key, Item);
end;

procedure TEasyUAMonitoredItemArgumentsDictionary.Clear;
begin
  DefaultInterface.Clear;
end;

function TEasyUAMonitoredItemArgumentsDictionary.ContainsKey(key: Integer): WordBool;
begin
  Result := DefaultInterface.ContainsKey(key);
end;

function TEasyUAMonitoredItemArgumentsDictionary.Remove(key: Integer): WordBool;
begin
  Result := DefaultInterface.Remove(key);
end;

function TEasyUAMonitoredItemArgumentsDictionary.TryGetValue(key: Integer; out value: OleVariant): WordBool;
begin
  Result := DefaultInterface.TryGetValue(key, value);
end;

function TEasyUAMonitoredItemArgumentsDictionary.ContainsValue(value: OleVariant): WordBool;
begin
  Result := DefaultInterface.ContainsValue(value);
end;

class function CoEasyUAServerConditionChangedEventArgs.Create: _EasyUAServerConditionChangedEventArgs;
begin
  Result := CreateComObject(CLASS_EasyUAServerConditionChangedEventArgs) as _EasyUAServerConditionChangedEventArgs;
end;

class function CoEasyUAServerConditionChangedEventArgs.CreateRemote(const MachineName: string): _EasyUAServerConditionChangedEventArgs;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EasyUAServerConditionChangedEventArgs) as _EasyUAServerConditionChangedEventArgs;
end;

procedure TEasyUAServerConditionChangedEventArgs.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{89C8C59F-322B-45D1-8188-12B94B8EBE4C}';
    IntfIID:   '{EB380053-871B-4F51-932E-CB1E25C5154C}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TEasyUAServerConditionChangedEventArgs.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _EasyUAServerConditionChangedEventArgs;
  end;
end;

procedure TEasyUAServerConditionChangedEventArgs.ConnectTo(svrIntf: _EasyUAServerConditionChangedEventArgs);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TEasyUAServerConditionChangedEventArgs.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TEasyUAServerConditionChangedEventArgs.GetDefaultInterface: _EasyUAServerConditionChangedEventArgs;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TEasyUAServerConditionChangedEventArgs.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TEasyUAServerConditionChangedEventArgs.Destroy;
begin
  inherited Destroy;
end;

function TEasyUAServerConditionChangedEventArgs.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TEasyUAServerConditionChangedEventArgs.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TEasyUAServerConditionChangedEventArgs.Get_Diagnostics: _ExceptionCollection;
begin
  Result := DefaultInterface.Diagnostics;
end;

procedure TEasyUAServerConditionChangedEventArgs._Set_Diagnostics(const pRetVal: _ExceptionCollection);
begin
  DefaultInterface.Diagnostics := pRetVal;
end;

function TEasyUAServerConditionChangedEventArgs.Get_DiagnosticsCount: Integer;
begin
  Result := DefaultInterface.DiagnosticsCount;
end;

function TEasyUAServerConditionChangedEventArgs.Get_DiagnosticsSummary: WideString;
begin
  Result := DefaultInterface.DiagnosticsSummary;
end;

function TEasyUAServerConditionChangedEventArgs.Get_ErrorId: WideString;
begin
  Result := DefaultInterface.ErrorId;
end;

procedure TEasyUAServerConditionChangedEventArgs.Set_ErrorId(const pRetVal: WideString);
begin
  DefaultInterface.ErrorId := pRetVal;
end;

function TEasyUAServerConditionChangedEventArgs.Get_ErrorMessage: WideString;
begin
  Result := DefaultInterface.ErrorMessage;
end;

procedure TEasyUAServerConditionChangedEventArgs.Set_ErrorMessage(const pRetVal: WideString);
begin
  DefaultInterface.ErrorMessage := pRetVal;
end;

function TEasyUAServerConditionChangedEventArgs.Get_ErrorMessageBrief: WideString;
begin
  Result := DefaultInterface.ErrorMessageBrief;
end;

function TEasyUAServerConditionChangedEventArgs.Get_Exception: _Exception;
begin
  Result := DefaultInterface.Exception;
end;

procedure TEasyUAServerConditionChangedEventArgs._Set_Exception(const pRetVal: _Exception);
begin
  DefaultInterface.Exception := pRetVal;
end;

function TEasyUAServerConditionChangedEventArgs.Get_NormalizedDiagnostics: _NormalizedExceptionCollection;
begin
  Result := DefaultInterface.NormalizedDiagnostics;
end;

function TEasyUAServerConditionChangedEventArgs.Get_NormalizedException: _NormalizedException;
begin
  Result := DefaultInterface.NormalizedException;
end;

function TEasyUAServerConditionChangedEventArgs.Get_Succeeded: WordBool;
begin
  Result := DefaultInterface.Succeeded;
end;

function TEasyUAServerConditionChangedEventArgs.Get_ConnectionState: ConnectionState;
begin
  Result := DefaultInterface.ConnectionState;
end;

procedure TEasyUAServerConditionChangedEventArgs.Set_ConnectionState(pRetVal: ConnectionState);
begin
  DefaultInterface.ConnectionState := pRetVal;
end;

function TEasyUAServerConditionChangedEventArgs.Get_IsConnected: WordBool;
begin
  Result := DefaultInterface.IsConnected;
end;

function TEasyUAServerConditionChangedEventArgs.Get_RetrialDelay: Integer;
begin
  Result := DefaultInterface.RetrialDelay;
end;

procedure TEasyUAServerConditionChangedEventArgs.Set_RetrialDelay(pRetVal: Integer);
begin
  DefaultInterface.RetrialDelay := pRetVal;
end;

function TEasyUAServerConditionChangedEventArgs.Get_Statistics: _ConnectedConditionStatistics;
begin
  Result := DefaultInterface.Statistics;
end;

procedure TEasyUAServerConditionChangedEventArgs._Set_Statistics(const pRetVal: _ConnectedConditionStatistics);
begin
  DefaultInterface.Statistics := pRetVal;
end;

function TEasyUAServerConditionChangedEventArgs.Get_StatusInfo: StatusInfo;
begin
  Result := DefaultInterface.StatusInfo;
end;

function TEasyUAServerConditionChangedEventArgs.Get_endpointDescriptor: _UAEndpointDescriptor;
begin
  Result := DefaultInterface.endpointDescriptor;
end;

procedure TEasyUAServerConditionChangedEventArgs._Set_endpointDescriptor(const pRetVal: _UAEndpointDescriptor);
begin
  DefaultInterface.endpointDescriptor := pRetVal;
end;

function TEasyUAServerConditionChangedEventArgs.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TEasyUAServerConditionChangedEventArgs.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TEasyUAServerConditionChangedEventArgs.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TEasyUAServerConditionChangedEventArgs.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TEasyUAServerConditionChangedEventArgs.MemberwiseClone: _OperationEventArgs;
begin
  Result := DefaultInterface.MemberwiseClone;
end;

function TEasyUAServerConditionChangedEventArgs.ToLongString: WideString;
begin
  Result := DefaultInterface.ToLongString;
end;

class function CoEasyUASubscriptionChangeArguments.Create: _EasyUASubscriptionChangeArguments;
begin
  Result := CreateComObject(CLASS_EasyUASubscriptionChangeArguments) as _EasyUASubscriptionChangeArguments;
end;

class function CoEasyUASubscriptionChangeArguments.CreateRemote(const MachineName: string): _EasyUASubscriptionChangeArguments;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EasyUASubscriptionChangeArguments) as _EasyUASubscriptionChangeArguments;
end;

procedure TEasyUASubscriptionChangeArguments.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{91D1A440-91E9-4776-8902-E36547A07083}';
    IntfIID:   '{1B51E462-0760-4A19-8BDA-21AB5A5BA428}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TEasyUASubscriptionChangeArguments.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _EasyUASubscriptionChangeArguments;
  end;
end;

procedure TEasyUASubscriptionChangeArguments.ConnectTo(svrIntf: _EasyUASubscriptionChangeArguments);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TEasyUASubscriptionChangeArguments.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TEasyUASubscriptionChangeArguments.GetDefaultInterface: _EasyUASubscriptionChangeArguments;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TEasyUASubscriptionChangeArguments.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TEasyUASubscriptionChangeArguments.Destroy;
begin
  inherited Destroy;
end;

function TEasyUASubscriptionChangeArguments.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TEasyUASubscriptionChangeArguments.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TEasyUASubscriptionChangeArguments.Get_State: OleVariant;
begin
  Result := DefaultInterface.State;
end;

procedure TEasyUASubscriptionChangeArguments._Set_State(pRetVal: OleVariant);
begin
  DefaultInterface.State := pRetVal;
end;

function TEasyUASubscriptionChangeArguments.Get_Handle: Integer;
begin
  Result := DefaultInterface.Handle;
end;

procedure TEasyUASubscriptionChangeArguments.Set_Handle(pRetVal: Integer);
begin
  DefaultInterface.Handle := pRetVal;
end;

function TEasyUASubscriptionChangeArguments.Get_AutoConditionRefresh: WordBool;
begin
  Result := DefaultInterface.AutoConditionRefresh;
end;

procedure TEasyUASubscriptionChangeArguments.Set_AutoConditionRefresh(pRetVal: WordBool);
begin
  DefaultInterface.AutoConditionRefresh := pRetVal;
end;

function TEasyUASubscriptionChangeArguments.Get_MonitoringParameters: _UAMonitoringParameters;
begin
  Result := DefaultInterface.MonitoringParameters;
end;

procedure TEasyUASubscriptionChangeArguments._Set_MonitoringParameters(const pRetVal: _UAMonitoringParameters);
begin
  DefaultInterface.MonitoringParameters := pRetVal;
end;

function TEasyUASubscriptionChangeArguments.Get_SubscriptionParameters: _UASubscriptionParameters;
begin
  Result := DefaultInterface.SubscriptionParameters;
end;

procedure TEasyUASubscriptionChangeArguments._Set_SubscriptionParameters(const pRetVal: _UASubscriptionParameters);
begin
  DefaultInterface.SubscriptionParameters := pRetVal;
end;

function TEasyUASubscriptionChangeArguments.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TEasyUASubscriptionChangeArguments.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TEasyUASubscriptionChangeArguments.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TEasyUASubscriptionChangeArguments.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TEasyUASubscriptionChangeArguments.MemberwiseClone: _OperationArguments;
begin
  Result := DefaultInterface.MemberwiseClone;
end;

procedure TEasyUASubscriptionChangeArguments.SetState(State: OleVariant);
begin
  DefaultInterface.SetState(State);
end;

class function CoUAAttributeArguments.Create: _UAAttributeArguments;
begin
  Result := CreateComObject(CLASS_UAAttributeArguments) as _UAAttributeArguments;
end;

class function CoUAAttributeArguments.CreateRemote(const MachineName: string): _UAAttributeArguments;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAAttributeArguments) as _UAAttributeArguments;
end;

procedure TUAAttributeArguments.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{819A2FC9-7C79-4E24-983B-0542595C0E63}';
    IntfIID:   '{7FCFB434-2C79-46BE-8B17-265CFAE8632B}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAAttributeArguments.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAAttributeArguments;
  end;
end;

procedure TUAAttributeArguments.ConnectTo(svrIntf: _UAAttributeArguments);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAAttributeArguments.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAAttributeArguments.GetDefaultInterface: _UAAttributeArguments;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAAttributeArguments.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAAttributeArguments.Destroy;
begin
  inherited Destroy;
end;

function TUAAttributeArguments.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAAttributeArguments.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAAttributeArguments.Get_State: OleVariant;
begin
  Result := DefaultInterface.State;
end;

procedure TUAAttributeArguments._Set_State(pRetVal: OleVariant);
begin
  DefaultInterface.State := pRetVal;
end;

function TUAAttributeArguments.Get_endpointDescriptor: _UAEndpointDescriptor;
begin
  Result := DefaultInterface.endpointDescriptor;
end;

procedure TUAAttributeArguments._Set_endpointDescriptor(const pRetVal: _UAEndpointDescriptor);
begin
  DefaultInterface.endpointDescriptor := pRetVal;
end;

function TUAAttributeArguments.Get_NodeDescriptor: _UANodeDescriptor;
begin
  Result := DefaultInterface.NodeDescriptor;
end;

procedure TUAAttributeArguments._Set_NodeDescriptor(const pRetVal: _UANodeDescriptor);
begin
  DefaultInterface.NodeDescriptor := pRetVal;
end;

function TUAAttributeArguments.Get_AttributeId: UAAttributeId;
begin
  Result := DefaultInterface.AttributeId;
end;

procedure TUAAttributeArguments.Set_AttributeId(pRetVal: UAAttributeId);
begin
  DefaultInterface.AttributeId := pRetVal;
end;

function TUAAttributeArguments.Get_IndexRangeList: _UAIndexRangeList;
begin
  Result := DefaultInterface.IndexRangeList;
end;

procedure TUAAttributeArguments._Set_IndexRangeList(const pRetVal: _UAIndexRangeList);
begin
  DefaultInterface.IndexRangeList := pRetVal;
end;

function TUAAttributeArguments.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAAttributeArguments.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAAttributeArguments.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAAttributeArguments.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUAAttributeArguments.MemberwiseClone: _OperationArguments;
begin
  Result := DefaultInterface.MemberwiseClone;
end;

procedure TUAAttributeArguments.SetState(State: OleVariant);
begin
  DefaultInterface.SetState(State);
end;

class function CoUAAttributeDataResult.Create: _UAAttributeDataResult;
begin
  Result := CreateComObject(CLASS_UAAttributeDataResult) as _UAAttributeDataResult;
end;

class function CoUAAttributeDataResult.CreateRemote(const MachineName: string): _UAAttributeDataResult;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAAttributeDataResult) as _UAAttributeDataResult;
end;

procedure TUAAttributeDataResult.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{111C8C94-4928-4A45-8127-CC73667A2428}';
    IntfIID:   '{3CF81E46-6344-41F8-9DB2-59DB25E04959}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAAttributeDataResult.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAAttributeDataResult;
  end;
end;

procedure TUAAttributeDataResult.ConnectTo(svrIntf: _UAAttributeDataResult);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAAttributeDataResult.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAAttributeDataResult.GetDefaultInterface: _UAAttributeDataResult;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAAttributeDataResult.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAAttributeDataResult.Destroy;
begin
  inherited Destroy;
end;

function TUAAttributeDataResult.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAAttributeDataResult.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAAttributeDataResult.Get_ToString_2(const format: WideString; 
                                               const formatProvider: IFormatProvider): WideString;
begin
  Result := DefaultInterface.ToString_2[format, formatProvider];
end;

function TUAAttributeDataResult.Get_ToString_3(const format: WideString): WideString;
begin
  Result := DefaultInterface.ToString_3[format];
end;

function TUAAttributeDataResult.Get_Diagnostics: _ExceptionCollection;
begin
  Result := DefaultInterface.Diagnostics;
end;

procedure TUAAttributeDataResult._Set_Diagnostics(const pRetVal: _ExceptionCollection);
begin
  DefaultInterface.Diagnostics := pRetVal;
end;

function TUAAttributeDataResult.Get_DiagnosticsCount: Integer;
begin
  Result := DefaultInterface.DiagnosticsCount;
end;

function TUAAttributeDataResult.Get_DiagnosticsSummary: WideString;
begin
  Result := DefaultInterface.DiagnosticsSummary;
end;

function TUAAttributeDataResult.Get_ErrorId: WideString;
begin
  Result := DefaultInterface.ErrorId;
end;

procedure TUAAttributeDataResult.Set_ErrorId(const pRetVal: WideString);
begin
  DefaultInterface.ErrorId := pRetVal;
end;

function TUAAttributeDataResult.Get_ErrorMessage: WideString;
begin
  Result := DefaultInterface.ErrorMessage;
end;

procedure TUAAttributeDataResult.Set_ErrorMessage(const pRetVal: WideString);
begin
  DefaultInterface.ErrorMessage := pRetVal;
end;

function TUAAttributeDataResult.Get_ErrorMessageBrief: WideString;
begin
  Result := DefaultInterface.ErrorMessageBrief;
end;

function TUAAttributeDataResult.Get_Exception: _Exception;
begin
  Result := DefaultInterface.Exception;
end;

procedure TUAAttributeDataResult._Set_Exception(const pRetVal: _Exception);
begin
  DefaultInterface.Exception := pRetVal;
end;

function TUAAttributeDataResult.Get_NormalizedDiagnostics: _NormalizedExceptionCollection;
begin
  Result := DefaultInterface.NormalizedDiagnostics;
end;

function TUAAttributeDataResult.Get_NormalizedException: _NormalizedException;
begin
  Result := DefaultInterface.NormalizedException;
end;

function TUAAttributeDataResult.Get_State: OleVariant;
begin
  Result := DefaultInterface.State;
end;

procedure TUAAttributeDataResult._Set_State(pRetVal: OleVariant);
begin
  DefaultInterface.State := pRetVal;
end;

function TUAAttributeDataResult.Get_Succeeded: WordBool;
begin
  Result := DefaultInterface.Succeeded;
end;

function TUAAttributeDataResult.Get_AttributeData: _UAAttributeData;
begin
  Result := DefaultInterface.AttributeData;
end;

procedure TUAAttributeDataResult._Set_AttributeData(const pRetVal: _UAAttributeData);
begin
  DefaultInterface.AttributeData := pRetVal;
end;

function TUAAttributeDataResult.Get_StatusInfo: StatusInfo;
begin
  Result := DefaultInterface.StatusInfo;
end;

function TUAAttributeDataResult.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAAttributeDataResult.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAAttributeDataResult.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAAttributeDataResult.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUAAttributeDataResult.MemberwiseClone: _OperationResult;
begin
  Result := DefaultInterface.MemberwiseClone;
end;

procedure TUAAttributeDataResult.SetState(State: OleVariant);
begin
  DefaultInterface.SetState(State);
end;

procedure TUAAttributeDataResult.ThrowIfFailed;
begin
  DefaultInterface.ThrowIfFailed;
end;

class function CoUABrowseArguments.Create: _UABrowseArguments;
begin
  Result := CreateComObject(CLASS_UABrowseArguments) as _UABrowseArguments;
end;

class function CoUABrowseArguments.CreateRemote(const MachineName: string): _UABrowseArguments;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UABrowseArguments) as _UABrowseArguments;
end;

procedure TUABrowseArguments.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{99224489-664B-4EEF-85DD-04E750F1AE01}';
    IntfIID:   '{CF31BF5E-0323-40C7-B17A-5CC08AB3F5BB}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUABrowseArguments.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UABrowseArguments;
  end;
end;

procedure TUABrowseArguments.ConnectTo(svrIntf: _UABrowseArguments);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUABrowseArguments.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUABrowseArguments.GetDefaultInterface: _UABrowseArguments;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUABrowseArguments.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUABrowseArguments.Destroy;
begin
  inherited Destroy;
end;

function TUABrowseArguments.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUABrowseArguments.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUABrowseArguments.Get_State: OleVariant;
begin
  Result := DefaultInterface.State;
end;

procedure TUABrowseArguments._Set_State(pRetVal: OleVariant);
begin
  DefaultInterface.State := pRetVal;
end;

function TUABrowseArguments.Get_endpointDescriptor: _UAEndpointDescriptor;
begin
  Result := DefaultInterface.endpointDescriptor;
end;

procedure TUABrowseArguments._Set_endpointDescriptor(const pRetVal: _UAEndpointDescriptor);
begin
  DefaultInterface.endpointDescriptor := pRetVal;
end;

function TUABrowseArguments.Get_NodeDescriptor: _UANodeDescriptor;
begin
  Result := DefaultInterface.NodeDescriptor;
end;

procedure TUABrowseArguments._Set_NodeDescriptor(const pRetVal: _UANodeDescriptor);
begin
  DefaultInterface.NodeDescriptor := pRetVal;
end;

function TUABrowseArguments.Get_BrowseParameters: _UABrowseParameters;
begin
  Result := DefaultInterface.BrowseParameters;
end;

procedure TUABrowseArguments._Set_BrowseParameters(const pRetVal: _UABrowseParameters);
begin
  DefaultInterface.BrowseParameters := pRetVal;
end;

function TUABrowseArguments.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUABrowseArguments.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUABrowseArguments.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUABrowseArguments.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUABrowseArguments.MemberwiseClone: _OperationArguments;
begin
  Result := DefaultInterface.MemberwiseClone;
end;

procedure TUABrowseArguments.SetState(State: OleVariant);
begin
  DefaultInterface.SetState(State);
end;

class function CoUACallArguments.Create: _UACallArguments;
begin
  Result := CreateComObject(CLASS_UACallArguments) as _UACallArguments;
end;

class function CoUACallArguments.CreateRemote(const MachineName: string): _UACallArguments;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UACallArguments) as _UACallArguments;
end;

procedure TUACallArguments.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{F8BF32D9-A46C-4C9F-BAFB-45A19DB553BD}';
    IntfIID:   '{06EECC23-3211-48FB-B2AC-8C40396703B5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUACallArguments.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UACallArguments;
  end;
end;

procedure TUACallArguments.ConnectTo(svrIntf: _UACallArguments);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUACallArguments.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUACallArguments.GetDefaultInterface: _UACallArguments;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUACallArguments.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUACallArguments.Destroy;
begin
  inherited Destroy;
end;

function TUACallArguments.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUACallArguments.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUACallArguments.Get_State: OleVariant;
begin
  Result := DefaultInterface.State;
end;

procedure TUACallArguments._Set_State(pRetVal: OleVariant);
begin
  DefaultInterface.State := pRetVal;
end;

function TUACallArguments.Get_endpointDescriptor: _UAEndpointDescriptor;
begin
  Result := DefaultInterface.endpointDescriptor;
end;

procedure TUACallArguments._Set_endpointDescriptor(const pRetVal: _UAEndpointDescriptor);
begin
  DefaultInterface.endpointDescriptor := pRetVal;
end;

function TUACallArguments.Get_NodeDescriptor: _UANodeDescriptor;
begin
  Result := DefaultInterface.NodeDescriptor;
end;

procedure TUACallArguments._Set_NodeDescriptor(const pRetVal: _UANodeDescriptor);
begin
  DefaultInterface.NodeDescriptor := pRetVal;
end;

function TUACallArguments.Get_InputArguments: PSafeArray;
begin
  Result := DefaultInterface.InputArguments;
end;

procedure TUACallArguments.Set_InputArguments(pRetVal: PSafeArray);
begin
  DefaultInterface.InputArguments := pRetVal;
end;

function TUACallArguments.Get_InputTypeCodes: OleVariant;
begin
  Result := DefaultInterface.InputTypeCodes;
end;

procedure TUACallArguments._Set_InputTypeCodes(pRetVal: OleVariant);
begin
  DefaultInterface.InputTypeCodes := pRetVal;
end;

function TUACallArguments.Get_InputTypeFullNames: OleVariant;
begin
  Result := DefaultInterface.InputTypeFullNames;
end;

procedure TUACallArguments._Set_InputTypeFullNames(pRetVal: OleVariant);
begin
  DefaultInterface.InputTypeFullNames := pRetVal;
end;

function TUACallArguments.Get_InputTypes: OleVariant;
begin
  Result := DefaultInterface.InputTypes;
end;

procedure TUACallArguments._Set_InputTypes(pRetVal: OleVariant);
begin
  DefaultInterface.InputTypes := pRetVal;
end;

function TUACallArguments.Get_MethodNodeDescriptor: _UANodeDescriptor;
begin
  Result := DefaultInterface.MethodNodeDescriptor;
end;

procedure TUACallArguments._Set_MethodNodeDescriptor(const pRetVal: _UANodeDescriptor);
begin
  DefaultInterface.MethodNodeDescriptor := pRetVal;
end;

function TUACallArguments.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUACallArguments.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUACallArguments.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUACallArguments.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUACallArguments.MemberwiseClone: _OperationArguments;
begin
  Result := DefaultInterface.MemberwiseClone;
end;

procedure TUACallArguments.SetState(State: OleVariant);
begin
  DefaultInterface.SetState(State);
end;

procedure TUACallArguments.SetInputArguments(InputArguments: OleVariant);
begin
  DefaultInterface.SetInputArguments(InputArguments);
end;

procedure TUACallArguments.SetInputTypeCodes(InputTypeCodes: OleVariant);
begin
  DefaultInterface.SetInputTypeCodes(InputTypeCodes);
end;

procedure TUACallArguments.SetInputTypeFullNames(var InputTypeFullNames: PSafeArray);
begin
  DefaultInterface.SetInputTypeFullNames(InputTypeFullNames);
end;

procedure TUACallArguments.SetInputTypes(var InputTypes: PSafeArray);
begin
  DefaultInterface.SetInputTypes(InputTypes);
end;

class function CoUAException.Create: _UAException;
begin
  Result := CreateComObject(CLASS_UAException) as _UAException;
end;

class function CoUAException.CreateRemote(const MachineName: string): _UAException;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAException) as _UAException;
end;

procedure TUAException.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{7932FA12-C5A3-4DE6-826F-A9F57C99555E}';
    IntfIID:   '{E19D2275-9541-41D0-8259-F2BEAA38E730}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAException.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAException;
  end;
end;

procedure TUAException.ConnectTo(svrIntf: _UAException);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAException.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAException.GetDefaultInterface: _UAException;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAException.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAException.Destroy;
begin
  inherited Destroy;
end;

function TUAException.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAException.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAException.Get_Message: WideString;
begin
  Result := DefaultInterface.Message;
end;

function TUAException.Get_StackTrace: WideString;
begin
  Result := DefaultInterface.StackTrace;
end;

function TUAException.Get_HelpLink: WideString;
begin
  Result := DefaultInterface.HelpLink;
end;

procedure TUAException.Set_HelpLink(const pRetVal: WideString);
begin
  DefaultInterface.HelpLink := pRetVal;
end;

function TUAException.Get_Source: WideString;
begin
  Result := DefaultInterface.Source;
end;

procedure TUAException.Set_Source(const pRetVal: WideString);
begin
  DefaultInterface.Source := pRetVal;
end;

function TUAException.Get_InnerException: _Exception;
begin
  Result := DefaultInterface.InnerException;
end;

function TUAException.Get_TargetSite: _MethodBase;
begin
  Result := DefaultInterface.TargetSite;
end;

function TUAException.Get_Data: _Dictionary;
begin
  Result := DefaultInterface.Data;
end;

function TUAException.Get_HResult: Integer;
begin
  Result := DefaultInterface.HResult;
end;

function TUAException.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAException.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAException.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAException.GetBaseException: _Exception;
begin
  Result := DefaultInterface.GetBaseException;
end;

procedure TUAException.GetObjectData(const info: _SerializationInfo; context: StreamingContext);
begin
  DefaultInterface.GetObjectData(info, context);
end;

class function CoUALogicalException.Create: _UALogicalException;
begin
  Result := CreateComObject(CLASS_UALogicalException) as _UALogicalException;
end;

class function CoUALogicalException.CreateRemote(const MachineName: string): _UALogicalException;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UALogicalException) as _UALogicalException;
end;

procedure TUALogicalException.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{FB18BDF1-4693-4607-B373-543EF69A56B4}';
    IntfIID:   '{2D982E27-85C5-4A8E-8B99-9A00AC9E2D3C}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUALogicalException.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UALogicalException;
  end;
end;

procedure TUALogicalException.ConnectTo(svrIntf: _UALogicalException);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUALogicalException.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUALogicalException.GetDefaultInterface: _UALogicalException;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUALogicalException.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUALogicalException.Destroy;
begin
  inherited Destroy;
end;

function TUALogicalException.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUALogicalException.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUALogicalException.Get_Message: WideString;
begin
  Result := DefaultInterface.Message;
end;

function TUALogicalException.Get_StackTrace: WideString;
begin
  Result := DefaultInterface.StackTrace;
end;

function TUALogicalException.Get_HelpLink: WideString;
begin
  Result := DefaultInterface.HelpLink;
end;

procedure TUALogicalException.Set_HelpLink(const pRetVal: WideString);
begin
  DefaultInterface.HelpLink := pRetVal;
end;

function TUALogicalException.Get_Source: WideString;
begin
  Result := DefaultInterface.Source;
end;

procedure TUALogicalException.Set_Source(const pRetVal: WideString);
begin
  DefaultInterface.Source := pRetVal;
end;

function TUALogicalException.Get_InnerException: _Exception;
begin
  Result := DefaultInterface.InnerException;
end;

function TUALogicalException.Get_TargetSite: _MethodBase;
begin
  Result := DefaultInterface.TargetSite;
end;

function TUALogicalException.Get_Data: _Dictionary;
begin
  Result := DefaultInterface.Data;
end;

function TUALogicalException.Get_HResult: Integer;
begin
  Result := DefaultInterface.HResult;
end;

function TUALogicalException.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUALogicalException.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUALogicalException.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUALogicalException.GetBaseException: _Exception;
begin
  Result := DefaultInterface.GetBaseException;
end;

procedure TUALogicalException.GetObjectData(const info: _SerializationInfo; 
                                            context: StreamingContext);
begin
  DefaultInterface.GetObjectData(info, context);
end;

class function CoUAMonitoredItemArguments.Create: _UAMonitoredItemArguments;
begin
  Result := CreateComObject(CLASS_UAMonitoredItemArguments) as _UAMonitoredItemArguments;
end;

class function CoUAMonitoredItemArguments.CreateRemote(const MachineName: string): _UAMonitoredItemArguments;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAMonitoredItemArguments) as _UAMonitoredItemArguments;
end;

procedure TUAMonitoredItemArguments.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{2A0F366C-98F5-4651-AEB4-D9D57C6AD86A}';
    IntfIID:   '{4851E2D1-C678-473C-81BE-8318555601B5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAMonitoredItemArguments.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAMonitoredItemArguments;
  end;
end;

procedure TUAMonitoredItemArguments.ConnectTo(svrIntf: _UAMonitoredItemArguments);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAMonitoredItemArguments.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAMonitoredItemArguments.GetDefaultInterface: _UAMonitoredItemArguments;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAMonitoredItemArguments.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAMonitoredItemArguments.Destroy;
begin
  inherited Destroy;
end;

function TUAMonitoredItemArguments.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAMonitoredItemArguments.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAMonitoredItemArguments.Get_State: OleVariant;
begin
  Result := DefaultInterface.State;
end;

procedure TUAMonitoredItemArguments._Set_State(pRetVal: OleVariant);
begin
  DefaultInterface.State := pRetVal;
end;

function TUAMonitoredItemArguments.Get_endpointDescriptor: _UAEndpointDescriptor;
begin
  Result := DefaultInterface.endpointDescriptor;
end;

procedure TUAMonitoredItemArguments._Set_endpointDescriptor(const pRetVal: _UAEndpointDescriptor);
begin
  DefaultInterface.endpointDescriptor := pRetVal;
end;

function TUAMonitoredItemArguments.Get_NodeDescriptor: _UANodeDescriptor;
begin
  Result := DefaultInterface.NodeDescriptor;
end;

procedure TUAMonitoredItemArguments._Set_NodeDescriptor(const pRetVal: _UANodeDescriptor);
begin
  DefaultInterface.NodeDescriptor := pRetVal;
end;

function TUAMonitoredItemArguments.Get_AttributeId: UAAttributeId;
begin
  Result := DefaultInterface.AttributeId;
end;

procedure TUAMonitoredItemArguments.Set_AttributeId(pRetVal: UAAttributeId);
begin
  DefaultInterface.AttributeId := pRetVal;
end;

function TUAMonitoredItemArguments.Get_IndexRangeList: _UAIndexRangeList;
begin
  Result := DefaultInterface.IndexRangeList;
end;

procedure TUAMonitoredItemArguments._Set_IndexRangeList(const pRetVal: _UAIndexRangeList);
begin
  DefaultInterface.IndexRangeList := pRetVal;
end;

function TUAMonitoredItemArguments.Get_AutoConditionRefresh: WordBool;
begin
  Result := DefaultInterface.AutoConditionRefresh;
end;

procedure TUAMonitoredItemArguments.Set_AutoConditionRefresh(pRetVal: WordBool);
begin
  DefaultInterface.AutoConditionRefresh := pRetVal;
end;

function TUAMonitoredItemArguments.Get_MonitoringParameters: _UAMonitoringParameters;
begin
  Result := DefaultInterface.MonitoringParameters;
end;

procedure TUAMonitoredItemArguments._Set_MonitoringParameters(const pRetVal: _UAMonitoringParameters);
begin
  DefaultInterface.MonitoringParameters := pRetVal;
end;

function TUAMonitoredItemArguments.Get_SubscriptionParameters: _UASubscriptionParameters;
begin
  Result := DefaultInterface.SubscriptionParameters;
end;

procedure TUAMonitoredItemArguments._Set_SubscriptionParameters(const pRetVal: _UASubscriptionParameters);
begin
  DefaultInterface.SubscriptionParameters := pRetVal;
end;

function TUAMonitoredItemArguments.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAMonitoredItemArguments.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAMonitoredItemArguments.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAMonitoredItemArguments.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUAMonitoredItemArguments.MemberwiseClone: _OperationArguments;
begin
  Result := DefaultInterface.MemberwiseClone;
end;

procedure TUAMonitoredItemArguments.SetState(State: OleVariant);
begin
  DefaultInterface.SetState(State);
end;

class function CoEasyUAMonitoredItemArguments.Create: _EasyUAMonitoredItemArguments;
begin
  Result := CreateComObject(CLASS_EasyUAMonitoredItemArguments) as _EasyUAMonitoredItemArguments;
end;

class function CoEasyUAMonitoredItemArguments.CreateRemote(const MachineName: string): _EasyUAMonitoredItemArguments;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EasyUAMonitoredItemArguments) as _EasyUAMonitoredItemArguments;
end;

procedure TEasyUAMonitoredItemArguments.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{014F8522-306C-4E1B-9A8C-7E940AB94A3E}';
    IntfIID:   '{751F09D0-7C37-4E42-8719-26471E33010B}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TEasyUAMonitoredItemArguments.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _EasyUAMonitoredItemArguments;
  end;
end;

procedure TEasyUAMonitoredItemArguments.ConnectTo(svrIntf: _EasyUAMonitoredItemArguments);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TEasyUAMonitoredItemArguments.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TEasyUAMonitoredItemArguments.GetDefaultInterface: _EasyUAMonitoredItemArguments;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TEasyUAMonitoredItemArguments.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TEasyUAMonitoredItemArguments.Destroy;
begin
  inherited Destroy;
end;

function TEasyUAMonitoredItemArguments.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TEasyUAMonitoredItemArguments.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TEasyUAMonitoredItemArguments.Get_State: OleVariant;
begin
  Result := DefaultInterface.State;
end;

procedure TEasyUAMonitoredItemArguments._Set_State(pRetVal: OleVariant);
begin
  DefaultInterface.State := pRetVal;
end;

function TEasyUAMonitoredItemArguments.Get_endpointDescriptor: _UAEndpointDescriptor;
begin
  Result := DefaultInterface.endpointDescriptor;
end;

procedure TEasyUAMonitoredItemArguments._Set_endpointDescriptor(const pRetVal: _UAEndpointDescriptor);
begin
  DefaultInterface.endpointDescriptor := pRetVal;
end;

function TEasyUAMonitoredItemArguments.Get_NodeDescriptor: _UANodeDescriptor;
begin
  Result := DefaultInterface.NodeDescriptor;
end;

procedure TEasyUAMonitoredItemArguments._Set_NodeDescriptor(const pRetVal: _UANodeDescriptor);
begin
  DefaultInterface.NodeDescriptor := pRetVal;
end;

function TEasyUAMonitoredItemArguments.Get_AttributeId: UAAttributeId;
begin
  Result := DefaultInterface.AttributeId;
end;

procedure TEasyUAMonitoredItemArguments.Set_AttributeId(pRetVal: UAAttributeId);
begin
  DefaultInterface.AttributeId := pRetVal;
end;

function TEasyUAMonitoredItemArguments.Get_IndexRangeList: _UAIndexRangeList;
begin
  Result := DefaultInterface.IndexRangeList;
end;

procedure TEasyUAMonitoredItemArguments._Set_IndexRangeList(const pRetVal: _UAIndexRangeList);
begin
  DefaultInterface.IndexRangeList := pRetVal;
end;

function TEasyUAMonitoredItemArguments.Get_AutoConditionRefresh: WordBool;
begin
  Result := DefaultInterface.AutoConditionRefresh;
end;

procedure TEasyUAMonitoredItemArguments.Set_AutoConditionRefresh(pRetVal: WordBool);
begin
  DefaultInterface.AutoConditionRefresh := pRetVal;
end;

function TEasyUAMonitoredItemArguments.Get_MonitoringParameters: _UAMonitoringParameters;
begin
  Result := DefaultInterface.MonitoringParameters;
end;

procedure TEasyUAMonitoredItemArguments._Set_MonitoringParameters(const pRetVal: _UAMonitoringParameters);
begin
  DefaultInterface.MonitoringParameters := pRetVal;
end;

function TEasyUAMonitoredItemArguments.Get_SubscriptionParameters: _UASubscriptionParameters;
begin
  Result := DefaultInterface.SubscriptionParameters;
end;

procedure TEasyUAMonitoredItemArguments._Set_SubscriptionParameters(const pRetVal: _UASubscriptionParameters);
begin
  DefaultInterface.SubscriptionParameters := pRetVal;
end;

function TEasyUAMonitoredItemArguments.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TEasyUAMonitoredItemArguments.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TEasyUAMonitoredItemArguments.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TEasyUAMonitoredItemArguments.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TEasyUAMonitoredItemArguments.MemberwiseClone: _OperationArguments;
begin
  Result := DefaultInterface.MemberwiseClone;
end;

procedure TEasyUAMonitoredItemArguments.SetState(State: OleVariant);
begin
  DefaultInterface.SetState(State);
end;

class function CoUANodeElementCollectionResult.Create: _UANodeElementCollectionResult;
begin
  Result := CreateComObject(CLASS_UANodeElementCollectionResult) as _UANodeElementCollectionResult;
end;

class function CoUANodeElementCollectionResult.CreateRemote(const MachineName: string): _UANodeElementCollectionResult;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UANodeElementCollectionResult) as _UANodeElementCollectionResult;
end;

procedure TUANodeElementCollectionResult.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{A71FB2A2-9ECA-4DA7-86E3-23DBB4C3F2AC}';
    IntfIID:   '{803E75B3-48FC-4D25-A38A-72A7B6CA29DB}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUANodeElementCollectionResult.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UANodeElementCollectionResult;
  end;
end;

procedure TUANodeElementCollectionResult.ConnectTo(svrIntf: _UANodeElementCollectionResult);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUANodeElementCollectionResult.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUANodeElementCollectionResult.GetDefaultInterface: _UANodeElementCollectionResult;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUANodeElementCollectionResult.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUANodeElementCollectionResult.Destroy;
begin
  inherited Destroy;
end;

function TUANodeElementCollectionResult.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUANodeElementCollectionResult.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUANodeElementCollectionResult.Get_ToString_2(const format: WideString; 
                                                       const formatProvider: IFormatProvider): WideString;
begin
  Result := DefaultInterface.ToString_2[format, formatProvider];
end;

function TUANodeElementCollectionResult.Get_ToString_3(const format: WideString): WideString;
begin
  Result := DefaultInterface.ToString_3[format];
end;

function TUANodeElementCollectionResult.Get_Diagnostics: _ExceptionCollection;
begin
  Result := DefaultInterface.Diagnostics;
end;

procedure TUANodeElementCollectionResult._Set_Diagnostics(const pRetVal: _ExceptionCollection);
begin
  DefaultInterface.Diagnostics := pRetVal;
end;

function TUANodeElementCollectionResult.Get_DiagnosticsCount: Integer;
begin
  Result := DefaultInterface.DiagnosticsCount;
end;

function TUANodeElementCollectionResult.Get_DiagnosticsSummary: WideString;
begin
  Result := DefaultInterface.DiagnosticsSummary;
end;

function TUANodeElementCollectionResult.Get_ErrorId: WideString;
begin
  Result := DefaultInterface.ErrorId;
end;

procedure TUANodeElementCollectionResult.Set_ErrorId(const pRetVal: WideString);
begin
  DefaultInterface.ErrorId := pRetVal;
end;

function TUANodeElementCollectionResult.Get_ErrorMessage: WideString;
begin
  Result := DefaultInterface.ErrorMessage;
end;

procedure TUANodeElementCollectionResult.Set_ErrorMessage(const pRetVal: WideString);
begin
  DefaultInterface.ErrorMessage := pRetVal;
end;

function TUANodeElementCollectionResult.Get_ErrorMessageBrief: WideString;
begin
  Result := DefaultInterface.ErrorMessageBrief;
end;

function TUANodeElementCollectionResult.Get_Exception: _Exception;
begin
  Result := DefaultInterface.Exception;
end;

procedure TUANodeElementCollectionResult._Set_Exception(const pRetVal: _Exception);
begin
  DefaultInterface.Exception := pRetVal;
end;

function TUANodeElementCollectionResult.Get_NormalizedDiagnostics: _NormalizedExceptionCollection;
begin
  Result := DefaultInterface.NormalizedDiagnostics;
end;

function TUANodeElementCollectionResult.Get_NormalizedException: _NormalizedException;
begin
  Result := DefaultInterface.NormalizedException;
end;

function TUANodeElementCollectionResult.Get_State: OleVariant;
begin
  Result := DefaultInterface.State;
end;

procedure TUANodeElementCollectionResult._Set_State(pRetVal: OleVariant);
begin
  DefaultInterface.State := pRetVal;
end;

function TUANodeElementCollectionResult.Get_Succeeded: WordBool;
begin
  Result := DefaultInterface.Succeeded;
end;

function TUANodeElementCollectionResult.Get_RegularizedValue: OleVariant;
begin
  Result := DefaultInterface.RegularizedValue;
end;

function TUANodeElementCollectionResult.Get_value: _UANodeElementCollection;
begin
  Result := DefaultInterface.value;
end;

procedure TUANodeElementCollectionResult._Set_value(const pRetVal: _UANodeElementCollection);
begin
  DefaultInterface.value := pRetVal;
end;

function TUANodeElementCollectionResult.Get_ValueType: _Type;
begin
  Result := DefaultInterface.ValueType;
end;

function TUANodeElementCollectionResult.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUANodeElementCollectionResult.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUANodeElementCollectionResult.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUANodeElementCollectionResult.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUANodeElementCollectionResult.MemberwiseClone: _OperationResult;
begin
  Result := DefaultInterface.MemberwiseClone;
end;

procedure TUANodeElementCollectionResult.SetState(State: OleVariant);
begin
  DefaultInterface.SetState(State);
end;

procedure TUANodeElementCollectionResult.ThrowIfFailed;
begin
  DefaultInterface.ThrowIfFailed;
end;

procedure TUANodeElementCollectionResult.SetValue(value: OleVariant);
begin
  DefaultInterface.SetValue(value);
end;

class function CoUAReadArguments.Create: _UAReadArguments;
begin
  Result := CreateComObject(CLASS_UAReadArguments) as _UAReadArguments;
end;

class function CoUAReadArguments.CreateRemote(const MachineName: string): _UAReadArguments;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAReadArguments) as _UAReadArguments;
end;

procedure TUAReadArguments.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{CDE1B34F-23EB-4664-913F-01B504828D77}';
    IntfIID:   '{9E47FE1B-4806-425E-A57C-C58BA8310951}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAReadArguments.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAReadArguments;
  end;
end;

procedure TUAReadArguments.ConnectTo(svrIntf: _UAReadArguments);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAReadArguments.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAReadArguments.GetDefaultInterface: _UAReadArguments;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAReadArguments.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAReadArguments.Destroy;
begin
  inherited Destroy;
end;

function TUAReadArguments.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAReadArguments.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAReadArguments.Get_State: OleVariant;
begin
  Result := DefaultInterface.State;
end;

procedure TUAReadArguments._Set_State(pRetVal: OleVariant);
begin
  DefaultInterface.State := pRetVal;
end;

function TUAReadArguments.Get_endpointDescriptor: _UAEndpointDescriptor;
begin
  Result := DefaultInterface.endpointDescriptor;
end;

procedure TUAReadArguments._Set_endpointDescriptor(const pRetVal: _UAEndpointDescriptor);
begin
  DefaultInterface.endpointDescriptor := pRetVal;
end;

function TUAReadArguments.Get_NodeDescriptor: _UANodeDescriptor;
begin
  Result := DefaultInterface.NodeDescriptor;
end;

procedure TUAReadArguments._Set_NodeDescriptor(const pRetVal: _UANodeDescriptor);
begin
  DefaultInterface.NodeDescriptor := pRetVal;
end;

function TUAReadArguments.Get_AttributeId: UAAttributeId;
begin
  Result := DefaultInterface.AttributeId;
end;

procedure TUAReadArguments.Set_AttributeId(pRetVal: UAAttributeId);
begin
  DefaultInterface.AttributeId := pRetVal;
end;

function TUAReadArguments.Get_IndexRangeList: _UAIndexRangeList;
begin
  Result := DefaultInterface.IndexRangeList;
end;

procedure TUAReadArguments._Set_IndexRangeList(const pRetVal: _UAIndexRangeList);
begin
  DefaultInterface.IndexRangeList := pRetVal;
end;

function TUAReadArguments.Get_ReadParameters: _UAReadParameters;
begin
  Result := DefaultInterface.ReadParameters;
end;

procedure TUAReadArguments._Set_ReadParameters(const pRetVal: _UAReadParameters);
begin
  DefaultInterface.ReadParameters := pRetVal;
end;

function TUAReadArguments.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAReadArguments.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAReadArguments.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAReadArguments.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUAReadArguments.MemberwiseClone: _OperationArguments;
begin
  Result := DefaultInterface.MemberwiseClone;
end;

procedure TUAReadArguments.SetState(State: OleVariant);
begin
  DefaultInterface.SetState(State);
end;

class function CoUAWriteArguments.Create: _UAWriteArguments;
begin
  Result := CreateComObject(CLASS_UAWriteArguments) as _UAWriteArguments;
end;

class function CoUAWriteArguments.CreateRemote(const MachineName: string): _UAWriteArguments;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAWriteArguments) as _UAWriteArguments;
end;

procedure TUAWriteArguments.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{EE40E760-E2BB-411D-9FA4-67588357354F}';
    IntfIID:   '{E76841C2-AE50-442A-9C5E-A95A03CDF6DE}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAWriteArguments.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAWriteArguments;
  end;
end;

procedure TUAWriteArguments.ConnectTo(svrIntf: _UAWriteArguments);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAWriteArguments.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAWriteArguments.GetDefaultInterface: _UAWriteArguments;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAWriteArguments.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAWriteArguments.Destroy;
begin
  inherited Destroy;
end;

function TUAWriteArguments.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAWriteArguments.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAWriteArguments.Get_State: OleVariant;
begin
  Result := DefaultInterface.State;
end;

procedure TUAWriteArguments._Set_State(pRetVal: OleVariant);
begin
  DefaultInterface.State := pRetVal;
end;

function TUAWriteArguments.Get_endpointDescriptor: _UAEndpointDescriptor;
begin
  Result := DefaultInterface.endpointDescriptor;
end;

procedure TUAWriteArguments._Set_endpointDescriptor(const pRetVal: _UAEndpointDescriptor);
begin
  DefaultInterface.endpointDescriptor := pRetVal;
end;

function TUAWriteArguments.Get_NodeDescriptor: _UANodeDescriptor;
begin
  Result := DefaultInterface.NodeDescriptor;
end;

procedure TUAWriteArguments._Set_NodeDescriptor(const pRetVal: _UANodeDescriptor);
begin
  DefaultInterface.NodeDescriptor := pRetVal;
end;

function TUAWriteArguments.Get_AttributeId: UAAttributeId;
begin
  Result := DefaultInterface.AttributeId;
end;

procedure TUAWriteArguments.Set_AttributeId(pRetVal: UAAttributeId);
begin
  DefaultInterface.AttributeId := pRetVal;
end;

function TUAWriteArguments.Get_IndexRangeList: _UAIndexRangeList;
begin
  Result := DefaultInterface.IndexRangeList;
end;

procedure TUAWriteArguments._Set_IndexRangeList(const pRetVal: _UAIndexRangeList);
begin
  DefaultInterface.IndexRangeList := pRetVal;
end;

function TUAWriteArguments.Get_AttributeType: _Type;
begin
  Result := DefaultInterface.AttributeType;
end;

function TUAWriteArguments.Get_ValueType: _Type;
begin
  Result := DefaultInterface.ValueType;
end;

procedure TUAWriteArguments._Set_ValueType(const pRetVal: _Type);
begin
  DefaultInterface.ValueType := pRetVal;
end;

function TUAWriteArguments.Get_ValueTypeFullName: WideString;
begin
  Result := DefaultInterface.ValueTypeFullName;
end;

procedure TUAWriteArguments.Set_ValueTypeFullName(const pRetVal: WideString);
begin
  DefaultInterface.ValueTypeFullName := pRetVal;
end;

function TUAWriteArguments.Get_ValueTypeCode: TypeCode;
begin
  Result := DefaultInterface.ValueTypeCode;
end;

procedure TUAWriteArguments.Set_ValueTypeCode(pRetVal: TypeCode);
begin
  DefaultInterface.ValueTypeCode := pRetVal;
end;

function TUAWriteArguments.Get_AttributeData: _UAAttributeData;
begin
  Result := DefaultInterface.AttributeData;
end;

procedure TUAWriteArguments._Set_AttributeData(const pRetVal: _UAAttributeData);
begin
  DefaultInterface.AttributeData := pRetVal;
end;

function TUAWriteArguments.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAWriteArguments.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAWriteArguments.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAWriteArguments.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUAWriteArguments.MemberwiseClone: _OperationArguments;
begin
  Result := DefaultInterface.MemberwiseClone;
end;

procedure TUAWriteArguments.SetState(State: OleVariant);
begin
  DefaultInterface.SetState(State);
end;

class function CoUAWriteResult.Create: _UAWriteResult;
begin
  Result := CreateComObject(CLASS_UAWriteResult) as _UAWriteResult;
end;

class function CoUAWriteResult.CreateRemote(const MachineName: string): _UAWriteResult;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAWriteResult) as _UAWriteResult;
end;

procedure TUAWriteResult.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{97EE0719-ED42-485A-8008-C0A6EA9F10C0}';
    IntfIID:   '{262AFFB0-449E-4A62-8E35-000988C0487B}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAWriteResult.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAWriteResult;
  end;
end;

procedure TUAWriteResult.ConnectTo(svrIntf: _UAWriteResult);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAWriteResult.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAWriteResult.GetDefaultInterface: _UAWriteResult;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAWriteResult.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAWriteResult.Destroy;
begin
  inherited Destroy;
end;

function TUAWriteResult.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAWriteResult.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAWriteResult.Get_ToString_2(const format: WideString; 
                                       const formatProvider: IFormatProvider): WideString;
begin
  Result := DefaultInterface.ToString_2[format, formatProvider];
end;

function TUAWriteResult.Get_ToString_3(const format: WideString): WideString;
begin
  Result := DefaultInterface.ToString_3[format];
end;

function TUAWriteResult.Get_Diagnostics: _ExceptionCollection;
begin
  Result := DefaultInterface.Diagnostics;
end;

procedure TUAWriteResult._Set_Diagnostics(const pRetVal: _ExceptionCollection);
begin
  DefaultInterface.Diagnostics := pRetVal;
end;

function TUAWriteResult.Get_DiagnosticsCount: Integer;
begin
  Result := DefaultInterface.DiagnosticsCount;
end;

function TUAWriteResult.Get_DiagnosticsSummary: WideString;
begin
  Result := DefaultInterface.DiagnosticsSummary;
end;

function TUAWriteResult.Get_ErrorId: WideString;
begin
  Result := DefaultInterface.ErrorId;
end;

procedure TUAWriteResult.Set_ErrorId(const pRetVal: WideString);
begin
  DefaultInterface.ErrorId := pRetVal;
end;

function TUAWriteResult.Get_ErrorMessage: WideString;
begin
  Result := DefaultInterface.ErrorMessage;
end;

procedure TUAWriteResult.Set_ErrorMessage(const pRetVal: WideString);
begin
  DefaultInterface.ErrorMessage := pRetVal;
end;

function TUAWriteResult.Get_ErrorMessageBrief: WideString;
begin
  Result := DefaultInterface.ErrorMessageBrief;
end;

function TUAWriteResult.Get_Exception: _Exception;
begin
  Result := DefaultInterface.Exception;
end;

procedure TUAWriteResult._Set_Exception(const pRetVal: _Exception);
begin
  DefaultInterface.Exception := pRetVal;
end;

function TUAWriteResult.Get_NormalizedDiagnostics: _NormalizedExceptionCollection;
begin
  Result := DefaultInterface.NormalizedDiagnostics;
end;

function TUAWriteResult.Get_NormalizedException: _NormalizedException;
begin
  Result := DefaultInterface.NormalizedException;
end;

function TUAWriteResult.Get_State: OleVariant;
begin
  Result := DefaultInterface.State;
end;

procedure TUAWriteResult._Set_State(pRetVal: OleVariant);
begin
  DefaultInterface.State := pRetVal;
end;

function TUAWriteResult.Get_Succeeded: WordBool;
begin
  Result := DefaultInterface.Succeeded;
end;

function TUAWriteResult.Get_Clamped: WordBool;
begin
  Result := DefaultInterface.Clamped;
end;

procedure TUAWriteResult.Set_Clamped(pRetVal: WordBool);
begin
  DefaultInterface.Clamped := pRetVal;
end;

function TUAWriteResult.Get_CompletesAsynchronously: WordBool;
begin
  Result := DefaultInterface.CompletesAsynchronously;
end;

procedure TUAWriteResult.Set_CompletesAsynchronously(pRetVal: WordBool);
begin
  DefaultInterface.CompletesAsynchronously := pRetVal;
end;

function TUAWriteResult.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAWriteResult.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAWriteResult.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAWriteResult.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUAWriteResult.MemberwiseClone: _OperationResult;
begin
  Result := DefaultInterface.MemberwiseClone;
end;

procedure TUAWriteResult.SetState(State: OleVariant);
begin
  DefaultInterface.SetState(State);
end;

procedure TUAWriteResult.ThrowIfFailed;
begin
  DefaultInterface.ThrowIfFailed;
end;

class function CoUAWriteValueArguments.Create: _UAWriteValueArguments;
begin
  Result := CreateComObject(CLASS_UAWriteValueArguments) as _UAWriteValueArguments;
end;

class function CoUAWriteValueArguments.CreateRemote(const MachineName: string): _UAWriteValueArguments;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAWriteValueArguments) as _UAWriteValueArguments;
end;

procedure TUAWriteValueArguments.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{17F223BC-DEE0-4657-9AC7-A94F56E6A29D}';
    IntfIID:   '{33DD7EC9-A915-496F-B707-4B64E51A27C8}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAWriteValueArguments.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAWriteValueArguments;
  end;
end;

procedure TUAWriteValueArguments.ConnectTo(svrIntf: _UAWriteValueArguments);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAWriteValueArguments.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAWriteValueArguments.GetDefaultInterface: _UAWriteValueArguments;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAWriteValueArguments.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAWriteValueArguments.Destroy;
begin
  inherited Destroy;
end;

function TUAWriteValueArguments.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAWriteValueArguments.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAWriteValueArguments.Get_State: OleVariant;
begin
  Result := DefaultInterface.State;
end;

procedure TUAWriteValueArguments._Set_State(pRetVal: OleVariant);
begin
  DefaultInterface.State := pRetVal;
end;

function TUAWriteValueArguments.Get_endpointDescriptor: _UAEndpointDescriptor;
begin
  Result := DefaultInterface.endpointDescriptor;
end;

procedure TUAWriteValueArguments._Set_endpointDescriptor(const pRetVal: _UAEndpointDescriptor);
begin
  DefaultInterface.endpointDescriptor := pRetVal;
end;

function TUAWriteValueArguments.Get_NodeDescriptor: _UANodeDescriptor;
begin
  Result := DefaultInterface.NodeDescriptor;
end;

procedure TUAWriteValueArguments._Set_NodeDescriptor(const pRetVal: _UANodeDescriptor);
begin
  DefaultInterface.NodeDescriptor := pRetVal;
end;

function TUAWriteValueArguments.Get_AttributeId: UAAttributeId;
begin
  Result := DefaultInterface.AttributeId;
end;

procedure TUAWriteValueArguments.Set_AttributeId(pRetVal: UAAttributeId);
begin
  DefaultInterface.AttributeId := pRetVal;
end;

function TUAWriteValueArguments.Get_IndexRangeList: _UAIndexRangeList;
begin
  Result := DefaultInterface.IndexRangeList;
end;

procedure TUAWriteValueArguments._Set_IndexRangeList(const pRetVal: _UAIndexRangeList);
begin
  DefaultInterface.IndexRangeList := pRetVal;
end;

function TUAWriteValueArguments.Get_AttributeType: _Type;
begin
  Result := DefaultInterface.AttributeType;
end;

function TUAWriteValueArguments.Get_ValueType: _Type;
begin
  Result := DefaultInterface.ValueType;
end;

procedure TUAWriteValueArguments._Set_ValueType(const pRetVal: _Type);
begin
  DefaultInterface.ValueType := pRetVal;
end;

function TUAWriteValueArguments.Get_ValueTypeFullName: WideString;
begin
  Result := DefaultInterface.ValueTypeFullName;
end;

procedure TUAWriteValueArguments.Set_ValueTypeFullName(const pRetVal: WideString);
begin
  DefaultInterface.ValueTypeFullName := pRetVal;
end;

function TUAWriteValueArguments.Get_ValueTypeCode: TypeCode;
begin
  Result := DefaultInterface.ValueTypeCode;
end;

procedure TUAWriteValueArguments.Set_ValueTypeCode(pRetVal: TypeCode);
begin
  DefaultInterface.ValueTypeCode := pRetVal;
end;

function TUAWriteValueArguments.Get_value: OleVariant;
begin
  Result := DefaultInterface.value;
end;

procedure TUAWriteValueArguments._Set_value(pRetVal: OleVariant);
begin
  DefaultInterface.value := pRetVal;
end;

function TUAWriteValueArguments.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAWriteValueArguments.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAWriteValueArguments.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAWriteValueArguments.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUAWriteValueArguments.MemberwiseClone: _OperationArguments;
begin
  Result := DefaultInterface.MemberwiseClone;
end;

procedure TUAWriteValueArguments.SetState(State: OleVariant);
begin
  DefaultInterface.SetState(State);
end;

procedure TUAWriteValueArguments.SetValue(value: OleVariant);
begin
  DefaultInterface.SetValue(value);
end;

class function CoUABrowsePathFormatException.Create: _UABrowsePathFormatException;
begin
  Result := CreateComObject(CLASS_UABrowsePathFormatException) as _UABrowsePathFormatException;
end;

class function CoUABrowsePathFormatException.CreateRemote(const MachineName: string): _UABrowsePathFormatException;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UABrowsePathFormatException) as _UABrowsePathFormatException;
end;

procedure TUABrowsePathFormatException.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{5859AD27-4F45-4717-A7F1-430A2BEE0018}';
    IntfIID:   '{80ED3B9B-F034-49B0-AEFD-039A632D1CEA}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUABrowsePathFormatException.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UABrowsePathFormatException;
  end;
end;

procedure TUABrowsePathFormatException.ConnectTo(svrIntf: _UABrowsePathFormatException);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUABrowsePathFormatException.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUABrowsePathFormatException.GetDefaultInterface: _UABrowsePathFormatException;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUABrowsePathFormatException.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUABrowsePathFormatException.Destroy;
begin
  inherited Destroy;
end;

function TUABrowsePathFormatException.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUABrowsePathFormatException.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUABrowsePathFormatException.Get_Message: WideString;
begin
  Result := DefaultInterface.Message;
end;

function TUABrowsePathFormatException.Get_StackTrace: WideString;
begin
  Result := DefaultInterface.StackTrace;
end;

function TUABrowsePathFormatException.Get_HelpLink: WideString;
begin
  Result := DefaultInterface.HelpLink;
end;

procedure TUABrowsePathFormatException.Set_HelpLink(const pRetVal: WideString);
begin
  DefaultInterface.HelpLink := pRetVal;
end;

function TUABrowsePathFormatException.Get_Source: WideString;
begin
  Result := DefaultInterface.Source;
end;

procedure TUABrowsePathFormatException.Set_Source(const pRetVal: WideString);
begin
  DefaultInterface.Source := pRetVal;
end;

function TUABrowsePathFormatException.Get_InnerException: _Exception;
begin
  Result := DefaultInterface.InnerException;
end;

function TUABrowsePathFormatException.Get_TargetSite: _MethodBase;
begin
  Result := DefaultInterface.TargetSite;
end;

function TUABrowsePathFormatException.Get_Data: _Dictionary;
begin
  Result := DefaultInterface.Data;
end;

function TUABrowsePathFormatException.Get_HResult: Integer;
begin
  Result := DefaultInterface.HResult;
end;

function TUABrowsePathFormatException.Get_ErrorId: WideString;
begin
  Result := DefaultInterface.ErrorId;
end;

function TUABrowsePathFormatException.Get_FormatError: _StringParsingError;
begin
  Result := DefaultInterface.FormatError;
end;

function TUABrowsePathFormatException.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUABrowsePathFormatException.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUABrowsePathFormatException.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUABrowsePathFormatException.GetBaseException: _Exception;
begin
  Result := DefaultInterface.GetBaseException;
end;

procedure TUABrowsePathFormatException.GetObjectData(const info: _SerializationInfo; 
                                                     context: StreamingContext);
begin
  DefaultInterface.GetObjectData(info, context);
end;

class function CoUABrowsePathParser.Create: _UABrowsePathParser;
begin
  Result := CreateComObject(CLASS_UABrowsePathParser) as _UABrowsePathParser;
end;

class function CoUABrowsePathParser.CreateRemote(const MachineName: string): _UABrowsePathParser;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UABrowsePathParser) as _UABrowsePathParser;
end;

procedure TUABrowsePathParser.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{2866A8DE-4C0D-4CC6-955B-6705FAD69A38}';
    IntfIID:   '{7535B40D-25FC-4689-93FC-DA9D3C0654FB}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUABrowsePathParser.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UABrowsePathParser;
  end;
end;

procedure TUABrowsePathParser.ConnectTo(svrIntf: _UABrowsePathParser);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUABrowsePathParser.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUABrowsePathParser.GetDefaultInterface: _UABrowsePathParser;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUABrowsePathParser.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUABrowsePathParser.Destroy;
begin
  inherited Destroy;
end;

function TUABrowsePathParser.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUABrowsePathParser.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUABrowsePathParser.Get_BasePath: _UABrowsePath;
begin
  Result := DefaultInterface.BasePath;
end;

procedure TUABrowsePathParser._Set_BasePath(const pRetVal: _UABrowsePath);
begin
  DefaultInterface.BasePath := pRetVal;
end;

function TUABrowsePathParser.Get_DefaultNamespaceUriString: WideString;
begin
  Result := DefaultInterface.DefaultNamespaceUriString;
end;

procedure TUABrowsePathParser.Set_DefaultNamespaceUriString(const pRetVal: WideString);
begin
  DefaultInterface.DefaultNamespaceUriString := pRetVal;
end;

function TUABrowsePathParser.Get_ParsingFlags: UABrowsePathParsingFlags;
begin
  Result := DefaultInterface.ParsingFlags;
end;

procedure TUABrowsePathParser.Set_ParsingFlags(pRetVal: UABrowsePathParsingFlags);
begin
  DefaultInterface.ParsingFlags := pRetVal;
end;

function TUABrowsePathParser.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUABrowsePathParser.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUABrowsePathParser.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUABrowsePathParser.IsAbsolute(const value: WideString): WordBool;
begin
  Result := DefaultInterface.IsAbsolute(value);
end;

function TUABrowsePathParser.Parse(const value: WideString): _UABrowsePath;
begin
  Result := DefaultInterface.Parse(value);
end;

function TUABrowsePathParser.ParseRelative(const value: WideString): _UABrowsePathElementCollection;
begin
  Result := DefaultInterface.ParseRelative(value);
end;

function TUABrowsePathParser.TryParse(const value: WideString; out browsePath: OleVariant): _StringParsingError;
begin
  Result := DefaultInterface.TryParse(value, browsePath);
end;

function TUABrowsePathParser.TryParseRelative(const value: WideString; 
                                              browsePathElementCollection: OleVariant): _StringParsingError;
begin
  Result := DefaultInterface.TryParseRelative(value, browsePathElementCollection);
end;

class function CoUABrowsePath.Create: _UABrowsePath;
begin
  Result := CreateComObject(CLASS_UABrowsePath) as _UABrowsePath;
end;

class function CoUABrowsePath.CreateRemote(const MachineName: string): _UABrowsePath;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UABrowsePath) as _UABrowsePath;
end;

procedure TUABrowsePath.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{0FC7DFD3-0C59-46D2-BEDD-9514964943CF}';
    IntfIID:   '{36B8484E-1E5B-4D82-B542-787AC6FE74DA}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUABrowsePath.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UABrowsePath;
  end;
end;

procedure TUABrowsePath.ConnectTo(svrIntf: _UABrowsePath);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUABrowsePath.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUABrowsePath.GetDefaultInterface: _UABrowsePath;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUABrowsePath.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUABrowsePath.Destroy;
begin
  inherited Destroy;
end;

function TUABrowsePath.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUABrowsePath.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUABrowsePath.Get_Elements: _UABrowsePathElementCollection;
begin
  Result := DefaultInterface.Elements;
end;

procedure TUABrowsePath._Set_Elements(const pRetVal: _UABrowsePathElementCollection);
begin
  DefaultInterface.Elements := pRetVal;
end;

function TUABrowsePath.Get_StartingNodeDescriptor: _UANodeDescriptor;
begin
  Result := DefaultInterface.StartingNodeDescriptor;
end;

procedure TUABrowsePath._Set_StartingNodeDescriptor(const pRetVal: _UANodeDescriptor);
begin
  DefaultInterface.StartingNodeDescriptor := pRetVal;
end;

function TUABrowsePath.Get_StartingNodeId: _UANodeId;
begin
  Result := DefaultInterface.StartingNodeId;
end;

procedure TUABrowsePath._Set_StartingNodeId(const pRetVal: _UANodeId);
begin
  DefaultInterface.StartingNodeId := pRetVal;
end;

function TUABrowsePath.Get_IsEmpty: WordBool;
begin
  Result := DefaultInterface.IsEmpty;
end;

function TUABrowsePath.Get_IsNull: WordBool;
begin
  Result := DefaultInterface.IsNull;
end;

function TUABrowsePath.Get_Length: Integer;
begin
  Result := DefaultInterface.Length;
end;

function TUABrowsePath.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUABrowsePath.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUABrowsePath.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUABrowsePath.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

procedure TUABrowsePath.AppendElement(element: OleVariant);
begin
  DefaultInterface.AppendElement(element);
end;

procedure TUABrowsePath.AppendRelative(more: OleVariant);
begin
  DefaultInterface.AppendRelative(more);
end;

procedure TUABrowsePath.Combine(const more: WideString; const DefaultNamespaceUriString: WideString);
begin
  DefaultInterface.Combine(more, DefaultNamespaceUriString);
end;

function TUABrowsePath.Flatten: _UABrowsePath;
begin
  Result := DefaultInterface.Flatten;
end;

function TUABrowsePath.format(const DefaultNamespaceUriString: WideString): WideString;
begin
  Result := DefaultInterface.format(DefaultNamespaceUriString);
end;

function TUABrowsePath.GetLastElement: _UABrowsePathElement;
begin
  Result := DefaultInterface.GetLastElement;
end;

function TUABrowsePath.ToUANodeDescriptor: _UANodeDescriptor;
begin
  Result := DefaultInterface.ToUANodeDescriptor;
end;

function TUABrowsePath.TryAppendRelative(ParsingFlags: UABrowsePathParsingFlags; 
                                         const more: WideString; 
                                         const DefaultNamespaceUriString: WideString): _StringParsingError;
begin
  Result := DefaultInterface.TryAppendRelative(ParsingFlags, more, DefaultNamespaceUriString);
end;

function TUABrowsePath.TryCombine(ParsingFlags: UABrowsePathParsingFlags; const more: WideString; 
                                  const DefaultNamespaceUriString: WideString): _StringParsingError;
begin
  Result := DefaultInterface.TryCombine(ParsingFlags, more, DefaultNamespaceUriString);
end;

class function CoUABrowsePathElement.Create: _UABrowsePathElement;
begin
  Result := CreateComObject(CLASS_UABrowsePathElement) as _UABrowsePathElement;
end;

class function CoUABrowsePathElement.CreateRemote(const MachineName: string): _UABrowsePathElement;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UABrowsePathElement) as _UABrowsePathElement;
end;

procedure TUABrowsePathElement.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{3CE3E988-805D-42AF-AC15-974D93E91240}';
    IntfIID:   '{F78C4C94-2D2D-4DCC-BAFF-68A86AD33627}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUABrowsePathElement.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UABrowsePathElement;
  end;
end;

procedure TUABrowsePathElement.ConnectTo(svrIntf: _UABrowsePathElement);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUABrowsePathElement.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUABrowsePathElement.GetDefaultInterface: _UABrowsePathElement;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUABrowsePathElement.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUABrowsePathElement.Destroy;
begin
  inherited Destroy;
end;

function TUABrowsePathElement.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUABrowsePathElement.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUABrowsePathElement.Get_ElementType: UABrowsePathElementType;
begin
  Result := DefaultInterface.ElementType;
end;

procedure TUABrowsePathElement.Set_ElementType(pRetVal: UABrowsePathElementType);
begin
  DefaultInterface.ElementType := pRetVal;
end;

function TUABrowsePathElement.Get_IncludeSubtypes: WordBool;
begin
  Result := DefaultInterface.IncludeSubtypes;
end;

procedure TUABrowsePathElement.Set_IncludeSubtypes(pRetVal: WordBool);
begin
  DefaultInterface.IncludeSubtypes := pRetVal;
end;

function TUABrowsePathElement.Get_IsConfigured: WordBool;
begin
  Result := DefaultInterface.IsConfigured;
end;

function TUABrowsePathElement.Get_IsNull: WordBool;
begin
  Result := DefaultInterface.IsNull;
end;

function TUABrowsePathElement.Get_IsSimple: WordBool;
begin
  Result := DefaultInterface.IsSimple;
end;

function TUABrowsePathElement.Get_ReferenceIsInverse: WordBool;
begin
  Result := DefaultInterface.ReferenceIsInverse;
end;

function TUABrowsePathElement.Get_ReferenceTypeImplied: WordBool;
begin
  Result := DefaultInterface.ReferenceTypeImplied;
end;

function TUABrowsePathElement.Get_ReferenceTypeId: _UANodeId;
begin
  Result := DefaultInterface.ReferenceTypeId;
end;

procedure TUABrowsePathElement._Set_ReferenceTypeId(const pRetVal: _UANodeId);
begin
  DefaultInterface.ReferenceTypeId := pRetVal;
end;

function TUABrowsePathElement.Get_TargetName: _UAQualifiedName;
begin
  Result := DefaultInterface.TargetName;
end;

procedure TUABrowsePathElement._Set_TargetName(const pRetVal: _UAQualifiedName);
begin
  DefaultInterface.TargetName := pRetVal;
end;

function TUABrowsePathElement.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUABrowsePathElement.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUABrowsePathElement.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUABrowsePathElement.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUABrowsePathElement.format(const DefaultNamespaceUriString: WideString): WideString;
begin
  Result := DefaultInterface.format(DefaultNamespaceUriString);
end;

class function CoUABrowsePathElementCollection.Create: _UABrowsePathElementCollection;
begin
  Result := CreateComObject(CLASS_UABrowsePathElementCollection) as _UABrowsePathElementCollection;
end;

class function CoUABrowsePathElementCollection.CreateRemote(const MachineName: string): _UABrowsePathElementCollection;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UABrowsePathElementCollection) as _UABrowsePathElementCollection;
end;

procedure TUABrowsePathElementCollection.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{C693BD29-7C2B-4A89-86FB-216EBFDDF14D}';
    IntfIID:   '{3EEAC651-8E16-46E2-A07B-ADE95F8EC36F}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUABrowsePathElementCollection.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UABrowsePathElementCollection;
  end;
end;

procedure TUABrowsePathElementCollection.ConnectTo(svrIntf: _UABrowsePathElementCollection);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUABrowsePathElementCollection.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUABrowsePathElementCollection.GetDefaultInterface: _UABrowsePathElementCollection;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUABrowsePathElementCollection.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUABrowsePathElementCollection.Destroy;
begin
  inherited Destroy;
end;

function TUABrowsePathElementCollection.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUABrowsePathElementCollection.Get_Item(index: Integer): _UABrowsePathElement;
begin
  Result := DefaultInterface.Item[index];
end;

procedure TUABrowsePathElementCollection._Set_Item(index: Integer; 
                                                   const pRetVal: _UABrowsePathElement);
begin
  DefaultInterface.Item[index] := pRetVal;
end;

function TUABrowsePathElementCollection.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

function TUABrowsePathElementCollection.Get_IsSimple: WordBool;
begin
  Result := DefaultInterface.IsSimple;
end;

function TUABrowsePathElementCollection.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUABrowsePathElementCollection.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUABrowsePathElementCollection.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUABrowsePathElementCollection.GetEnumerator: IEnumVARIANT;
begin
  Result := DefaultInterface.GetEnumerator;
end;

procedure TUABrowsePathElementCollection.Add(Item: OleVariant);
begin
  DefaultInterface.Add(Item);
end;

procedure TUABrowsePathElementCollection.Clear;
begin
  DefaultInterface.Clear;
end;

function TUABrowsePathElementCollection.Contains(Item: OleVariant): WordBool;
begin
  Result := DefaultInterface.Contains(Item);
end;

function TUABrowsePathElementCollection.IndexOf(Item: OleVariant): Integer;
begin
  Result := DefaultInterface.IndexOf(Item);
end;

procedure TUABrowsePathElementCollection.Insert(index: Integer; Item: OleVariant);
begin
  DefaultInterface.Insert(index, Item);
end;

function TUABrowsePathElementCollection.Remove(Item: OleVariant): WordBool;
begin
  Result := DefaultInterface.Remove(Item);
end;

procedure TUABrowsePathElementCollection.RemoveAt(index: Integer);
begin
  DefaultInterface.RemoveAt(index);
end;

function TUABrowsePathElementCollection.CommonPrefix(collection2: OleVariant): _UABrowsePathElementCollection;
begin
  Result := DefaultInterface.CommonPrefix(collection2);
end;

function TUABrowsePathElementCollection.CommonPrefixLength(collection2: OleVariant): Integer;
begin
  Result := DefaultInterface.CommonPrefixLength(collection2);
end;

function TUABrowsePathElementCollection.format(const DefaultNamespaceUriString: WideString): WideString;
begin
  Result := DefaultInterface.format(DefaultNamespaceUriString);
end;

function TUABrowsePathElementCollection.IsPrefix(prefix: OleVariant): WordBool;
begin
  Result := DefaultInterface.IsPrefix(prefix);
end;

function TUABrowsePathElementCollection.ToUAQualifiedNameCollection: _UAQualifiedNameCollection;
begin
  Result := DefaultInterface.ToUAQualifiedNameCollection;
end;

class function CoUAModelClientException.Create: _Exception2;
begin
  Result := CreateComObject(CLASS_UAModelClientException) as _Exception2;
end;

class function CoUAModelClientException.CreateRemote(const MachineName: string): _Exception2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAModelClientException) as _Exception2;
end;

procedure TUAModelClientException.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{6B87C067-8FB0-4C92-B28E-CB253135EBAB}';
    IntfIID:   '{45305271-B85F-42B7-8F35-F22EC9FEF8F2}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAModelClientException.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _Exception2;
  end;
end;

procedure TUAModelClientException.ConnectTo(svrIntf: _Exception2);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAModelClientException.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAModelClientException.GetDefaultInterface: _Exception2;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAModelClientException.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAModelClientException.Destroy;
begin
  inherited Destroy;
end;

function TUAModelClientException.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAModelClientException.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAModelClientException.Get_Message: WideString;
begin
  Result := DefaultInterface.Message;
end;

function TUAModelClientException.Get_StackTrace: WideString;
begin
  Result := DefaultInterface.StackTrace;
end;

function TUAModelClientException.Get_HelpLink: WideString;
begin
  Result := DefaultInterface.HelpLink;
end;

procedure TUAModelClientException.Set_HelpLink(const pRetVal: WideString);
begin
  DefaultInterface.HelpLink := pRetVal;
end;

function TUAModelClientException.Get_Source: WideString;
begin
  Result := DefaultInterface.Source;
end;

procedure TUAModelClientException.Set_Source(const pRetVal: WideString);
begin
  DefaultInterface.Source := pRetVal;
end;

function TUAModelClientException.Get_InnerException: _Exception;
begin
  Result := DefaultInterface.InnerException;
end;

function TUAModelClientException.Get_TargetSite: _MethodBase;
begin
  Result := DefaultInterface.TargetSite;
end;

function TUAModelClientException.Get_Data: _Dictionary;
begin
  Result := DefaultInterface.Data;
end;

function TUAModelClientException.Get_HResult: Integer;
begin
  Result := DefaultInterface.HResult;
end;

function TUAModelClientException.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAModelClientException.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAModelClientException.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAModelClientException.GetBaseException: _Exception;
begin
  Result := DefaultInterface.GetBaseException;
end;

procedure TUAModelClientException.GetObjectData(const Info: _SerializationInfo; 
                                                context: StreamingContext);
begin
  DefaultInterface.GetObjectData(Info, context);
end;

class function CoUAModellingException.Create: _Exception2;
begin
  Result := CreateComObject(CLASS_UAModellingException) as _Exception2;
end;

class function CoUAModellingException.CreateRemote(const MachineName: string): _Exception2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAModellingException) as _Exception2;
end;

procedure TUAModellingException.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{3D3215C5-3253-4116-82C9-B4B2EA17A5C6}';
    IntfIID:   '{45305271-B85F-42B7-8F35-F22EC9FEF8F2}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAModellingException.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _Exception2;
  end;
end;

procedure TUAModellingException.ConnectTo(svrIntf: _Exception2);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAModellingException.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAModellingException.GetDefaultInterface: _Exception2;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAModellingException.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAModellingException.Destroy;
begin
  inherited Destroy;
end;

function TUAModellingException.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAModellingException.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAModellingException.Get_Message: WideString;
begin
  Result := DefaultInterface.Message;
end;

function TUAModellingException.Get_StackTrace: WideString;
begin
  Result := DefaultInterface.StackTrace;
end;

function TUAModellingException.Get_HelpLink: WideString;
begin
  Result := DefaultInterface.HelpLink;
end;

procedure TUAModellingException.Set_HelpLink(const pRetVal: WideString);
begin
  DefaultInterface.HelpLink := pRetVal;
end;

function TUAModellingException.Get_Source: WideString;
begin
  Result := DefaultInterface.Source;
end;

procedure TUAModellingException.Set_Source(const pRetVal: WideString);
begin
  DefaultInterface.Source := pRetVal;
end;

function TUAModellingException.Get_InnerException: _Exception;
begin
  Result := DefaultInterface.InnerException;
end;

function TUAModellingException.Get_TargetSite: _MethodBase;
begin
  Result := DefaultInterface.TargetSite;
end;

function TUAModellingException.Get_Data: _Dictionary;
begin
  Result := DefaultInterface.Data;
end;

function TUAModellingException.Get_HResult: Integer;
begin
  Result := DefaultInterface.HResult;
end;

function TUAModellingException.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAModellingException.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAModellingException.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAModellingException.GetBaseException: _Exception;
begin
  Result := DefaultInterface.GetBaseException;
end;

procedure TUAModellingException.GetObjectData(const Info: _SerializationInfo; 
                                              context: StreamingContext);
begin
  DefaultInterface.GetObjectData(Info, context);
end;

class function CoUAModelNodeDescriptor.Create: _UAModelNodeDescriptor;
begin
  Result := CreateComObject(CLASS_UAModelNodeDescriptor) as _UAModelNodeDescriptor;
end;

class function CoUAModelNodeDescriptor.CreateRemote(const MachineName: string): _UAModelNodeDescriptor;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAModelNodeDescriptor) as _UAModelNodeDescriptor;
end;

procedure TUAModelNodeDescriptor.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{A5D29221-DD3E-4557-B253-1F5FE49E5441}';
    IntfIID:   '{44FDAC9F-DE45-452B-BF72-AD1F9D5D6428}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAModelNodeDescriptor.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAModelNodeDescriptor;
  end;
end;

procedure TUAModelNodeDescriptor.ConnectTo(svrIntf: _UAModelNodeDescriptor);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAModelNodeDescriptor.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAModelNodeDescriptor.GetDefaultInterface: _UAModelNodeDescriptor;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAModelNodeDescriptor.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAModelNodeDescriptor.Destroy;
begin
  inherited Destroy;
end;

function TUAModelNodeDescriptor.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAModelNodeDescriptor.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAModelNodeDescriptor.Get_endpointDescriptor: _UAEndpointDescriptor;
begin
  Result := DefaultInterface.endpointDescriptor;
end;

procedure TUAModelNodeDescriptor._Set_endpointDescriptor(const pRetVal: _UAEndpointDescriptor);
begin
  DefaultInterface.endpointDescriptor := pRetVal;
end;

function TUAModelNodeDescriptor.Get_IsNull: WordBool;
begin
  Result := DefaultInterface.IsNull;
end;

function TUAModelNodeDescriptor.Get_NodeDescriptor: _UANodeDescriptor;
begin
  Result := DefaultInterface.NodeDescriptor;
end;

procedure TUAModelNodeDescriptor._Set_NodeDescriptor(const pRetVal: _UANodeDescriptor);
begin
  DefaultInterface.NodeDescriptor := pRetVal;
end;

function TUAModelNodeDescriptor.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAModelNodeDescriptor.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAModelNodeDescriptor.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAModelNodeDescriptor.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUACertificateGroupElement.Create: _UACertificateGroupElement;
begin
  Result := CreateComObject(CLASS_UACertificateGroupElement) as _UACertificateGroupElement;
end;

class function CoUACertificateGroupElement.CreateRemote(const MachineName: string): _UACertificateGroupElement;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UACertificateGroupElement) as _UACertificateGroupElement;
end;

procedure TUACertificateGroupElement.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{39F5DE76-B10B-4CE9-96E4-FE15D8AA13B3}';
    IntfIID:   '{62DEFC9F-9E02-4C17-9790-3502A45ED5AE}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUACertificateGroupElement.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UACertificateGroupElement;
  end;
end;

procedure TUACertificateGroupElement.ConnectTo(svrIntf: _UACertificateGroupElement);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUACertificateGroupElement.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUACertificateGroupElement.GetDefaultInterface: _UACertificateGroupElement;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUACertificateGroupElement.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUACertificateGroupElement.Destroy;
begin
  inherited Destroy;
end;

function TUACertificateGroupElement.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUACertificateGroupElement.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUACertificateGroupElement.Get_certificateGroupId: _UANodeId;
begin
  Result := DefaultInterface.certificateGroupId;
end;

procedure TUACertificateGroupElement._Set_certificateGroupId(const pRetVal: _UANodeId);
begin
  DefaultInterface.certificateGroupId := pRetVal;
end;

function TUACertificateGroupElement.Get_CertificateTypeIds: _UANodeIdCollection;
begin
  Result := DefaultInterface.CertificateTypeIds;
end;

function TUACertificateGroupElement.Get_IsBuiltIn: WordBool;
begin
  Result := DefaultInterface.IsBuiltIn;
end;

procedure TUACertificateGroupElement.Set_IsBuiltIn(pRetVal: WordBool);
begin
  DefaultInterface.IsBuiltIn := pRetVal;
end;

function TUACertificateGroupElement.Get_Name: WideString;
begin
  Result := DefaultInterface.Name;
end;

procedure TUACertificateGroupElement.Set_Name(const pRetVal: WideString);
begin
  DefaultInterface.Name := pRetVal;
end;

function TUACertificateGroupElement.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUACertificateGroupElement.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUACertificateGroupElement.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUACertificateGroupElement.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUACertificateGroupElementCollection.Create: _UACertificateGroupElementCollection;
begin
  Result := CreateComObject(CLASS_UACertificateGroupElementCollection) as _UACertificateGroupElementCollection;
end;

class function CoUACertificateGroupElementCollection.CreateRemote(const MachineName: string): _UACertificateGroupElementCollection;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UACertificateGroupElementCollection) as _UACertificateGroupElementCollection;
end;

procedure TUACertificateGroupElementCollection.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{F2B52270-D7E5-4AAC-A0F5-791809DABD6D}';
    IntfIID:   '{73732AA9-0086-4073-8CE4-BE4A590D9F14}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUACertificateGroupElementCollection.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UACertificateGroupElementCollection;
  end;
end;

procedure TUACertificateGroupElementCollection.ConnectTo(svrIntf: _UACertificateGroupElementCollection);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUACertificateGroupElementCollection.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUACertificateGroupElementCollection.GetDefaultInterface: _UACertificateGroupElementCollection;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUACertificateGroupElementCollection.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUACertificateGroupElementCollection.Destroy;
begin
  inherited Destroy;
end;

function TUACertificateGroupElementCollection.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUACertificateGroupElementCollection.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUACertificateGroupElementCollection.Get_Item(key: OleVariant): _UACertificateGroupElement;
begin
  Result := DefaultInterface.Item[key];
end;

function TUACertificateGroupElementCollection.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

function TUACertificateGroupElementCollection.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUACertificateGroupElementCollection.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUACertificateGroupElementCollection.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUACertificateGroupElementCollection.GetEnumerator: IEnumVARIANT;
begin
  Result := DefaultInterface.GetEnumerator;
end;

procedure TUACertificateGroupElementCollection.Add(Item: OleVariant);
begin
  DefaultInterface.Add(Item);
end;

procedure TUACertificateGroupElementCollection.Clear;
begin
  DefaultInterface.Clear;
end;

function TUACertificateGroupElementCollection.Contains(Item: OleVariant): WordBool;
begin
  Result := DefaultInterface.Contains(Item);
end;

function TUACertificateGroupElementCollection.IndexOf(Item: OleVariant): Integer;
begin
  Result := DefaultInterface.IndexOf(Item);
end;

function TUACertificateGroupElementCollection.Remove(key: OleVariant): WordBool;
begin
  Result := DefaultInterface.Remove(key);
end;

procedure TUACertificateGroupElementCollection.RemoveAt(index: Integer);
begin
  DefaultInterface.RemoveAt(index);
end;

function TUACertificateGroupElementCollection.ToList: _ElasticVector;
begin
  Result := DefaultInterface.ToList;
end;

function TUACertificateGroupElementCollection.TryGetValue(key: OleVariant; out Item: OleVariant): WordBool;
begin
  Result := DefaultInterface.TryGetValue(key, Item);
end;

function TUACertificateGroupElementCollection.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUAAttributeOperand.Create: _UAAttributeOperand;
begin
  Result := CreateComObject(CLASS_UAAttributeOperand) as _UAAttributeOperand;
end;

class function CoUAAttributeOperand.CreateRemote(const MachineName: string): _UAAttributeOperand;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAAttributeOperand) as _UAAttributeOperand;
end;

procedure TUAAttributeOperand.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{4C056B9E-A83C-4BBD-AC19-7B9B8722141E}';
    IntfIID:   '{4E62FCC7-D7FB-4459-8BDD-AAC147F07630}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAAttributeOperand.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAAttributeOperand;
  end;
end;

procedure TUAAttributeOperand.ConnectTo(svrIntf: _UAAttributeOperand);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAAttributeOperand.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAAttributeOperand.GetDefaultInterface: _UAAttributeOperand;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAAttributeOperand.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAAttributeOperand.Destroy;
begin
  inherited Destroy;
end;

function TUAAttributeOperand.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAAttributeOperand.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAAttributeOperand.Get_TotalElements: Integer;
begin
  Result := DefaultInterface.TotalElements;
end;

function TUAAttributeOperand.Get_AliasName: WideString;
begin
  Result := DefaultInterface.AliasName;
end;

procedure TUAAttributeOperand.Set_AliasName(const pRetVal: WideString);
begin
  DefaultInterface.AliasName := pRetVal;
end;

function TUAAttributeOperand.Get_ArgumentString: WideString;
begin
  Result := DefaultInterface.ArgumentString;
end;

function TUAAttributeOperand.Get_AttributeId: UAAttributeId;
begin
  Result := DefaultInterface.AttributeId;
end;

procedure TUAAttributeOperand.Set_AttributeId(pRetVal: UAAttributeId);
begin
  DefaultInterface.AttributeId := pRetVal;
end;

function TUAAttributeOperand.Get_IndexRangeList: _UAIndexRangeList;
begin
  Result := DefaultInterface.IndexRangeList;
end;

procedure TUAAttributeOperand._Set_IndexRangeList(const pRetVal: _UAIndexRangeList);
begin
  DefaultInterface.IndexRangeList := pRetVal;
end;

function TUAAttributeOperand.Get_IsNull: WordBool;
begin
  Result := DefaultInterface.IsNull;
end;

function TUAAttributeOperand.Get_RelativePath: _UABrowsePathElementCollection;
begin
  Result := DefaultInterface.RelativePath;
end;

procedure TUAAttributeOperand._Set_RelativePath(const pRetVal: _UABrowsePathElementCollection);
begin
  DefaultInterface.RelativePath := pRetVal;
end;

function TUAAttributeOperand.Get_TypeId: _UANodeDescriptor;
begin
  Result := DefaultInterface.TypeId;
end;

procedure TUAAttributeOperand._Set_TypeId(const pRetVal: _UANodeDescriptor);
begin
  DefaultInterface.TypeId := pRetVal;
end;

function TUAAttributeOperand.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAAttributeOperand.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAAttributeOperand.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAAttributeOperand.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUAContentFilterElement.Create: _UAContentFilterElement;
begin
  Result := CreateComObject(CLASS_UAContentFilterElement) as _UAContentFilterElement;
end;

class function CoUAContentFilterElement.CreateRemote(const MachineName: string): _UAContentFilterElement;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAContentFilterElement) as _UAContentFilterElement;
end;

procedure TUAContentFilterElement.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{8338C5EA-B5A1-4941-B0CF-D7471B8FF80B}';
    IntfIID:   '{21B7FB6A-3D73-466C-8E32-C6F0DC41B0B0}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAContentFilterElement.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAContentFilterElement;
  end;
end;

procedure TUAContentFilterElement.ConnectTo(svrIntf: _UAContentFilterElement);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAContentFilterElement.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAContentFilterElement.GetDefaultInterface: _UAContentFilterElement;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAContentFilterElement.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAContentFilterElement.Destroy;
begin
  inherited Destroy;
end;

function TUAContentFilterElement.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAContentFilterElement.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAContentFilterElement.Get_TotalElements: Integer;
begin
  Result := DefaultInterface.TotalElements;
end;

function TUAContentFilterElement.Get_FilterOperands: _UAFilterOperandCollection;
begin
  Result := DefaultInterface.FilterOperands;
end;

procedure TUAContentFilterElement._Set_FilterOperands(const pRetVal: _UAFilterOperandCollection);
begin
  DefaultInterface.FilterOperands := pRetVal;
end;

function TUAContentFilterElement.Get_FilterOperator: UAFilterOperator;
begin
  Result := DefaultInterface.FilterOperator;
end;

procedure TUAContentFilterElement.Set_FilterOperator(pRetVal: UAFilterOperator);
begin
  DefaultInterface.FilterOperator := pRetVal;
end;

function TUAContentFilterElement.Get_IsCyclic: WordBool;
begin
  Result := DefaultInterface.IsCyclic;
end;

function TUAContentFilterElement.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAContentFilterElement.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAContentFilterElement.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAContentFilterElement.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUAFilterOperand.Create: _UAFilterOperand;
begin
  Result := CreateComObject(CLASS_UAFilterOperand) as _UAFilterOperand;
end;

class function CoUAFilterOperand.CreateRemote(const MachineName: string): _UAFilterOperand;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAFilterOperand) as _UAFilterOperand;
end;

procedure TUAFilterOperand.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{92DE68FE-D1B6-4B4C-B237-9ECA22CE7298}';
    IntfIID:   '{AB8DFD6E-2992-43A1-80A8-95D8A8CE77A3}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAFilterOperand.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAFilterOperand;
  end;
end;

procedure TUAFilterOperand.ConnectTo(svrIntf: _UAFilterOperand);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAFilterOperand.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAFilterOperand.GetDefaultInterface: _UAFilterOperand;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAFilterOperand.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAFilterOperand.Destroy;
begin
  inherited Destroy;
end;

function TUAFilterOperand.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAFilterOperand.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAFilterOperand.Get_TotalElements: Integer;
begin
  Result := DefaultInterface.TotalElements;
end;

function TUAFilterOperand.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAFilterOperand.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAFilterOperand.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAFilterOperand.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUAFilterOperandCollection.Create: _UAFilterOperandCollection;
begin
  Result := CreateComObject(CLASS_UAFilterOperandCollection) as _UAFilterOperandCollection;
end;

class function CoUAFilterOperandCollection.CreateRemote(const MachineName: string): _UAFilterOperandCollection;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAFilterOperandCollection) as _UAFilterOperandCollection;
end;

procedure TUAFilterOperandCollection.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{0D655E18-5E53-4869-809C-35DFFC307F8A}';
    IntfIID:   '{A95C464A-D2E7-4C2A-B018-49B110A31A47}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAFilterOperandCollection.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAFilterOperandCollection;
  end;
end;

procedure TUAFilterOperandCollection.ConnectTo(svrIntf: _UAFilterOperandCollection);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAFilterOperandCollection.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAFilterOperandCollection.GetDefaultInterface: _UAFilterOperandCollection;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAFilterOperandCollection.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAFilterOperandCollection.Destroy;
begin
  inherited Destroy;
end;

function TUAFilterOperandCollection.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAFilterOperandCollection.Get_Item(index: Integer): _UAFilterOperand;
begin
  Result := DefaultInterface.Item[index];
end;

procedure TUAFilterOperandCollection._Set_Item(index: Integer; const pRetVal: _UAFilterOperand);
begin
  DefaultInterface.Item[index] := pRetVal;
end;

function TUAFilterOperandCollection.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

function TUAFilterOperandCollection.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAFilterOperandCollection.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAFilterOperandCollection.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAFilterOperandCollection.GetEnumerator: IEnumVARIANT;
begin
  Result := DefaultInterface.GetEnumerator;
end;

procedure TUAFilterOperandCollection.Add(Item: OleVariant);
begin
  DefaultInterface.Add(Item);
end;

procedure TUAFilterOperandCollection.Clear;
begin
  DefaultInterface.Clear;
end;

function TUAFilterOperandCollection.Contains(Item: OleVariant): WordBool;
begin
  Result := DefaultInterface.Contains(Item);
end;

function TUAFilterOperandCollection.IndexOf(Item: OleVariant): Integer;
begin
  Result := DefaultInterface.IndexOf(Item);
end;

procedure TUAFilterOperandCollection.Insert(index: Integer; Item: OleVariant);
begin
  DefaultInterface.Insert(index, Item);
end;

function TUAFilterOperandCollection.Remove(Item: OleVariant): WordBool;
begin
  Result := DefaultInterface.Remove(Item);
end;

procedure TUAFilterOperandCollection.RemoveAt(index: Integer);
begin
  DefaultInterface.RemoveAt(index);
end;

class function CoUALiteralOperand.Create: _UALiteralOperand;
begin
  Result := CreateComObject(CLASS_UALiteralOperand) as _UALiteralOperand;
end;

class function CoUALiteralOperand.CreateRemote(const MachineName: string): _UALiteralOperand;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UALiteralOperand) as _UALiteralOperand;
end;

procedure TUALiteralOperand.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{00162DEF-2CDA-407D-86A9-95BC397CC99A}';
    IntfIID:   '{06E71EF6-10D6-4978-A8FA-89ABA53238A1}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUALiteralOperand.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UALiteralOperand;
  end;
end;

procedure TUALiteralOperand.ConnectTo(svrIntf: _UALiteralOperand);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUALiteralOperand.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUALiteralOperand.GetDefaultInterface: _UALiteralOperand;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUALiteralOperand.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUALiteralOperand.Destroy;
begin
  inherited Destroy;
end;

function TUALiteralOperand.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUALiteralOperand.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUALiteralOperand.Get_TotalElements: Integer;
begin
  Result := DefaultInterface.TotalElements;
end;

function TUALiteralOperand.Get_ValueType: _Type;
begin
  Result := DefaultInterface.ValueType;
end;

procedure TUALiteralOperand._Set_ValueType(const pRetVal: _Type);
begin
  DefaultInterface.ValueType := pRetVal;
end;

function TUALiteralOperand.Get_ValueTypeFullName: WideString;
begin
  Result := DefaultInterface.ValueTypeFullName;
end;

procedure TUALiteralOperand.Set_ValueTypeFullName(const pRetVal: WideString);
begin
  DefaultInterface.ValueTypeFullName := pRetVal;
end;

function TUALiteralOperand.Get_ValueTypeCode: TypeCode;
begin
  Result := DefaultInterface.ValueTypeCode;
end;

procedure TUALiteralOperand.Set_ValueTypeCode(pRetVal: TypeCode);
begin
  DefaultInterface.ValueTypeCode := pRetVal;
end;

function TUALiteralOperand.Get_value: OleVariant;
begin
  Result := DefaultInterface.value;
end;

procedure TUALiteralOperand._Set_value(pRetVal: OleVariant);
begin
  DefaultInterface.value := pRetVal;
end;

function TUALiteralOperand.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUALiteralOperand.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUALiteralOperand.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUALiteralOperand.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

procedure TUALiteralOperand.SetValue(value: OleVariant);
begin
  DefaultInterface.SetValue(value);
end;

class function CoUASimpleAttributeOperand.Create: _UASimpleAttributeOperand;
begin
  Result := CreateComObject(CLASS_UASimpleAttributeOperand) as _UASimpleAttributeOperand;
end;

class function CoUASimpleAttributeOperand.CreateRemote(const MachineName: string): _UASimpleAttributeOperand;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UASimpleAttributeOperand) as _UASimpleAttributeOperand;
end;

procedure TUASimpleAttributeOperand.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{6759FEE2-9F5D-4B48-B0C8-B863BACDBFDF}';
    IntfIID:   '{0191D5CB-B5F2-4954-BE0A-1E02EE7B10B2}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUASimpleAttributeOperand.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UASimpleAttributeOperand;
  end;
end;

procedure TUASimpleAttributeOperand.ConnectTo(svrIntf: _UASimpleAttributeOperand);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUASimpleAttributeOperand.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUASimpleAttributeOperand.GetDefaultInterface: _UASimpleAttributeOperand;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUASimpleAttributeOperand.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUASimpleAttributeOperand.Destroy;
begin
  inherited Destroy;
end;

function TUASimpleAttributeOperand.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUASimpleAttributeOperand.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUASimpleAttributeOperand.Get_TotalElements: Integer;
begin
  Result := DefaultInterface.TotalElements;
end;

function TUASimpleAttributeOperand.Get_ArgumentString: WideString;
begin
  Result := DefaultInterface.ArgumentString;
end;

function TUASimpleAttributeOperand.Get_AttributeId: UAAttributeId;
begin
  Result := DefaultInterface.AttributeId;
end;

procedure TUASimpleAttributeOperand.Set_AttributeId(pRetVal: UAAttributeId);
begin
  DefaultInterface.AttributeId := pRetVal;
end;

function TUASimpleAttributeOperand.Get_IndexRangeList: _UAIndexRangeList;
begin
  Result := DefaultInterface.IndexRangeList;
end;

procedure TUASimpleAttributeOperand._Set_IndexRangeList(const pRetVal: _UAIndexRangeList);
begin
  DefaultInterface.IndexRangeList := pRetVal;
end;

function TUASimpleAttributeOperand.Get_IsNull: WordBool;
begin
  Result := DefaultInterface.IsNull;
end;

function TUASimpleAttributeOperand.Get_QualifiedNames: _UAQualifiedNameCollection;
begin
  Result := DefaultInterface.QualifiedNames;
end;

procedure TUASimpleAttributeOperand._Set_QualifiedNames(const pRetVal: _UAQualifiedNameCollection);
begin
  DefaultInterface.QualifiedNames := pRetVal;
end;

function TUASimpleAttributeOperand.Get_TypeId: _UANodeDescriptor;
begin
  Result := DefaultInterface.TypeId;
end;

procedure TUASimpleAttributeOperand._Set_TypeId(const pRetVal: _UANodeDescriptor);
begin
  DefaultInterface.TypeId := pRetVal;
end;

function TUASimpleAttributeOperand.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUASimpleAttributeOperand.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUASimpleAttributeOperand.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUASimpleAttributeOperand.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUASimpleAttributeOperand.ToUAAttributeField: _UAAttributeField;
begin
  Result := DefaultInterface.ToUAAttributeField;
end;

class function CoUASimpleAttributeOperandCollection.Create: _UASimpleAttributeOperandCollection;
begin
  Result := CreateComObject(CLASS_UASimpleAttributeOperandCollection) as _UASimpleAttributeOperandCollection;
end;

class function CoUASimpleAttributeOperandCollection.CreateRemote(const MachineName: string): _UASimpleAttributeOperandCollection;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UASimpleAttributeOperandCollection) as _UASimpleAttributeOperandCollection;
end;

procedure TUASimpleAttributeOperandCollection.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{4798AB3C-0F5B-4E53-B731-BADD17D29C1A}';
    IntfIID:   '{62A9E7AA-6107-482F-A884-122564599088}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUASimpleAttributeOperandCollection.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UASimpleAttributeOperandCollection;
  end;
end;

procedure TUASimpleAttributeOperandCollection.ConnectTo(svrIntf: _UASimpleAttributeOperandCollection);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUASimpleAttributeOperandCollection.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUASimpleAttributeOperandCollection.GetDefaultInterface: _UASimpleAttributeOperandCollection;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUASimpleAttributeOperandCollection.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUASimpleAttributeOperandCollection.Destroy;
begin
  inherited Destroy;
end;

function TUASimpleAttributeOperandCollection.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUASimpleAttributeOperandCollection.Get_Item(index: Integer): _UASimpleAttributeOperand;
begin
  Result := DefaultInterface.Item[index];
end;

procedure TUASimpleAttributeOperandCollection._Set_Item(index: Integer; 
                                                        const pRetVal: _UASimpleAttributeOperand);
begin
  DefaultInterface.Item[index] := pRetVal;
end;

function TUASimpleAttributeOperandCollection.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

function TUASimpleAttributeOperandCollection.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUASimpleAttributeOperandCollection.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUASimpleAttributeOperandCollection.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUASimpleAttributeOperandCollection.GetEnumerator: IEnumVARIANT;
begin
  Result := DefaultInterface.GetEnumerator;
end;

procedure TUASimpleAttributeOperandCollection.Add(Item: OleVariant);
begin
  DefaultInterface.Add(Item);
end;

procedure TUASimpleAttributeOperandCollection.Clear;
begin
  DefaultInterface.Clear;
end;

function TUASimpleAttributeOperandCollection.Contains(Item: OleVariant): WordBool;
begin
  Result := DefaultInterface.Contains(Item);
end;

function TUASimpleAttributeOperandCollection.IndexOf(Item: OleVariant): Integer;
begin
  Result := DefaultInterface.IndexOf(Item);
end;

procedure TUASimpleAttributeOperandCollection.Insert(index: Integer; Item: OleVariant);
begin
  DefaultInterface.Insert(index, Item);
end;

function TUASimpleAttributeOperandCollection.Remove(Item: OleVariant): WordBool;
begin
  Result := DefaultInterface.Remove(Item);
end;

procedure TUASimpleAttributeOperandCollection.RemoveAt(index: Integer);
begin
  DefaultInterface.RemoveAt(index);
end;

class function CoUAClientAdaptableParameters.Create: _UAClientAdaptableParameters;
begin
  Result := CreateComObject(CLASS_UAClientAdaptableParameters) as _UAClientAdaptableParameters;
end;

class function CoUAClientAdaptableParameters.CreateRemote(const MachineName: string): _UAClientAdaptableParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAClientAdaptableParameters) as _UAClientAdaptableParameters;
end;

procedure TUAClientAdaptableParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{8708E22B-13A0-4D0C-B9FB-845BC0ABBBAE}';
    IntfIID:   '{D2A18F5C-6863-4B26-89ED-0D81F4A2B7C6}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAClientAdaptableParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAClientAdaptableParameters;
  end;
end;

procedure TUAClientAdaptableParameters.ConnectTo(svrIntf: _UAClientAdaptableParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAClientAdaptableParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAClientAdaptableParameters.GetDefaultInterface: _UAClientAdaptableParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAClientAdaptableParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAClientAdaptableParameters.Destroy;
begin
  inherited Destroy;
end;

function TUAClientAdaptableParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAClientAdaptableParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAClientAdaptableParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUAClientAdaptableParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUAClientAdaptableParameters.Get_DiscoveryParameters: _UADiscoveryParameters;
begin
  Result := DefaultInterface.DiscoveryParameters;
end;

procedure TUAClientAdaptableParameters._Set_DiscoveryParameters(const pRetVal: _UADiscoveryParameters);
begin
  DefaultInterface.DiscoveryParameters := pRetVal;
end;

function TUAClientAdaptableParameters.Get_HostParameters: _UAHostParameters;
begin
  Result := DefaultInterface.HostParameters;
end;

procedure TUAClientAdaptableParameters._Set_HostParameters(const pRetVal: _UAHostParameters);
begin
  DefaultInterface.HostParameters := pRetVal;
end;

function TUAClientAdaptableParameters.Get_MonitoredItemParameters: _UAClientMonitoredItemParameters;
begin
  Result := DefaultInterface.MonitoredItemParameters;
end;

procedure TUAClientAdaptableParameters._Set_MonitoredItemParameters(const pRetVal: _UAClientMonitoredItemParameters);
begin
  DefaultInterface.MonitoredItemParameters := pRetVal;
end;

function TUAClientAdaptableParameters.Get_SessionParameters: _UASmartClientSessionParameters;
begin
  Result := DefaultInterface.SessionParameters;
end;

procedure TUAClientAdaptableParameters._Set_SessionParameters(const pRetVal: _UASmartClientSessionParameters);
begin
  DefaultInterface.SessionParameters := pRetVal;
end;

function TUAClientAdaptableParameters.Get_SubscriptionParameters: _UAClientSubscriptionParameters;
begin
  Result := DefaultInterface.SubscriptionParameters;
end;

procedure TUAClientAdaptableParameters._Set_SubscriptionParameters(const pRetVal: _UAClientSubscriptionParameters);
begin
  DefaultInterface.SubscriptionParameters := pRetVal;
end;

function TUAClientAdaptableParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAClientAdaptableParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAClientAdaptableParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAClientAdaptableParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

procedure TUAClientAdaptableParameters.Reset;
begin
  DefaultInterface.Reset;
end;

class function CoUAClientServerEngineParameters.Create: _UAClientServerEngineParameters;
begin
  Result := CreateComObject(CLASS_UAClientServerEngineParameters) as _UAClientServerEngineParameters;
end;

class function CoUAClientServerEngineParameters.CreateRemote(const MachineName: string): _UAClientServerEngineParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAClientServerEngineParameters) as _UAClientServerEngineParameters;
end;

procedure TUAClientServerEngineParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{CC6B49C1-A40F-42EE-AA83-097EA654D3EA}';
    IntfIID:   '{4C1C75BD-D564-402C-B399-9F000B297367}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAClientServerEngineParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAClientServerEngineParameters;
  end;
end;

procedure TUAClientServerEngineParameters.ConnectTo(svrIntf: _UAClientServerEngineParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAClientServerEngineParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAClientServerEngineParameters.GetDefaultInterface: _UAClientServerEngineParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAClientServerEngineParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAClientServerEngineParameters.Destroy;
begin
  inherited Destroy;
end;

function TUAClientServerEngineParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAClientServerEngineParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAClientServerEngineParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUAClientServerEngineParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUAClientServerEngineParameters.Get_CertificateAcceptancePolicy: _UACertificateAcceptancePolicy;
begin
  Result := DefaultInterface.CertificateAcceptancePolicy;
end;

procedure TUAClientServerEngineParameters._Set_CertificateAcceptancePolicy(const pRetVal: _UACertificateAcceptancePolicy);
begin
  DefaultInterface.CertificateAcceptancePolicy := pRetVal;
end;

function TUAClientServerEngineParameters.Get_ConfigurationPropertyOverrides: _StringObjectDictionary;
begin
  Result := DefaultInterface.ConfigurationPropertyOverrides;
end;

procedure TUAClientServerEngineParameters._Set_ConfigurationPropertyOverrides(const pRetVal: _StringObjectDictionary);
begin
  DefaultInterface.ConfigurationPropertyOverrides := pRetVal;
end;

function TUAClientServerEngineParameters.Get_ConfigurationSources: UAConfigurationSources;
begin
  Result := DefaultInterface.ConfigurationSources;
end;

procedure TUAClientServerEngineParameters.Set_ConfigurationSources(pRetVal: UAConfigurationSources);
begin
  DefaultInterface.ConfigurationSources := pRetVal;
end;

function TUAClientServerEngineParameters.Get_DebuggerDetectionOverride: Sign;
begin
  Result := DefaultInterface.DebuggerDetectionOverride;
end;

procedure TUAClientServerEngineParameters.Set_DebuggerDetectionOverride(pRetVal: Sign);
begin
  DefaultInterface.DebuggerDetectionOverride := pRetVal;
end;

function TUAClientServerEngineParameters.Get_gdsEndpointDescriptor: _UAEndpointDescriptor;
begin
  Result := DefaultInterface.gdsEndpointDescriptor;
end;

procedure TUAClientServerEngineParameters._Set_gdsEndpointDescriptor(const pRetVal: _UAEndpointDescriptor);
begin
  DefaultInterface.gdsEndpointDescriptor := pRetVal;
end;

function TUAClientServerEngineParameters.Get_RetrialDelay: Integer;
begin
  Result := DefaultInterface.RetrialDelay;
end;

procedure TUAClientServerEngineParameters.Set_RetrialDelay(pRetVal: Integer);
begin
  DefaultInterface.RetrialDelay := pRetVal;
end;

function TUAClientServerEngineParameters.Get_ReconnectionPeriod: Integer;
begin
  Result := DefaultInterface.ReconnectionPeriod;
end;

procedure TUAClientServerEngineParameters.Set_ReconnectionPeriod(pRetVal: Integer);
begin
  DefaultInterface.ReconnectionPeriod := pRetVal;
end;

function TUAClientServerEngineParameters.Get_UserInteractionParameters: _UAUserInteractionParameters;
begin
  Result := DefaultInterface.UserInteractionParameters;
end;

procedure TUAClientServerEngineParameters._Set_UserInteractionParameters(const pRetVal: _UAUserInteractionParameters);
begin
  DefaultInterface.UserInteractionParameters := pRetVal;
end;

function TUAClientServerEngineParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAClientServerEngineParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAClientServerEngineParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAClientServerEngineParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

procedure TUAClientServerEngineParameters.Reset;
begin
  DefaultInterface.Reset;
end;

class function CoEasyUAClientInstanceParameters.Create: _EasyUAClientInstanceParameters;
begin
  Result := CreateComObject(CLASS_EasyUAClientInstanceParameters) as _EasyUAClientInstanceParameters;
end;

class function CoEasyUAClientInstanceParameters.CreateRemote(const MachineName: string): _EasyUAClientInstanceParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EasyUAClientInstanceParameters) as _EasyUAClientInstanceParameters;
end;

procedure TEasyUAClientInstanceParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{BC714148-D729-4F62-9D1E-BF4CF1950553}';
    IntfIID:   '{0B31304A-2B75-4F8E-B46E-321CE71879EC}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TEasyUAClientInstanceParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _EasyUAClientInstanceParameters;
  end;
end;

procedure TEasyUAClientInstanceParameters.ConnectTo(svrIntf: _EasyUAClientInstanceParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TEasyUAClientInstanceParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TEasyUAClientInstanceParameters.GetDefaultInterface: _EasyUAClientInstanceParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TEasyUAClientInstanceParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TEasyUAClientInstanceParameters.Destroy;
begin
  inherited Destroy;
end;

function TEasyUAClientInstanceParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TEasyUAClientInstanceParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TEasyUAClientInstanceParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TEasyUAClientInstanceParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TEasyUAClientInstanceParameters.Get_PluginConfigurations: _ConfigurationPartCollection;
begin
  Result := DefaultInterface.PluginConfigurations;
end;

procedure TEasyUAClientInstanceParameters._Set_PluginConfigurations(const pRetVal: _ConfigurationPartCollection);
begin
  DefaultInterface.PluginConfigurations := pRetVal;
end;

function TEasyUAClientInstanceParameters.Get_PluginSetups: _PluginSetupCollection;
begin
  Result := DefaultInterface.PluginSetups;
end;

procedure TEasyUAClientInstanceParameters._Set_PluginSetups(const pRetVal: _PluginSetupCollection);
begin
  DefaultInterface.PluginSetups := pRetVal;
end;

function TEasyUAClientInstanceParameters.Get_DiscoveryHost: WideString;
begin
  Result := DefaultInterface.DiscoveryHost;
end;

procedure TEasyUAClientInstanceParameters.Set_DiscoveryHost(const pRetVal: WideString);
begin
  DefaultInterface.DiscoveryHost := pRetVal;
end;

function TEasyUAClientInstanceParameters.Get_EnableModelCaching: WordBool;
begin
  Result := DefaultInterface.EnableModelCaching;
end;

procedure TEasyUAClientInstanceParameters.Set_EnableModelCaching(pRetVal: WordBool);
begin
  DefaultInterface.EnableModelCaching := pRetVal;
end;

function TEasyUAClientInstanceParameters.Get_Mode: _EasyUAClientMode;
begin
  Result := DefaultInterface.Mode;
end;

procedure TEasyUAClientInstanceParameters._Set_Mode(const pRetVal: _EasyUAClientMode);
begin
  DefaultInterface.Mode := pRetVal;
end;

function TEasyUAClientInstanceParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TEasyUAClientInstanceParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TEasyUAClientInstanceParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TEasyUAClientInstanceParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

procedure TEasyUAClientInstanceParameters.Reset;
begin
  DefaultInterface.Reset;
end;

class function CoEasyUAClientMode.Create: _EasyUAClientMode;
begin
  Result := CreateComObject(CLASS_EasyUAClientMode) as _EasyUAClientMode;
end;

class function CoEasyUAClientMode.CreateRemote(const MachineName: string): _EasyUAClientMode;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EasyUAClientMode) as _EasyUAClientMode;
end;

procedure TEasyUAClientMode.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{CD5BB489-4E9A-49D9-9F07-8AA0385E93D0}';
    IntfIID:   '{298B87ED-7C5B-4FA0-BD41-8B0A88F8BAD3}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TEasyUAClientMode.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _EasyUAClientMode;
  end;
end;

procedure TEasyUAClientMode.ConnectTo(svrIntf: _EasyUAClientMode);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TEasyUAClientMode.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TEasyUAClientMode.GetDefaultInterface: _EasyUAClientMode;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TEasyUAClientMode.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TEasyUAClientMode.Destroy;
begin
  inherited Destroy;
end;

function TEasyUAClientMode.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TEasyUAClientMode.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TEasyUAClientMode.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TEasyUAClientMode.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TEasyUAClientMode.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TEasyUAClientMode.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TEasyUAClientMode.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TEasyUAClientMode.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoEasyUAClientSharedParameters.Create: _EasyUAClientSharedParameters;
begin
  Result := CreateComObject(CLASS_EasyUAClientSharedParameters) as _EasyUAClientSharedParameters;
end;

class function CoEasyUAClientSharedParameters.CreateRemote(const MachineName: string): _EasyUAClientSharedParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EasyUAClientSharedParameters) as _EasyUAClientSharedParameters;
end;

procedure TEasyUAClientSharedParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{F77A673B-9C49-4511-BDA8-97CA0DD1F48F}';
    IntfIID:   '{E32CDBD7-D9B9-4A5C-BC91-86E45BC68F70}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TEasyUAClientSharedParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _EasyUAClientSharedParameters;
  end;
end;

procedure TEasyUAClientSharedParameters.ConnectTo(svrIntf: _EasyUAClientSharedParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TEasyUAClientSharedParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TEasyUAClientSharedParameters.GetDefaultInterface: _EasyUAClientSharedParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TEasyUAClientSharedParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TEasyUAClientSharedParameters.Destroy;
begin
  inherited Destroy;
end;

function TEasyUAClientSharedParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TEasyUAClientSharedParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TEasyUAClientSharedParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TEasyUAClientSharedParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TEasyUAClientSharedParameters.Get_PluginConfigurations: _ConfigurationPartCollection;
begin
  Result := DefaultInterface.PluginConfigurations;
end;

procedure TEasyUAClientSharedParameters._Set_PluginConfigurations(const pRetVal: _ConfigurationPartCollection);
begin
  DefaultInterface.PluginConfigurations := pRetVal;
end;

function TEasyUAClientSharedParameters.Get_PluginSetups: _PluginSetupCollection;
begin
  Result := DefaultInterface.PluginSetups;
end;

procedure TEasyUAClientSharedParameters._Set_PluginSetups(const pRetVal: _PluginSetupCollection);
begin
  DefaultInterface.PluginSetups := pRetVal;
end;

function TEasyUAClientSharedParameters.Get_EngineParameters: _EasyUAClientEngineParameters;
begin
  Result := DefaultInterface.EngineParameters;
end;

procedure TEasyUAClientSharedParameters._Set_EngineParameters(const pRetVal: _EasyUAClientEngineParameters);
begin
  DefaultInterface.EngineParameters := pRetVal;
end;

function TEasyUAClientSharedParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TEasyUAClientSharedParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TEasyUAClientSharedParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TEasyUAClientSharedParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

procedure TEasyUAClientSharedParameters.Reset;
begin
  DefaultInterface.Reset;
end;

class function CoUACertificateAcceptancePolicy.Create: _UACertificateAcceptancePolicy;
begin
  Result := CreateComObject(CLASS_UACertificateAcceptancePolicy) as _UACertificateAcceptancePolicy;
end;

class function CoUACertificateAcceptancePolicy.CreateRemote(const MachineName: string): _UACertificateAcceptancePolicy;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UACertificateAcceptancePolicy) as _UACertificateAcceptancePolicy;
end;

procedure TUACertificateAcceptancePolicy.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{2CBA7587-F230-4655-88A8-D14C05F3E470}';
    IntfIID:   '{52BE490E-DFCD-42A4-BCEA-1B6CC025E604}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUACertificateAcceptancePolicy.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UACertificateAcceptancePolicy;
  end;
end;

procedure TUACertificateAcceptancePolicy.ConnectTo(svrIntf: _UACertificateAcceptancePolicy);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUACertificateAcceptancePolicy.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUACertificateAcceptancePolicy.GetDefaultInterface: _UACertificateAcceptancePolicy;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUACertificateAcceptancePolicy.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUACertificateAcceptancePolicy.Destroy;
begin
  inherited Destroy;
end;

function TUACertificateAcceptancePolicy.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUACertificateAcceptancePolicy.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUACertificateAcceptancePolicy.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUACertificateAcceptancePolicy.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUACertificateAcceptancePolicy.Get_AcceptAnyCertificate: WordBool;
begin
  Result := DefaultInterface.AcceptAnyCertificate;
end;

procedure TUACertificateAcceptancePolicy.Set_AcceptAnyCertificate(pRetVal: WordBool);
begin
  DefaultInterface.AcceptAnyCertificate := pRetVal;
end;

function TUACertificateAcceptancePolicy.Get_AllowSha1SignedCertificates: WordBool;
begin
  Result := DefaultInterface.AllowSha1SignedCertificates;
end;

procedure TUACertificateAcceptancePolicy.Set_AllowSha1SignedCertificates(pRetVal: WordBool);
begin
  DefaultInterface.AllowSha1SignedCertificates := pRetVal;
end;

function TUACertificateAcceptancePolicy.Get_AllowUserAcceptCertificate: WordBool;
begin
  Result := DefaultInterface.AllowUserAcceptCertificate;
end;

procedure TUACertificateAcceptancePolicy.Set_AllowUserAcceptCertificate(pRetVal: WordBool);
begin
  DefaultInterface.AllowUserAcceptCertificate := pRetVal;
end;

function TUACertificateAcceptancePolicy.Get_CheckTimeValidAndNested: WordBool;
begin
  Result := DefaultInterface.CheckTimeValidAndNested;
end;

procedure TUACertificateAcceptancePolicy.Set_CheckTimeValidAndNested(pRetVal: WordBool);
begin
  DefaultInterface.CheckTimeValidAndNested := pRetVal;
end;

function TUACertificateAcceptancePolicy.Get_MinimumCertificateKeySize: Integer;
begin
  Result := DefaultInterface.MinimumCertificateKeySize;
end;

procedure TUACertificateAcceptancePolicy.Set_MinimumCertificateKeySize(pRetVal: Integer);
begin
  DefaultInterface.MinimumCertificateKeySize := pRetVal;
end;

function TUACertificateAcceptancePolicy.Get_RequireRevocationStatusKnown: WordBool;
begin
  Result := DefaultInterface.RequireRevocationStatusKnown;
end;

procedure TUACertificateAcceptancePolicy.Set_RequireRevocationStatusKnown(pRetVal: WordBool);
begin
  DefaultInterface.RequireRevocationStatusKnown := pRetVal;
end;

function TUACertificateAcceptancePolicy.Get_TrustedEndpointUrlStrings: _StringCollection;
begin
  Result := DefaultInterface.TrustedEndpointUrlStrings;
end;

procedure TUACertificateAcceptancePolicy._Set_TrustedEndpointUrlStrings(const pRetVal: _StringCollection);
begin
  DefaultInterface.TrustedEndpointUrlStrings := pRetVal;
end;

function TUACertificateAcceptancePolicy.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUACertificateAcceptancePolicy.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUACertificateAcceptancePolicy.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUACertificateAcceptancePolicy.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

procedure TUACertificateAcceptancePolicy.DistrustEndpointUrlString(const endpointUrlString: WideString);
begin
  DefaultInterface.DistrustEndpointUrlString(endpointUrlString);
end;

function TUACertificateAcceptancePolicy.IsEndpointUrlStringTrusted(const endpointUrlString: WideString): WordBool;
begin
  Result := DefaultInterface.IsEndpointUrlStringTrusted(endpointUrlString);
end;

procedure TUACertificateAcceptancePolicy.TrustEndpointUrlString(const endpointUrlString: WideString);
begin
  DefaultInterface.TrustEndpointUrlString(endpointUrlString);
end;

class function CoEasyUAClientAdaptableParameters.Create: _EasyUAClientAdaptableParameters;
begin
  Result := CreateComObject(CLASS_EasyUAClientAdaptableParameters) as _EasyUAClientAdaptableParameters;
end;

class function CoEasyUAClientAdaptableParameters.CreateRemote(const MachineName: string): _EasyUAClientAdaptableParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EasyUAClientAdaptableParameters) as _EasyUAClientAdaptableParameters;
end;

procedure TEasyUAClientAdaptableParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{8BF0C2BC-4A7B-401E-9A3F-4D09F4000A43}';
    IntfIID:   '{6019F1FB-ED9A-409A-93D3-43C45EBA78A7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TEasyUAClientAdaptableParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _EasyUAClientAdaptableParameters;
  end;
end;

procedure TEasyUAClientAdaptableParameters.ConnectTo(svrIntf: _EasyUAClientAdaptableParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TEasyUAClientAdaptableParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TEasyUAClientAdaptableParameters.GetDefaultInterface: _EasyUAClientAdaptableParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TEasyUAClientAdaptableParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TEasyUAClientAdaptableParameters.Destroy;
begin
  inherited Destroy;
end;

function TEasyUAClientAdaptableParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TEasyUAClientAdaptableParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TEasyUAClientAdaptableParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TEasyUAClientAdaptableParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TEasyUAClientAdaptableParameters.Get_DiscoveryParameters: _UADiscoveryParameters;
begin
  Result := DefaultInterface.DiscoveryParameters;
end;

procedure TEasyUAClientAdaptableParameters._Set_DiscoveryParameters(const pRetVal: _UADiscoveryParameters);
begin
  DefaultInterface.DiscoveryParameters := pRetVal;
end;

function TEasyUAClientAdaptableParameters.Get_HostParameters: _UAHostParameters;
begin
  Result := DefaultInterface.HostParameters;
end;

procedure TEasyUAClientAdaptableParameters._Set_HostParameters(const pRetVal: _UAHostParameters);
begin
  DefaultInterface.HostParameters := pRetVal;
end;

function TEasyUAClientAdaptableParameters.Get_MonitoredItemParameters: _UAClientMonitoredItemParameters;
begin
  Result := DefaultInterface.MonitoredItemParameters;
end;

procedure TEasyUAClientAdaptableParameters._Set_MonitoredItemParameters(const pRetVal: _UAClientMonitoredItemParameters);
begin
  DefaultInterface.MonitoredItemParameters := pRetVal;
end;

function TEasyUAClientAdaptableParameters.Get_SessionParameters: _UASmartClientSessionParameters;
begin
  Result := DefaultInterface.SessionParameters;
end;

procedure TEasyUAClientAdaptableParameters._Set_SessionParameters(const pRetVal: _UASmartClientSessionParameters);
begin
  DefaultInterface.SessionParameters := pRetVal;
end;

function TEasyUAClientAdaptableParameters.Get_SubscriptionParameters: _UAClientSubscriptionParameters;
begin
  Result := DefaultInterface.SubscriptionParameters;
end;

procedure TEasyUAClientAdaptableParameters._Set_SubscriptionParameters(const pRetVal: _UAClientSubscriptionParameters);
begin
  DefaultInterface.SubscriptionParameters := pRetVal;
end;

function TEasyUAClientAdaptableParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TEasyUAClientAdaptableParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TEasyUAClientAdaptableParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TEasyUAClientAdaptableParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

procedure TEasyUAClientAdaptableParameters.Reset;
begin
  DefaultInterface.Reset;
end;

class function CoUAClientEngineParameters.Create: _UAClientEngineParameters;
begin
  Result := CreateComObject(CLASS_UAClientEngineParameters) as _UAClientEngineParameters;
end;

class function CoUAClientEngineParameters.CreateRemote(const MachineName: string): _UAClientEngineParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAClientEngineParameters) as _UAClientEngineParameters;
end;

procedure TUAClientEngineParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{2128889E-747F-44F3-807F-874BA51887DC}';
    IntfIID:   '{B3EC5B1E-CC28-4617-A2F5-8FC0047A5189}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAClientEngineParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAClientEngineParameters;
  end;
end;

procedure TUAClientEngineParameters.ConnectTo(svrIntf: _UAClientEngineParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAClientEngineParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAClientEngineParameters.GetDefaultInterface: _UAClientEngineParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAClientEngineParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAClientEngineParameters.Destroy;
begin
  inherited Destroy;
end;

function TUAClientEngineParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAClientEngineParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAClientEngineParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUAClientEngineParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUAClientEngineParameters.Get_CertificateAcceptancePolicy: _UACertificateAcceptancePolicy;
begin
  Result := DefaultInterface.CertificateAcceptancePolicy;
end;

procedure TUAClientEngineParameters._Set_CertificateAcceptancePolicy(const pRetVal: _UACertificateAcceptancePolicy);
begin
  DefaultInterface.CertificateAcceptancePolicy := pRetVal;
end;

function TUAClientEngineParameters.Get_ConfigurationPropertyOverrides: _StringObjectDictionary;
begin
  Result := DefaultInterface.ConfigurationPropertyOverrides;
end;

procedure TUAClientEngineParameters._Set_ConfigurationPropertyOverrides(const pRetVal: _StringObjectDictionary);
begin
  DefaultInterface.ConfigurationPropertyOverrides := pRetVal;
end;

function TUAClientEngineParameters.Get_ConfigurationSources: UAConfigurationSources;
begin
  Result := DefaultInterface.ConfigurationSources;
end;

procedure TUAClientEngineParameters.Set_ConfigurationSources(pRetVal: UAConfigurationSources);
begin
  DefaultInterface.ConfigurationSources := pRetVal;
end;

function TUAClientEngineParameters.Get_DebuggerDetectionOverride: Sign;
begin
  Result := DefaultInterface.DebuggerDetectionOverride;
end;

procedure TUAClientEngineParameters.Set_DebuggerDetectionOverride(pRetVal: Sign);
begin
  DefaultInterface.DebuggerDetectionOverride := pRetVal;
end;

function TUAClientEngineParameters.Get_gdsEndpointDescriptor: _UAEndpointDescriptor;
begin
  Result := DefaultInterface.gdsEndpointDescriptor;
end;

procedure TUAClientEngineParameters._Set_gdsEndpointDescriptor(const pRetVal: _UAEndpointDescriptor);
begin
  DefaultInterface.gdsEndpointDescriptor := pRetVal;
end;

function TUAClientEngineParameters.Get_RetrialDelay: Integer;
begin
  Result := DefaultInterface.RetrialDelay;
end;

procedure TUAClientEngineParameters.Set_RetrialDelay(pRetVal: Integer);
begin
  DefaultInterface.RetrialDelay := pRetVal;
end;

function TUAClientEngineParameters.Get_ReconnectionPeriod: Integer;
begin
  Result := DefaultInterface.ReconnectionPeriod;
end;

procedure TUAClientEngineParameters.Set_ReconnectionPeriod(pRetVal: Integer);
begin
  DefaultInterface.ReconnectionPeriod := pRetVal;
end;

function TUAClientEngineParameters.Get_UserInteractionParameters: _UAUserInteractionParameters;
begin
  Result := DefaultInterface.UserInteractionParameters;
end;

procedure TUAClientEngineParameters._Set_UserInteractionParameters(const pRetVal: _UAUserInteractionParameters);
begin
  DefaultInterface.UserInteractionParameters := pRetVal;
end;

function TUAClientEngineParameters.Get_HttpsCertificateAcceptancePolicy: _UACertificateAcceptancePolicy;
begin
  Result := DefaultInterface.HttpsCertificateAcceptancePolicy;
end;

procedure TUAClientEngineParameters._Set_HttpsCertificateAcceptancePolicy(const pRetVal: _UACertificateAcceptancePolicy);
begin
  DefaultInterface.HttpsCertificateAcceptancePolicy := pRetVal;
end;

function TUAClientEngineParameters.Get_UseCustomHttpsCertificateValidation: WordBool;
begin
  Result := DefaultInterface.UseCustomHttpsCertificateValidation;
end;

procedure TUAClientEngineParameters.Set_UseCustomHttpsCertificateValidation(pRetVal: WordBool);
begin
  DefaultInterface.UseCustomHttpsCertificateValidation := pRetVal;
end;

function TUAClientEngineParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAClientEngineParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAClientEngineParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAClientEngineParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

procedure TUAClientEngineParameters.Reset;
begin
  DefaultInterface.Reset;
end;

class function CoUAClientMonitoredItemParameters.Create: _UAClientMonitoredItemParameters;
begin
  Result := CreateComObject(CLASS_UAClientMonitoredItemParameters) as _UAClientMonitoredItemParameters;
end;

class function CoUAClientMonitoredItemParameters.CreateRemote(const MachineName: string): _UAClientMonitoredItemParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAClientMonitoredItemParameters) as _UAClientMonitoredItemParameters;
end;

procedure TUAClientMonitoredItemParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{6D9181C8-BF8F-4010-A9E8-DB8AA56A3C8A}';
    IntfIID:   '{4C8C8151-7251-4E12-AB3D-FE1FF653AB49}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAClientMonitoredItemParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAClientMonitoredItemParameters;
  end;
end;

procedure TUAClientMonitoredItemParameters.ConnectTo(svrIntf: _UAClientMonitoredItemParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAClientMonitoredItemParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAClientMonitoredItemParameters.GetDefaultInterface: _UAClientMonitoredItemParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAClientMonitoredItemParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAClientMonitoredItemParameters.Destroy;
begin
  inherited Destroy;
end;

function TUAClientMonitoredItemParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAClientMonitoredItemParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAClientMonitoredItemParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUAClientMonitoredItemParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUAClientMonitoredItemParameters.Get_CheckMonitoredItemId: WordBool;
begin
  Result := DefaultInterface.CheckMonitoredItemId;
end;

procedure TUAClientMonitoredItemParameters.Set_CheckMonitoredItemId(pRetVal: WordBool);
begin
  DefaultInterface.CheckMonitoredItemId := pRetVal;
end;

function TUAClientMonitoredItemParameters.Get_RequireValidRevisedSamplingInterval: WordBool;
begin
  Result := DefaultInterface.RequireValidRevisedSamplingInterval;
end;

procedure TUAClientMonitoredItemParameters.Set_RequireValidRevisedSamplingInterval(pRetVal: WordBool);
begin
  DefaultInterface.RequireValidRevisedSamplingInterval := pRetVal;
end;

function TUAClientMonitoredItemParameters.Get_RequireValidRevisedQueueSize: WordBool;
begin
  Result := DefaultInterface.RequireValidRevisedQueueSize;
end;

procedure TUAClientMonitoredItemParameters.Set_RequireValidRevisedQueueSize(pRetVal: WordBool);
begin
  DefaultInterface.RequireValidRevisedQueueSize := pRetVal;
end;

function TUAClientMonitoredItemParameters.Get_RetrialDelay: Integer;
begin
  Result := DefaultInterface.RetrialDelay;
end;

procedure TUAClientMonitoredItemParameters.Set_RetrialDelay(pRetVal: Integer);
begin
  DefaultInterface.RetrialDelay := pRetVal;
end;

function TUAClientMonitoredItemParameters.Get_SanitizeNotificationDataValue: WordBool;
begin
  Result := DefaultInterface.SanitizeNotificationDataValue;
end;

procedure TUAClientMonitoredItemParameters.Set_SanitizeNotificationDataValue(pRetVal: WordBool);
begin
  DefaultInterface.SanitizeNotificationDataValue := pRetVal;
end;

function TUAClientMonitoredItemParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAClientMonitoredItemParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAClientMonitoredItemParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAClientMonitoredItemParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

procedure TUAClientMonitoredItemParameters.Reset;
begin
  DefaultInterface.Reset;
end;

class function CoUAClientServerApplicationParameters.Create: _UAClientServerApplicationParameters;
begin
  Result := CreateComObject(CLASS_UAClientServerApplicationParameters) as _UAClientServerApplicationParameters;
end;

class function CoUAClientServerApplicationParameters.CreateRemote(const MachineName: string): _UAClientServerApplicationParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAClientServerApplicationParameters) as _UAClientServerApplicationParameters;
end;

procedure TUAClientServerApplicationParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{D40C74F9-4901-41FC-ACC0-50704FFA0E21}';
    IntfIID:   '{4EBB9E50-E292-4D01-A182-8345BC293D21}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAClientServerApplicationParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAClientServerApplicationParameters;
  end;
end;

procedure TUAClientServerApplicationParameters.ConnectTo(svrIntf: _UAClientServerApplicationParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAClientServerApplicationParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAClientServerApplicationParameters.GetDefaultInterface: _UAClientServerApplicationParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAClientServerApplicationParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAClientServerApplicationParameters.Destroy;
begin
  inherited Destroy;
end;

function TUAClientServerApplicationParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAClientServerApplicationParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAClientServerApplicationParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUAClientServerApplicationParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUAClientServerApplicationParameters.Get_ApplicationManifest: _UAApplicationManifest;
begin
  Result := DefaultInterface.ApplicationManifest;
end;

procedure TUAClientServerApplicationParameters._Set_ApplicationManifest(const pRetVal: _UAApplicationManifest);
begin
  DefaultInterface.ApplicationManifest := pRetVal;
end;

function TUAClientServerApplicationParameters.Get_ApplicationUriTemplateString: WideString;
begin
  Result := DefaultInterface.ApplicationUriTemplateString;
end;

procedure TUAClientServerApplicationParameters.Set_ApplicationUriTemplateString(const pRetVal: WideString);
begin
  DefaultInterface.ApplicationUriTemplateString := pRetVal;
end;

function TUAClientServerApplicationParameters.Get_AutoGenerateInstanceCertificate: WordBool;
begin
  Result := DefaultInterface.AutoGenerateInstanceCertificate;
end;

procedure TUAClientServerApplicationParameters.Set_AutoGenerateInstanceCertificate(pRetVal: WordBool);
begin
  DefaultInterface.AutoGenerateInstanceCertificate := pRetVal;
end;

function TUAClientServerApplicationParameters.Get_AutoTrustInstanceCertificate: WordBool;
begin
  Result := DefaultInterface.AutoTrustInstanceCertificate;
end;

procedure TUAClientServerApplicationParameters.Set_AutoTrustInstanceCertificate(pRetVal: WordBool);
begin
  DefaultInterface.AutoTrustInstanceCertificate := pRetVal;
end;

function TUAClientServerApplicationParameters.Get_HostNames: _StringCollection;
begin
  Result := DefaultInterface.HostNames;
end;

procedure TUAClientServerApplicationParameters._Set_HostNames(const pRetVal: _StringCollection);
begin
  DefaultInterface.HostNames := pRetVal;
end;

function TUAClientServerApplicationParameters.Get_HostNamesString: WideString;
begin
  Result := DefaultInterface.HostNamesString;
end;

procedure TUAClientServerApplicationParameters.Set_HostNamesString(const pRetVal: WideString);
begin
  DefaultInterface.HostNamesString := pRetVal;
end;

function TUAClientServerApplicationParameters.Get_InstanceCertificateGenerationParameters: _CertificateGenerationParameters;
begin
  Result := DefaultInterface.InstanceCertificateGenerationParameters;
end;

procedure TUAClientServerApplicationParameters._Set_InstanceCertificateGenerationParameters(const pRetVal: _CertificateGenerationParameters);
begin
  DefaultInterface.InstanceCertificateGenerationParameters := pRetVal;
end;

function TUAClientServerApplicationParameters.Get_InstanceCertificatePrivateKeyPassword: WideString;
begin
  Result := DefaultInterface.InstanceCertificatePrivateKeyPassword;
end;

procedure TUAClientServerApplicationParameters.Set_InstanceCertificatePrivateKeyPassword(const pRetVal: WideString);
begin
  DefaultInterface.InstanceCertificatePrivateKeyPassword := pRetVal;
end;

function TUAClientServerApplicationParameters.Get_InstanceCertificatePrivateKeyPasswordDictionary: _StringStringDictionary;
begin
  Result := DefaultInterface.InstanceCertificatePrivateKeyPasswordDictionary;
end;

procedure TUAClientServerApplicationParameters._Set_InstanceCertificatePrivateKeyPasswordDictionary(const pRetVal: _StringStringDictionary);
begin
  DefaultInterface.InstanceCertificatePrivateKeyPasswordDictionary := pRetVal;
end;

function TUAClientServerApplicationParameters.Get_RelaxedCertificateSearch: WordBool;
begin
  Result := DefaultInterface.RelaxedCertificateSearch;
end;

procedure TUAClientServerApplicationParameters.Set_RelaxedCertificateSearch(pRetVal: WordBool);
begin
  DefaultInterface.RelaxedCertificateSearch := pRetVal;
end;

function TUAClientServerApplicationParameters.Get_ValidateOwnInstanceCertificate: WordBool;
begin
  Result := DefaultInterface.ValidateOwnInstanceCertificate;
end;

procedure TUAClientServerApplicationParameters.Set_ValidateOwnInstanceCertificate(pRetVal: WordBool);
begin
  DefaultInterface.ValidateOwnInstanceCertificate := pRetVal;
end;

function TUAClientServerApplicationParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAClientServerApplicationParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAClientServerApplicationParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAClientServerApplicationParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUAClientServerApplicationParameters.FindInstanceCertificatePrivateKeyPassword(const certificateSubId: WideString): WideString;
begin
  Result := DefaultInterface.FindInstanceCertificatePrivateKeyPassword(certificateSubId);
end;

procedure TUAClientServerApplicationParameters.Reset;
begin
  DefaultInterface.Reset;
end;

class function CoEasyUAClientEngineParameters.Create: _EasyUAClientEngineParameters;
begin
  Result := CreateComObject(CLASS_EasyUAClientEngineParameters) as _EasyUAClientEngineParameters;
end;

class function CoEasyUAClientEngineParameters.CreateRemote(const MachineName: string): _EasyUAClientEngineParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EasyUAClientEngineParameters) as _EasyUAClientEngineParameters;
end;

procedure TEasyUAClientEngineParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{06C9F127-61C2-4959-97FB-2BB3520DAAA8}';
    IntfIID:   '{CAD749B4-8F4B-49B9-9C25-CD45CA885C43}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TEasyUAClientEngineParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _EasyUAClientEngineParameters;
  end;
end;

procedure TEasyUAClientEngineParameters.ConnectTo(svrIntf: _EasyUAClientEngineParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TEasyUAClientEngineParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TEasyUAClientEngineParameters.GetDefaultInterface: _EasyUAClientEngineParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TEasyUAClientEngineParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TEasyUAClientEngineParameters.Destroy;
begin
  inherited Destroy;
end;

function TEasyUAClientEngineParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TEasyUAClientEngineParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TEasyUAClientEngineParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TEasyUAClientEngineParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TEasyUAClientEngineParameters.Get_CertificateAcceptancePolicy: _UACertificateAcceptancePolicy;
begin
  Result := DefaultInterface.CertificateAcceptancePolicy;
end;

procedure TEasyUAClientEngineParameters._Set_CertificateAcceptancePolicy(const pRetVal: _UACertificateAcceptancePolicy);
begin
  DefaultInterface.CertificateAcceptancePolicy := pRetVal;
end;

function TEasyUAClientEngineParameters.Get_ConfigurationPropertyOverrides: _StringObjectDictionary;
begin
  Result := DefaultInterface.ConfigurationPropertyOverrides;
end;

procedure TEasyUAClientEngineParameters._Set_ConfigurationPropertyOverrides(const pRetVal: _StringObjectDictionary);
begin
  DefaultInterface.ConfigurationPropertyOverrides := pRetVal;
end;

function TEasyUAClientEngineParameters.Get_ConfigurationSources: UAConfigurationSources;
begin
  Result := DefaultInterface.ConfigurationSources;
end;

procedure TEasyUAClientEngineParameters.Set_ConfigurationSources(pRetVal: UAConfigurationSources);
begin
  DefaultInterface.ConfigurationSources := pRetVal;
end;

function TEasyUAClientEngineParameters.Get_DebuggerDetectionOverride: Sign;
begin
  Result := DefaultInterface.DebuggerDetectionOverride;
end;

procedure TEasyUAClientEngineParameters.Set_DebuggerDetectionOverride(pRetVal: Sign);
begin
  DefaultInterface.DebuggerDetectionOverride := pRetVal;
end;

function TEasyUAClientEngineParameters.Get_gdsEndpointDescriptor: _UAEndpointDescriptor;
begin
  Result := DefaultInterface.gdsEndpointDescriptor;
end;

procedure TEasyUAClientEngineParameters._Set_gdsEndpointDescriptor(const pRetVal: _UAEndpointDescriptor);
begin
  DefaultInterface.gdsEndpointDescriptor := pRetVal;
end;

function TEasyUAClientEngineParameters.Get_RetrialDelay: Integer;
begin
  Result := DefaultInterface.RetrialDelay;
end;

procedure TEasyUAClientEngineParameters.Set_RetrialDelay(pRetVal: Integer);
begin
  DefaultInterface.RetrialDelay := pRetVal;
end;

function TEasyUAClientEngineParameters.Get_ReconnectionPeriod: Integer;
begin
  Result := DefaultInterface.ReconnectionPeriod;
end;

procedure TEasyUAClientEngineParameters.Set_ReconnectionPeriod(pRetVal: Integer);
begin
  DefaultInterface.ReconnectionPeriod := pRetVal;
end;

function TEasyUAClientEngineParameters.Get_UserInteractionParameters: _UAUserInteractionParameters;
begin
  Result := DefaultInterface.UserInteractionParameters;
end;

procedure TEasyUAClientEngineParameters._Set_UserInteractionParameters(const pRetVal: _UAUserInteractionParameters);
begin
  DefaultInterface.UserInteractionParameters := pRetVal;
end;

function TEasyUAClientEngineParameters.Get_HttpsCertificateAcceptancePolicy: _UACertificateAcceptancePolicy;
begin
  Result := DefaultInterface.HttpsCertificateAcceptancePolicy;
end;

procedure TEasyUAClientEngineParameters._Set_HttpsCertificateAcceptancePolicy(const pRetVal: _UACertificateAcceptancePolicy);
begin
  DefaultInterface.HttpsCertificateAcceptancePolicy := pRetVal;
end;

function TEasyUAClientEngineParameters.Get_UseCustomHttpsCertificateValidation: WordBool;
begin
  Result := DefaultInterface.UseCustomHttpsCertificateValidation;
end;

procedure TEasyUAClientEngineParameters.Set_UseCustomHttpsCertificateValidation(pRetVal: WordBool);
begin
  DefaultInterface.UseCustomHttpsCertificateValidation := pRetVal;
end;

function TEasyUAClientEngineParameters.Get_GarbageCollectionPeriod: Integer;
begin
  Result := DefaultInterface.GarbageCollectionPeriod;
end;

procedure TEasyUAClientEngineParameters.Set_GarbageCollectionPeriod(pRetVal: Integer);
begin
  DefaultInterface.GarbageCollectionPeriod := pRetVal;
end;

function TEasyUAClientEngineParameters.Get_MaximumDormantSessions: Integer;
begin
  Result := DefaultInterface.MaximumDormantSessions;
end;

procedure TEasyUAClientEngineParameters.Set_MaximumDormantSessions(pRetVal: Integer);
begin
  DefaultInterface.MaximumDormantSessions := pRetVal;
end;

function TEasyUAClientEngineParameters.Get_AutomaticPublishingFactor: Single;
begin
  Result := DefaultInterface.AutomaticPublishingFactor;
end;

procedure TEasyUAClientEngineParameters.Set_AutomaticPublishingFactor(pRetVal: Single);
begin
  DefaultInterface.AutomaticPublishingFactor := pRetVal;
end;

function TEasyUAClientEngineParameters.Get_FastestAutomaticPublishingInterval: Integer;
begin
  Result := DefaultInterface.FastestAutomaticPublishingInterval;
end;

procedure TEasyUAClientEngineParameters.Set_FastestAutomaticPublishingInterval(pRetVal: Integer);
begin
  DefaultInterface.FastestAutomaticPublishingInterval := pRetVal;
end;

function TEasyUAClientEngineParameters.Get_RestrictToSupportedTypes: WordBool;
begin
  Result := DefaultInterface.RestrictToSupportedTypes;
end;

procedure TEasyUAClientEngineParameters.Set_RestrictToSupportedTypes(pRetVal: WordBool);
begin
  DefaultInterface.RestrictToSupportedTypes := pRetVal;
end;

function TEasyUAClientEngineParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TEasyUAClientEngineParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TEasyUAClientEngineParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TEasyUAClientEngineParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

procedure TEasyUAClientEngineParameters.Reset;
begin
  DefaultInterface.Reset;
end;

class function CoUAClientSessionParameters.Create: _UAClientSessionParameters;
begin
  Result := CreateComObject(CLASS_UAClientSessionParameters) as _UAClientSessionParameters;
end;

class function CoUAClientSessionParameters.CreateRemote(const MachineName: string): _UAClientSessionParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAClientSessionParameters) as _UAClientSessionParameters;
end;

procedure TUAClientSessionParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{088E204B-29F9-4336-BB86-3270673DC5CD}';
    IntfIID:   '{A09524BA-9DE2-4447-99FC-01C4985F7C4D}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAClientSessionParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAClientSessionParameters;
  end;
end;

procedure TUAClientSessionParameters.ConnectTo(svrIntf: _UAClientSessionParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAClientSessionParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAClientSessionParameters.GetDefaultInterface: _UAClientSessionParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAClientSessionParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAClientSessionParameters.Destroy;
begin
  inherited Destroy;
end;

function TUAClientSessionParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAClientSessionParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAClientSessionParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUAClientSessionParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUAClientSessionParameters.Get_AcknowledgedMessagesLimit: Integer;
begin
  Result := DefaultInterface.AcknowledgedMessagesLimit;
end;

procedure TUAClientSessionParameters.Set_AcknowledgedMessagesLimit(pRetVal: Integer);
begin
  DefaultInterface.AcknowledgedMessagesLimit := pRetVal;
end;

function TUAClientSessionParameters.Get_AllowEndpointDomainPrompt: WordBool;
begin
  Result := DefaultInterface.AllowEndpointDomainPrompt;
end;

procedure TUAClientSessionParameters.Set_AllowEndpointDomainPrompt(pRetVal: WordBool);
begin
  DefaultInterface.AllowEndpointDomainPrompt := pRetVal;
end;

function TUAClientSessionParameters.Get_AlwaysPreselectEndpoint: WordBool;
begin
  Result := DefaultInterface.AlwaysPreselectEndpoint;
end;

procedure TUAClientSessionParameters.Set_AlwaysPreselectEndpoint(pRetVal: WordBool);
begin
  DefaultInterface.AlwaysPreselectEndpoint := pRetVal;
end;

function TUAClientSessionParameters.Get_CheckAvailableSequenceNumbers: WordBool;
begin
  Result := DefaultInterface.CheckAvailableSequenceNumbers;
end;

procedure TUAClientSessionParameters.Set_CheckAvailableSequenceNumbers(pRetVal: WordBool);
begin
  DefaultInterface.CheckAvailableSequenceNumbers := pRetVal;
end;

function TUAClientSessionParameters.Get_CheckBrowseResults: WordBool;
begin
  Result := DefaultInterface.CheckBrowseResults;
end;

procedure TUAClientSessionParameters.Set_CheckBrowseResults(pRetVal: WordBool);
begin
  DefaultInterface.CheckBrowseResults := pRetVal;
end;

function TUAClientSessionParameters.Get_CheckEndpointDomain: WordBool;
begin
  Result := DefaultInterface.CheckEndpointDomain;
end;

procedure TUAClientSessionParameters.Set_CheckEndpointDomain(pRetVal: WordBool);
begin
  DefaultInterface.CheckEndpointDomain := pRetVal;
end;

function TUAClientSessionParameters.Get_CheckNotificationMessage: WordBool;
begin
  Result := DefaultInterface.CheckNotificationMessage;
end;

procedure TUAClientSessionParameters.Set_CheckNotificationMessage(pRetVal: WordBool);
begin
  DefaultInterface.CheckNotificationMessage := pRetVal;
end;

function TUAClientSessionParameters.Get_CheckSessionId: WordBool;
begin
  Result := DefaultInterface.CheckSessionId;
end;

procedure TUAClientSessionParameters.Set_CheckSessionId(pRetVal: WordBool);
begin
  DefaultInterface.CheckSessionId := pRetVal;
end;

function TUAClientSessionParameters.Get_CloseTimeout: Integer;
begin
  Result := DefaultInterface.CloseTimeout;
end;

procedure TUAClientSessionParameters.Set_CloseTimeout(pRetVal: Integer);
begin
  DefaultInterface.CloseTimeout := pRetVal;
end;

function TUAClientSessionParameters.Get_DiagnosticsMasks: UADiagnosticsMasks;
begin
  Result := DefaultInterface.DiagnosticsMasks;
end;

procedure TUAClientSessionParameters.Set_DiagnosticsMasks(pRetVal: UADiagnosticsMasks);
begin
  DefaultInterface.DiagnosticsMasks := pRetVal;
end;

function TUAClientSessionParameters.Get_EndpointDescriptionChecks: _UAEndpointDescriptionChecks;
begin
  Result := DefaultInterface.EndpointDescriptionChecks;
end;

procedure TUAClientSessionParameters._Set_EndpointDescriptionChecks(const pRetVal: _UAEndpointDescriptionChecks);
begin
  DefaultInterface.EndpointDescriptionChecks := pRetVal;
end;

function TUAClientSessionParameters.Get_EndpointSelectionPolicy: _UAEndpointSelectionPolicy;
begin
  Result := DefaultInterface.EndpointSelectionPolicy;
end;

procedure TUAClientSessionParameters._Set_EndpointSelectionPolicy(const pRetVal: _UAEndpointSelectionPolicy);
begin
  DefaultInterface.EndpointSelectionPolicy := pRetVal;
end;

function TUAClientSessionParameters.Get_EndpointSelectionTimeout: Integer;
begin
  Result := DefaultInterface.EndpointSelectionTimeout;
end;

procedure TUAClientSessionParameters.Set_EndpointSelectionTimeout(pRetVal: Integer);
begin
  DefaultInterface.EndpointSelectionTimeout := pRetVal;
end;

function TUAClientSessionParameters.Get_KeepAliveInterval: Integer;
begin
  Result := DefaultInterface.KeepAliveInterval;
end;

procedure TUAClientSessionParameters.Set_KeepAliveInterval(pRetVal: Integer);
begin
  DefaultInterface.KeepAliveInterval := pRetVal;
end;

function TUAClientSessionParameters.Get_KeepAliveIntervalDebug: Integer;
begin
  Result := DefaultInterface.KeepAliveIntervalDebug;
end;

procedure TUAClientSessionParameters.Set_KeepAliveIntervalDebug(pRetVal: Integer);
begin
  DefaultInterface.KeepAliveIntervalDebug := pRetVal;
end;

function TUAClientSessionParameters.Get_LocaleId: WideString;
begin
  Result := DefaultInterface.LocaleId;
end;

procedure TUAClientSessionParameters.Set_LocaleId(const pRetVal: WideString);
begin
  DefaultInterface.LocaleId := pRetVal;
end;

function TUAClientSessionParameters.Get_MaximumReferencesPerBrowseNode: Integer;
begin
  Result := DefaultInterface.MaximumReferencesPerBrowseNode;
end;

procedure TUAClientSessionParameters.Set_MaximumReferencesPerBrowseNode(pRetVal: Integer);
begin
  DefaultInterface.MaximumReferencesPerBrowseNode := pRetVal;
end;

function TUAClientSessionParameters.Get_OperationTimeout: Integer;
begin
  Result := DefaultInterface.OperationTimeout;
end;

procedure TUAClientSessionParameters.Set_OperationTimeout(pRetVal: Integer);
begin
  DefaultInterface.OperationTimeout := pRetVal;
end;

function TUAClientSessionParameters.Get_PendingMessagesLimit: Integer;
begin
  Result := DefaultInterface.PendingMessagesLimit;
end;

procedure TUAClientSessionParameters.Set_PendingMessagesLimit(pRetVal: Integer);
begin
  DefaultInterface.PendingMessagesLimit := pRetVal;
end;

function TUAClientSessionParameters.Get_PreselectedEndpointValidityPeriod: Integer;
begin
  Result := DefaultInterface.PreselectedEndpointValidityPeriod;
end;

procedure TUAClientSessionParameters.Set_PreselectedEndpointValidityPeriod(pRetVal: Integer);
begin
  DefaultInterface.PreselectedEndpointValidityPeriod := pRetVal;
end;

function TUAClientSessionParameters.Get_RequireMatchingServerSoftwareCertificates: WordBool;
begin
  Result := DefaultInterface.RequireMatchingServerSoftwareCertificates;
end;

procedure TUAClientSessionParameters.Set_RequireMatchingServerSoftwareCertificates(pRetVal: WordBool);
begin
  DefaultInterface.RequireMatchingServerSoftwareCertificates := pRetVal;
end;

function TUAClientSessionParameters.Get_RequireNonEmptyServerSignature: WordBool;
begin
  Result := DefaultInterface.RequireNonEmptyServerSignature;
end;

procedure TUAClientSessionParameters.Set_RequireNonEmptyServerSignature(pRetVal: WordBool);
begin
  DefaultInterface.RequireNonEmptyServerSignature := pRetVal;
end;

function TUAClientSessionParameters.Get_RequireServerEndpointsMatchDiscovery: WordBool;
begin
  Result := DefaultInterface.RequireServerEndpointsMatchDiscovery;
end;

procedure TUAClientSessionParameters.Set_RequireServerEndpointsMatchDiscovery(pRetVal: WordBool);
begin
  DefaultInterface.RequireServerEndpointsMatchDiscovery := pRetVal;
end;

function TUAClientSessionParameters.Get_RequireTimestampsAsRequested: WordBool;
begin
  Result := DefaultInterface.RequireTimestampsAsRequested;
end;

procedure TUAClientSessionParameters.Set_RequireTimestampsAsRequested(pRetVal: WordBool);
begin
  DefaultInterface.RequireTimestampsAsRequested := pRetVal;
end;

function TUAClientSessionParameters.Get_RequireUniqueAuthenticationToken: WordBool;
begin
  Result := DefaultInterface.RequireUniqueAuthenticationToken;
end;

procedure TUAClientSessionParameters.Set_RequireUniqueAuthenticationToken(pRetVal: WordBool);
begin
  DefaultInterface.RequireUniqueAuthenticationToken := pRetVal;
end;

function TUAClientSessionParameters.Get_RequireUniqueServerNonce: WordBool;
begin
  Result := DefaultInterface.RequireUniqueServerNonce;
end;

procedure TUAClientSessionParameters.Set_RequireUniqueServerNonce(pRetVal: WordBool);
begin
  DefaultInterface.RequireUniqueServerNonce := pRetVal;
end;

function TUAClientSessionParameters.Get_RequireValidAuthenticationToken: WordBool;
begin
  Result := DefaultInterface.RequireValidAuthenticationToken;
end;

procedure TUAClientSessionParameters.Set_RequireValidAuthenticationToken(pRetVal: WordBool);
begin
  DefaultInterface.RequireValidAuthenticationToken := pRetVal;
end;

function TUAClientSessionParameters.Get_RequireValidServerNonce: WordBool;
begin
  Result := DefaultInterface.RequireValidServerNonce;
end;

procedure TUAClientSessionParameters.Set_RequireValidServerNonce(pRetVal: WordBool);
begin
  DefaultInterface.RequireValidServerNonce := pRetVal;
end;

function TUAClientSessionParameters.Get_RetrialDelay: Integer;
begin
  Result := DefaultInterface.RetrialDelay;
end;

procedure TUAClientSessionParameters.Set_RetrialDelay(pRetVal: Integer);
begin
  DefaultInterface.RetrialDelay := pRetVal;
end;

function TUAClientSessionParameters.Get_SanitizeReferenceDescriptions: WordBool;
begin
  Result := DefaultInterface.SanitizeReferenceDescriptions;
end;

procedure TUAClientSessionParameters.Set_SanitizeReferenceDescriptions(pRetVal: WordBool);
begin
  DefaultInterface.SanitizeReferenceDescriptions := pRetVal;
end;

function TUAClientSessionParameters.Get_SessionConnectTimeout: Integer;
begin
  Result := DefaultInterface.SessionConnectTimeout;
end;

procedure TUAClientSessionParameters.Set_SessionConnectTimeout(pRetVal: Integer);
begin
  DefaultInterface.SessionConnectTimeout := pRetVal;
end;

function TUAClientSessionParameters.Get_SessionTimeout: Integer;
begin
  Result := DefaultInterface.SessionTimeout;
end;

procedure TUAClientSessionParameters.Set_SessionTimeout(pRetVal: Integer);
begin
  DefaultInterface.SessionTimeout := pRetVal;
end;

function TUAClientSessionParameters.Get_SessionTimeoutDebug: Integer;
begin
  Result := DefaultInterface.SessionTimeoutDebug;
end;

procedure TUAClientSessionParameters.Set_SessionTimeoutDebug(pRetVal: Integer);
begin
  DefaultInterface.SessionTimeoutDebug := pRetVal;
end;

function TUAClientSessionParameters.Get_ShortestAllowedRevisedSessionTimeout: Double;
begin
  Result := DefaultInterface.ShortestAllowedRevisedSessionTimeout;
end;

procedure TUAClientSessionParameters.Set_ShortestAllowedRevisedSessionTimeout(pRetVal: Double);
begin
  DefaultInterface.ShortestAllowedRevisedSessionTimeout := pRetVal;
end;

function TUAClientSessionParameters.Get_UpdateEndpointBeforeConnect: WordBool;
begin
  Result := DefaultInterface.UpdateEndpointBeforeConnect;
end;

procedure TUAClientSessionParameters.Set_UpdateEndpointBeforeConnect(pRetVal: WordBool);
begin
  DefaultInterface.UpdateEndpointBeforeConnect := pRetVal;
end;

function TUAClientSessionParameters.Get_UserIdentity: _UserIdentity;
begin
  Result := DefaultInterface.UserIdentity;
end;

procedure TUAClientSessionParameters._Set_UserIdentity(const pRetVal: _UserIdentity);
begin
  DefaultInterface.UserIdentity := pRetVal;
end;

function TUAClientSessionParameters.Get_WriteNarrowestIntegerType: WordBool;
begin
  Result := DefaultInterface.WriteNarrowestIntegerType;
end;

procedure TUAClientSessionParameters.Set_WriteNarrowestIntegerType(pRetVal: WordBool);
begin
  DefaultInterface.WriteNarrowestIntegerType := pRetVal;
end;

function TUAClientSessionParameters.Get_WriteNarrowestRealType: WordBool;
begin
  Result := DefaultInterface.WriteNarrowestRealType;
end;

procedure TUAClientSessionParameters.Set_WriteNarrowestRealType(pRetVal: WordBool);
begin
  DefaultInterface.WriteNarrowestRealType := pRetVal;
end;

function TUAClientSessionParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAClientSessionParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAClientSessionParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAClientSessionParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

procedure TUAClientSessionParameters.Reset;
begin
  DefaultInterface.Reset;
end;

class function CoUAClientSubscriptionParameters.Create: _UAClientSubscriptionParameters;
begin
  Result := CreateComObject(CLASS_UAClientSubscriptionParameters) as _UAClientSubscriptionParameters;
end;

class function CoUAClientSubscriptionParameters.CreateRemote(const MachineName: string): _UAClientSubscriptionParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAClientSubscriptionParameters) as _UAClientSubscriptionParameters;
end;

procedure TUAClientSubscriptionParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{E35F93F4-7F3C-4787-95D5-AF8FE737531D}';
    IntfIID:   '{0CCA8354-6931-4EDB-B85A-740F0FC6CC62}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAClientSubscriptionParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAClientSubscriptionParameters;
  end;
end;

procedure TUAClientSubscriptionParameters.ConnectTo(svrIntf: _UAClientSubscriptionParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAClientSubscriptionParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAClientSubscriptionParameters.GetDefaultInterface: _UAClientSubscriptionParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAClientSubscriptionParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAClientSubscriptionParameters.Destroy;
begin
  inherited Destroy;
end;

function TUAClientSubscriptionParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAClientSubscriptionParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAClientSubscriptionParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUAClientSubscriptionParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUAClientSubscriptionParameters.Get_AllowPublishTimeAhead: WordBool;
begin
  Result := DefaultInterface.AllowPublishTimeAhead;
end;

procedure TUAClientSubscriptionParameters.Set_AllowPublishTimeAhead(pRetVal: WordBool);
begin
  DefaultInterface.AllowPublishTimeAhead := pRetVal;
end;

function TUAClientSubscriptionParameters.Get_AllowPublishTimeStale: WordBool;
begin
  Result := DefaultInterface.AllowPublishTimeStale;
end;

procedure TUAClientSubscriptionParameters.Set_AllowPublishTimeStale(pRetVal: WordBool);
begin
  DefaultInterface.AllowPublishTimeStale := pRetVal;
end;

function TUAClientSubscriptionParameters.Get_AssumedMinimumKeepAliveCount: Integer;
begin
  Result := DefaultInterface.AssumedMinimumKeepAliveCount;
end;

procedure TUAClientSubscriptionParameters.Set_AssumedMinimumKeepAliveCount(pRetVal: Integer);
begin
  DefaultInterface.AssumedMinimumKeepAliveCount := pRetVal;
end;

function TUAClientSubscriptionParameters.Get_AssumedMinimumLifetimeCount: Integer;
begin
  Result := DefaultInterface.AssumedMinimumLifetimeCount;
end;

procedure TUAClientSubscriptionParameters.Set_AssumedMinimumLifetimeCount(pRetVal: Integer);
begin
  DefaultInterface.AssumedMinimumLifetimeCount := pRetVal;
end;

function TUAClientSubscriptionParameters.Get_AssumedMinimumPublishingInterval: Integer;
begin
  Result := DefaultInterface.AssumedMinimumPublishingInterval;
end;

procedure TUAClientSubscriptionParameters.Set_AssumedMinimumPublishingInterval(pRetVal: Integer);
begin
  DefaultInterface.AssumedMinimumPublishingInterval := pRetVal;
end;

function TUAClientSubscriptionParameters.Get_CheckSubscriptionId: WordBool;
begin
  Result := DefaultInterface.CheckSubscriptionId;
end;

procedure TUAClientSubscriptionParameters.Set_CheckSubscriptionId(pRetVal: WordBool);
begin
  DefaultInterface.CheckSubscriptionId := pRetVal;
end;

function TUAClientSubscriptionParameters.Get_FastestKeepAliveInterval: Integer;
begin
  Result := DefaultInterface.FastestKeepAliveInterval;
end;

procedure TUAClientSubscriptionParameters.Set_FastestKeepAliveInterval(pRetVal: Integer);
begin
  DefaultInterface.FastestKeepAliveInterval := pRetVal;
end;

function TUAClientSubscriptionParameters.Get_FastestKeepAliveIntervalDebug: Integer;
begin
  Result := DefaultInterface.FastestKeepAliveIntervalDebug;
end;

procedure TUAClientSubscriptionParameters.Set_FastestKeepAliveIntervalDebug(pRetVal: Integer);
begin
  DefaultInterface.FastestKeepAliveIntervalDebug := pRetVal;
end;

function TUAClientSubscriptionParameters.Get_FastestLifetimeInterval: Integer;
begin
  Result := DefaultInterface.FastestLifetimeInterval;
end;

procedure TUAClientSubscriptionParameters.Set_FastestLifetimeInterval(pRetVal: Integer);
begin
  DefaultInterface.FastestLifetimeInterval := pRetVal;
end;

function TUAClientSubscriptionParameters.Get_FastestLifetimeIntervalDebug: Integer;
begin
  Result := DefaultInterface.FastestLifetimeIntervalDebug;
end;

procedure TUAClientSubscriptionParameters.Set_FastestLifetimeIntervalDebug(pRetVal: Integer);
begin
  DefaultInterface.FastestLifetimeIntervalDebug := pRetVal;
end;

function TUAClientSubscriptionParameters.Get_KeepAliveCount: Integer;
begin
  Result := DefaultInterface.KeepAliveCount;
end;

procedure TUAClientSubscriptionParameters.Set_KeepAliveCount(pRetVal: Integer);
begin
  DefaultInterface.KeepAliveCount := pRetVal;
end;

function TUAClientSubscriptionParameters.Get_LifetimeCount: Integer;
begin
  Result := DefaultInterface.LifetimeCount;
end;

procedure TUAClientSubscriptionParameters.Set_LifetimeCount(pRetVal: Integer);
begin
  DefaultInterface.LifetimeCount := pRetVal;
end;

function TUAClientSubscriptionParameters.Get_MaximumLifetimeDueTime: Double;
begin
  Result := DefaultInterface.MaximumLifetimeDueTime;
end;

procedure TUAClientSubscriptionParameters.Set_MaximumLifetimeDueTime(pRetVal: Double);
begin
  DefaultInterface.MaximumLifetimeDueTime := pRetVal;
end;

function TUAClientSubscriptionParameters.Get_PublishingHaltedProbationaryPeriod: Integer;
begin
  Result := DefaultInterface.PublishingHaltedProbationaryPeriod;
end;

procedure TUAClientSubscriptionParameters.Set_PublishingHaltedProbationaryPeriod(pRetVal: Integer);
begin
  DefaultInterface.PublishingHaltedProbationaryPeriod := pRetVal;
end;

function TUAClientSubscriptionParameters.Get_PublishStatusChangedQueueLimit: Integer;
begin
  Result := DefaultInterface.PublishStatusChangedQueueLimit;
end;

procedure TUAClientSubscriptionParameters.Set_PublishStatusChangedQueueLimit(pRetVal: Integer);
begin
  DefaultInterface.PublishStatusChangedQueueLimit := pRetVal;
end;

function TUAClientSubscriptionParameters.Get_RequireMinimumRevisedLifetimeCount: WordBool;
begin
  Result := DefaultInterface.RequireMinimumRevisedLifetimeCount;
end;

procedure TUAClientSubscriptionParameters.Set_RequireMinimumRevisedLifetimeCount(pRetVal: WordBool);
begin
  DefaultInterface.RequireMinimumRevisedLifetimeCount := pRetVal;
end;

function TUAClientSubscriptionParameters.Get_RetrialDelay: Integer;
begin
  Result := DefaultInterface.RetrialDelay;
end;

procedure TUAClientSubscriptionParameters.Set_RetrialDelay(pRetVal: Integer);
begin
  DefaultInterface.RetrialDelay := pRetVal;
end;

function TUAClientSubscriptionParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAClientSubscriptionParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAClientSubscriptionParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAClientSubscriptionParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

procedure TUAClientSubscriptionParameters.Reset;
begin
  DefaultInterface.Reset;
end;

class function CoUADiscoveryParameters.Create: _UADiscoveryParameters;
begin
  Result := CreateComObject(CLASS_UADiscoveryParameters) as _UADiscoveryParameters;
end;

class function CoUADiscoveryParameters.CreateRemote(const MachineName: string): _UADiscoveryParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UADiscoveryParameters) as _UADiscoveryParameters;
end;

procedure TUADiscoveryParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{3234D872-0EBC-4A15-A54F-CA438898F7A3}';
    IntfIID:   '{23D76E10-3379-4A29-B178-2452CBC404E0}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUADiscoveryParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UADiscoveryParameters;
  end;
end;

procedure TUADiscoveryParameters.ConnectTo(svrIntf: _UADiscoveryParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUADiscoveryParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUADiscoveryParameters.GetDefaultInterface: _UADiscoveryParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUADiscoveryParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUADiscoveryParameters.Destroy;
begin
  inherited Destroy;
end;

function TUADiscoveryParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUADiscoveryParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUADiscoveryParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUADiscoveryParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUADiscoveryParameters.Get_CheckApplicationDescription: WordBool;
begin
  Result := DefaultInterface.CheckApplicationDescription;
end;

procedure TUADiscoveryParameters.Set_CheckApplicationDescription(pRetVal: WordBool);
begin
  DefaultInterface.CheckApplicationDescription := pRetVal;
end;

function TUADiscoveryParameters.Get_DiscoveryTimeout: Integer;
begin
  Result := DefaultInterface.DiscoveryTimeout;
end;

procedure TUADiscoveryParameters.Set_DiscoveryTimeout(pRetVal: Integer);
begin
  DefaultInterface.DiscoveryTimeout := pRetVal;
end;

function TUADiscoveryParameters.Get_ParallelDiscovery: WordBool;
begin
  Result := DefaultInterface.ParallelDiscovery;
end;

procedure TUADiscoveryParameters.Set_ParallelDiscovery(pRetVal: WordBool);
begin
  DefaultInterface.ParallelDiscovery := pRetVal;
end;

function TUADiscoveryParameters.Get_ReturnSameSites: WordBool;
begin
  Result := DefaultInterface.ReturnSameSites;
end;

procedure TUADiscoveryParameters.Set_ReturnSameSites(pRetVal: WordBool);
begin
  DefaultInterface.ReturnSameSites := pRetVal;
end;

function TUADiscoveryParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUADiscoveryParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUADiscoveryParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUADiscoveryParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

procedure TUADiscoveryParameters.Reset;
begin
  DefaultInterface.Reset;
end;

class function CoUAEndpointDescriptionChecks.Create: _UAEndpointDescriptionChecks;
begin
  Result := CreateComObject(CLASS_UAEndpointDescriptionChecks) as _UAEndpointDescriptionChecks;
end;

class function CoUAEndpointDescriptionChecks.CreateRemote(const MachineName: string): _UAEndpointDescriptionChecks;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAEndpointDescriptionChecks) as _UAEndpointDescriptionChecks;
end;

procedure TUAEndpointDescriptionChecks.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{3681B3FF-FF83-4886-8454-92A274C07191}';
    IntfIID:   '{DC62DE51-E00E-449B-879C-920F16E4B4A3}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAEndpointDescriptionChecks.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAEndpointDescriptionChecks;
  end;
end;

procedure TUAEndpointDescriptionChecks.ConnectTo(svrIntf: _UAEndpointDescriptionChecks);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAEndpointDescriptionChecks.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAEndpointDescriptionChecks.GetDefaultInterface: _UAEndpointDescriptionChecks;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAEndpointDescriptionChecks.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAEndpointDescriptionChecks.Destroy;
begin
  inherited Destroy;
end;

function TUAEndpointDescriptionChecks.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAEndpointDescriptionChecks.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAEndpointDescriptionChecks.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUAEndpointDescriptionChecks.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUAEndpointDescriptionChecks.Get_CheckEndpointUrl: WordBool;
begin
  Result := DefaultInterface.CheckEndpointUrl;
end;

procedure TUAEndpointDescriptionChecks.Set_CheckEndpointUrl(pRetVal: WordBool);
begin
  DefaultInterface.CheckEndpointUrl := pRetVal;
end;

function TUAEndpointDescriptionChecks.Get_CheckServerApplication: WordBool;
begin
  Result := DefaultInterface.CheckServerApplication;
end;

procedure TUAEndpointDescriptionChecks.Set_CheckServerApplication(pRetVal: WordBool);
begin
  DefaultInterface.CheckServerApplication := pRetVal;
end;

function TUAEndpointDescriptionChecks.Get_CheckServerCertificate: WordBool;
begin
  Result := DefaultInterface.CheckServerCertificate;
end;

procedure TUAEndpointDescriptionChecks.Set_CheckServerCertificate(pRetVal: WordBool);
begin
  DefaultInterface.CheckServerCertificate := pRetVal;
end;

function TUAEndpointDescriptionChecks.Get_CheckSecurityMode: WordBool;
begin
  Result := DefaultInterface.CheckSecurityMode;
end;

procedure TUAEndpointDescriptionChecks.Set_CheckSecurityMode(pRetVal: WordBool);
begin
  DefaultInterface.CheckSecurityMode := pRetVal;
end;

function TUAEndpointDescriptionChecks.Get_CheckSecurityPolicyUri: WordBool;
begin
  Result := DefaultInterface.CheckSecurityPolicyUri;
end;

procedure TUAEndpointDescriptionChecks.Set_CheckSecurityPolicyUri(pRetVal: WordBool);
begin
  DefaultInterface.CheckSecurityPolicyUri := pRetVal;
end;

function TUAEndpointDescriptionChecks.Get_CheckUserIdentityTokens: WordBool;
begin
  Result := DefaultInterface.CheckUserIdentityTokens;
end;

procedure TUAEndpointDescriptionChecks.Set_CheckUserIdentityTokens(pRetVal: WordBool);
begin
  DefaultInterface.CheckUserIdentityTokens := pRetVal;
end;

function TUAEndpointDescriptionChecks.Get_CheckTransportProfileUri: WordBool;
begin
  Result := DefaultInterface.CheckTransportProfileUri;
end;

procedure TUAEndpointDescriptionChecks.Set_CheckTransportProfileUri(pRetVal: WordBool);
begin
  DefaultInterface.CheckTransportProfileUri := pRetVal;
end;

function TUAEndpointDescriptionChecks.Get_RequireHostMatchCertificate: WordBool;
begin
  Result := DefaultInterface.RequireHostMatchCertificate;
end;

procedure TUAEndpointDescriptionChecks.Set_RequireHostMatchCertificate(pRetVal: WordBool);
begin
  DefaultInterface.RequireHostMatchCertificate := pRetVal;
end;

function TUAEndpointDescriptionChecks.Get_RequireValidDiscoveryUrls: WordBool;
begin
  Result := DefaultInterface.RequireValidDiscoveryUrls;
end;

procedure TUAEndpointDescriptionChecks.Set_RequireValidDiscoveryUrls(pRetVal: WordBool);
begin
  DefaultInterface.RequireValidDiscoveryUrls := pRetVal;
end;

function TUAEndpointDescriptionChecks.Get_UseStrictUrlMatch: WordBool;
begin
  Result := DefaultInterface.UseStrictUrlMatch;
end;

procedure TUAEndpointDescriptionChecks.Set_UseStrictUrlMatch(pRetVal: WordBool);
begin
  DefaultInterface.UseStrictUrlMatch := pRetVal;
end;

function TUAEndpointDescriptionChecks.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAEndpointDescriptionChecks.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAEndpointDescriptionChecks.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAEndpointDescriptionChecks.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

procedure TUAEndpointDescriptionChecks.Reset;
begin
  DefaultInterface.Reset;
end;

class function CoUAEndpointSelectionPolicy.Create: _UAEndpointSelectionPolicy;
begin
  Result := CreateComObject(CLASS_UAEndpointSelectionPolicy) as _UAEndpointSelectionPolicy;
end;

class function CoUAEndpointSelectionPolicy.CreateRemote(const MachineName: string): _UAEndpointSelectionPolicy;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAEndpointSelectionPolicy) as _UAEndpointSelectionPolicy;
end;

procedure TUAEndpointSelectionPolicy.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{ED7D4313-690E-4241-B95D-754FD7D283FF}';
    IntfIID:   '{79DE5541-62AA-4848-BE00-944B99745829}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAEndpointSelectionPolicy.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAEndpointSelectionPolicy;
  end;
end;

procedure TUAEndpointSelectionPolicy.ConnectTo(svrIntf: _UAEndpointSelectionPolicy);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAEndpointSelectionPolicy.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAEndpointSelectionPolicy.GetDefaultInterface: _UAEndpointSelectionPolicy;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAEndpointSelectionPolicy.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAEndpointSelectionPolicy.Destroy;
begin
  inherited Destroy;
end;

function TUAEndpointSelectionPolicy.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAEndpointSelectionPolicy.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAEndpointSelectionPolicy.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUAEndpointSelectionPolicy.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUAEndpointSelectionPolicy.Get_AllowedMessageSecurityModes: UAMessageSecurityModes;
begin
  Result := DefaultInterface.AllowedMessageSecurityModes;
end;

procedure TUAEndpointSelectionPolicy.Set_AllowedMessageSecurityModes(pRetVal: UAMessageSecurityModes);
begin
  DefaultInterface.AllowedMessageSecurityModes := pRetVal;
end;

function TUAEndpointSelectionPolicy.Get_AllowZeroSecurityLevel: WordBool;
begin
  Result := DefaultInterface.AllowZeroSecurityLevel;
end;

procedure TUAEndpointSelectionPolicy.Set_AllowZeroSecurityLevel(pRetVal: WordBool);
begin
  DefaultInterface.AllowZeroSecurityLevel := pRetVal;
end;

function TUAEndpointSelectionPolicy.Get_ChannelSecurityRanking: OleVariant;
begin
  Result := DefaultInterface.ChannelSecurityRanking;
end;

function TUAEndpointSelectionPolicy.Get_CommunicationSecurityRanking: OleVariant;
begin
  Result := DefaultInterface.CommunicationSecurityRanking;
end;

function TUAEndpointSelectionPolicy.Get_CustomPolicySpecifier: WideString;
begin
  Result := DefaultInterface.CustomPolicySpecifier;
end;

procedure TUAEndpointSelectionPolicy.Set_CustomPolicySpecifier(const pRetVal: WideString);
begin
  DefaultInterface.CustomPolicySpecifier := pRetVal;
end;

function TUAEndpointSelectionPolicy.Get_DataEncodingName: WideString;
begin
  Result := DefaultInterface.DataEncodingName;
end;

procedure TUAEndpointSelectionPolicy.Set_DataEncodingName(const pRetVal: WideString);
begin
  DefaultInterface.DataEncodingName := pRetVal;
end;

function TUAEndpointSelectionPolicy.Get_EnforceSamePort: WordBool;
begin
  Result := DefaultInterface.EnforceSamePort;
end;

procedure TUAEndpointSelectionPolicy.Set_EnforceSamePort(pRetVal: WordBool);
begin
  DefaultInterface.EnforceSamePort := pRetVal;
end;

function TUAEndpointSelectionPolicy.Get_EnforceSameSite: WordBool;
begin
  Result := DefaultInterface.EnforceSameSite;
end;

procedure TUAEndpointSelectionPolicy.Set_EnforceSameSite(pRetVal: WordBool);
begin
  DefaultInterface.EnforceSameSite := pRetVal;
end;

function TUAEndpointSelectionPolicy.Get_IsPrecise: WordBool;
begin
  Result := DefaultInterface.IsPrecise;
end;

function TUAEndpointSelectionPolicy.Get_MessageSecurityModeName: WideString;
begin
  Result := DefaultInterface.MessageSecurityModeName;
end;

procedure TUAEndpointSelectionPolicy.Set_MessageSecurityModeName(const pRetVal: WideString);
begin
  DefaultInterface.MessageSecurityModeName := pRetVal;
end;

function TUAEndpointSelectionPolicy.Get_MessageSecurityPreference: Sign;
begin
  Result := DefaultInterface.MessageSecurityPreference;
end;

procedure TUAEndpointSelectionPolicy.Set_MessageSecurityPreference(pRetVal: Sign);
begin
  DefaultInterface.MessageSecurityPreference := pRetVal;
end;

function TUAEndpointSelectionPolicy.Get_OrganicSecurityRanking: OleVariant;
begin
  Result := DefaultInterface.OrganicSecurityRanking;
end;

function TUAEndpointSelectionPolicy.Get_ProtocolName: WideString;
begin
  Result := DefaultInterface.ProtocolName;
end;

procedure TUAEndpointSelectionPolicy.Set_ProtocolName(const pRetVal: WideString);
begin
  DefaultInterface.ProtocolName := pRetVal;
end;

function TUAEndpointSelectionPolicy.Get_RejectObsoleteSecurityPolicies: WordBool;
begin
  Result := DefaultInterface.RejectObsoleteSecurityPolicies;
end;

procedure TUAEndpointSelectionPolicy.Set_RejectObsoleteSecurityPolicies(pRetVal: WordBool);
begin
  DefaultInterface.RejectObsoleteSecurityPolicies := pRetVal;
end;

function TUAEndpointSelectionPolicy.Get_RequireAuthentication: WordBool;
begin
  Result := DefaultInterface.RequireAuthentication;
end;

procedure TUAEndpointSelectionPolicy.Set_RequireAuthentication(pRetVal: WordBool);
begin
  DefaultInterface.RequireAuthentication := pRetVal;
end;

function TUAEndpointSelectionPolicy.Get_RequireConfidentiality: WordBool;
begin
  Result := DefaultInterface.RequireConfidentiality;
end;

procedure TUAEndpointSelectionPolicy.Set_RequireConfidentiality(pRetVal: WordBool);
begin
  DefaultInterface.RequireConfidentiality := pRetVal;
end;

function TUAEndpointSelectionPolicy.Get_RequireIntegrity: WordBool;
begin
  Result := DefaultInterface.RequireIntegrity;
end;

procedure TUAEndpointSelectionPolicy.Set_RequireIntegrity(pRetVal: WordBool);
begin
  DefaultInterface.RequireIntegrity := pRetVal;
end;

function TUAEndpointSelectionPolicy.Get_SecurityPolicyDisplayName: WideString;
begin
  Result := DefaultInterface.SecurityPolicyDisplayName;
end;

procedure TUAEndpointSelectionPolicy.Set_SecurityPolicyDisplayName(const pRetVal: WideString);
begin
  DefaultInterface.SecurityPolicyDisplayName := pRetVal;
end;

function TUAEndpointSelectionPolicy.Get_SecurityPolicyUriString: WideString;
begin
  Result := DefaultInterface.SecurityPolicyUriString;
end;

procedure TUAEndpointSelectionPolicy.Set_SecurityPolicyUriString(const pRetVal: WideString);
begin
  DefaultInterface.SecurityPolicyUriString := pRetVal;
end;

function TUAEndpointSelectionPolicy.Get_TransportProfileDisplayName: WideString;
begin
  Result := DefaultInterface.TransportProfileDisplayName;
end;

procedure TUAEndpointSelectionPolicy.Set_TransportProfileDisplayName(const pRetVal: WideString);
begin
  DefaultInterface.TransportProfileDisplayName := pRetVal;
end;

function TUAEndpointSelectionPolicy.Get_TransportProfileUriString: WideString;
begin
  Result := DefaultInterface.TransportProfileUriString;
end;

procedure TUAEndpointSelectionPolicy.Set_TransportProfileUriString(const pRetVal: WideString);
begin
  DefaultInterface.TransportProfileUriString := pRetVal;
end;

function TUAEndpointSelectionPolicy.Get_TransportSecurityRanking: OleVariant;
begin
  Result := DefaultInterface.TransportSecurityRanking;
end;

function TUAEndpointSelectionPolicy.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAEndpointSelectionPolicy.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAEndpointSelectionPolicy.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAEndpointSelectionPolicy.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUAEngineException.Create: _UAEngineException;
begin
  Result := CreateComObject(CLASS_UAEngineException) as _UAEngineException;
end;

class function CoUAEngineException.CreateRemote(const MachineName: string): _UAEngineException;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAEngineException) as _UAEngineException;
end;

procedure TUAEngineException.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{D15CCEAA-601E-45E8-953A-23151869C66B}';
    IntfIID:   '{FB6388F4-EDD4-42E4-9666-ED609791F194}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAEngineException.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAEngineException;
  end;
end;

procedure TUAEngineException.ConnectTo(svrIntf: _UAEngineException);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAEngineException.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAEngineException.GetDefaultInterface: _UAEngineException;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAEngineException.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAEngineException.Destroy;
begin
  inherited Destroy;
end;

function TUAEngineException.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAEngineException.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAEngineException.Get_Message: WideString;
begin
  Result := DefaultInterface.Message;
end;

function TUAEngineException.Get_StackTrace: WideString;
begin
  Result := DefaultInterface.StackTrace;
end;

function TUAEngineException.Get_HelpLink: WideString;
begin
  Result := DefaultInterface.HelpLink;
end;

procedure TUAEngineException.Set_HelpLink(const pRetVal: WideString);
begin
  DefaultInterface.HelpLink := pRetVal;
end;

function TUAEngineException.Get_Source: WideString;
begin
  Result := DefaultInterface.Source;
end;

procedure TUAEngineException.Set_Source(const pRetVal: WideString);
begin
  DefaultInterface.Source := pRetVal;
end;

function TUAEngineException.Get_InnerException: _Exception;
begin
  Result := DefaultInterface.InnerException;
end;

function TUAEngineException.Get_TargetSite: _MethodBase;
begin
  Result := DefaultInterface.TargetSite;
end;

function TUAEngineException.Get_Data: _Dictionary;
begin
  Result := DefaultInterface.Data;
end;

function TUAEngineException.Get_HResult: Integer;
begin
  Result := DefaultInterface.HResult;
end;

function TUAEngineException.Get_ErrorId: WideString;
begin
  Result := DefaultInterface.ErrorId;
end;

function TUAEngineException.Get_ActivityTrace: WideString;
begin
  Result := DefaultInterface.ActivityTrace;
end;

function TUAEngineException.Get_ErrorCode: Integer;
begin
  Result := DefaultInterface.ErrorCode;
end;

function TUAEngineException.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAEngineException.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAEngineException.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAEngineException.GetBaseException: _Exception;
begin
  Result := DefaultInterface.GetBaseException;
end;

procedure TUAEngineException.GetObjectData(const info: _SerializationInfo; context: StreamingContext);
begin
  DefaultInterface.GetObjectData(info, context);
end;

class function CoUAEnhancedClientSessionParameters.Create: _UAClientSessionParameters;
begin
  Result := CreateComObject(CLASS_UAEnhancedClientSessionParameters) as _UAClientSessionParameters;
end;

class function CoUAEnhancedClientSessionParameters.CreateRemote(const MachineName: string): _UAClientSessionParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAEnhancedClientSessionParameters) as _UAClientSessionParameters;
end;

procedure TUAEnhancedClientSessionParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{3F2A5922-8393-486D-B8D2-FD82E006971F}';
    IntfIID:   '{A09524BA-9DE2-4447-99FC-01C4985F7C4D}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAEnhancedClientSessionParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAClientSessionParameters;
  end;
end;

procedure TUAEnhancedClientSessionParameters.ConnectTo(svrIntf: _UAClientSessionParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAEnhancedClientSessionParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAEnhancedClientSessionParameters.GetDefaultInterface: _UAClientSessionParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAEnhancedClientSessionParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAEnhancedClientSessionParameters.Destroy;
begin
  inherited Destroy;
end;

function TUAEnhancedClientSessionParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAEnhancedClientSessionParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAEnhancedClientSessionParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUAEnhancedClientSessionParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUAEnhancedClientSessionParameters.Get_AcknowledgedMessagesLimit: Integer;
begin
  Result := DefaultInterface.AcknowledgedMessagesLimit;
end;

procedure TUAEnhancedClientSessionParameters.Set_AcknowledgedMessagesLimit(pRetVal: Integer);
begin
  DefaultInterface.AcknowledgedMessagesLimit := pRetVal;
end;

function TUAEnhancedClientSessionParameters.Get_AllowEndpointDomainPrompt: WordBool;
begin
  Result := DefaultInterface.AllowEndpointDomainPrompt;
end;

procedure TUAEnhancedClientSessionParameters.Set_AllowEndpointDomainPrompt(pRetVal: WordBool);
begin
  DefaultInterface.AllowEndpointDomainPrompt := pRetVal;
end;

function TUAEnhancedClientSessionParameters.Get_AlwaysPreselectEndpoint: WordBool;
begin
  Result := DefaultInterface.AlwaysPreselectEndpoint;
end;

procedure TUAEnhancedClientSessionParameters.Set_AlwaysPreselectEndpoint(pRetVal: WordBool);
begin
  DefaultInterface.AlwaysPreselectEndpoint := pRetVal;
end;

function TUAEnhancedClientSessionParameters.Get_CheckAvailableSequenceNumbers: WordBool;
begin
  Result := DefaultInterface.CheckAvailableSequenceNumbers;
end;

procedure TUAEnhancedClientSessionParameters.Set_CheckAvailableSequenceNumbers(pRetVal: WordBool);
begin
  DefaultInterface.CheckAvailableSequenceNumbers := pRetVal;
end;

function TUAEnhancedClientSessionParameters.Get_CheckBrowseResults: WordBool;
begin
  Result := DefaultInterface.CheckBrowseResults;
end;

procedure TUAEnhancedClientSessionParameters.Set_CheckBrowseResults(pRetVal: WordBool);
begin
  DefaultInterface.CheckBrowseResults := pRetVal;
end;

function TUAEnhancedClientSessionParameters.Get_CheckEndpointDomain: WordBool;
begin
  Result := DefaultInterface.CheckEndpointDomain;
end;

procedure TUAEnhancedClientSessionParameters.Set_CheckEndpointDomain(pRetVal: WordBool);
begin
  DefaultInterface.CheckEndpointDomain := pRetVal;
end;

function TUAEnhancedClientSessionParameters.Get_CheckNotificationMessage: WordBool;
begin
  Result := DefaultInterface.CheckNotificationMessage;
end;

procedure TUAEnhancedClientSessionParameters.Set_CheckNotificationMessage(pRetVal: WordBool);
begin
  DefaultInterface.CheckNotificationMessage := pRetVal;
end;

function TUAEnhancedClientSessionParameters.Get_CheckSessionId: WordBool;
begin
  Result := DefaultInterface.CheckSessionId;
end;

procedure TUAEnhancedClientSessionParameters.Set_CheckSessionId(pRetVal: WordBool);
begin
  DefaultInterface.CheckSessionId := pRetVal;
end;

function TUAEnhancedClientSessionParameters.Get_CloseTimeout: Integer;
begin
  Result := DefaultInterface.CloseTimeout;
end;

procedure TUAEnhancedClientSessionParameters.Set_CloseTimeout(pRetVal: Integer);
begin
  DefaultInterface.CloseTimeout := pRetVal;
end;

function TUAEnhancedClientSessionParameters.Get_DiagnosticsMasks: UADiagnosticsMasks;
begin
  Result := DefaultInterface.DiagnosticsMasks;
end;

procedure TUAEnhancedClientSessionParameters.Set_DiagnosticsMasks(pRetVal: UADiagnosticsMasks);
begin
  DefaultInterface.DiagnosticsMasks := pRetVal;
end;

function TUAEnhancedClientSessionParameters.Get_EndpointDescriptionChecks: _UAEndpointDescriptionChecks;
begin
  Result := DefaultInterface.EndpointDescriptionChecks;
end;

procedure TUAEnhancedClientSessionParameters._Set_EndpointDescriptionChecks(const pRetVal: _UAEndpointDescriptionChecks);
begin
  DefaultInterface.EndpointDescriptionChecks := pRetVal;
end;

function TUAEnhancedClientSessionParameters.Get_EndpointSelectionPolicy: _UAEndpointSelectionPolicy;
begin
  Result := DefaultInterface.EndpointSelectionPolicy;
end;

procedure TUAEnhancedClientSessionParameters._Set_EndpointSelectionPolicy(const pRetVal: _UAEndpointSelectionPolicy);
begin
  DefaultInterface.EndpointSelectionPolicy := pRetVal;
end;

function TUAEnhancedClientSessionParameters.Get_EndpointSelectionTimeout: Integer;
begin
  Result := DefaultInterface.EndpointSelectionTimeout;
end;

procedure TUAEnhancedClientSessionParameters.Set_EndpointSelectionTimeout(pRetVal: Integer);
begin
  DefaultInterface.EndpointSelectionTimeout := pRetVal;
end;

function TUAEnhancedClientSessionParameters.Get_KeepAliveInterval: Integer;
begin
  Result := DefaultInterface.KeepAliveInterval;
end;

procedure TUAEnhancedClientSessionParameters.Set_KeepAliveInterval(pRetVal: Integer);
begin
  DefaultInterface.KeepAliveInterval := pRetVal;
end;

function TUAEnhancedClientSessionParameters.Get_KeepAliveIntervalDebug: Integer;
begin
  Result := DefaultInterface.KeepAliveIntervalDebug;
end;

procedure TUAEnhancedClientSessionParameters.Set_KeepAliveIntervalDebug(pRetVal: Integer);
begin
  DefaultInterface.KeepAliveIntervalDebug := pRetVal;
end;

function TUAEnhancedClientSessionParameters.Get_LocaleId: WideString;
begin
  Result := DefaultInterface.LocaleId;
end;

procedure TUAEnhancedClientSessionParameters.Set_LocaleId(const pRetVal: WideString);
begin
  DefaultInterface.LocaleId := pRetVal;
end;

function TUAEnhancedClientSessionParameters.Get_MaximumReferencesPerBrowseNode: Integer;
begin
  Result := DefaultInterface.MaximumReferencesPerBrowseNode;
end;

procedure TUAEnhancedClientSessionParameters.Set_MaximumReferencesPerBrowseNode(pRetVal: Integer);
begin
  DefaultInterface.MaximumReferencesPerBrowseNode := pRetVal;
end;

function TUAEnhancedClientSessionParameters.Get_OperationTimeout: Integer;
begin
  Result := DefaultInterface.OperationTimeout;
end;

procedure TUAEnhancedClientSessionParameters.Set_OperationTimeout(pRetVal: Integer);
begin
  DefaultInterface.OperationTimeout := pRetVal;
end;

function TUAEnhancedClientSessionParameters.Get_PendingMessagesLimit: Integer;
begin
  Result := DefaultInterface.PendingMessagesLimit;
end;

procedure TUAEnhancedClientSessionParameters.Set_PendingMessagesLimit(pRetVal: Integer);
begin
  DefaultInterface.PendingMessagesLimit := pRetVal;
end;

function TUAEnhancedClientSessionParameters.Get_PreselectedEndpointValidityPeriod: Integer;
begin
  Result := DefaultInterface.PreselectedEndpointValidityPeriod;
end;

procedure TUAEnhancedClientSessionParameters.Set_PreselectedEndpointValidityPeriod(pRetVal: Integer);
begin
  DefaultInterface.PreselectedEndpointValidityPeriod := pRetVal;
end;

function TUAEnhancedClientSessionParameters.Get_RequireMatchingServerSoftwareCertificates: WordBool;
begin
  Result := DefaultInterface.RequireMatchingServerSoftwareCertificates;
end;

procedure TUAEnhancedClientSessionParameters.Set_RequireMatchingServerSoftwareCertificates(pRetVal: WordBool);
begin
  DefaultInterface.RequireMatchingServerSoftwareCertificates := pRetVal;
end;

function TUAEnhancedClientSessionParameters.Get_RequireNonEmptyServerSignature: WordBool;
begin
  Result := DefaultInterface.RequireNonEmptyServerSignature;
end;

procedure TUAEnhancedClientSessionParameters.Set_RequireNonEmptyServerSignature(pRetVal: WordBool);
begin
  DefaultInterface.RequireNonEmptyServerSignature := pRetVal;
end;

function TUAEnhancedClientSessionParameters.Get_RequireServerEndpointsMatchDiscovery: WordBool;
begin
  Result := DefaultInterface.RequireServerEndpointsMatchDiscovery;
end;

procedure TUAEnhancedClientSessionParameters.Set_RequireServerEndpointsMatchDiscovery(pRetVal: WordBool);
begin
  DefaultInterface.RequireServerEndpointsMatchDiscovery := pRetVal;
end;

function TUAEnhancedClientSessionParameters.Get_RequireTimestampsAsRequested: WordBool;
begin
  Result := DefaultInterface.RequireTimestampsAsRequested;
end;

procedure TUAEnhancedClientSessionParameters.Set_RequireTimestampsAsRequested(pRetVal: WordBool);
begin
  DefaultInterface.RequireTimestampsAsRequested := pRetVal;
end;

function TUAEnhancedClientSessionParameters.Get_RequireUniqueAuthenticationToken: WordBool;
begin
  Result := DefaultInterface.RequireUniqueAuthenticationToken;
end;

procedure TUAEnhancedClientSessionParameters.Set_RequireUniqueAuthenticationToken(pRetVal: WordBool);
begin
  DefaultInterface.RequireUniqueAuthenticationToken := pRetVal;
end;

function TUAEnhancedClientSessionParameters.Get_RequireUniqueServerNonce: WordBool;
begin
  Result := DefaultInterface.RequireUniqueServerNonce;
end;

procedure TUAEnhancedClientSessionParameters.Set_RequireUniqueServerNonce(pRetVal: WordBool);
begin
  DefaultInterface.RequireUniqueServerNonce := pRetVal;
end;

function TUAEnhancedClientSessionParameters.Get_RequireValidAuthenticationToken: WordBool;
begin
  Result := DefaultInterface.RequireValidAuthenticationToken;
end;

procedure TUAEnhancedClientSessionParameters.Set_RequireValidAuthenticationToken(pRetVal: WordBool);
begin
  DefaultInterface.RequireValidAuthenticationToken := pRetVal;
end;

function TUAEnhancedClientSessionParameters.Get_RequireValidServerNonce: WordBool;
begin
  Result := DefaultInterface.RequireValidServerNonce;
end;

procedure TUAEnhancedClientSessionParameters.Set_RequireValidServerNonce(pRetVal: WordBool);
begin
  DefaultInterface.RequireValidServerNonce := pRetVal;
end;

function TUAEnhancedClientSessionParameters.Get_RetrialDelay: Integer;
begin
  Result := DefaultInterface.RetrialDelay;
end;

procedure TUAEnhancedClientSessionParameters.Set_RetrialDelay(pRetVal: Integer);
begin
  DefaultInterface.RetrialDelay := pRetVal;
end;

function TUAEnhancedClientSessionParameters.Get_SanitizeReferenceDescriptions: WordBool;
begin
  Result := DefaultInterface.SanitizeReferenceDescriptions;
end;

procedure TUAEnhancedClientSessionParameters.Set_SanitizeReferenceDescriptions(pRetVal: WordBool);
begin
  DefaultInterface.SanitizeReferenceDescriptions := pRetVal;
end;

function TUAEnhancedClientSessionParameters.Get_SessionConnectTimeout: Integer;
begin
  Result := DefaultInterface.SessionConnectTimeout;
end;

procedure TUAEnhancedClientSessionParameters.Set_SessionConnectTimeout(pRetVal: Integer);
begin
  DefaultInterface.SessionConnectTimeout := pRetVal;
end;

function TUAEnhancedClientSessionParameters.Get_SessionTimeout: Integer;
begin
  Result := DefaultInterface.SessionTimeout;
end;

procedure TUAEnhancedClientSessionParameters.Set_SessionTimeout(pRetVal: Integer);
begin
  DefaultInterface.SessionTimeout := pRetVal;
end;

function TUAEnhancedClientSessionParameters.Get_SessionTimeoutDebug: Integer;
begin
  Result := DefaultInterface.SessionTimeoutDebug;
end;

procedure TUAEnhancedClientSessionParameters.Set_SessionTimeoutDebug(pRetVal: Integer);
begin
  DefaultInterface.SessionTimeoutDebug := pRetVal;
end;

function TUAEnhancedClientSessionParameters.Get_ShortestAllowedRevisedSessionTimeout: Double;
begin
  Result := DefaultInterface.ShortestAllowedRevisedSessionTimeout;
end;

procedure TUAEnhancedClientSessionParameters.Set_ShortestAllowedRevisedSessionTimeout(pRetVal: Double);
begin
  DefaultInterface.ShortestAllowedRevisedSessionTimeout := pRetVal;
end;

function TUAEnhancedClientSessionParameters.Get_UpdateEndpointBeforeConnect: WordBool;
begin
  Result := DefaultInterface.UpdateEndpointBeforeConnect;
end;

procedure TUAEnhancedClientSessionParameters.Set_UpdateEndpointBeforeConnect(pRetVal: WordBool);
begin
  DefaultInterface.UpdateEndpointBeforeConnect := pRetVal;
end;

function TUAEnhancedClientSessionParameters.Get_UserIdentity: _UserIdentity;
begin
  Result := DefaultInterface.UserIdentity;
end;

procedure TUAEnhancedClientSessionParameters._Set_UserIdentity(const pRetVal: _UserIdentity);
begin
  DefaultInterface.UserIdentity := pRetVal;
end;

function TUAEnhancedClientSessionParameters.Get_WriteNarrowestIntegerType: WordBool;
begin
  Result := DefaultInterface.WriteNarrowestIntegerType;
end;

procedure TUAEnhancedClientSessionParameters.Set_WriteNarrowestIntegerType(pRetVal: WordBool);
begin
  DefaultInterface.WriteNarrowestIntegerType := pRetVal;
end;

function TUAEnhancedClientSessionParameters.Get_WriteNarrowestRealType: WordBool;
begin
  Result := DefaultInterface.WriteNarrowestRealType;
end;

procedure TUAEnhancedClientSessionParameters.Set_WriteNarrowestRealType(pRetVal: WordBool);
begin
  DefaultInterface.WriteNarrowestRealType := pRetVal;
end;

function TUAEnhancedClientSessionParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAEnhancedClientSessionParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAEnhancedClientSessionParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAEnhancedClientSessionParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

procedure TUAEnhancedClientSessionParameters.Reset;
begin
  DefaultInterface.Reset;
end;

class function CoUAHostParameters.Create: _UAHostParameters;
begin
  Result := CreateComObject(CLASS_UAHostParameters) as _UAHostParameters;
end;

class function CoUAHostParameters.CreateRemote(const MachineName: string): _UAHostParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAHostParameters) as _UAHostParameters;
end;

procedure TUAHostParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{9576F630-4954-405E-AB19-58AE78EACEC4}';
    IntfIID:   '{A2020BCE-F738-4956-8021-2D603850BBB1}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAHostParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAHostParameters;
  end;
end;

procedure TUAHostParameters.ConnectTo(svrIntf: _UAHostParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAHostParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAHostParameters.GetDefaultInterface: _UAHostParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAHostParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAHostParameters.Destroy;
begin
  inherited Destroy;
end;

function TUAHostParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAHostParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAHostParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUAHostParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUAHostParameters.Get_DiscoveryUriTemplateStrings: _StringCollection;
begin
  Result := DefaultInterface.DiscoveryUriTemplateStrings;
end;

procedure TUAHostParameters._Set_DiscoveryUriTemplateStrings(const pRetVal: _StringCollection);
begin
  DefaultInterface.DiscoveryUriTemplateStrings := pRetVal;
end;

function TUAHostParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAHostParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAHostParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAHostParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

procedure TUAHostParameters.Reset;
begin
  DefaultInterface.Reset;
end;

class function CoUASmartClientEngineParameters.Create: _UASmartClientEngineParameters;
begin
  Result := CreateComObject(CLASS_UASmartClientEngineParameters) as _UASmartClientEngineParameters;
end;

class function CoUASmartClientEngineParameters.CreateRemote(const MachineName: string): _UASmartClientEngineParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UASmartClientEngineParameters) as _UASmartClientEngineParameters;
end;

procedure TUASmartClientEngineParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{5631FC51-ECD0-408A-B48B-BC3D34EAC4E3}';
    IntfIID:   '{61307AAA-A0B0-400B-A24B-0BC60694B324}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUASmartClientEngineParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UASmartClientEngineParameters;
  end;
end;

procedure TUASmartClientEngineParameters.ConnectTo(svrIntf: _UASmartClientEngineParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUASmartClientEngineParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUASmartClientEngineParameters.GetDefaultInterface: _UASmartClientEngineParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUASmartClientEngineParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUASmartClientEngineParameters.Destroy;
begin
  inherited Destroy;
end;

function TUASmartClientEngineParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUASmartClientEngineParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUASmartClientEngineParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUASmartClientEngineParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUASmartClientEngineParameters.Get_CertificateAcceptancePolicy: _UACertificateAcceptancePolicy;
begin
  Result := DefaultInterface.CertificateAcceptancePolicy;
end;

procedure TUASmartClientEngineParameters._Set_CertificateAcceptancePolicy(const pRetVal: _UACertificateAcceptancePolicy);
begin
  DefaultInterface.CertificateAcceptancePolicy := pRetVal;
end;

function TUASmartClientEngineParameters.Get_ConfigurationPropertyOverrides: _StringObjectDictionary;
begin
  Result := DefaultInterface.ConfigurationPropertyOverrides;
end;

procedure TUASmartClientEngineParameters._Set_ConfigurationPropertyOverrides(const pRetVal: _StringObjectDictionary);
begin
  DefaultInterface.ConfigurationPropertyOverrides := pRetVal;
end;

function TUASmartClientEngineParameters.Get_ConfigurationSources: UAConfigurationSources;
begin
  Result := DefaultInterface.ConfigurationSources;
end;

procedure TUASmartClientEngineParameters.Set_ConfigurationSources(pRetVal: UAConfigurationSources);
begin
  DefaultInterface.ConfigurationSources := pRetVal;
end;

function TUASmartClientEngineParameters.Get_DebuggerDetectionOverride: Sign;
begin
  Result := DefaultInterface.DebuggerDetectionOverride;
end;

procedure TUASmartClientEngineParameters.Set_DebuggerDetectionOverride(pRetVal: Sign);
begin
  DefaultInterface.DebuggerDetectionOverride := pRetVal;
end;

function TUASmartClientEngineParameters.Get_gdsEndpointDescriptor: _UAEndpointDescriptor;
begin
  Result := DefaultInterface.gdsEndpointDescriptor;
end;

procedure TUASmartClientEngineParameters._Set_gdsEndpointDescriptor(const pRetVal: _UAEndpointDescriptor);
begin
  DefaultInterface.gdsEndpointDescriptor := pRetVal;
end;

function TUASmartClientEngineParameters.Get_RetrialDelay: Integer;
begin
  Result := DefaultInterface.RetrialDelay;
end;

procedure TUASmartClientEngineParameters.Set_RetrialDelay(pRetVal: Integer);
begin
  DefaultInterface.RetrialDelay := pRetVal;
end;

function TUASmartClientEngineParameters.Get_ReconnectionPeriod: Integer;
begin
  Result := DefaultInterface.ReconnectionPeriod;
end;

procedure TUASmartClientEngineParameters.Set_ReconnectionPeriod(pRetVal: Integer);
begin
  DefaultInterface.ReconnectionPeriod := pRetVal;
end;

function TUASmartClientEngineParameters.Get_UserInteractionParameters: _UAUserInteractionParameters;
begin
  Result := DefaultInterface.UserInteractionParameters;
end;

procedure TUASmartClientEngineParameters._Set_UserInteractionParameters(const pRetVal: _UAUserInteractionParameters);
begin
  DefaultInterface.UserInteractionParameters := pRetVal;
end;

function TUASmartClientEngineParameters.Get_HttpsCertificateAcceptancePolicy: _UACertificateAcceptancePolicy;
begin
  Result := DefaultInterface.HttpsCertificateAcceptancePolicy;
end;

procedure TUASmartClientEngineParameters._Set_HttpsCertificateAcceptancePolicy(const pRetVal: _UACertificateAcceptancePolicy);
begin
  DefaultInterface.HttpsCertificateAcceptancePolicy := pRetVal;
end;

function TUASmartClientEngineParameters.Get_UseCustomHttpsCertificateValidation: WordBool;
begin
  Result := DefaultInterface.UseCustomHttpsCertificateValidation;
end;

procedure TUASmartClientEngineParameters.Set_UseCustomHttpsCertificateValidation(pRetVal: WordBool);
begin
  DefaultInterface.UseCustomHttpsCertificateValidation := pRetVal;
end;

function TUASmartClientEngineParameters.Get_GarbageCollectionPeriod: Integer;
begin
  Result := DefaultInterface.GarbageCollectionPeriod;
end;

procedure TUASmartClientEngineParameters.Set_GarbageCollectionPeriod(pRetVal: Integer);
begin
  DefaultInterface.GarbageCollectionPeriod := pRetVal;
end;

function TUASmartClientEngineParameters.Get_MaximumDormantSessions: Integer;
begin
  Result := DefaultInterface.MaximumDormantSessions;
end;

procedure TUASmartClientEngineParameters.Set_MaximumDormantSessions(pRetVal: Integer);
begin
  DefaultInterface.MaximumDormantSessions := pRetVal;
end;

function TUASmartClientEngineParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUASmartClientEngineParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUASmartClientEngineParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUASmartClientEngineParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

procedure TUASmartClientEngineParameters.Reset;
begin
  DefaultInterface.Reset;
end;

class function CoUASmartClientSessionParameters.Create: _UASmartClientSessionParameters;
begin
  Result := CreateComObject(CLASS_UASmartClientSessionParameters) as _UASmartClientSessionParameters;
end;

class function CoUASmartClientSessionParameters.CreateRemote(const MachineName: string): _UASmartClientSessionParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UASmartClientSessionParameters) as _UASmartClientSessionParameters;
end;

procedure TUASmartClientSessionParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{C1B2536E-266B-49F2-81F4-7FB0613BAD2E}';
    IntfIID:   '{2056DFDF-FEF9-41D7-9A27-C580BAA7D5B1}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUASmartClientSessionParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UASmartClientSessionParameters;
  end;
end;

procedure TUASmartClientSessionParameters.ConnectTo(svrIntf: _UASmartClientSessionParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUASmartClientSessionParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUASmartClientSessionParameters.GetDefaultInterface: _UASmartClientSessionParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUASmartClientSessionParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUASmartClientSessionParameters.Destroy;
begin
  inherited Destroy;
end;

function TUASmartClientSessionParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUASmartClientSessionParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUASmartClientSessionParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUASmartClientSessionParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUASmartClientSessionParameters.Get_AcknowledgedMessagesLimit: Integer;
begin
  Result := DefaultInterface.AcknowledgedMessagesLimit;
end;

procedure TUASmartClientSessionParameters.Set_AcknowledgedMessagesLimit(pRetVal: Integer);
begin
  DefaultInterface.AcknowledgedMessagesLimit := pRetVal;
end;

function TUASmartClientSessionParameters.Get_AllowEndpointDomainPrompt: WordBool;
begin
  Result := DefaultInterface.AllowEndpointDomainPrompt;
end;

procedure TUASmartClientSessionParameters.Set_AllowEndpointDomainPrompt(pRetVal: WordBool);
begin
  DefaultInterface.AllowEndpointDomainPrompt := pRetVal;
end;

function TUASmartClientSessionParameters.Get_AlwaysPreselectEndpoint: WordBool;
begin
  Result := DefaultInterface.AlwaysPreselectEndpoint;
end;

procedure TUASmartClientSessionParameters.Set_AlwaysPreselectEndpoint(pRetVal: WordBool);
begin
  DefaultInterface.AlwaysPreselectEndpoint := pRetVal;
end;

function TUASmartClientSessionParameters.Get_CheckAvailableSequenceNumbers: WordBool;
begin
  Result := DefaultInterface.CheckAvailableSequenceNumbers;
end;

procedure TUASmartClientSessionParameters.Set_CheckAvailableSequenceNumbers(pRetVal: WordBool);
begin
  DefaultInterface.CheckAvailableSequenceNumbers := pRetVal;
end;

function TUASmartClientSessionParameters.Get_CheckBrowseResults: WordBool;
begin
  Result := DefaultInterface.CheckBrowseResults;
end;

procedure TUASmartClientSessionParameters.Set_CheckBrowseResults(pRetVal: WordBool);
begin
  DefaultInterface.CheckBrowseResults := pRetVal;
end;

function TUASmartClientSessionParameters.Get_CheckEndpointDomain: WordBool;
begin
  Result := DefaultInterface.CheckEndpointDomain;
end;

procedure TUASmartClientSessionParameters.Set_CheckEndpointDomain(pRetVal: WordBool);
begin
  DefaultInterface.CheckEndpointDomain := pRetVal;
end;

function TUASmartClientSessionParameters.Get_CheckNotificationMessage: WordBool;
begin
  Result := DefaultInterface.CheckNotificationMessage;
end;

procedure TUASmartClientSessionParameters.Set_CheckNotificationMessage(pRetVal: WordBool);
begin
  DefaultInterface.CheckNotificationMessage := pRetVal;
end;

function TUASmartClientSessionParameters.Get_CheckSessionId: WordBool;
begin
  Result := DefaultInterface.CheckSessionId;
end;

procedure TUASmartClientSessionParameters.Set_CheckSessionId(pRetVal: WordBool);
begin
  DefaultInterface.CheckSessionId := pRetVal;
end;

function TUASmartClientSessionParameters.Get_CloseTimeout: Integer;
begin
  Result := DefaultInterface.CloseTimeout;
end;

procedure TUASmartClientSessionParameters.Set_CloseTimeout(pRetVal: Integer);
begin
  DefaultInterface.CloseTimeout := pRetVal;
end;

function TUASmartClientSessionParameters.Get_DiagnosticsMasks: UADiagnosticsMasks;
begin
  Result := DefaultInterface.DiagnosticsMasks;
end;

procedure TUASmartClientSessionParameters.Set_DiagnosticsMasks(pRetVal: UADiagnosticsMasks);
begin
  DefaultInterface.DiagnosticsMasks := pRetVal;
end;

function TUASmartClientSessionParameters.Get_EndpointDescriptionChecks: _UAEndpointDescriptionChecks;
begin
  Result := DefaultInterface.EndpointDescriptionChecks;
end;

procedure TUASmartClientSessionParameters._Set_EndpointDescriptionChecks(const pRetVal: _UAEndpointDescriptionChecks);
begin
  DefaultInterface.EndpointDescriptionChecks := pRetVal;
end;

function TUASmartClientSessionParameters.Get_EndpointSelectionPolicy: _UAEndpointSelectionPolicy;
begin
  Result := DefaultInterface.EndpointSelectionPolicy;
end;

procedure TUASmartClientSessionParameters._Set_EndpointSelectionPolicy(const pRetVal: _UAEndpointSelectionPolicy);
begin
  DefaultInterface.EndpointSelectionPolicy := pRetVal;
end;

function TUASmartClientSessionParameters.Get_EndpointSelectionTimeout: Integer;
begin
  Result := DefaultInterface.EndpointSelectionTimeout;
end;

procedure TUASmartClientSessionParameters.Set_EndpointSelectionTimeout(pRetVal: Integer);
begin
  DefaultInterface.EndpointSelectionTimeout := pRetVal;
end;

function TUASmartClientSessionParameters.Get_KeepAliveInterval: Integer;
begin
  Result := DefaultInterface.KeepAliveInterval;
end;

procedure TUASmartClientSessionParameters.Set_KeepAliveInterval(pRetVal: Integer);
begin
  DefaultInterface.KeepAliveInterval := pRetVal;
end;

function TUASmartClientSessionParameters.Get_KeepAliveIntervalDebug: Integer;
begin
  Result := DefaultInterface.KeepAliveIntervalDebug;
end;

procedure TUASmartClientSessionParameters.Set_KeepAliveIntervalDebug(pRetVal: Integer);
begin
  DefaultInterface.KeepAliveIntervalDebug := pRetVal;
end;

function TUASmartClientSessionParameters.Get_LocaleId: WideString;
begin
  Result := DefaultInterface.LocaleId;
end;

procedure TUASmartClientSessionParameters.Set_LocaleId(const pRetVal: WideString);
begin
  DefaultInterface.LocaleId := pRetVal;
end;

function TUASmartClientSessionParameters.Get_OperationTimeout: Integer;
begin
  Result := DefaultInterface.OperationTimeout;
end;

procedure TUASmartClientSessionParameters.Set_OperationTimeout(pRetVal: Integer);
begin
  DefaultInterface.OperationTimeout := pRetVal;
end;

function TUASmartClientSessionParameters.Get_MaximumReferencesPerBrowseNode: Integer;
begin
  Result := DefaultInterface.MaximumReferencesPerBrowseNode;
end;

procedure TUASmartClientSessionParameters.Set_MaximumReferencesPerBrowseNode(pRetVal: Integer);
begin
  DefaultInterface.MaximumReferencesPerBrowseNode := pRetVal;
end;

function TUASmartClientSessionParameters.Get_PendingMessagesLimit: Integer;
begin
  Result := DefaultInterface.PendingMessagesLimit;
end;

procedure TUASmartClientSessionParameters.Set_PendingMessagesLimit(pRetVal: Integer);
begin
  DefaultInterface.PendingMessagesLimit := pRetVal;
end;

function TUASmartClientSessionParameters.Get_PreselectedEndpointValidityPeriod: Integer;
begin
  Result := DefaultInterface.PreselectedEndpointValidityPeriod;
end;

procedure TUASmartClientSessionParameters.Set_PreselectedEndpointValidityPeriod(pRetVal: Integer);
begin
  DefaultInterface.PreselectedEndpointValidityPeriod := pRetVal;
end;

function TUASmartClientSessionParameters.Get_RequireMatchingServerSoftwareCertificates: WordBool;
begin
  Result := DefaultInterface.RequireMatchingServerSoftwareCertificates;
end;

procedure TUASmartClientSessionParameters.Set_RequireMatchingServerSoftwareCertificates(pRetVal: WordBool);
begin
  DefaultInterface.RequireMatchingServerSoftwareCertificates := pRetVal;
end;

function TUASmartClientSessionParameters.Get_RequireNonEmptyServerSignature: WordBool;
begin
  Result := DefaultInterface.RequireNonEmptyServerSignature;
end;

procedure TUASmartClientSessionParameters.Set_RequireNonEmptyServerSignature(pRetVal: WordBool);
begin
  DefaultInterface.RequireNonEmptyServerSignature := pRetVal;
end;

function TUASmartClientSessionParameters.Get_RequireServerEndpointsMatchDiscovery: WordBool;
begin
  Result := DefaultInterface.RequireServerEndpointsMatchDiscovery;
end;

procedure TUASmartClientSessionParameters.Set_RequireServerEndpointsMatchDiscovery(pRetVal: WordBool);
begin
  DefaultInterface.RequireServerEndpointsMatchDiscovery := pRetVal;
end;

function TUASmartClientSessionParameters.Get_RequireTimestampsAsRequested: WordBool;
begin
  Result := DefaultInterface.RequireTimestampsAsRequested;
end;

procedure TUASmartClientSessionParameters.Set_RequireTimestampsAsRequested(pRetVal: WordBool);
begin
  DefaultInterface.RequireTimestampsAsRequested := pRetVal;
end;

function TUASmartClientSessionParameters.Get_RequireUniqueAuthenticationToken: WordBool;
begin
  Result := DefaultInterface.RequireUniqueAuthenticationToken;
end;

procedure TUASmartClientSessionParameters.Set_RequireUniqueAuthenticationToken(pRetVal: WordBool);
begin
  DefaultInterface.RequireUniqueAuthenticationToken := pRetVal;
end;

function TUASmartClientSessionParameters.Get_RequireUniqueServerNonce: WordBool;
begin
  Result := DefaultInterface.RequireUniqueServerNonce;
end;

procedure TUASmartClientSessionParameters.Set_RequireUniqueServerNonce(pRetVal: WordBool);
begin
  DefaultInterface.RequireUniqueServerNonce := pRetVal;
end;

function TUASmartClientSessionParameters.Get_RequireValidAuthenticationToken: WordBool;
begin
  Result := DefaultInterface.RequireValidAuthenticationToken;
end;

procedure TUASmartClientSessionParameters.Set_RequireValidAuthenticationToken(pRetVal: WordBool);
begin
  DefaultInterface.RequireValidAuthenticationToken := pRetVal;
end;

function TUASmartClientSessionParameters.Get_RequireValidServerNonce: WordBool;
begin
  Result := DefaultInterface.RequireValidServerNonce;
end;

procedure TUASmartClientSessionParameters.Set_RequireValidServerNonce(pRetVal: WordBool);
begin
  DefaultInterface.RequireValidServerNonce := pRetVal;
end;

function TUASmartClientSessionParameters.Get_RetrialDelay: Integer;
begin
  Result := DefaultInterface.RetrialDelay;
end;

procedure TUASmartClientSessionParameters.Set_RetrialDelay(pRetVal: Integer);
begin
  DefaultInterface.RetrialDelay := pRetVal;
end;

function TUASmartClientSessionParameters.Get_SanitizeReferenceDescriptions: WordBool;
begin
  Result := DefaultInterface.SanitizeReferenceDescriptions;
end;

procedure TUASmartClientSessionParameters.Set_SanitizeReferenceDescriptions(pRetVal: WordBool);
begin
  DefaultInterface.SanitizeReferenceDescriptions := pRetVal;
end;

function TUASmartClientSessionParameters.Get_SessionConnectTimeout: Integer;
begin
  Result := DefaultInterface.SessionConnectTimeout;
end;

procedure TUASmartClientSessionParameters.Set_SessionConnectTimeout(pRetVal: Integer);
begin
  DefaultInterface.SessionConnectTimeout := pRetVal;
end;

function TUASmartClientSessionParameters.Get_SessionTimeout: Integer;
begin
  Result := DefaultInterface.SessionTimeout;
end;

procedure TUASmartClientSessionParameters.Set_SessionTimeout(pRetVal: Integer);
begin
  DefaultInterface.SessionTimeout := pRetVal;
end;

function TUASmartClientSessionParameters.Get_SessionTimeoutDebug: Integer;
begin
  Result := DefaultInterface.SessionTimeoutDebug;
end;

procedure TUASmartClientSessionParameters.Set_SessionTimeoutDebug(pRetVal: Integer);
begin
  DefaultInterface.SessionTimeoutDebug := pRetVal;
end;

function TUASmartClientSessionParameters.Get_ShortestAllowedRevisedSessionTimeout: Double;
begin
  Result := DefaultInterface.ShortestAllowedRevisedSessionTimeout;
end;

procedure TUASmartClientSessionParameters.Set_ShortestAllowedRevisedSessionTimeout(pRetVal: Double);
begin
  DefaultInterface.ShortestAllowedRevisedSessionTimeout := pRetVal;
end;

function TUASmartClientSessionParameters.Get_UpdateEndpointBeforeConnect: WordBool;
begin
  Result := DefaultInterface.UpdateEndpointBeforeConnect;
end;

procedure TUASmartClientSessionParameters.Set_UpdateEndpointBeforeConnect(pRetVal: WordBool);
begin
  DefaultInterface.UpdateEndpointBeforeConnect := pRetVal;
end;

function TUASmartClientSessionParameters.Get_UserIdentity: _UserIdentity;
begin
  Result := DefaultInterface.UserIdentity;
end;

procedure TUASmartClientSessionParameters._Set_UserIdentity(const pRetVal: _UserIdentity);
begin
  DefaultInterface.UserIdentity := pRetVal;
end;

function TUASmartClientSessionParameters.Get_WriteNarrowestIntegerType: WordBool;
begin
  Result := DefaultInterface.WriteNarrowestIntegerType;
end;

procedure TUASmartClientSessionParameters.Set_WriteNarrowestIntegerType(pRetVal: WordBool);
begin
  DefaultInterface.WriteNarrowestIntegerType := pRetVal;
end;

function TUASmartClientSessionParameters.Get_WriteNarrowestRealType: WordBool;
begin
  Result := DefaultInterface.WriteNarrowestRealType;
end;

procedure TUASmartClientSessionParameters.Set_WriteNarrowestRealType(pRetVal: WordBool);
begin
  DefaultInterface.WriteNarrowestRealType := pRetVal;
end;

function TUASmartClientSessionParameters.Get_EnableStatusSubscription: WordBool;
begin
  Result := DefaultInterface.EnableStatusSubscription;
end;

procedure TUASmartClientSessionParameters.Set_EnableStatusSubscription(pRetVal: WordBool);
begin
  DefaultInterface.EnableStatusSubscription := pRetVal;
end;

function TUASmartClientSessionParameters.Get_MaximumMonitoredItemsPerSubscription: Integer;
begin
  Result := DefaultInterface.MaximumMonitoredItemsPerSubscription;
end;

procedure TUASmartClientSessionParameters.Set_MaximumMonitoredItemsPerSubscription(pRetVal: Integer);
begin
  DefaultInterface.MaximumMonitoredItemsPerSubscription := pRetVal;
end;

function TUASmartClientSessionParameters.Get_ServerShutdownRetrialDelay: Integer;
begin
  Result := DefaultInterface.ServerShutdownRetrialDelay;
end;

procedure TUASmartClientSessionParameters.Set_ServerShutdownRetrialDelay(pRetVal: Integer);
begin
  DefaultInterface.ServerShutdownRetrialDelay := pRetVal;
end;

function TUASmartClientSessionParameters.Get_StatusSubscriptionSamplingInterval: Integer;
begin
  Result := DefaultInterface.StatusSubscriptionSamplingInterval;
end;

procedure TUASmartClientSessionParameters.Set_StatusSubscriptionSamplingInterval(pRetVal: Integer);
begin
  DefaultInterface.StatusSubscriptionSamplingInterval := pRetVal;
end;

function TUASmartClientSessionParameters.Get_DormancyPeriod: Int64;
begin
  Result := DefaultInterface.DormancyPeriod;
end;

procedure TUASmartClientSessionParameters.Set_DormancyPeriod(pRetVal: Int64);
begin
  DefaultInterface.DormancyPeriod := pRetVal;
end;

function TUASmartClientSessionParameters.Get_DormancyPeriodDouble: Double;
begin
  Result := DefaultInterface.DormancyPeriodDouble;
end;

procedure TUASmartClientSessionParameters.Set_DormancyPeriodDouble(pRetVal: Double);
begin
  DefaultInterface.DormancyPeriodDouble := pRetVal;
end;

function TUASmartClientSessionParameters.Get_HoldPeriod: Integer;
begin
  Result := DefaultInterface.HoldPeriod;
end;

procedure TUASmartClientSessionParameters.Set_HoldPeriod(pRetVal: Integer);
begin
  DefaultInterface.HoldPeriod := pRetVal;
end;

function TUASmartClientSessionParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUASmartClientSessionParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUASmartClientSessionParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUASmartClientSessionParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

procedure TUASmartClientSessionParameters.Reset;
begin
  DefaultInterface.Reset;
end;

class function CoUAUserInteractionParameters.Create: _UAUserInteractionParameters;
begin
  Result := CreateComObject(CLASS_UAUserInteractionParameters) as _UAUserInteractionParameters;
end;

class function CoUAUserInteractionParameters.CreateRemote(const MachineName: string): _UAUserInteractionParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAUserInteractionParameters) as _UAUserInteractionParameters;
end;

procedure TUAUserInteractionParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{61BBC839-F826-4A00-A6D3-8C1E86B28580}';
    IntfIID:   '{79DF1B0A-0098-4F86-A7E1-88A940480EE8}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAUserInteractionParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAUserInteractionParameters;
  end;
end;

procedure TUAUserInteractionParameters.ConnectTo(svrIntf: _UAUserInteractionParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAUserInteractionParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAUserInteractionParameters.GetDefaultInterface: _UAUserInteractionParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAUserInteractionParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAUserInteractionParameters.Destroy;
begin
  inherited Destroy;
end;

function TUAUserInteractionParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAUserInteractionParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAUserInteractionParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUAUserInteractionParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUAUserInteractionParameters.Get_AcceptNotificationTimeout: Integer;
begin
  Result := DefaultInterface.AcceptNotificationTimeout;
end;

procedure TUAUserInteractionParameters.Set_AcceptNotificationTimeout(pRetVal: Integer);
begin
  DefaultInterface.AcceptNotificationTimeout := pRetVal;
end;

function TUAUserInteractionParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAUserInteractionParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAUserInteractionParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAUserInteractionParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

procedure TUAUserInteractionParameters.Reset;
begin
  DefaultInterface.Reset;
end;

class function CoUAApplicationElement.Create: _UAApplicationElement;
begin
  Result := CreateComObject(CLASS_UAApplicationElement) as _UAApplicationElement;
end;

class function CoUAApplicationElement.CreateRemote(const MachineName: string): _UAApplicationElement;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAApplicationElement) as _UAApplicationElement;
end;

procedure TUAApplicationElement.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{3D846508-1E61-411E-A668-825905CB13CE}';
    IntfIID:   '{5D1D840D-60F0-481C-9DDD-1A9F2DF5CFDA}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAApplicationElement.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAApplicationElement;
  end;
end;

procedure TUAApplicationElement.ConnectTo(svrIntf: _UAApplicationElement);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAApplicationElement.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAApplicationElement.GetDefaultInterface: _UAApplicationElement;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAApplicationElement.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAApplicationElement.Destroy;
begin
  inherited Destroy;
end;

function TUAApplicationElement.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAApplicationElement.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAApplicationElement.Get_applicationName: WideString;
begin
  Result := DefaultInterface.applicationName;
end;

procedure TUAApplicationElement.Set_applicationName(const pRetVal: WideString);
begin
  DefaultInterface.applicationName := pRetVal;
end;

function TUAApplicationElement.Get_ApplicationType: UAApplicationTypes;
begin
  Result := DefaultInterface.ApplicationType;
end;

procedure TUAApplicationElement.Set_ApplicationType(pRetVal: UAApplicationTypes);
begin
  DefaultInterface.ApplicationType := pRetVal;
end;

function TUAApplicationElement.Get_applicationUriString: WideString;
begin
  Result := DefaultInterface.applicationUriString;
end;

procedure TUAApplicationElement.Set_applicationUriString(const pRetVal: WideString);
begin
  DefaultInterface.applicationUriString := pRetVal;
end;

function TUAApplicationElement.Get_DiscoveryUriString: WideString;
begin
  Result := DefaultInterface.DiscoveryUriString;
end;

procedure TUAApplicationElement.Set_DiscoveryUriString(const pRetVal: WideString);
begin
  DefaultInterface.DiscoveryUriString := pRetVal;
end;

function TUAApplicationElement.Get_DiscoveryUriStrings: _StringCollection;
begin
  Result := DefaultInterface.DiscoveryUriStrings;
end;

procedure TUAApplicationElement._Set_DiscoveryUriStrings(const pRetVal: _StringCollection);
begin
  DefaultInterface.DiscoveryUriStrings := pRetVal;
end;

function TUAApplicationElement.Get_productUriString: WideString;
begin
  Result := DefaultInterface.productUriString;
end;

procedure TUAApplicationElement.Set_productUriString(const pRetVal: WideString);
begin
  DefaultInterface.productUriString := pRetVal;
end;

function TUAApplicationElement.Get_serverCapabilities: _StringCollection;
begin
  Result := DefaultInterface.serverCapabilities;
end;

procedure TUAApplicationElement._Set_serverCapabilities(const pRetVal: _StringCollection);
begin
  DefaultInterface.serverCapabilities := pRetVal;
end;

function TUAApplicationElement.Get_ServerCapabilitySet: _StringSet;
begin
  Result := DefaultInterface.ServerCapabilitySet;
end;

function TUAApplicationElement.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAApplicationElement.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAApplicationElement.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAApplicationElement.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUAApplicationElement.ToUAEndpointDescriptor: _UAEndpointDescriptor;
begin
  Result := DefaultInterface.ToUAEndpointDescriptor;
end;

class function CoUAApplicationDescription.Create: _UAApplicationDescription;
begin
  Result := CreateComObject(CLASS_UAApplicationDescription) as _UAApplicationDescription;
end;

class function CoUAApplicationDescription.CreateRemote(const MachineName: string): _UAApplicationDescription;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAApplicationDescription) as _UAApplicationDescription;
end;

procedure TUAApplicationDescription.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{229EE672-539C-4B2B-9334-3FF005CC1F6F}';
    IntfIID:   '{682D26C9-D9B2-4E2E-8089-DE1F3B57D93C}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAApplicationDescription.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAApplicationDescription;
  end;
end;

procedure TUAApplicationDescription.ConnectTo(svrIntf: _UAApplicationDescription);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAApplicationDescription.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAApplicationDescription.GetDefaultInterface: _UAApplicationDescription;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAApplicationDescription.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAApplicationDescription.Destroy;
begin
  inherited Destroy;
end;

function TUAApplicationDescription.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAApplicationDescription.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAApplicationDescription.Get_applicationName: WideString;
begin
  Result := DefaultInterface.applicationName;
end;

procedure TUAApplicationDescription.Set_applicationName(const pRetVal: WideString);
begin
  DefaultInterface.applicationName := pRetVal;
end;

function TUAApplicationDescription.Get_ApplicationType: UAApplicationTypes;
begin
  Result := DefaultInterface.ApplicationType;
end;

procedure TUAApplicationDescription.Set_ApplicationType(pRetVal: UAApplicationTypes);
begin
  DefaultInterface.ApplicationType := pRetVal;
end;

function TUAApplicationDescription.Get_applicationUriString: WideString;
begin
  Result := DefaultInterface.applicationUriString;
end;

procedure TUAApplicationDescription.Set_applicationUriString(const pRetVal: WideString);
begin
  DefaultInterface.applicationUriString := pRetVal;
end;

function TUAApplicationDescription.Get_DiscoveryProfileUriString: WideString;
begin
  Result := DefaultInterface.DiscoveryProfileUriString;
end;

procedure TUAApplicationDescription.Set_DiscoveryProfileUriString(const pRetVal: WideString);
begin
  DefaultInterface.DiscoveryProfileUriString := pRetVal;
end;

function TUAApplicationDescription.Get_DiscoveryUriStrings: _StringCollection;
begin
  Result := DefaultInterface.DiscoveryUriStrings;
end;

procedure TUAApplicationDescription._Set_DiscoveryUriStrings(const pRetVal: _StringCollection);
begin
  DefaultInterface.DiscoveryUriStrings := pRetVal;
end;

function TUAApplicationDescription.Get_GatewayServerUriString: WideString;
begin
  Result := DefaultInterface.GatewayServerUriString;
end;

procedure TUAApplicationDescription.Set_GatewayServerUriString(const pRetVal: WideString);
begin
  DefaultInterface.GatewayServerUriString := pRetVal;
end;

function TUAApplicationDescription.Get_productUriString: WideString;
begin
  Result := DefaultInterface.productUriString;
end;

procedure TUAApplicationDescription.Set_productUriString(const pRetVal: WideString);
begin
  DefaultInterface.productUriString := pRetVal;
end;

function TUAApplicationDescription.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAApplicationDescription.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAApplicationDescription.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAApplicationDescription.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUAApplicationRecordDataType.Create: _UAApplicationRecordDataType;
begin
  Result := CreateComObject(CLASS_UAApplicationRecordDataType) as _UAApplicationRecordDataType;
end;

class function CoUAApplicationRecordDataType.CreateRemote(const MachineName: string): _UAApplicationRecordDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAApplicationRecordDataType) as _UAApplicationRecordDataType;
end;

procedure TUAApplicationRecordDataType.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{AB1CDCCB-61EF-4664-A46D-002CF9686DAE}';
    IntfIID:   '{DC2726E7-1704-45E3-885B-F8F414CD483F}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAApplicationRecordDataType.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAApplicationRecordDataType;
  end;
end;

procedure TUAApplicationRecordDataType.ConnectTo(svrIntf: _UAApplicationRecordDataType);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAApplicationRecordDataType.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAApplicationRecordDataType.GetDefaultInterface: _UAApplicationRecordDataType;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAApplicationRecordDataType.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAApplicationRecordDataType.Destroy;
begin
  inherited Destroy;
end;

function TUAApplicationRecordDataType.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAApplicationRecordDataType.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAApplicationRecordDataType.Get_applicationName: WideString;
begin
  Result := DefaultInterface.applicationName;
end;

procedure TUAApplicationRecordDataType.Set_applicationName(const pRetVal: WideString);
begin
  DefaultInterface.applicationName := pRetVal;
end;

function TUAApplicationRecordDataType.Get_ApplicationType: UAApplicationTypes;
begin
  Result := DefaultInterface.ApplicationType;
end;

procedure TUAApplicationRecordDataType.Set_ApplicationType(pRetVal: UAApplicationTypes);
begin
  DefaultInterface.ApplicationType := pRetVal;
end;

function TUAApplicationRecordDataType.Get_applicationUriString: WideString;
begin
  Result := DefaultInterface.applicationUriString;
end;

procedure TUAApplicationRecordDataType.Set_applicationUriString(const pRetVal: WideString);
begin
  DefaultInterface.applicationUriString := pRetVal;
end;

function TUAApplicationRecordDataType.Get_DiscoveryUriString: WideString;
begin
  Result := DefaultInterface.DiscoveryUriString;
end;

procedure TUAApplicationRecordDataType.Set_DiscoveryUriString(const pRetVal: WideString);
begin
  DefaultInterface.DiscoveryUriString := pRetVal;
end;

function TUAApplicationRecordDataType.Get_DiscoveryUriStrings: _StringCollection;
begin
  Result := DefaultInterface.DiscoveryUriStrings;
end;

procedure TUAApplicationRecordDataType._Set_DiscoveryUriStrings(const pRetVal: _StringCollection);
begin
  DefaultInterface.DiscoveryUriStrings := pRetVal;
end;

function TUAApplicationRecordDataType.Get_productUriString: WideString;
begin
  Result := DefaultInterface.productUriString;
end;

procedure TUAApplicationRecordDataType.Set_productUriString(const pRetVal: WideString);
begin
  DefaultInterface.productUriString := pRetVal;
end;

function TUAApplicationRecordDataType.Get_serverCapabilities: _StringCollection;
begin
  Result := DefaultInterface.serverCapabilities;
end;

procedure TUAApplicationRecordDataType._Set_serverCapabilities(const pRetVal: _StringCollection);
begin
  DefaultInterface.serverCapabilities := pRetVal;
end;

function TUAApplicationRecordDataType.Get_ServerCapabilitySet: _StringSet;
begin
  Result := DefaultInterface.ServerCapabilitySet;
end;

function TUAApplicationRecordDataType.Get_applicationId: _UANodeId;
begin
  Result := DefaultInterface.applicationId;
end;

procedure TUAApplicationRecordDataType._Set_applicationId(const pRetVal: _UANodeId);
begin
  DefaultInterface.applicationId := pRetVal;
end;

function TUAApplicationRecordDataType.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAApplicationRecordDataType.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAApplicationRecordDataType.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAApplicationRecordDataType.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUAApplicationRecordDataType.ToUAEndpointDescriptor: _UAEndpointDescriptor;
begin
  Result := DefaultInterface.ToUAEndpointDescriptor;
end;

class function CoUADiscoveryElement.Create: _UADiscoveryElement;
begin
  Result := CreateComObject(CLASS_UADiscoveryElement) as _UADiscoveryElement;
end;

class function CoUADiscoveryElement.CreateRemote(const MachineName: string): _UADiscoveryElement;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UADiscoveryElement) as _UADiscoveryElement;
end;

procedure TUADiscoveryElement.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{0CE96037-6560-4EF7-9879-66FE2F65A7C8}';
    IntfIID:   '{50FBEB9F-3AB0-4C8F-850B-FE7DE3D9C1A4}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUADiscoveryElement.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UADiscoveryElement;
  end;
end;

procedure TUADiscoveryElement.ConnectTo(svrIntf: _UADiscoveryElement);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUADiscoveryElement.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUADiscoveryElement.GetDefaultInterface: _UADiscoveryElement;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUADiscoveryElement.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUADiscoveryElement.Destroy;
begin
  inherited Destroy;
end;

function TUADiscoveryElement.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUADiscoveryElement.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUADiscoveryElement.Get_applicationName: WideString;
begin
  Result := DefaultInterface.applicationName;
end;

procedure TUADiscoveryElement.Set_applicationName(const pRetVal: WideString);
begin
  DefaultInterface.applicationName := pRetVal;
end;

function TUADiscoveryElement.Get_ApplicationType: UAApplicationTypes;
begin
  Result := DefaultInterface.ApplicationType;
end;

procedure TUADiscoveryElement.Set_ApplicationType(pRetVal: UAApplicationTypes);
begin
  DefaultInterface.ApplicationType := pRetVal;
end;

function TUADiscoveryElement.Get_applicationUriString: WideString;
begin
  Result := DefaultInterface.applicationUriString;
end;

procedure TUADiscoveryElement.Set_applicationUriString(const pRetVal: WideString);
begin
  DefaultInterface.applicationUriString := pRetVal;
end;

function TUADiscoveryElement.Get_DiscoveryUriString: WideString;
begin
  Result := DefaultInterface.DiscoveryUriString;
end;

procedure TUADiscoveryElement.Set_DiscoveryUriString(const pRetVal: WideString);
begin
  DefaultInterface.DiscoveryUriString := pRetVal;
end;

function TUADiscoveryElement.Get_DiscoveryUriStrings: _StringCollection;
begin
  Result := DefaultInterface.DiscoveryUriStrings;
end;

procedure TUADiscoveryElement._Set_DiscoveryUriStrings(const pRetVal: _StringCollection);
begin
  DefaultInterface.DiscoveryUriStrings := pRetVal;
end;

function TUADiscoveryElement.Get_productUriString: WideString;
begin
  Result := DefaultInterface.productUriString;
end;

procedure TUADiscoveryElement.Set_productUriString(const pRetVal: WideString);
begin
  DefaultInterface.productUriString := pRetVal;
end;

function TUADiscoveryElement.Get_serverCapabilities: _StringCollection;
begin
  Result := DefaultInterface.serverCapabilities;
end;

procedure TUADiscoveryElement._Set_serverCapabilities(const pRetVal: _StringCollection);
begin
  DefaultInterface.serverCapabilities := pRetVal;
end;

function TUADiscoveryElement.Get_ServerCapabilitySet: _StringSet;
begin
  Result := DefaultInterface.ServerCapabilitySet;
end;

function TUADiscoveryElement.Get_ApplicationOrServerName: WideString;
begin
  Result := DefaultInterface.ApplicationOrServerName;
end;

function TUADiscoveryElement.Get_DiscoveryProfileUriString: WideString;
begin
  Result := DefaultInterface.DiscoveryProfileUriString;
end;

procedure TUADiscoveryElement.Set_DiscoveryProfileUriString(const pRetVal: WideString);
begin
  DefaultInterface.DiscoveryProfileUriString := pRetVal;
end;

function TUADiscoveryElement.Get_EndpointSelectionPolicy: _UAEndpointSelectionPolicy;
begin
  Result := DefaultInterface.EndpointSelectionPolicy;
end;

procedure TUADiscoveryElement._Set_EndpointSelectionPolicy(const pRetVal: _UAEndpointSelectionPolicy);
begin
  DefaultInterface.EndpointSelectionPolicy := pRetVal;
end;

function TUADiscoveryElement.Get_EndpointUriString: WideString;
begin
  Result := DefaultInterface.EndpointUriString;
end;

procedure TUADiscoveryElement.Set_EndpointUriString(const pRetVal: WideString);
begin
  DefaultInterface.EndpointUriString := pRetVal;
end;

function TUADiscoveryElement.Get_GatewayServerUriString: WideString;
begin
  Result := DefaultInterface.GatewayServerUriString;
end;

procedure TUADiscoveryElement.Set_GatewayServerUriString(const pRetVal: WideString);
begin
  DefaultInterface.GatewayServerUriString := pRetVal;
end;

function TUADiscoveryElement.Get_IsValidServer: WordBool;
begin
  Result := DefaultInterface.IsValidServer;
end;

function TUADiscoveryElement.Get_ServerCertificate: _PkiCertificate;
begin
  Result := DefaultInterface.ServerCertificate;
end;

procedure TUADiscoveryElement._Set_ServerCertificate(const pRetVal: _PkiCertificate);
begin
  DefaultInterface.ServerCertificate := pRetVal;
end;

function TUADiscoveryElement.Get_ServerCertificateByteArray: OleVariant;
begin
  Result := DefaultInterface.ServerCertificateByteArray;
end;

procedure TUADiscoveryElement._Set_ServerCertificateByteArray(pRetVal: OleVariant);
begin
  DefaultInterface.ServerCertificateByteArray := pRetVal;
end;

function TUADiscoveryElement.Get_ServerName: WideString;
begin
  Result := DefaultInterface.ServerName;
end;

procedure TUADiscoveryElement.Set_ServerName(const pRetVal: WideString);
begin
  DefaultInterface.ServerName := pRetVal;
end;

function TUADiscoveryElement.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUADiscoveryElement.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUADiscoveryElement.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUADiscoveryElement.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUADiscoveryElement.ToUAEndpointDescriptor: _UAEndpointDescriptor;
begin
  Result := DefaultInterface.ToUAEndpointDescriptor;
end;

procedure TUADiscoveryElement.SetServerCertificateByteArray(value: OleVariant);
begin
  DefaultInterface.SetServerCertificateByteArray(value);
end;

class function CoUADiscoveryElementCollection.Create: _UADiscoveryElementCollection;
begin
  Result := CreateComObject(CLASS_UADiscoveryElementCollection) as _UADiscoveryElementCollection;
end;

class function CoUADiscoveryElementCollection.CreateRemote(const MachineName: string): _UADiscoveryElementCollection;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UADiscoveryElementCollection) as _UADiscoveryElementCollection;
end;

procedure TUADiscoveryElementCollection.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{73413B41-5FC2-483D-8D07-432A14B169B9}';
    IntfIID:   '{77CE0F30-375B-4F26-A772-DB53BDEE0C60}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUADiscoveryElementCollection.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UADiscoveryElementCollection;
  end;
end;

procedure TUADiscoveryElementCollection.ConnectTo(svrIntf: _UADiscoveryElementCollection);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUADiscoveryElementCollection.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUADiscoveryElementCollection.GetDefaultInterface: _UADiscoveryElementCollection;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUADiscoveryElementCollection.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUADiscoveryElementCollection.Destroy;
begin
  inherited Destroy;
end;

function TUADiscoveryElementCollection.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUADiscoveryElementCollection.Get_Item(index: Integer): _UADiscoveryElement;
begin
  Result := DefaultInterface.Item[index];
end;

procedure TUADiscoveryElementCollection._Set_Item(index: Integer; const pRetVal: _UADiscoveryElement);
begin
  DefaultInterface.Item[index] := pRetVal;
end;

function TUADiscoveryElementCollection.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

function TUADiscoveryElementCollection.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUADiscoveryElementCollection.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUADiscoveryElementCollection.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUADiscoveryElementCollection.GetEnumerator: IEnumVARIANT;
begin
  Result := DefaultInterface.GetEnumerator;
end;

procedure TUADiscoveryElementCollection.Add(Item: OleVariant);
begin
  DefaultInterface.Add(Item);
end;

procedure TUADiscoveryElementCollection.Clear;
begin
  DefaultInterface.Clear;
end;

function TUADiscoveryElementCollection.Contains(Item: OleVariant): WordBool;
begin
  Result := DefaultInterface.Contains(Item);
end;

function TUADiscoveryElementCollection.IndexOf(Item: OleVariant): Integer;
begin
  Result := DefaultInterface.IndexOf(Item);
end;

procedure TUADiscoveryElementCollection.Insert(index: Integer; Item: OleVariant);
begin
  DefaultInterface.Insert(index, Item);
end;

function TUADiscoveryElementCollection.Remove(Item: OleVariant): WordBool;
begin
  Result := DefaultInterface.Remove(Item);
end;

procedure TUADiscoveryElementCollection.RemoveAt(index: Integer);
begin
  DefaultInterface.RemoveAt(index);
end;

function TUADiscoveryElementCollection.ToList: _ElasticVector;
begin
  Result := DefaultInterface.ToList;
end;

function TUADiscoveryElementCollection.ToUAEndpointDescriptorCollection: _UAEndpointDescriptorCollection;
begin
  Result := DefaultInterface.ToUAEndpointDescriptorCollection;
end;

class function CoUAGlobalApplicationDiscoveryQuery.Create: _UAGlobalApplicationDiscoveryQuery;
begin
  Result := CreateComObject(CLASS_UAGlobalApplicationDiscoveryQuery) as _UAGlobalApplicationDiscoveryQuery;
end;

class function CoUAGlobalApplicationDiscoveryQuery.CreateRemote(const MachineName: string): _UAGlobalApplicationDiscoveryQuery;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAGlobalApplicationDiscoveryQuery) as _UAGlobalApplicationDiscoveryQuery;
end;

procedure TUAGlobalApplicationDiscoveryQuery.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{8CC79C48-966A-431A-9FF8-A546E7BAB56B}';
    IntfIID:   '{8455D571-9EE7-4315-A534-AECDEA511114}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAGlobalApplicationDiscoveryQuery.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAGlobalApplicationDiscoveryQuery;
  end;
end;

procedure TUAGlobalApplicationDiscoveryQuery.ConnectTo(svrIntf: _UAGlobalApplicationDiscoveryQuery);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAGlobalApplicationDiscoveryQuery.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAGlobalApplicationDiscoveryQuery.GetDefaultInterface: _UAGlobalApplicationDiscoveryQuery;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAGlobalApplicationDiscoveryQuery.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAGlobalApplicationDiscoveryQuery.Destroy;
begin
  inherited Destroy;
end;

function TUAGlobalApplicationDiscoveryQuery.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAGlobalApplicationDiscoveryQuery.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAGlobalApplicationDiscoveryQuery.Get_Flat: WordBool;
begin
  Result := DefaultInterface.Flat;
end;

procedure TUAGlobalApplicationDiscoveryQuery.Set_Flat(pRetVal: WordBool);
begin
  DefaultInterface.Flat := pRetVal;
end;

function TUAGlobalApplicationDiscoveryQuery.Get_gdsEndpointDescriptor: _UAEndpointDescriptor;
begin
  Result := DefaultInterface.gdsEndpointDescriptor;
end;

procedure TUAGlobalApplicationDiscoveryQuery._Set_gdsEndpointDescriptor(const pRetVal: _UAEndpointDescriptor);
begin
  DefaultInterface.gdsEndpointDescriptor := pRetVal;
end;

function TUAGlobalApplicationDiscoveryQuery.Get_QueryApplicationsFilter: _UAQueryApplicationsFilter;
begin
  Result := DefaultInterface.QueryApplicationsFilter;
end;

procedure TUAGlobalApplicationDiscoveryQuery._Set_QueryApplicationsFilter(const pRetVal: _UAQueryApplicationsFilter);
begin
  DefaultInterface.QueryApplicationsFilter := pRetVal;
end;

function TUAGlobalApplicationDiscoveryQuery.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAGlobalApplicationDiscoveryQuery.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAGlobalApplicationDiscoveryQuery.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAGlobalApplicationDiscoveryQuery.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUALocalApplicationDiscoveryQuery.Create: _UALocalApplicationDiscoveryQuery;
begin
  Result := CreateComObject(CLASS_UALocalApplicationDiscoveryQuery) as _UALocalApplicationDiscoveryQuery;
end;

class function CoUALocalApplicationDiscoveryQuery.CreateRemote(const MachineName: string): _UALocalApplicationDiscoveryQuery;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UALocalApplicationDiscoveryQuery) as _UALocalApplicationDiscoveryQuery;
end;

procedure TUALocalApplicationDiscoveryQuery.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{54CC01A8-15CD-4BEA-8FD9-F7D950EC7A43}';
    IntfIID:   '{96493275-7EEE-4214-8BF8-3E410B306E4F}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUALocalApplicationDiscoveryQuery.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UALocalApplicationDiscoveryQuery;
  end;
end;

procedure TUALocalApplicationDiscoveryQuery.ConnectTo(svrIntf: _UALocalApplicationDiscoveryQuery);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUALocalApplicationDiscoveryQuery.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUALocalApplicationDiscoveryQuery.GetDefaultInterface: _UALocalApplicationDiscoveryQuery;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUALocalApplicationDiscoveryQuery.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUALocalApplicationDiscoveryQuery.Destroy;
begin
  inherited Destroy;
end;

function TUALocalApplicationDiscoveryQuery.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUALocalApplicationDiscoveryQuery.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUALocalApplicationDiscoveryQuery.Get_Flat: WordBool;
begin
  Result := DefaultInterface.Flat;
end;

procedure TUALocalApplicationDiscoveryQuery.Set_Flat(pRetVal: WordBool);
begin
  DefaultInterface.Flat := pRetVal;
end;

function TUALocalApplicationDiscoveryQuery.Get_applicationTypes: UAApplicationTypes;
begin
  Result := DefaultInterface.applicationTypes;
end;

procedure TUALocalApplicationDiscoveryQuery.Set_applicationTypes(pRetVal: UAApplicationTypes);
begin
  DefaultInterface.applicationTypes := pRetVal;
end;

function TUALocalApplicationDiscoveryQuery.Get_DiscoveryHost: WideString;
begin
  Result := DefaultInterface.DiscoveryHost;
end;

procedure TUALocalApplicationDiscoveryQuery.Set_DiscoveryHost(const pRetVal: WideString);
begin
  DefaultInterface.DiscoveryHost := pRetVal;
end;

function TUALocalApplicationDiscoveryQuery.Get_DiscoveryUriStrings: _StringCollection;
begin
  Result := DefaultInterface.DiscoveryUriStrings;
end;

procedure TUALocalApplicationDiscoveryQuery._Set_DiscoveryUriStrings(const pRetVal: _StringCollection);
begin
  DefaultInterface.DiscoveryUriStrings := pRetVal;
end;

function TUALocalApplicationDiscoveryQuery.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUALocalApplicationDiscoveryQuery.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUALocalApplicationDiscoveryQuery.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUALocalApplicationDiscoveryQuery.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUALocalEndpointDiscoveryQuery.Create: _UALocalEndpointDiscoveryQuery;
begin
  Result := CreateComObject(CLASS_UALocalEndpointDiscoveryQuery) as _UALocalEndpointDiscoveryQuery;
end;

class function CoUALocalEndpointDiscoveryQuery.CreateRemote(const MachineName: string): _UALocalEndpointDiscoveryQuery;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UALocalEndpointDiscoveryQuery) as _UALocalEndpointDiscoveryQuery;
end;

procedure TUALocalEndpointDiscoveryQuery.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{592FCBC8-DA5C-4834-A514-9BD8E109E4C0}';
    IntfIID:   '{07E1C12C-DF98-4A54-820D-FF4A36C777FF}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUALocalEndpointDiscoveryQuery.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UALocalEndpointDiscoveryQuery;
  end;
end;

procedure TUALocalEndpointDiscoveryQuery.ConnectTo(svrIntf: _UALocalEndpointDiscoveryQuery);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUALocalEndpointDiscoveryQuery.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUALocalEndpointDiscoveryQuery.GetDefaultInterface: _UALocalEndpointDiscoveryQuery;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUALocalEndpointDiscoveryQuery.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUALocalEndpointDiscoveryQuery.Destroy;
begin
  inherited Destroy;
end;

function TUALocalEndpointDiscoveryQuery.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUALocalEndpointDiscoveryQuery.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUALocalEndpointDiscoveryQuery.Get_DiscoveryUriString: WideString;
begin
  Result := DefaultInterface.DiscoveryUriString;
end;

procedure TUALocalEndpointDiscoveryQuery.Set_DiscoveryUriString(const pRetVal: WideString);
begin
  DefaultInterface.DiscoveryUriString := pRetVal;
end;

function TUALocalEndpointDiscoveryQuery.Get_DiscoveryUriStrings: _StringCollection;
begin
  Result := DefaultInterface.DiscoveryUriStrings;
end;

procedure TUALocalEndpointDiscoveryQuery._Set_DiscoveryUriStrings(const pRetVal: _StringCollection);
begin
  DefaultInterface.DiscoveryUriStrings := pRetVal;
end;

function TUALocalEndpointDiscoveryQuery.Get_MatchDiscoveryUriSchemes: WordBool;
begin
  Result := DefaultInterface.MatchDiscoveryUriSchemes;
end;

procedure TUALocalEndpointDiscoveryQuery.Set_MatchDiscoveryUriSchemes(pRetVal: WordBool);
begin
  DefaultInterface.MatchDiscoveryUriSchemes := pRetVal;
end;

function TUALocalEndpointDiscoveryQuery.Get_TransportProfileUriStringFilter: _StringCollection;
begin
  Result := DefaultInterface.TransportProfileUriStringFilter;
end;

procedure TUALocalEndpointDiscoveryQuery._Set_TransportProfileUriStringFilter(const pRetVal: _StringCollection);
begin
  DefaultInterface.TransportProfileUriStringFilter := pRetVal;
end;

function TUALocalEndpointDiscoveryQuery.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUALocalEndpointDiscoveryQuery.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUALocalEndpointDiscoveryQuery.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUALocalEndpointDiscoveryQuery.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUANetworkServerDiscoveryQuery.Create: _UANetworkServerDiscoveryQuery;
begin
  Result := CreateComObject(CLASS_UANetworkServerDiscoveryQuery) as _UANetworkServerDiscoveryQuery;
end;

class function CoUANetworkServerDiscoveryQuery.CreateRemote(const MachineName: string): _UANetworkServerDiscoveryQuery;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UANetworkServerDiscoveryQuery) as _UANetworkServerDiscoveryQuery;
end;

procedure TUANetworkServerDiscoveryQuery.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{5F63AD5A-6C88-4B97-93CC-A4E630C9FB9A}';
    IntfIID:   '{CD4B741D-9B6B-42AD-9274-0FDB53DA6CB7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUANetworkServerDiscoveryQuery.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UANetworkServerDiscoveryQuery;
  end;
end;

procedure TUANetworkServerDiscoveryQuery.ConnectTo(svrIntf: _UANetworkServerDiscoveryQuery);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUANetworkServerDiscoveryQuery.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUANetworkServerDiscoveryQuery.GetDefaultInterface: _UANetworkServerDiscoveryQuery;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUANetworkServerDiscoveryQuery.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUANetworkServerDiscoveryQuery.Destroy;
begin
  inherited Destroy;
end;

function TUANetworkServerDiscoveryQuery.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUANetworkServerDiscoveryQuery.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUANetworkServerDiscoveryQuery.Get_Flat: WordBool;
begin
  Result := DefaultInterface.Flat;
end;

procedure TUANetworkServerDiscoveryQuery.Set_Flat(pRetVal: WordBool);
begin
  DefaultInterface.Flat := pRetVal;
end;

function TUANetworkServerDiscoveryQuery.Get_applicationTypes: UAApplicationTypes;
begin
  Result := DefaultInterface.applicationTypes;
end;

procedure TUANetworkServerDiscoveryQuery.Set_applicationTypes(pRetVal: UAApplicationTypes);
begin
  DefaultInterface.applicationTypes := pRetVal;
end;

function TUANetworkServerDiscoveryQuery.Get_DiscoveryHost: WideString;
begin
  Result := DefaultInterface.DiscoveryHost;
end;

procedure TUANetworkServerDiscoveryQuery.Set_DiscoveryHost(const pRetVal: WideString);
begin
  DefaultInterface.DiscoveryHost := pRetVal;
end;

function TUANetworkServerDiscoveryQuery.Get_DiscoveryUriStrings: _StringCollection;
begin
  Result := DefaultInterface.DiscoveryUriStrings;
end;

procedure TUANetworkServerDiscoveryQuery._Set_DiscoveryUriStrings(const pRetVal: _StringCollection);
begin
  DefaultInterface.DiscoveryUriStrings := pRetVal;
end;

function TUANetworkServerDiscoveryQuery.Get_ServerCapabilityFilter: _StringCollection;
begin
  Result := DefaultInterface.ServerCapabilityFilter;
end;

procedure TUANetworkServerDiscoveryQuery._Set_ServerCapabilityFilter(const pRetVal: _StringCollection);
begin
  DefaultInterface.ServerCapabilityFilter := pRetVal;
end;

function TUANetworkServerDiscoveryQuery.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUANetworkServerDiscoveryQuery.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUANetworkServerDiscoveryQuery.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUANetworkServerDiscoveryQuery.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUAQueryApplicationsFilter.Create: _UAQueryApplicationsFilter;
begin
  Result := CreateComObject(CLASS_UAQueryApplicationsFilter) as _UAQueryApplicationsFilter;
end;

class function CoUAQueryApplicationsFilter.CreateRemote(const MachineName: string): _UAQueryApplicationsFilter;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAQueryApplicationsFilter) as _UAQueryApplicationsFilter;
end;

procedure TUAQueryApplicationsFilter.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{6A98CE77-1543-4AEA-B80C-AC4ECCFFBF7E}';
    IntfIID:   '{9C92CE87-FCB5-44C7-8AF2-6A0404806E2A}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAQueryApplicationsFilter.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAQueryApplicationsFilter;
  end;
end;

procedure TUAQueryApplicationsFilter.ConnectTo(svrIntf: _UAQueryApplicationsFilter);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAQueryApplicationsFilter.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAQueryApplicationsFilter.GetDefaultInterface: _UAQueryApplicationsFilter;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAQueryApplicationsFilter.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAQueryApplicationsFilter.Destroy;
begin
  inherited Destroy;
end;

function TUAQueryApplicationsFilter.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAQueryApplicationsFilter.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAQueryApplicationsFilter.Get_applicationName: WideString;
begin
  Result := DefaultInterface.applicationName;
end;

procedure TUAQueryApplicationsFilter.Set_applicationName(const pRetVal: WideString);
begin
  DefaultInterface.applicationName := pRetVal;
end;

function TUAQueryApplicationsFilter.Get_applicationTypes: UAApplicationTypes;
begin
  Result := DefaultInterface.applicationTypes;
end;

procedure TUAQueryApplicationsFilter.Set_applicationTypes(pRetVal: UAApplicationTypes);
begin
  DefaultInterface.applicationTypes := pRetVal;
end;

function TUAQueryApplicationsFilter.Get_applicationUriString: WideString;
begin
  Result := DefaultInterface.applicationUriString;
end;

procedure TUAQueryApplicationsFilter.Set_applicationUriString(const pRetVal: WideString);
begin
  DefaultInterface.applicationUriString := pRetVal;
end;

function TUAQueryApplicationsFilter.Get_productUriString: WideString;
begin
  Result := DefaultInterface.productUriString;
end;

procedure TUAQueryApplicationsFilter.Set_productUriString(const pRetVal: WideString);
begin
  DefaultInterface.productUriString := pRetVal;
end;

function TUAQueryApplicationsFilter.Get_serverCapabilities: _StringCollection;
begin
  Result := DefaultInterface.serverCapabilities;
end;

procedure TUAQueryApplicationsFilter._Set_serverCapabilities(const pRetVal: _StringCollection);
begin
  DefaultInterface.serverCapabilities := pRetVal;
end;

function TUAQueryApplicationsFilter.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAQueryApplicationsFilter.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAQueryApplicationsFilter.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAQueryApplicationsFilter.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUAServerOnNetwork.Create: _UAServerOnNetwork;
begin
  Result := CreateComObject(CLASS_UAServerOnNetwork) as _UAServerOnNetwork;
end;

class function CoUAServerOnNetwork.CreateRemote(const MachineName: string): _UAServerOnNetwork;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAServerOnNetwork) as _UAServerOnNetwork;
end;

procedure TUAServerOnNetwork.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{2746D7F4-BA66-4275-9213-07BD6C407876}';
    IntfIID:   '{83972BED-14E7-42F7-83A4-E226960B73DF}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAServerOnNetwork.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAServerOnNetwork;
  end;
end;

procedure TUAServerOnNetwork.ConnectTo(svrIntf: _UAServerOnNetwork);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAServerOnNetwork.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAServerOnNetwork.GetDefaultInterface: _UAServerOnNetwork;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAServerOnNetwork.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAServerOnNetwork.Destroy;
begin
  inherited Destroy;
end;

function TUAServerOnNetwork.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAServerOnNetwork.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAServerOnNetwork.Get_DiscoveryUrlString: WideString;
begin
  Result := DefaultInterface.DiscoveryUrlString;
end;

procedure TUAServerOnNetwork.Set_DiscoveryUrlString(const pRetVal: WideString);
begin
  DefaultInterface.DiscoveryUrlString := pRetVal;
end;

function TUAServerOnNetwork.Get_RecordId: Integer;
begin
  Result := DefaultInterface.RecordId;
end;

procedure TUAServerOnNetwork.Set_RecordId(pRetVal: Integer);
begin
  DefaultInterface.RecordId := pRetVal;
end;

function TUAServerOnNetwork.Get_serverCapabilities: _StringCollection;
begin
  Result := DefaultInterface.serverCapabilities;
end;

procedure TUAServerOnNetwork._Set_serverCapabilities(const pRetVal: _StringCollection);
begin
  DefaultInterface.serverCapabilities := pRetVal;
end;

function TUAServerOnNetwork.Get_ServerName: WideString;
begin
  Result := DefaultInterface.ServerName;
end;

procedure TUAServerOnNetwork.Set_ServerName(const pRetVal: WideString);
begin
  DefaultInterface.ServerName := pRetVal;
end;

function TUAServerOnNetwork.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAServerOnNetwork.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAServerOnNetwork.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAServerOnNetwork.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUAEnumValue.Create: _UAEnumValue;
begin
  Result := CreateComObject(CLASS_UAEnumValue) as _UAEnumValue;
end;

class function CoUAEnumValue.CreateRemote(const MachineName: string): _UAEnumValue;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAEnumValue) as _UAEnumValue;
end;

procedure TUAEnumValue.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{D0C17637-ED2E-40B0-853E-1DEA81EE7CAE}';
    IntfIID:   '{E7ECB7FC-45DB-4C78-B7A2-9BAF140482A4}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAEnumValue.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAEnumValue;
  end;
end;

procedure TUAEnumValue.ConnectTo(svrIntf: _UAEnumValue);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAEnumValue.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAEnumValue.GetDefaultInterface: _UAEnumValue;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAEnumValue.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAEnumValue.Destroy;
begin
  inherited Destroy;
end;

function TUAEnumValue.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAEnumValue.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAEnumValue.Get_DecimalValue: TDecimal;
begin
  Result := DefaultInterface.DecimalValue;
end;

procedure TUAEnumValue.Set_DecimalValue(pRetVal: TDecimal);
begin
  DefaultInterface.DecimalValue := pRetVal;
end;

function TUAEnumValue.Get_Description: WideString;
begin
  Result := DefaultInterface.Description;
end;

procedure TUAEnumValue.Set_Description(const pRetVal: WideString);
begin
  DefaultInterface.Description := pRetVal;
end;

function TUAEnumValue.Get_DisplayName: WideString;
begin
  Result := DefaultInterface.DisplayName;
end;

procedure TUAEnumValue.Set_DisplayName(const pRetVal: WideString);
begin
  DefaultInterface.DisplayName := pRetVal;
end;

function TUAEnumValue.Get_Int32Value: Integer;
begin
  Result := DefaultInterface.Int32Value;
end;

procedure TUAEnumValue.Set_Int32Value(pRetVal: Integer);
begin
  DefaultInterface.Int32Value := pRetVal;
end;

function TUAEnumValue.Get_value: Int64;
begin
  Result := DefaultInterface.value;
end;

procedure TUAEnumValue.Set_value(pRetVal: Int64);
begin
  DefaultInterface.value := pRetVal;
end;

function TUAEnumValue.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAEnumValue.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAEnumValue.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAEnumValue.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUADataTypeInfo.Create: _UADataTypeInfo;
begin
  Result := CreateComObject(CLASS_UADataTypeInfo) as _UADataTypeInfo;
end;

class function CoUADataTypeInfo.CreateRemote(const MachineName: string): _UADataTypeInfo;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UADataTypeInfo) as _UADataTypeInfo;
end;

procedure TUADataTypeInfo.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{2CABE3D3-D49D-4AD7-95F2-85C4A6C8837F}';
    IntfIID:   '{52E99547-2CA9-450E-B872-34A1BC032197}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUADataTypeInfo.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UADataTypeInfo;
  end;
end;

procedure TUADataTypeInfo.ConnectTo(svrIntf: _UADataTypeInfo);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUADataTypeInfo.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUADataTypeInfo.GetDefaultInterface: _UADataTypeInfo;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUADataTypeInfo.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUADataTypeInfo.Destroy;
begin
  inherited Destroy;
end;

function TUADataTypeInfo.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUADataTypeInfo.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUADataTypeInfo.Get_DataTypeId: _UAModelNodeDescriptor;
begin
  Result := DefaultInterface.DataTypeId;
end;

procedure TUADataTypeInfo._Set_DataTypeId(const pRetVal: _UAModelNodeDescriptor);
begin
  DefaultInterface.DataTypeId := pRetVal;
end;

function TUADataTypeInfo.Get_Name: _UAQualifiedName;
begin
  Result := DefaultInterface.Name;
end;

procedure TUADataTypeInfo._Set_Name(const pRetVal: _UAQualifiedName);
begin
  DefaultInterface.Name := pRetVal;
end;

function TUADataTypeInfo.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUADataTypeInfo.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUADataTypeInfo.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUADataTypeInfo.AsEnumTypeInfo: _UAEnumTypeInfo;
begin
  Result := DefaultInterface.AsEnumTypeInfo;
end;

function TUADataTypeInfo.AsSimpleTypeInfo: _UASimpleTypeInfo;
begin
  Result := DefaultInterface.AsSimpleTypeInfo;
end;

function TUADataTypeInfo.AsStructureTypeInfo: _UAStructureTypeInfo;
begin
  Result := DefaultInterface.AsStructureTypeInfo;
end;

class function CoUAEnumDefinition.Create: _UAEnumDefinition;
begin
  Result := CreateComObject(CLASS_UAEnumDefinition) as _UAEnumDefinition;
end;

class function CoUAEnumDefinition.CreateRemote(const MachineName: string): _UAEnumDefinition;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAEnumDefinition) as _UAEnumDefinition;
end;

procedure TUAEnumDefinition.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{2B473216-74B9-44FD-85E4-F1E1625CE805}';
    IntfIID:   '{CAC978FF-365B-4D9F-BE01-C4E887A3E505}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAEnumDefinition.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAEnumDefinition;
  end;
end;

procedure TUAEnumDefinition.ConnectTo(svrIntf: _UAEnumDefinition);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAEnumDefinition.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAEnumDefinition.GetDefaultInterface: _UAEnumDefinition;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAEnumDefinition.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAEnumDefinition.Destroy;
begin
  inherited Destroy;
end;

function TUAEnumDefinition.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAEnumDefinition.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAEnumDefinition.Get_Fields: ICollection;
begin
  Result := DefaultInterface.Fields;
end;

function TUAEnumDefinition.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAEnumDefinition.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAEnumDefinition.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAEnumDefinition.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

procedure TUAEnumDefinition.Add(enumField: OleVariant);
begin
  DefaultInterface.Add(enumField);
end;

class function CoUAEnumDescription.Create: _UAEnumDescription;
begin
  Result := CreateComObject(CLASS_UAEnumDescription) as _UAEnumDescription;
end;

class function CoUAEnumDescription.CreateRemote(const MachineName: string): _UAEnumDescription;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAEnumDescription) as _UAEnumDescription;
end;

procedure TUAEnumDescription.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{020C8AF8-1A78-45A4-A5BD-0E9ACE05323A}';
    IntfIID:   '{239D6A62-5CB7-483C-A9D9-03BBA45A782E}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAEnumDescription.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAEnumDescription;
  end;
end;

procedure TUAEnumDescription.ConnectTo(svrIntf: _UAEnumDescription);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAEnumDescription.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAEnumDescription.GetDefaultInterface: _UAEnumDescription;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAEnumDescription.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAEnumDescription.Destroy;
begin
  inherited Destroy;
end;

function TUAEnumDescription.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAEnumDescription.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAEnumDescription.Get_DataTypeId: _UANodeId;
begin
  Result := DefaultInterface.DataTypeId;
end;

procedure TUAEnumDescription._Set_DataTypeId(const pRetVal: _UANodeId);
begin
  DefaultInterface.DataTypeId := pRetVal;
end;

function TUAEnumDescription.Get_Name: _UAQualifiedName;
begin
  Result := DefaultInterface.Name;
end;

procedure TUAEnumDescription._Set_Name(const pRetVal: _UAQualifiedName);
begin
  DefaultInterface.Name := pRetVal;
end;

function TUAEnumDescription.Get_BuiltInType: UABuiltInType;
begin
  Result := DefaultInterface.BuiltInType;
end;

procedure TUAEnumDescription.Set_BuiltInType(pRetVal: UABuiltInType);
begin
  DefaultInterface.BuiltInType := pRetVal;
end;

function TUAEnumDescription.Get_EnumDefinition: _UAEnumDefinition;
begin
  Result := DefaultInterface.EnumDefinition;
end;

procedure TUAEnumDescription._Set_EnumDefinition(const pRetVal: _UAEnumDefinition);
begin
  DefaultInterface.EnumDefinition := pRetVal;
end;

function TUAEnumDescription.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAEnumDescription.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAEnumDescription.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAEnumDescription.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUAEnumDescription.ToUADataTypeInfoResult(readOnlyDataTypeSchema: OleVariant; 
                                                   requireBaseDataTypes: WordBool): _ValueResult;
begin
  Result := DefaultInterface.ToUADataTypeInfoResult(readOnlyDataTypeSchema, requireBaseDataTypes);
end;

class function CoUAEnumFieldInfo.Create: _UAEnumFieldInfo;
begin
  Result := CreateComObject(CLASS_UAEnumFieldInfo) as _UAEnumFieldInfo;
end;

class function CoUAEnumFieldInfo.CreateRemote(const MachineName: string): _UAEnumFieldInfo;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAEnumFieldInfo) as _UAEnumFieldInfo;
end;

procedure TUAEnumFieldInfo.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{A85F99E4-454E-4E55-97D9-92D2344FD9EF}';
    IntfIID:   '{1E2DC657-40B3-41E7-BA9F-38CCF8E8611A}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAEnumFieldInfo.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAEnumFieldInfo;
  end;
end;

procedure TUAEnumFieldInfo.ConnectTo(svrIntf: _UAEnumFieldInfo);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAEnumFieldInfo.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAEnumFieldInfo.GetDefaultInterface: _UAEnumFieldInfo;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAEnumFieldInfo.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAEnumFieldInfo.Destroy;
begin
  inherited Destroy;
end;

function TUAEnumFieldInfo.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAEnumFieldInfo.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAEnumFieldInfo.Get_DecimalValue: TDecimal;
begin
  Result := DefaultInterface.DecimalValue;
end;

procedure TUAEnumFieldInfo.Set_DecimalValue(pRetVal: TDecimal);
begin
  DefaultInterface.DecimalValue := pRetVal;
end;

function TUAEnumFieldInfo.Get_Description: WideString;
begin
  Result := DefaultInterface.Description;
end;

procedure TUAEnumFieldInfo.Set_Description(const pRetVal: WideString);
begin
  DefaultInterface.Description := pRetVal;
end;

function TUAEnumFieldInfo.Get_DisplayName: WideString;
begin
  Result := DefaultInterface.DisplayName;
end;

procedure TUAEnumFieldInfo.Set_DisplayName(const pRetVal: WideString);
begin
  DefaultInterface.DisplayName := pRetVal;
end;

function TUAEnumFieldInfo.Get_Name: WideString;
begin
  Result := DefaultInterface.Name;
end;

procedure TUAEnumFieldInfo.Set_Name(const pRetVal: WideString);
begin
  DefaultInterface.Name := pRetVal;
end;

function TUAEnumFieldInfo.Get_value: Int64;
begin
  Result := DefaultInterface.value;
end;

procedure TUAEnumFieldInfo.Set_value(pRetVal: Int64);
begin
  DefaultInterface.value := pRetVal;
end;

function TUAEnumFieldInfo.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAEnumFieldInfo.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAEnumFieldInfo.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAEnumFieldInfo.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUAEnumTypeInfo.Create: _UAEnumTypeInfo;
begin
  Result := CreateComObject(CLASS_UAEnumTypeInfo) as _UAEnumTypeInfo;
end;

class function CoUAEnumTypeInfo.CreateRemote(const MachineName: string): _UAEnumTypeInfo;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAEnumTypeInfo) as _UAEnumTypeInfo;
end;

procedure TUAEnumTypeInfo.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{37776780-689B-44B8-A327-5988AB8A0923}';
    IntfIID:   '{2C551603-5AA5-4166-B949-7E42E66B6163}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAEnumTypeInfo.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAEnumTypeInfo;
  end;
end;

procedure TUAEnumTypeInfo.ConnectTo(svrIntf: _UAEnumTypeInfo);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAEnumTypeInfo.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAEnumTypeInfo.GetDefaultInterface: _UAEnumTypeInfo;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAEnumTypeInfo.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAEnumTypeInfo.Destroy;
begin
  inherited Destroy;
end;

function TUAEnumTypeInfo.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAEnumTypeInfo.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAEnumTypeInfo.Get_DataTypeId: _UAModelNodeDescriptor;
begin
  Result := DefaultInterface.DataTypeId;
end;

procedure TUAEnumTypeInfo._Set_DataTypeId(const pRetVal: _UAModelNodeDescriptor);
begin
  DefaultInterface.DataTypeId := pRetVal;
end;

function TUAEnumTypeInfo.Get_Name: _UAQualifiedName;
begin
  Result := DefaultInterface.Name;
end;

procedure TUAEnumTypeInfo._Set_Name(const pRetVal: _UAQualifiedName);
begin
  DefaultInterface.Name := pRetVal;
end;

function TUAEnumTypeInfo.Get_BuiltInType: UABuiltInType;
begin
  Result := DefaultInterface.BuiltInType;
end;

procedure TUAEnumTypeInfo.Set_BuiltInType(pRetVal: UABuiltInType);
begin
  DefaultInterface.BuiltInType := pRetVal;
end;

function TUAEnumTypeInfo.Get_FieldInfos: ICollection;
begin
  Result := DefaultInterface.FieldInfos;
end;

function TUAEnumTypeInfo.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAEnumTypeInfo.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAEnumTypeInfo.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAEnumTypeInfo.AsEnumTypeInfo: _UAEnumTypeInfo;
begin
  Result := DefaultInterface.AsEnumTypeInfo;
end;

function TUAEnumTypeInfo.AsSimpleTypeInfo: _UASimpleTypeInfo;
begin
  Result := DefaultInterface.AsSimpleTypeInfo;
end;

function TUAEnumTypeInfo.AsStructureTypeInfo: _UAStructureTypeInfo;
begin
  Result := DefaultInterface.AsStructureTypeInfo;
end;

procedure TUAEnumTypeInfo.Add(enumFieldInfo: OleVariant);
begin
  DefaultInterface.Add(enumFieldInfo);
end;

class function CoUAEnumField.Create: _UAEnumField;
begin
  Result := CreateComObject(CLASS_UAEnumField) as _UAEnumField;
end;

class function CoUAEnumField.CreateRemote(const MachineName: string): _UAEnumField;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAEnumField) as _UAEnumField;
end;

procedure TUAEnumField.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{A70C95DD-A5C4-4516-8F01-3CA835AC27F5}';
    IntfIID:   '{1FC3A7C6-63C5-4B44-A88D-7040A8FA9EC2}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAEnumField.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAEnumField;
  end;
end;

procedure TUAEnumField.ConnectTo(svrIntf: _UAEnumField);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAEnumField.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAEnumField.GetDefaultInterface: _UAEnumField;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAEnumField.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAEnumField.Destroy;
begin
  inherited Destroy;
end;

function TUAEnumField.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAEnumField.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAEnumField.Get_DecimalValue: TDecimal;
begin
  Result := DefaultInterface.DecimalValue;
end;

procedure TUAEnumField.Set_DecimalValue(pRetVal: TDecimal);
begin
  DefaultInterface.DecimalValue := pRetVal;
end;

function TUAEnumField.Get_Description: WideString;
begin
  Result := DefaultInterface.Description;
end;

procedure TUAEnumField.Set_Description(const pRetVal: WideString);
begin
  DefaultInterface.Description := pRetVal;
end;

function TUAEnumField.Get_DisplayName: WideString;
begin
  Result := DefaultInterface.DisplayName;
end;

procedure TUAEnumField.Set_DisplayName(const pRetVal: WideString);
begin
  DefaultInterface.DisplayName := pRetVal;
end;

function TUAEnumField.Get_Int32Value: Integer;
begin
  Result := DefaultInterface.Int32Value;
end;

procedure TUAEnumField.Set_Int32Value(pRetVal: Integer);
begin
  DefaultInterface.Int32Value := pRetVal;
end;

function TUAEnumField.Get_value: Int64;
begin
  Result := DefaultInterface.value;
end;

procedure TUAEnumField.Set_value(pRetVal: Int64);
begin
  DefaultInterface.value := pRetVal;
end;

function TUAEnumField.Get_Name: WideString;
begin
  Result := DefaultInterface.Name;
end;

procedure TUAEnumField.Set_Name(const pRetVal: WideString);
begin
  DefaultInterface.Name := pRetVal;
end;

function TUAEnumField.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAEnumField.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAEnumField.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAEnumField.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUAHeaderDataTypeSchema.Create: _UAHeaderDataTypeSchema;
begin
  Result := CreateComObject(CLASS_UAHeaderDataTypeSchema) as _UAHeaderDataTypeSchema;
end;

class function CoUAHeaderDataTypeSchema.CreateRemote(const MachineName: string): _UAHeaderDataTypeSchema;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAHeaderDataTypeSchema) as _UAHeaderDataTypeSchema;
end;

procedure TUAHeaderDataTypeSchema.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{CCD070E5-B6CC-454E-9B7F-E30A336BFD9D}';
    IntfIID:   '{8EE117C9-D664-4C92-B028-9A1788D89CF7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAHeaderDataTypeSchema.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAHeaderDataTypeSchema;
  end;
end;

procedure TUAHeaderDataTypeSchema.ConnectTo(svrIntf: _UAHeaderDataTypeSchema);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAHeaderDataTypeSchema.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAHeaderDataTypeSchema.GetDefaultInterface: _UAHeaderDataTypeSchema;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAHeaderDataTypeSchema.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAHeaderDataTypeSchema.Destroy;
begin
  inherited Destroy;
end;

function TUAHeaderDataTypeSchema.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAHeaderDataTypeSchema.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAHeaderDataTypeSchema.Get_EnumDescriptions: ICollection;
begin
  Result := DefaultInterface.EnumDescriptions;
end;

function TUAHeaderDataTypeSchema.Get_NamespaceArray: PSafeArray;
begin
  Result := DefaultInterface.NamespaceArray;
end;

procedure TUAHeaderDataTypeSchema.Set_NamespaceArray(pRetVal: PSafeArray);
begin
  DefaultInterface.NamespaceArray := pRetVal;
end;

function TUAHeaderDataTypeSchema.Get_SimpleTypeDescriptions: ICollection;
begin
  Result := DefaultInterface.SimpleTypeDescriptions;
end;

function TUAHeaderDataTypeSchema.Get_StructureDescriptions: ICollection;
begin
  Result := DefaultInterface.StructureDescriptions;
end;

function TUAHeaderDataTypeSchema.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAHeaderDataTypeSchema.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAHeaderDataTypeSchema.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAHeaderDataTypeSchema.FindDataTypeDescriptions(dataTypeIdList: OleVariant; 
                                                          searchSupertypes: WordBool): PSafeArray;
begin
  Result := DefaultInterface.FindDataTypeDescriptions(dataTypeIdList, searchSupertypes);
end;

function TUAHeaderDataTypeSchema.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

procedure TUAHeaderDataTypeSchema.SetNamespaceArray(var value: PSafeArray);
begin
  DefaultInterface.SetNamespaceArray(value);
end;

class function CoUADataSetMetaData.Create: _UADataSetMetaData;
begin
  Result := CreateComObject(CLASS_UADataSetMetaData) as _UADataSetMetaData;
end;

class function CoUADataSetMetaData.CreateRemote(const MachineName: string): _UADataSetMetaData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UADataSetMetaData) as _UADataSetMetaData;
end;

procedure TUADataSetMetaData.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{4F957DCE-3C60-4251-9BEE-24535D42A302}';
    IntfIID:   '{FF5E42E9-C19F-4404-9F7E-440A30B77989}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUADataSetMetaData.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UADataSetMetaData;
  end;
end;

procedure TUADataSetMetaData.ConnectTo(svrIntf: _UADataSetMetaData);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUADataSetMetaData.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUADataSetMetaData.GetDefaultInterface: _UADataSetMetaData;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUADataSetMetaData.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUADataSetMetaData.Destroy;
begin
  inherited Destroy;
end;

function TUADataSetMetaData.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUADataSetMetaData.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUADataSetMetaData.Get_EnumDescriptions: ICollection;
begin
  Result := DefaultInterface.EnumDescriptions;
end;

function TUADataSetMetaData.Get_NamespaceArray: PSafeArray;
begin
  Result := DefaultInterface.NamespaceArray;
end;

procedure TUADataSetMetaData.Set_NamespaceArray(pRetVal: PSafeArray);
begin
  DefaultInterface.NamespaceArray := pRetVal;
end;

function TUADataSetMetaData.Get_SimpleTypeDescriptions: ICollection;
begin
  Result := DefaultInterface.SimpleTypeDescriptions;
end;

function TUADataSetMetaData.Get_StructureDescriptions: ICollection;
begin
  Result := DefaultInterface.StructureDescriptions;
end;

function TUADataSetMetaData.Get_ConfigurationVersion: _UAConfigurationVersion;
begin
  Result := DefaultInterface.ConfigurationVersion;
end;

procedure TUADataSetMetaData._Set_ConfigurationVersion(const pRetVal: _UAConfigurationVersion);
begin
  DefaultInterface.ConfigurationVersion := pRetVal;
end;

function TUADataSetMetaData.Get_DataSetClassId: TGUID;
begin
  Result := DefaultInterface.DataSetClassId;
end;

procedure TUADataSetMetaData.Set_DataSetClassId(pRetVal: TGUID);
begin
  DefaultInterface.DataSetClassId := pRetVal;
end;

function TUADataSetMetaData.Get_DataSetClassIdString: WideString;
begin
  Result := DefaultInterface.DataSetClassIdString;
end;

procedure TUADataSetMetaData.Set_DataSetClassIdString(const pRetVal: WideString);
begin
  DefaultInterface.DataSetClassIdString := pRetVal;
end;

function TUADataSetMetaData.Get_Description: WideString;
begin
  Result := DefaultInterface.Description;
end;

procedure TUADataSetMetaData.Set_Description(const pRetVal: WideString);
begin
  DefaultInterface.Description := pRetVal;
end;

function TUADataSetMetaData.Get_FieldCount: Integer;
begin
  Result := DefaultInterface.FieldCount;
end;

function TUADataSetMetaData.Get_Fields: _UAFieldMetaDataCollection;
begin
  Result := DefaultInterface.Fields;
end;

function TUADataSetMetaData.Get_HasDataSetClassId: WordBool;
begin
  Result := DefaultInterface.HasDataSetClassId;
end;

function TUADataSetMetaData.Get_HasPromotedFields: WordBool;
begin
  Result := DefaultInterface.HasPromotedFields;
end;

function TUADataSetMetaData.Get_Name: WideString;
begin
  Result := DefaultInterface.Name;
end;

procedure TUADataSetMetaData.Set_Name(const pRetVal: WideString);
begin
  DefaultInterface.Name := pRetVal;
end;

function TUADataSetMetaData.Get_PromotedFieldCount: Integer;
begin
  Result := DefaultInterface.PromotedFieldCount;
end;

function TUADataSetMetaData.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUADataSetMetaData.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUADataSetMetaData.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUADataSetMetaData.FindDataTypeDescriptions(dataTypeIdList: OleVariant; 
                                                     searchSupertypes: WordBool): PSafeArray;
begin
  Result := DefaultInterface.FindDataTypeDescriptions(dataTypeIdList, searchSupertypes);
end;

function TUADataSetMetaData.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

procedure TUADataSetMetaData.SetNamespaceArray(var value: PSafeArray);
begin
  DefaultInterface.SetNamespaceArray(value);
end;

procedure TUADataSetMetaData.Add(fieldMetaData: OleVariant);
begin
  DefaultInterface.Add(fieldMetaData);
end;

class function CoUASimpleTypeDescription.Create: _UASimpleTypeDescription;
begin
  Result := CreateComObject(CLASS_UASimpleTypeDescription) as _UASimpleTypeDescription;
end;

class function CoUASimpleTypeDescription.CreateRemote(const MachineName: string): _UASimpleTypeDescription;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UASimpleTypeDescription) as _UASimpleTypeDescription;
end;

procedure TUASimpleTypeDescription.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{AF4FE3ED-A772-4C21-A31F-11F19BEFA1FE}';
    IntfIID:   '{B37CFECE-AA5E-4D72-A763-A291394EA5B2}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUASimpleTypeDescription.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UASimpleTypeDescription;
  end;
end;

procedure TUASimpleTypeDescription.ConnectTo(svrIntf: _UASimpleTypeDescription);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUASimpleTypeDescription.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUASimpleTypeDescription.GetDefaultInterface: _UASimpleTypeDescription;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUASimpleTypeDescription.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUASimpleTypeDescription.Destroy;
begin
  inherited Destroy;
end;

function TUASimpleTypeDescription.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUASimpleTypeDescription.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUASimpleTypeDescription.Get_DataTypeId: _UANodeId;
begin
  Result := DefaultInterface.DataTypeId;
end;

procedure TUASimpleTypeDescription._Set_DataTypeId(const pRetVal: _UANodeId);
begin
  DefaultInterface.DataTypeId := pRetVal;
end;

function TUASimpleTypeDescription.Get_Name: _UAQualifiedName;
begin
  Result := DefaultInterface.Name;
end;

procedure TUASimpleTypeDescription._Set_Name(const pRetVal: _UAQualifiedName);
begin
  DefaultInterface.Name := pRetVal;
end;

function TUASimpleTypeDescription.Get_BaseDataTypeId: _UANodeId;
begin
  Result := DefaultInterface.BaseDataTypeId;
end;

procedure TUASimpleTypeDescription._Set_BaseDataTypeId(const pRetVal: _UANodeId);
begin
  DefaultInterface.BaseDataTypeId := pRetVal;
end;

function TUASimpleTypeDescription.Get_BuiltInType: UABuiltInType;
begin
  Result := DefaultInterface.BuiltInType;
end;

procedure TUASimpleTypeDescription.Set_BuiltInType(pRetVal: UABuiltInType);
begin
  DefaultInterface.BuiltInType := pRetVal;
end;

function TUASimpleTypeDescription.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUASimpleTypeDescription.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUASimpleTypeDescription.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUASimpleTypeDescription.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUASimpleTypeDescription.ToUADataTypeInfoResult(readOnlyDataTypeSchema: OleVariant; 
                                                         requireBaseDataTypes: WordBool): _ValueResult;
begin
  Result := DefaultInterface.ToUADataTypeInfoResult(readOnlyDataTypeSchema, requireBaseDataTypes);
end;

class function CoUASimpleTypeInfo.Create: _UASimpleTypeInfo;
begin
  Result := CreateComObject(CLASS_UASimpleTypeInfo) as _UASimpleTypeInfo;
end;

class function CoUASimpleTypeInfo.CreateRemote(const MachineName: string): _UASimpleTypeInfo;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UASimpleTypeInfo) as _UASimpleTypeInfo;
end;

procedure TUASimpleTypeInfo.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{E0E0B6DE-D771-447F-820E-2D4F0B2CBE30}';
    IntfIID:   '{6AFC24DF-3CB1-4DA1-8D1C-4BD2D5B5ECCD}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUASimpleTypeInfo.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UASimpleTypeInfo;
  end;
end;

procedure TUASimpleTypeInfo.ConnectTo(svrIntf: _UASimpleTypeInfo);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUASimpleTypeInfo.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUASimpleTypeInfo.GetDefaultInterface: _UASimpleTypeInfo;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUASimpleTypeInfo.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUASimpleTypeInfo.Destroy;
begin
  inherited Destroy;
end;

function TUASimpleTypeInfo.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUASimpleTypeInfo.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUASimpleTypeInfo.Get_DataTypeId: _UAModelNodeDescriptor;
begin
  Result := DefaultInterface.DataTypeId;
end;

procedure TUASimpleTypeInfo._Set_DataTypeId(const pRetVal: _UAModelNodeDescriptor);
begin
  DefaultInterface.DataTypeId := pRetVal;
end;

function TUASimpleTypeInfo.Get_Name: _UAQualifiedName;
begin
  Result := DefaultInterface.Name;
end;

procedure TUASimpleTypeInfo._Set_Name(const pRetVal: _UAQualifiedName);
begin
  DefaultInterface.Name := pRetVal;
end;

function TUASimpleTypeInfo.Get_BaseDataTypeId: _UAModelNodeDescriptor;
begin
  Result := DefaultInterface.BaseDataTypeId;
end;

procedure TUASimpleTypeInfo._Set_BaseDataTypeId(const pRetVal: _UAModelNodeDescriptor);
begin
  DefaultInterface.BaseDataTypeId := pRetVal;
end;

function TUASimpleTypeInfo.Get_BaseDataTypeInfo: _UADataTypeInfo;
begin
  Result := DefaultInterface.BaseDataTypeInfo;
end;

procedure TUASimpleTypeInfo._Set_BaseDataTypeInfo(const pRetVal: _UADataTypeInfo);
begin
  DefaultInterface.BaseDataTypeInfo := pRetVal;
end;

function TUASimpleTypeInfo.Get_BuiltInType: UABuiltInType;
begin
  Result := DefaultInterface.BuiltInType;
end;

procedure TUASimpleTypeInfo.Set_BuiltInType(pRetVal: UABuiltInType);
begin
  DefaultInterface.BuiltInType := pRetVal;
end;

function TUASimpleTypeInfo.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUASimpleTypeInfo.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUASimpleTypeInfo.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUASimpleTypeInfo.AsEnumTypeInfo: _UAEnumTypeInfo;
begin
  Result := DefaultInterface.AsEnumTypeInfo;
end;

function TUASimpleTypeInfo.AsSimpleTypeInfo: _UASimpleTypeInfo;
begin
  Result := DefaultInterface.AsSimpleTypeInfo;
end;

function TUASimpleTypeInfo.AsStructureTypeInfo: _UAStructureTypeInfo;
begin
  Result := DefaultInterface.AsStructureTypeInfo;
end;

class function CoUAStructureDefinition.Create: _UAStructureDefinition;
begin
  Result := CreateComObject(CLASS_UAStructureDefinition) as _UAStructureDefinition;
end;

class function CoUAStructureDefinition.CreateRemote(const MachineName: string): _UAStructureDefinition;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAStructureDefinition) as _UAStructureDefinition;
end;

procedure TUAStructureDefinition.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{634B953D-65D1-4116-8934-999C5F32831E}';
    IntfIID:   '{557DABBD-11B6-40B5-84C0-FFB5BEDE7186}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAStructureDefinition.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAStructureDefinition;
  end;
end;

procedure TUAStructureDefinition.ConnectTo(svrIntf: _UAStructureDefinition);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAStructureDefinition.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAStructureDefinition.GetDefaultInterface: _UAStructureDefinition;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAStructureDefinition.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAStructureDefinition.Destroy;
begin
  inherited Destroy;
end;

function TUAStructureDefinition.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAStructureDefinition.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAStructureDefinition.Get_BaseDataTypeId: _UANodeId;
begin
  Result := DefaultInterface.BaseDataTypeId;
end;

procedure TUAStructureDefinition._Set_BaseDataTypeId(const pRetVal: _UANodeId);
begin
  DefaultInterface.BaseDataTypeId := pRetVal;
end;

function TUAStructureDefinition.Get_DefaultEncodingId: _UANodeId;
begin
  Result := DefaultInterface.DefaultEncodingId;
end;

procedure TUAStructureDefinition._Set_DefaultEncodingId(const pRetVal: _UANodeId);
begin
  DefaultInterface.DefaultEncodingId := pRetVal;
end;

function TUAStructureDefinition.Get_Fields: ICollection;
begin
  Result := DefaultInterface.Fields;
end;

function TUAStructureDefinition.Get_StructureType: UAStructureType;
begin
  Result := DefaultInterface.StructureType;
end;

procedure TUAStructureDefinition.Set_StructureType(pRetVal: UAStructureType);
begin
  DefaultInterface.StructureType := pRetVal;
end;

function TUAStructureDefinition.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAStructureDefinition.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAStructureDefinition.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAStructureDefinition.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

procedure TUAStructureDefinition.Add(structureField: OleVariant);
begin
  DefaultInterface.Add(structureField);
end;

class function CoUAStructureDescription.Create: _UAStructureDescription;
begin
  Result := CreateComObject(CLASS_UAStructureDescription) as _UAStructureDescription;
end;

class function CoUAStructureDescription.CreateRemote(const MachineName: string): _UAStructureDescription;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAStructureDescription) as _UAStructureDescription;
end;

procedure TUAStructureDescription.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{994A5FF5-3F9C-4744-904A-49A58000F173}';
    IntfIID:   '{B6C6791C-0102-4701-AFA6-5C1048704680}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAStructureDescription.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAStructureDescription;
  end;
end;

procedure TUAStructureDescription.ConnectTo(svrIntf: _UAStructureDescription);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAStructureDescription.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAStructureDescription.GetDefaultInterface: _UAStructureDescription;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAStructureDescription.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAStructureDescription.Destroy;
begin
  inherited Destroy;
end;

function TUAStructureDescription.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAStructureDescription.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAStructureDescription.Get_DataTypeId: _UANodeId;
begin
  Result := DefaultInterface.DataTypeId;
end;

procedure TUAStructureDescription._Set_DataTypeId(const pRetVal: _UANodeId);
begin
  DefaultInterface.DataTypeId := pRetVal;
end;

function TUAStructureDescription.Get_Name: _UAQualifiedName;
begin
  Result := DefaultInterface.Name;
end;

procedure TUAStructureDescription._Set_Name(const pRetVal: _UAQualifiedName);
begin
  DefaultInterface.Name := pRetVal;
end;

function TUAStructureDescription.Get_StructureDefinition: _UAStructureDefinition;
begin
  Result := DefaultInterface.StructureDefinition;
end;

procedure TUAStructureDescription._Set_StructureDefinition(const pRetVal: _UAStructureDefinition);
begin
  DefaultInterface.StructureDefinition := pRetVal;
end;

function TUAStructureDescription.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAStructureDescription.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAStructureDescription.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAStructureDescription.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUAStructureDescription.ToUADataTypeInfoResult(readOnlyDataTypeSchema: OleVariant; 
                                                        requireBaseDataTypes: WordBool): _ValueResult;
begin
  Result := DefaultInterface.ToUADataTypeInfoResult(readOnlyDataTypeSchema, requireBaseDataTypes);
end;

class function CoUAStructureField.Create: _UAStructureField;
begin
  Result := CreateComObject(CLASS_UAStructureField) as _UAStructureField;
end;

class function CoUAStructureField.CreateRemote(const MachineName: string): _UAStructureField;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAStructureField) as _UAStructureField;
end;

procedure TUAStructureField.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{974D8F38-34EC-4E3A-A966-FF8F7964B970}';
    IntfIID:   '{6300AC71-9922-48C6-990D-423BE54CA6F2}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAStructureField.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAStructureField;
  end;
end;

procedure TUAStructureField.ConnectTo(svrIntf: _UAStructureField);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAStructureField.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAStructureField.GetDefaultInterface: _UAStructureField;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAStructureField.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAStructureField.Destroy;
begin
  inherited Destroy;
end;

function TUAStructureField.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAStructureField.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAStructureField.Get_ArrayDimensions: PSafeArray;
begin
  Result := DefaultInterface.ArrayDimensions;
end;

procedure TUAStructureField.Set_ArrayDimensions(pRetVal: PSafeArray);
begin
  DefaultInterface.ArrayDimensions := pRetVal;
end;

function TUAStructureField.Get_DataTypeId: _UANodeId;
begin
  Result := DefaultInterface.DataTypeId;
end;

procedure TUAStructureField._Set_DataTypeId(const pRetVal: _UANodeId);
begin
  DefaultInterface.DataTypeId := pRetVal;
end;

function TUAStructureField.Get_DecimalMaximumStringLength: TDecimal;
begin
  Result := DefaultInterface.DecimalMaximumStringLength;
end;

procedure TUAStructureField.Set_DecimalMaximumStringLength(pRetVal: TDecimal);
begin
  DefaultInterface.DecimalMaximumStringLength := pRetVal;
end;

function TUAStructureField.Get_Description: WideString;
begin
  Result := DefaultInterface.Description;
end;

procedure TUAStructureField.Set_Description(const pRetVal: WideString);
begin
  DefaultInterface.Description := pRetVal;
end;

function TUAStructureField.Get_Int32MaximumStringLength: Integer;
begin
  Result := DefaultInterface.Int32MaximumStringLength;
end;

procedure TUAStructureField.Set_Int32MaximumStringLength(pRetVal: Integer);
begin
  DefaultInterface.Int32MaximumStringLength := pRetVal;
end;

function TUAStructureField.Get_IsOptional: WordBool;
begin
  Result := DefaultInterface.IsOptional;
end;

procedure TUAStructureField.Set_IsOptional(pRetVal: WordBool);
begin
  DefaultInterface.IsOptional := pRetVal;
end;

function TUAStructureField.Get_MaximumStringLength: Int64;
begin
  Result := DefaultInterface.MaximumStringLength;
end;

procedure TUAStructureField.Set_MaximumStringLength(pRetVal: Int64);
begin
  DefaultInterface.MaximumStringLength := pRetVal;
end;

function TUAStructureField.Get_Name: WideString;
begin
  Result := DefaultInterface.Name;
end;

procedure TUAStructureField.Set_Name(const pRetVal: WideString);
begin
  DefaultInterface.Name := pRetVal;
end;

function TUAStructureField.Get_ValueRank: Integer;
begin
  Result := DefaultInterface.ValueRank;
end;

procedure TUAStructureField.Set_ValueRank(pRetVal: Integer);
begin
  DefaultInterface.ValueRank := pRetVal;
end;

function TUAStructureField.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAStructureField.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAStructureField.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAStructureField.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

procedure TUAStructureField.SetDecimalArrayDimensions(var value: PSafeArray);
begin
  DefaultInterface.SetDecimalArrayDimensions(value);
end;

function TUAStructureField.ToUAStructureFieldInfoResult(readOnlyDataTypeSchema: OleVariant; 
                                                        requireBaseDataTypes: WordBool): _ValueResult;
begin
  Result := DefaultInterface.ToUAStructureFieldInfoResult(readOnlyDataTypeSchema, 
                                                          requireBaseDataTypes);
end;

class function CoUAStructureFieldInfo.Create: _UAStructureFieldInfo;
begin
  Result := CreateComObject(CLASS_UAStructureFieldInfo) as _UAStructureFieldInfo;
end;

class function CoUAStructureFieldInfo.CreateRemote(const MachineName: string): _UAStructureFieldInfo;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAStructureFieldInfo) as _UAStructureFieldInfo;
end;

procedure TUAStructureFieldInfo.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{ADB4B86E-77F6-43D3-961C-5AA6FAC45C7B}';
    IntfIID:   '{A40C030B-5364-4289-98E8-B508D940C190}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAStructureFieldInfo.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAStructureFieldInfo;
  end;
end;

procedure TUAStructureFieldInfo.ConnectTo(svrIntf: _UAStructureFieldInfo);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAStructureFieldInfo.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAStructureFieldInfo.GetDefaultInterface: _UAStructureFieldInfo;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAStructureFieldInfo.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAStructureFieldInfo.Destroy;
begin
  inherited Destroy;
end;

function TUAStructureFieldInfo.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAStructureFieldInfo.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAStructureFieldInfo.Get_ArrayDimensions: PSafeArray;
begin
  Result := DefaultInterface.ArrayDimensions;
end;

procedure TUAStructureFieldInfo.Set_ArrayDimensions(pRetVal: PSafeArray);
begin
  DefaultInterface.ArrayDimensions := pRetVal;
end;

function TUAStructureFieldInfo.Get_DataTypeInfo: _UADataTypeInfo;
begin
  Result := DefaultInterface.DataTypeInfo;
end;

procedure TUAStructureFieldInfo._Set_DataTypeInfo(const pRetVal: _UADataTypeInfo);
begin
  DefaultInterface.DataTypeInfo := pRetVal;
end;

function TUAStructureFieldInfo.Get_DecimalMaximumStringLength: TDecimal;
begin
  Result := DefaultInterface.DecimalMaximumStringLength;
end;

procedure TUAStructureFieldInfo.Set_DecimalMaximumStringLength(pRetVal: TDecimal);
begin
  DefaultInterface.DecimalMaximumStringLength := pRetVal;
end;

function TUAStructureFieldInfo.Get_Description: WideString;
begin
  Result := DefaultInterface.Description;
end;

procedure TUAStructureFieldInfo.Set_Description(const pRetVal: WideString);
begin
  DefaultInterface.Description := pRetVal;
end;

function TUAStructureFieldInfo.Get_Int32MaximumStringLength: Integer;
begin
  Result := DefaultInterface.Int32MaximumStringLength;
end;

procedure TUAStructureFieldInfo.Set_Int32MaximumStringLength(pRetVal: Integer);
begin
  DefaultInterface.Int32MaximumStringLength := pRetVal;
end;

function TUAStructureFieldInfo.Get_IsOptional: WordBool;
begin
  Result := DefaultInterface.IsOptional;
end;

procedure TUAStructureFieldInfo.Set_IsOptional(pRetVal: WordBool);
begin
  DefaultInterface.IsOptional := pRetVal;
end;

function TUAStructureFieldInfo.Get_MaximumStringLength: Int64;
begin
  Result := DefaultInterface.MaximumStringLength;
end;

procedure TUAStructureFieldInfo.Set_MaximumStringLength(pRetVal: Int64);
begin
  DefaultInterface.MaximumStringLength := pRetVal;
end;

function TUAStructureFieldInfo.Get_Name: WideString;
begin
  Result := DefaultInterface.Name;
end;

procedure TUAStructureFieldInfo.Set_Name(const pRetVal: WideString);
begin
  DefaultInterface.Name := pRetVal;
end;

function TUAStructureFieldInfo.Get_ValueRank: Integer;
begin
  Result := DefaultInterface.ValueRank;
end;

procedure TUAStructureFieldInfo.Set_ValueRank(pRetVal: Integer);
begin
  DefaultInterface.ValueRank := pRetVal;
end;

function TUAStructureFieldInfo.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAStructureFieldInfo.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAStructureFieldInfo.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

procedure TUAStructureFieldInfo.SetDecimalArrayDimensions(var value: PSafeArray);
begin
  DefaultInterface.SetDecimalArrayDimensions(value);
end;

class function CoUAStructureTypeInfo.Create: _UAStructureTypeInfo;
begin
  Result := CreateComObject(CLASS_UAStructureTypeInfo) as _UAStructureTypeInfo;
end;

class function CoUAStructureTypeInfo.CreateRemote(const MachineName: string): _UAStructureTypeInfo;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAStructureTypeInfo) as _UAStructureTypeInfo;
end;

procedure TUAStructureTypeInfo.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{0D3A166E-44C6-40C0-A942-AADA18542561}';
    IntfIID:   '{384E7A1E-49D8-4A95-8673-5C0FD4EAD22B}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAStructureTypeInfo.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAStructureTypeInfo;
  end;
end;

procedure TUAStructureTypeInfo.ConnectTo(svrIntf: _UAStructureTypeInfo);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAStructureTypeInfo.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAStructureTypeInfo.GetDefaultInterface: _UAStructureTypeInfo;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAStructureTypeInfo.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAStructureTypeInfo.Destroy;
begin
  inherited Destroy;
end;

function TUAStructureTypeInfo.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAStructureTypeInfo.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAStructureTypeInfo.Get_DataTypeId: _UAModelNodeDescriptor;
begin
  Result := DefaultInterface.DataTypeId;
end;

procedure TUAStructureTypeInfo._Set_DataTypeId(const pRetVal: _UAModelNodeDescriptor);
begin
  DefaultInterface.DataTypeId := pRetVal;
end;

function TUAStructureTypeInfo.Get_Name: _UAQualifiedName;
begin
  Result := DefaultInterface.Name;
end;

procedure TUAStructureTypeInfo._Set_Name(const pRetVal: _UAQualifiedName);
begin
  DefaultInterface.Name := pRetVal;
end;

function TUAStructureTypeInfo.Get_BaseDataTypeId: _UAModelNodeDescriptor;
begin
  Result := DefaultInterface.BaseDataTypeId;
end;

procedure TUAStructureTypeInfo._Set_BaseDataTypeId(const pRetVal: _UAModelNodeDescriptor);
begin
  DefaultInterface.BaseDataTypeId := pRetVal;
end;

function TUAStructureTypeInfo.Get_BaseDataTypeInfo: _UADataTypeInfo;
begin
  Result := DefaultInterface.BaseDataTypeInfo;
end;

procedure TUAStructureTypeInfo._Set_BaseDataTypeInfo(const pRetVal: _UADataTypeInfo);
begin
  DefaultInterface.BaseDataTypeInfo := pRetVal;
end;

function TUAStructureTypeInfo.Get_FieldInfos: ICollection;
begin
  Result := DefaultInterface.FieldInfos;
end;

function TUAStructureTypeInfo.Get_StructureType: UAStructureType;
begin
  Result := DefaultInterface.StructureType;
end;

procedure TUAStructureTypeInfo.Set_StructureType(pRetVal: UAStructureType);
begin
  DefaultInterface.StructureType := pRetVal;
end;

function TUAStructureTypeInfo.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAStructureTypeInfo.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAStructureTypeInfo.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAStructureTypeInfo.AsEnumTypeInfo: _UAEnumTypeInfo;
begin
  Result := DefaultInterface.AsEnumTypeInfo;
end;

function TUAStructureTypeInfo.AsSimpleTypeInfo: _UASimpleTypeInfo;
begin
  Result := DefaultInterface.AsSimpleTypeInfo;
end;

function TUAStructureTypeInfo.AsStructureTypeInfo: _UAStructureTypeInfo;
begin
  Result := DefaultInterface.AsStructureTypeInfo;
end;

procedure TUAStructureTypeInfo.Add(structureFieldInfo: OleVariant);
begin
  DefaultInterface.Add(structureFieldInfo);
end;

class function CoUAServerDtmpParameters.Create: _UAServerDtmpParameters;
begin
  Result := CreateComObject(CLASS_UAServerDtmpParameters) as _UAServerDtmpParameters;
end;

class function CoUAServerDtmpParameters.CreateRemote(const MachineName: string): _UAServerDtmpParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAServerDtmpParameters) as _UAServerDtmpParameters;
end;

procedure TUAServerDtmpParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{98E7A0DC-D592-4CBE-AADF-20F7320ACF62}';
    IntfIID:   '{715D8226-BC54-4900-A67A-BFCBEB125694}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAServerDtmpParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAServerDtmpParameters;
  end;
end;

procedure TUAServerDtmpParameters.ConnectTo(svrIntf: _UAServerDtmpParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAServerDtmpParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAServerDtmpParameters.GetDefaultInterface: _UAServerDtmpParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAServerDtmpParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAServerDtmpParameters.Destroy;
begin
  inherited Destroy;
end;

function TUAServerDtmpParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAServerDtmpParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAServerDtmpParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUAServerDtmpParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUAServerDtmpParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAServerDtmpParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAServerDtmpParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAServerDtmpParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUADataTypeDescriptor.Create: _UADataTypeDescriptor;
begin
  Result := CreateComObject(CLASS_UADataTypeDescriptor) as _UADataTypeDescriptor;
end;

class function CoUADataTypeDescriptor.CreateRemote(const MachineName: string): _UADataTypeDescriptor;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UADataTypeDescriptor) as _UADataTypeDescriptor;
end;

procedure TUADataTypeDescriptor.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{AED76FCB-7835-4064-B80D-027EA36A2F2B}';
    IntfIID:   '{81E0CC77-C55C-417D-AA82-13E4F654B5A0}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUADataTypeDescriptor.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UADataTypeDescriptor;
  end;
end;

procedure TUADataTypeDescriptor.ConnectTo(svrIntf: _UADataTypeDescriptor);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUADataTypeDescriptor.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUADataTypeDescriptor.GetDefaultInterface: _UADataTypeDescriptor;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUADataTypeDescriptor.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUADataTypeDescriptor.Destroy;
begin
  inherited Destroy;
end;

function TUADataTypeDescriptor.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUADataTypeDescriptor.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUADataTypeDescriptor.Get_DataTypeDescription: OleVariant;
begin
  Result := DefaultInterface.DataTypeDescription;
end;

procedure TUADataTypeDescriptor._Set_DataTypeDescription(pRetVal: OleVariant);
begin
  DefaultInterface.DataTypeDescription := pRetVal;
end;

function TUADataTypeDescriptor.Get_DataTypeDictionaryId: _UAModelNodeDescriptor;
begin
  Result := DefaultInterface.DataTypeDictionaryId;
end;

procedure TUADataTypeDescriptor._Set_DataTypeDictionaryId(const pRetVal: _UAModelNodeDescriptor);
begin
  DefaultInterface.DataTypeDictionaryId := pRetVal;
end;

function TUADataTypeDescriptor.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUADataTypeDescriptor.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUADataTypeDescriptor.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUADataTypeDescriptor.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

procedure TUADataTypeDescriptor.SetDataTypeDescription(DataTypeDescription: OleVariant);
begin
  DefaultInterface.SetDataTypeDescription(DataTypeDescription);
end;

class function CoUADataTypeSystemParameters.Create: _UADataTypeSystemParameters;
begin
  Result := CreateComObject(CLASS_UADataTypeSystemParameters) as _UADataTypeSystemParameters;
end;

class function CoUADataTypeSystemParameters.CreateRemote(const MachineName: string): _UADataTypeSystemParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UADataTypeSystemParameters) as _UADataTypeSystemParameters;
end;

procedure TUADataTypeSystemParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{63338BC5-9EEC-4DB4-BB18-42582087D36A}';
    IntfIID:   '{81F5925A-933B-4B7C-917E-837689DAF84D}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUADataTypeSystemParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UADataTypeSystemParameters;
  end;
end;

procedure TUADataTypeSystemParameters.ConnectTo(svrIntf: _UADataTypeSystemParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUADataTypeSystemParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUADataTypeSystemParameters.GetDefaultInterface: _UADataTypeSystemParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUADataTypeSystemParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUADataTypeSystemParameters.Destroy;
begin
  inherited Destroy;
end;

function TUADataTypeSystemParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUADataTypeSystemParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUADataTypeSystemParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUADataTypeSystemParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUADataTypeSystemParameters.Get_AllowCircularTypeNameReferences: WordBool;
begin
  Result := DefaultInterface.AllowCircularTypeNameReferences;
end;

procedure TUADataTypeSystemParameters.Set_AllowCircularTypeNameReferences(pRetVal: WordBool);
begin
  DefaultInterface.AllowCircularTypeNameReferences := pRetVal;
end;

function TUADataTypeSystemParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUADataTypeSystemParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUADataTypeSystemParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUADataTypeSystemParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUAOpcBinaryDtsParameters.Create: _UAOpcBinaryDtsParameters;
begin
  Result := CreateComObject(CLASS_UAOpcBinaryDtsParameters) as _UAOpcBinaryDtsParameters;
end;

class function CoUAOpcBinaryDtsParameters.CreateRemote(const MachineName: string): _UAOpcBinaryDtsParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAOpcBinaryDtsParameters) as _UAOpcBinaryDtsParameters;
end;

procedure TUAOpcBinaryDtsParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{B46A2E02-5D92-4A25-9112-A349FFED4B13}';
    IntfIID:   '{3E3FED36-A742-4B82-9BA5-87F8E1BA0E6D}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAOpcBinaryDtsParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAOpcBinaryDtsParameters;
  end;
end;

procedure TUAOpcBinaryDtsParameters.ConnectTo(svrIntf: _UAOpcBinaryDtsParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAOpcBinaryDtsParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAOpcBinaryDtsParameters.GetDefaultInterface: _UAOpcBinaryDtsParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAOpcBinaryDtsParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAOpcBinaryDtsParameters.Destroy;
begin
  inherited Destroy;
end;

function TUAOpcBinaryDtsParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAOpcBinaryDtsParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAOpcBinaryDtsParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUAOpcBinaryDtsParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUAOpcBinaryDtsParameters.Get_AllowCircularTypeNameReferences: WordBool;
begin
  Result := DefaultInterface.AllowCircularTypeNameReferences;
end;

procedure TUAOpcBinaryDtsParameters.Set_AllowCircularTypeNameReferences(pRetVal: WordBool);
begin
  DefaultInterface.AllowCircularTypeNameReferences := pRetVal;
end;

function TUAOpcBinaryDtsParameters.Get_AllowDataPastEndOfStream: WordBool;
begin
  Result := DefaultInterface.AllowDataPastEndOfStream;
end;

procedure TUAOpcBinaryDtsParameters.Set_AllowDataPastEndOfStream(pRetVal: WordBool);
begin
  DefaultInterface.AllowDataPastEndOfStream := pRetVal;
end;

function TUAOpcBinaryDtsParameters.Get_ImplicitImportDictionary: _StringStringDictionary;
begin
  Result := DefaultInterface.ImplicitImportDictionary;
end;

procedure TUAOpcBinaryDtsParameters._Set_ImplicitImportDictionary(const pRetVal: _StringStringDictionary);
begin
  DefaultInterface.ImplicitImportDictionary := pRetVal;
end;

function TUAOpcBinaryDtsParameters.Get_NamespaceRedirectionDictionary: _StringStringDictionary;
begin
  Result := DefaultInterface.NamespaceRedirectionDictionary;
end;

procedure TUAOpcBinaryDtsParameters._Set_NamespaceRedirectionDictionary(const pRetVal: _StringStringDictionary);
begin
  DefaultInterface.NamespaceRedirectionDictionary := pRetVal;
end;

function TUAOpcBinaryDtsParameters.Get_OverrideLocationForKnownNamespaces: WordBool;
begin
  Result := DefaultInterface.OverrideLocationForKnownNamespaces;
end;

procedure TUAOpcBinaryDtsParameters.Set_OverrideLocationForKnownNamespaces(pRetVal: WordBool);
begin
  DefaultInterface.OverrideLocationForKnownNamespaces := pRetVal;
end;

function TUAOpcBinaryDtsParameters.Get_TypeNameRemappingDictionary: _XmlQualifiedName2Dictionary;
begin
  Result := DefaultInterface.TypeNameRemappingDictionary;
end;

procedure TUAOpcBinaryDtsParameters._Set_TypeNameRemappingDictionary(const pRetVal: _XmlQualifiedName2Dictionary);
begin
  DefaultInterface.TypeNameRemappingDictionary := pRetVal;
end;

function TUAOpcBinaryDtsParameters.Get_WellKnownLocationTemplateDictionary: _StringStringDictionary;
begin
  Result := DefaultInterface.WellKnownLocationTemplateDictionary;
end;

procedure TUAOpcBinaryDtsParameters._Set_WellKnownLocationTemplateDictionary(const pRetVal: _StringStringDictionary);
begin
  DefaultInterface.WellKnownLocationTemplateDictionary := pRetVal;
end;

function TUAOpcBinaryDtsParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAOpcBinaryDtsParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAOpcBinaryDtsParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAOpcBinaryDtsParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUAServerDtmpPluginParameters.Create: _UAServerDtmpPluginParameters;
begin
  Result := CreateComObject(CLASS_UAServerDtmpPluginParameters) as _UAServerDtmpPluginParameters;
end;

class function CoUAServerDtmpPluginParameters.CreateRemote(const MachineName: string): _UAServerDtmpPluginParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAServerDtmpPluginParameters) as _UAServerDtmpPluginParameters;
end;

procedure TUAServerDtmpPluginParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{C3ACE5A6-0AAB-4608-816F-773746386D42}';
    IntfIID:   '{BEFA3307-B76D-49FA-A238-8C9095330799}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAServerDtmpPluginParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAServerDtmpPluginParameters;
  end;
end;

procedure TUAServerDtmpPluginParameters.ConnectTo(svrIntf: _UAServerDtmpPluginParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAServerDtmpPluginParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAServerDtmpPluginParameters.GetDefaultInterface: _UAServerDtmpPluginParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAServerDtmpPluginParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAServerDtmpPluginParameters.Destroy;
begin
  inherited Destroy;
end;

function TUAServerDtmpPluginParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAServerDtmpPluginParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAServerDtmpPluginParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUAServerDtmpPluginParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUAServerDtmpPluginParameters.Get_ClientSelector: _EasyUAClientSelector;
begin
  Result := DefaultInterface.ClientSelector;
end;

procedure TUAServerDtmpPluginParameters._Set_ClientSelector(const pRetVal: _EasyUAClientSelector);
begin
  DefaultInterface.ClientSelector := pRetVal;
end;

function TUAServerDtmpPluginParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAServerDtmpPluginParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAServerDtmpPluginParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAServerDtmpPluginParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUAXmlSchemaDtsParameters.Create: _UAXmlSchemaDtsParameters;
begin
  Result := CreateComObject(CLASS_UAXmlSchemaDtsParameters) as _UAXmlSchemaDtsParameters;
end;

class function CoUAXmlSchemaDtsParameters.CreateRemote(const MachineName: string): _UAXmlSchemaDtsParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAXmlSchemaDtsParameters) as _UAXmlSchemaDtsParameters;
end;

procedure TUAXmlSchemaDtsParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{A5E0072C-7702-49FC-B3FD-2016EE0C8CC8}';
    IntfIID:   '{62935881-3269-488A-AB88-ADC9C5AAFF8A}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAXmlSchemaDtsParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAXmlSchemaDtsParameters;
  end;
end;

procedure TUAXmlSchemaDtsParameters.ConnectTo(svrIntf: _UAXmlSchemaDtsParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAXmlSchemaDtsParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAXmlSchemaDtsParameters.GetDefaultInterface: _UAXmlSchemaDtsParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAXmlSchemaDtsParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAXmlSchemaDtsParameters.Destroy;
begin
  inherited Destroy;
end;

function TUAXmlSchemaDtsParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAXmlSchemaDtsParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAXmlSchemaDtsParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUAXmlSchemaDtsParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUAXmlSchemaDtsParameters.Get_AllowCircularTypeNameReferences: WordBool;
begin
  Result := DefaultInterface.AllowCircularTypeNameReferences;
end;

procedure TUAXmlSchemaDtsParameters.Set_AllowCircularTypeNameReferences(pRetVal: WordBool);
begin
  DefaultInterface.AllowCircularTypeNameReferences := pRetVal;
end;

function TUAXmlSchemaDtsParameters.Get_SelectLowestLevelDataTypeDescription: WordBool;
begin
  Result := DefaultInterface.SelectLowestLevelDataTypeDescription;
end;

procedure TUAXmlSchemaDtsParameters.Set_SelectLowestLevelDataTypeDescription(pRetVal: WordBool);
begin
  DefaultInterface.SelectLowestLevelDataTypeDescription := pRetVal;
end;

function TUAXmlSchemaDtsParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAXmlSchemaDtsParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAXmlSchemaDtsParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAXmlSchemaDtsParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUAEUInformation.Create: _UAEUInformation;
begin
  Result := CreateComObject(CLASS_UAEUInformation) as _UAEUInformation;
end;

class function CoUAEUInformation.CreateRemote(const MachineName: string): _UAEUInformation;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAEUInformation) as _UAEUInformation;
end;

procedure TUAEUInformation.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{2C6C44D7-7437-4F60-BF1C-5F783F4BDDCD}';
    IntfIID:   '{3D500236-2A8B-493A-9910-BC0797CF8542}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAEUInformation.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAEUInformation;
  end;
end;

procedure TUAEUInformation.ConnectTo(svrIntf: _UAEUInformation);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAEUInformation.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAEUInformation.GetDefaultInterface: _UAEUInformation;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAEUInformation.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAEUInformation.Destroy;
begin
  inherited Destroy;
end;

function TUAEUInformation.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAEUInformation.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAEUInformation.Get_Description: WideString;
begin
  Result := DefaultInterface.Description;
end;

procedure TUAEUInformation.Set_Description(const pRetVal: WideString);
begin
  DefaultInterface.Description := pRetVal;
end;

function TUAEUInformation.Get_DisplayName: WideString;
begin
  Result := DefaultInterface.DisplayName;
end;

procedure TUAEUInformation.Set_DisplayName(const pRetVal: WideString);
begin
  DefaultInterface.DisplayName := pRetVal;
end;

function TUAEUInformation.Get_NamespaceUriString: WideString;
begin
  Result := DefaultInterface.NamespaceUriString;
end;

procedure TUAEUInformation.Set_NamespaceUriString(const pRetVal: WideString);
begin
  DefaultInterface.NamespaceUriString := pRetVal;
end;

function TUAEUInformation.Get_UnitId: Integer;
begin
  Result := DefaultInterface.UnitId;
end;

procedure TUAEUInformation.Set_UnitId(pRetVal: Integer);
begin
  DefaultInterface.UnitId := pRetVal;
end;

function TUAEUInformation.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAEUInformation.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAEUInformation.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAEUInformation.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUARange.Create: _UARange;
begin
  Result := CreateComObject(CLASS_UARange) as _UARange;
end;

class function CoUARange.CreateRemote(const MachineName: string): _UARange;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UARange) as _UARange;
end;

procedure TUARange.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{9BB59BA3-1743-4A0B-B6C5-3B3CA389B0E7}';
    IntfIID:   '{7AF3786A-C1B7-44E3-9DA2-7EC79A303B2E}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUARange.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UARange;
  end;
end;

procedure TUARange.ConnectTo(svrIntf: _UARange);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUARange.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUARange.GetDefaultInterface: _UARange;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUARange.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUARange.Destroy;
begin
  inherited Destroy;
end;

function TUARange.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUARange.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUARange.Get_High: Double;
begin
  Result := DefaultInterface.High;
end;

procedure TUARange.Set_High(pRetVal: Double);
begin
  DefaultInterface.High := pRetVal;
end;

function TUARange.Get_HighBound: Double;
begin
  Result := DefaultInterface.HighBound;
end;

function TUARange.Get_IsReversed: WordBool;
begin
  Result := DefaultInterface.IsReversed;
end;

function TUARange.Get_IsSingleValue: WordBool;
begin
  Result := DefaultInterface.IsSingleValue;
end;

function TUARange.Get_IsNormalized: WordBool;
begin
  Result := DefaultInterface.IsNormalized;
end;

function TUARange.Get_Low: Double;
begin
  Result := DefaultInterface.Low;
end;

procedure TUARange.Set_Low(pRetVal: Double);
begin
  DefaultInterface.Low := pRetVal;
end;

function TUARange.Get_LowBound: Double;
begin
  Result := DefaultInterface.LowBound;
end;

function TUARange.Get_Size: Double;
begin
  Result := DefaultInterface.Size;
end;

function TUARange.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUARange.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUARange.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUARange.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUARange.InRange(value: Double): WordBool;
begin
  Result := DefaultInterface.InRange(value);
end;

procedure TUARange.IntersectWith(other: OleVariant);
begin
  DefaultInterface.IntersectWith(other);
end;

procedure TUARange.Normalize;
begin
  DefaultInterface.Normalize;
end;

class function CoComEasyUAClientConnectionMonitoring.Create: _EasyUAClientConnectionMonitoring;
begin
  Result := CreateComObject(CLASS_ComEasyUAClientConnectionMonitoring) as _EasyUAClientConnectionMonitoring;
end;

class function CoComEasyUAClientConnectionMonitoring.CreateRemote(const MachineName: string): _EasyUAClientConnectionMonitoring;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ComEasyUAClientConnectionMonitoring) as _EasyUAClientConnectionMonitoring;
end;

procedure TComEasyUAClientConnectionMonitoring.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{A4DFD966-06AA-4874-9E24-436E2C235652}';
    IntfIID:   '{44D352A4-542F-4881-9CA4-5E4D5F0D7802}';
    EventIID:  '{68427062-23DA-4E3E-82CF-74012D87B782}';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TComEasyUAClientConnectionMonitoring.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    ConnectEvents(punk);
    Fintf:= punk as _EasyUAClientConnectionMonitoring;
  end;
end;

procedure TComEasyUAClientConnectionMonitoring.ConnectTo(svrIntf: _EasyUAClientConnectionMonitoring);
begin
  Disconnect;
  FIntf := svrIntf;
  ConnectEvents(FIntf);
end;

procedure TComEasyUAClientConnectionMonitoring.DisConnect;
begin
  if Fintf <> nil then
  begin
    DisconnectEvents(FIntf);
    FIntf := nil;
  end;
end;

function TComEasyUAClientConnectionMonitoring.GetDefaultInterface: _EasyUAClientConnectionMonitoring;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TComEasyUAClientConnectionMonitoring.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TComEasyUAClientConnectionMonitoring.Destroy;
begin
  inherited Destroy;
end;

procedure TComEasyUAClientConnectionMonitoring.InvokeEvent(DispID: TDispID; var Params: TVariantArray);
begin
  case DispID of
    -1: Exit;  // DISPID_UNKNOWN
    1001: if Assigned(FOnServerConditionChanged) then
         FOnServerConditionChanged(Self,
                                   Params[0] {OleVariant},
                                   IUnknown(TVarData(Params[1]).VPointer) as _EasyUAServerConditionChangedEventArgs {const _EasyUAServerConditionChangedEventArgs});
  end; {case DispID}
end;

function TComEasyUAClientConnectionMonitoring.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TComEasyUAClientConnectionMonitoring.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TComEasyUAClientConnectionMonitoring.Get_PullServerConditionChangedQueueCapacity: Integer;
begin
  Result := DefaultInterface.PullServerConditionChangedQueueCapacity;
end;

procedure TComEasyUAClientConnectionMonitoring.Set_PullServerConditionChangedQueueCapacity(pRetVal: Integer);
begin
  DefaultInterface.PullServerConditionChangedQueueCapacity := pRetVal;
end;

function TComEasyUAClientConnectionMonitoring.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TComEasyUAClientConnectionMonitoring.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TComEasyUAClientConnectionMonitoring.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TComEasyUAClientConnectionMonitoring.PullMultipleServerConditionChanges(maximumCount: Integer; 
                                                                                 millisecondsTimeout: Integer): PSafeArray;
begin
  Result := DefaultInterface.PullMultipleServerConditionChanges(maximumCount, millisecondsTimeout);
end;

function TComEasyUAClientConnectionMonitoring.PullServerConditionChanged(millisecondsTimeout: Integer): _EasyUAServerConditionChangedEventArgs;
begin
  Result := DefaultInterface.PullServerConditionChanged(millisecondsTimeout);
end;

function TComEasyUAClientConnectionMonitoring.PullServerConditionChangeList(maximumCount: Integer; 
                                                                            millisecondsTimeout: Integer): _ElasticVector;
begin
  Result := DefaultInterface.PullServerConditionChangeList(maximumCount, millisecondsTimeout);
end;

class function CoEasyUAClientSelector.Create: _EasyUAClientSelector;
begin
  Result := CreateComObject(CLASS_EasyUAClientSelector) as _EasyUAClientSelector;
end;

class function CoEasyUAClientSelector.CreateRemote(const MachineName: string): _EasyUAClientSelector;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EasyUAClientSelector) as _EasyUAClientSelector;
end;

procedure TEasyUAClientSelector.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{F783E1C2-6674-4F69-AC4E-25C154A3C56C}';
    IntfIID:   '{CAD63DE0-9783-4FD2-A4DD-4837C10F2850}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TEasyUAClientSelector.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _EasyUAClientSelector;
  end;
end;

procedure TEasyUAClientSelector.ConnectTo(svrIntf: _EasyUAClientSelector);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TEasyUAClientSelector.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TEasyUAClientSelector.GetDefaultInterface: _EasyUAClientSelector;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TEasyUAClientSelector.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TEasyUAClientSelector.Destroy;
begin
  inherited Destroy;
end;

function TEasyUAClientSelector.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TEasyUAClientSelector.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TEasyUAClientSelector.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TEasyUAClientSelector.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TEasyUAClientSelector.Get_Differentiator: WideString;
begin
  Result := DefaultInterface.Differentiator;
end;

procedure TEasyUAClientSelector.Set_Differentiator(const pRetVal: WideString);
begin
  DefaultInterface.Differentiator := pRetVal;
end;

function TEasyUAClientSelector.Get_InstanceParameters: _EasyUAClientInstanceParameters;
begin
  Result := DefaultInterface.InstanceParameters;
end;

procedure TEasyUAClientSelector._Set_InstanceParameters(const pRetVal: _EasyUAClientInstanceParameters);
begin
  DefaultInterface.InstanceParameters := pRetVal;
end;

function TEasyUAClientSelector.Get_Isolated: WordBool;
begin
  Result := DefaultInterface.Isolated;
end;

procedure TEasyUAClientSelector.Set_Isolated(pRetVal: WordBool);
begin
  DefaultInterface.Isolated := pRetVal;
end;

function TEasyUAClientSelector.Get_IsolatedParameters: _EasyUAClientAdaptableParameters;
begin
  Result := DefaultInterface.IsolatedParameters;
end;

procedure TEasyUAClientSelector._Set_IsolatedParameters(const pRetVal: _EasyUAClientAdaptableParameters);
begin
  DefaultInterface.IsolatedParameters := pRetVal;
end;

function TEasyUAClientSelector.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TEasyUAClientSelector.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TEasyUAClientSelector.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TEasyUAClientSelector.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

procedure TEasyUAClientSelector.Reset;
begin
  DefaultInterface.Reset;
end;

class function CoEasyUAEngineException.Create: _EasyUAEngineException;
begin
  Result := CreateComObject(CLASS_EasyUAEngineException) as _EasyUAEngineException;
end;

class function CoEasyUAEngineException.CreateRemote(const MachineName: string): _EasyUAEngineException;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EasyUAEngineException) as _EasyUAEngineException;
end;

procedure TEasyUAEngineException.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{C787F79A-851E-4DFD-A75B-68FB4C86E303}';
    IntfIID:   '{23309CA8-0649-414E-B116-C57CD515584D}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TEasyUAEngineException.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _EasyUAEngineException;
  end;
end;

procedure TEasyUAEngineException.ConnectTo(svrIntf: _EasyUAEngineException);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TEasyUAEngineException.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TEasyUAEngineException.GetDefaultInterface: _EasyUAEngineException;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TEasyUAEngineException.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TEasyUAEngineException.Destroy;
begin
  inherited Destroy;
end;

function TEasyUAEngineException.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TEasyUAEngineException.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TEasyUAEngineException.Get_Message: WideString;
begin
  Result := DefaultInterface.Message;
end;

function TEasyUAEngineException.Get_StackTrace: WideString;
begin
  Result := DefaultInterface.StackTrace;
end;

function TEasyUAEngineException.Get_HelpLink: WideString;
begin
  Result := DefaultInterface.HelpLink;
end;

procedure TEasyUAEngineException.Set_HelpLink(const pRetVal: WideString);
begin
  DefaultInterface.HelpLink := pRetVal;
end;

function TEasyUAEngineException.Get_Source: WideString;
begin
  Result := DefaultInterface.Source;
end;

procedure TEasyUAEngineException.Set_Source(const pRetVal: WideString);
begin
  DefaultInterface.Source := pRetVal;
end;

function TEasyUAEngineException.Get_InnerException: _Exception;
begin
  Result := DefaultInterface.InnerException;
end;

function TEasyUAEngineException.Get_TargetSite: _MethodBase;
begin
  Result := DefaultInterface.TargetSite;
end;

function TEasyUAEngineException.Get_Data: _Dictionary;
begin
  Result := DefaultInterface.Data;
end;

function TEasyUAEngineException.Get_HResult: Integer;
begin
  Result := DefaultInterface.HResult;
end;

function TEasyUAEngineException.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TEasyUAEngineException.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TEasyUAEngineException.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TEasyUAEngineException.GetBaseException: _Exception;
begin
  Result := DefaultInterface.GetBaseException;
end;

procedure TEasyUAEngineException.GetObjectData(const info: _SerializationInfo; 
                                               context: StreamingContext);
begin
  DefaultInterface.GetObjectData(info, context);
end;

class function CoEasyUASpecializedClient.Create: _EasyUASpecializedClient;
begin
  Result := CreateComObject(CLASS_EasyUASpecializedClient) as _EasyUASpecializedClient;
end;

class function CoEasyUASpecializedClient.CreateRemote(const MachineName: string): _EasyUASpecializedClient;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EasyUASpecializedClient) as _EasyUASpecializedClient;
end;

procedure TEasyUASpecializedClient.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{576AF9AD-AB01-45C4-89AF-102A1458CCF0}';
    IntfIID:   '{2C94D060-0A90-45CD-B693-701E9EFBFF36}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TEasyUASpecializedClient.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _EasyUASpecializedClient;
  end;
end;

procedure TEasyUASpecializedClient.ConnectTo(svrIntf: _EasyUASpecializedClient);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TEasyUASpecializedClient.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TEasyUASpecializedClient.GetDefaultInterface: _EasyUASpecializedClient;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TEasyUASpecializedClient.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TEasyUASpecializedClient.Destroy;
begin
  inherited Destroy;
end;

function TEasyUASpecializedClient.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TEasyUASpecializedClient.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TEasyUASpecializedClient.Get_CustomReference: WideString;
begin
  Result := DefaultInterface.CustomReference;
end;

procedure TEasyUASpecializedClient.Set_CustomReference(const pRetVal: WideString);
begin
  DefaultInterface.CustomReference := pRetVal;
end;

function TEasyUASpecializedClient.Get_ClientSelector: _EasyUAClientSelector;
begin
  Result := DefaultInterface.ClientSelector;
end;

procedure TEasyUASpecializedClient._Set_ClientSelector(const pRetVal: _EasyUAClientSelector);
begin
  DefaultInterface.ClientSelector := pRetVal;
end;

function TEasyUASpecializedClient.Get_IsDerived: WordBool;
begin
  Result := DefaultInterface.IsDerived;
end;

function TEasyUASpecializedClient.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TEasyUASpecializedClient.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TEasyUASpecializedClient.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TEasyUASpecializedClient.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TEasyUASpecializedClient.GetService(const serviceType: _Type): OleVariant;
begin
  Result := DefaultInterface.GetService(serviceType);
end;

function TEasyUASpecializedClient.GetServiceByName(const serviceTypeName: WideString): OleVariant;
begin
  Result := DefaultInterface.GetServiceByName(serviceTypeName);
end;

function TEasyUASpecializedClient.ValueEquals(other: OleVariant): WordBool;
begin
  Result := DefaultInterface.ValueEquals(other);
end;

function TEasyUASpecializedClient.AsClient: _EasyUAClient;
begin
  Result := DefaultInterface.AsClient;
end;

class function CoStringUANodeIdDictionary.Create: _StringUANodeIdReadOnlyDictionary;
begin
  Result := CreateComObject(CLASS_StringUANodeIdDictionary) as _StringUANodeIdReadOnlyDictionary;
end;

class function CoStringUANodeIdDictionary.CreateRemote(const MachineName: string): _StringUANodeIdReadOnlyDictionary;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_StringUANodeIdDictionary) as _StringUANodeIdReadOnlyDictionary;
end;

procedure TStringUANodeIdDictionary.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{079256AC-458A-4310-B94E-7D9800372A05}';
    IntfIID:   '{5F478C83-7438-4815-8EB0-5CFD4E704F37}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TStringUANodeIdDictionary.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _StringUANodeIdReadOnlyDictionary;
  end;
end;

procedure TStringUANodeIdDictionary.ConnectTo(svrIntf: _StringUANodeIdReadOnlyDictionary);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TStringUANodeIdDictionary.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TStringUANodeIdDictionary.GetDefaultInterface: _StringUANodeIdReadOnlyDictionary;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TStringUANodeIdDictionary.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TStringUANodeIdDictionary.Destroy;
begin
  inherited Destroy;
end;

function TStringUANodeIdDictionary.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TStringUANodeIdDictionary.Get_Item(key: OleVariant): _UANodeId;
begin
  Result := DefaultInterface.Item[key];
end;

function TStringUANodeIdDictionary.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

function TStringUANodeIdDictionary.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TStringUANodeIdDictionary.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TStringUANodeIdDictionary.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TStringUANodeIdDictionary.GetEnumerator: IEnumVARIANT;
begin
  Result := DefaultInterface.GetEnumerator;
end;

function TStringUANodeIdDictionary.ContainsKey(key: OleVariant): WordBool;
begin
  Result := DefaultInterface.ContainsKey(key);
end;

function TStringUANodeIdDictionary.TryGetValue(key: OleVariant; out value: OleVariant): WordBool;
begin
  Result := DefaultInterface.TryGetValue(key, value);
end;

function TStringUANodeIdDictionary.ContainsValue(value: OleVariant): WordBool;
begin
  Result := DefaultInterface.ContainsValue(value);
end;

class function CoUAAttributeField.Create: _UAAttributeField;
begin
  Result := CreateComObject(CLASS_UAAttributeField) as _UAAttributeField;
end;

class function CoUAAttributeField.CreateRemote(const MachineName: string): _UAAttributeField;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAAttributeField) as _UAAttributeField;
end;

procedure TUAAttributeField.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{EB40BE1D-2698-4376-872A-426F7AB7656E}';
    IntfIID:   '{B98ECAAE-4281-4BF3-B05B-946CDB30897F}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAAttributeField.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAAttributeField;
  end;
end;

procedure TUAAttributeField.ConnectTo(svrIntf: _UAAttributeField);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAAttributeField.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAAttributeField.GetDefaultInterface: _UAAttributeField;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAAttributeField.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAAttributeField.Destroy;
begin
  inherited Destroy;
end;

function TUAAttributeField.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAAttributeField.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAAttributeField.Get_State: OleVariant;
begin
  Result := DefaultInterface.State;
end;

procedure TUAAttributeField._Set_State(pRetVal: OleVariant);
begin
  DefaultInterface.State := pRetVal;
end;

function TUAAttributeField.Get_Operand: _UASimpleAttributeOperand;
begin
  Result := DefaultInterface.Operand;
end;

procedure TUAAttributeField._Set_Operand(const pRetVal: _UASimpleAttributeOperand);
begin
  DefaultInterface.Operand := pRetVal;
end;

function TUAAttributeField.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAAttributeField.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAAttributeField.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAAttributeField.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUAAttributeField.MemberwiseClone: _OperationArguments;
begin
  Result := DefaultInterface.MemberwiseClone;
end;

procedure TUAAttributeField.SetState(State: OleVariant);
begin
  DefaultInterface.SetState(State);
end;

class function CoUAAttributeFieldCollection.Create: _UAAttributeFieldCollection;
begin
  Result := CreateComObject(CLASS_UAAttributeFieldCollection) as _UAAttributeFieldCollection;
end;

class function CoUAAttributeFieldCollection.CreateRemote(const MachineName: string): _UAAttributeFieldCollection;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAAttributeFieldCollection) as _UAAttributeFieldCollection;
end;

procedure TUAAttributeFieldCollection.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{CA8E768C-5EDF-451B-BDAB-BA01A61A96C4}';
    IntfIID:   '{DB3969A7-EFA7-4DBF-B9BB-917C4E098064}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAAttributeFieldCollection.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAAttributeFieldCollection;
  end;
end;

procedure TUAAttributeFieldCollection.ConnectTo(svrIntf: _UAAttributeFieldCollection);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAAttributeFieldCollection.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAAttributeFieldCollection.GetDefaultInterface: _UAAttributeFieldCollection;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAAttributeFieldCollection.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAAttributeFieldCollection.Destroy;
begin
  inherited Destroy;
end;

function TUAAttributeFieldCollection.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAAttributeFieldCollection.Get_Item(index: Integer): _UAAttributeField;
begin
  Result := DefaultInterface.Item[index];
end;

procedure TUAAttributeFieldCollection._Set_Item(index: Integer; const pRetVal: _UAAttributeField);
begin
  DefaultInterface.Item[index] := pRetVal;
end;

function TUAAttributeFieldCollection.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

function TUAAttributeFieldCollection.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAAttributeFieldCollection.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAAttributeFieldCollection.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAAttributeFieldCollection.GetEnumerator: IEnumVARIANT;
begin
  Result := DefaultInterface.GetEnumerator;
end;

procedure TUAAttributeFieldCollection.Add(Item: OleVariant);
begin
  DefaultInterface.Add(Item);
end;

procedure TUAAttributeFieldCollection.Clear;
begin
  DefaultInterface.Clear;
end;

function TUAAttributeFieldCollection.Contains(Item: OleVariant): WordBool;
begin
  Result := DefaultInterface.Contains(Item);
end;

function TUAAttributeFieldCollection.IndexOf(Item: OleVariant): Integer;
begin
  Result := DefaultInterface.IndexOf(Item);
end;

procedure TUAAttributeFieldCollection.Insert(index: Integer; Item: OleVariant);
begin
  DefaultInterface.Insert(index, Item);
end;

function TUAAttributeFieldCollection.Remove(Item: OleVariant): WordBool;
begin
  Result := DefaultInterface.Remove(Item);
end;

procedure TUAAttributeFieldCollection.RemoveAt(index: Integer);
begin
  DefaultInterface.RemoveAt(index);
end;

class function CoUABrowseParameters.Create: _UABrowseParameters;
begin
  Result := CreateComObject(CLASS_UABrowseParameters) as _UABrowseParameters;
end;

class function CoUABrowseParameters.CreateRemote(const MachineName: string): _UABrowseParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UABrowseParameters) as _UABrowseParameters;
end;

procedure TUABrowseParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{A6B2314A-ECE4-42AF-8E5E-6A5222657242}';
    IntfIID:   '{C1524019-718E-4D03-AA7B-A00D5A32D7BD}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUABrowseParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UABrowseParameters;
  end;
end;

procedure TUABrowseParameters.ConnectTo(svrIntf: _UABrowseParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUABrowseParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUABrowseParameters.GetDefaultInterface: _UABrowseParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUABrowseParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUABrowseParameters.Destroy;
begin
  inherited Destroy;
end;

function TUABrowseParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUABrowseParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUABrowseParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUABrowseParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUABrowseParameters.Get_BrowseDirections: UABrowseDirections;
begin
  Result := DefaultInterface.BrowseDirections;
end;

procedure TUABrowseParameters.Set_BrowseDirections(pRetVal: UABrowseDirections);
begin
  DefaultInterface.BrowseDirections := pRetVal;
end;

function TUABrowseParameters.Get_IncludeSubtypes: WordBool;
begin
  Result := DefaultInterface.IncludeSubtypes;
end;

procedure TUABrowseParameters.Set_IncludeSubtypes(pRetVal: WordBool);
begin
  DefaultInterface.IncludeSubtypes := pRetVal;
end;

function TUABrowseParameters.Get_NodeClasses: UANodeClass;
begin
  Result := DefaultInterface.NodeClasses;
end;

procedure TUABrowseParameters.Set_NodeClasses(pRetVal: UANodeClass);
begin
  DefaultInterface.NodeClasses := pRetVal;
end;

function TUABrowseParameters.Get_ReferenceTypeIds: _UANodeIdCollection;
begin
  Result := DefaultInterface.ReferenceTypeIds;
end;

procedure TUABrowseParameters._Set_ReferenceTypeIds(const pRetVal: _UANodeIdCollection);
begin
  DefaultInterface.ReferenceTypeIds := pRetVal;
end;

function TUABrowseParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUABrowseParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUABrowseParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUABrowseParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

procedure TUABrowseParameters.CombineWith(other: OleVariant);
begin
  DefaultInterface.CombineWith(other);
end;

class function CoUADataChangeFilter.Create: _UADataChangeFilter;
begin
  Result := CreateComObject(CLASS_UADataChangeFilter) as _UADataChangeFilter;
end;

class function CoUADataChangeFilter.CreateRemote(const MachineName: string): _UADataChangeFilter;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UADataChangeFilter) as _UADataChangeFilter;
end;

procedure TUADataChangeFilter.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{69C23B34-9B8F-4999-A815-D873520581AE}';
    IntfIID:   '{D0141446-A931-4514-A25E-2C9FF10B527E}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUADataChangeFilter.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UADataChangeFilter;
  end;
end;

procedure TUADataChangeFilter.ConnectTo(svrIntf: _UADataChangeFilter);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUADataChangeFilter.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUADataChangeFilter.GetDefaultInterface: _UADataChangeFilter;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUADataChangeFilter.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUADataChangeFilter.Destroy;
begin
  inherited Destroy;
end;

function TUADataChangeFilter.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUADataChangeFilter.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUADataChangeFilter.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUADataChangeFilter.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUADataChangeFilter.Get_DeadbandType: UADeadbandType;
begin
  Result := DefaultInterface.DeadbandType;
end;

procedure TUADataChangeFilter.Set_DeadbandType(pRetVal: UADeadbandType);
begin
  DefaultInterface.DeadbandType := pRetVal;
end;

function TUADataChangeFilter.Get_DeadbandValue: Double;
begin
  Result := DefaultInterface.DeadbandValue;
end;

procedure TUADataChangeFilter.Set_DeadbandValue(pRetVal: Double);
begin
  DefaultInterface.DeadbandValue := pRetVal;
end;

function TUADataChangeFilter.Get_Trigger: UADataChangeTrigger;
begin
  Result := DefaultInterface.Trigger;
end;

procedure TUADataChangeFilter.Set_Trigger(pRetVal: UADataChangeTrigger);
begin
  DefaultInterface.Trigger := pRetVal;
end;

function TUADataChangeFilter.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUADataChangeFilter.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUADataChangeFilter.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUADataChangeFilter.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUAAttributeData.Create: _UAAttributeData;
begin
  Result := CreateComObject(CLASS_UAAttributeData) as _UAAttributeData;
end;

class function CoUAAttributeData.CreateRemote(const MachineName: string): _UAAttributeData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAAttributeData) as _UAAttributeData;
end;

procedure TUAAttributeData.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{C6820823-AFDF-4368-A8E8-D85075ECF5CA}';
    IntfIID:   '{BD5F0FD1-2C0A-4735-9A4C-3321ED35C123}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAAttributeData.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAAttributeData;
  end;
end;

procedure TUAAttributeData.ConnectTo(svrIntf: _UAAttributeData);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAAttributeData.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAAttributeData.GetDefaultInterface: _UAAttributeData;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAAttributeData.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAAttributeData.Destroy;
begin
  inherited Destroy;
end;

function TUAAttributeData.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAAttributeData.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAAttributeData.Get_ToString_2(const format: WideString; 
                                         const formatProvider: IFormatProvider): WideString;
begin
  Result := DefaultInterface.ToString_2[format, formatProvider];
end;

function TUAAttributeData.Get_ToString_3(const format: WideString): WideString;
begin
  Result := DefaultInterface.ToString_3[format];
end;

function TUAAttributeData.Get_HasBadStatus: WordBool;
begin
  Result := DefaultInterface.HasBadStatus;
end;

function TUAAttributeData.Get_HasGoodStatus: WordBool;
begin
  Result := DefaultInterface.HasGoodStatus;
end;

function TUAAttributeData.Get_HasServerTimestamp: WordBool;
begin
  Result := DefaultInterface.HasServerTimestamp;
end;

function TUAAttributeData.Get_HasSourceTimestamp: WordBool;
begin
  Result := DefaultInterface.HasSourceTimestamp;
end;

function TUAAttributeData.Get_HasUncertainStatus: WordBool;
begin
  Result := DefaultInterface.HasUncertainStatus;
end;

function TUAAttributeData.Get_HasValue: WordBool;
begin
  Result := DefaultInterface.HasValue;
end;

function TUAAttributeData.Get_ServerPicoseconds: Integer;
begin
  Result := DefaultInterface.ServerPicoseconds;
end;

procedure TUAAttributeData.Set_ServerPicoseconds(pRetVal: Integer);
begin
  DefaultInterface.ServerPicoseconds := pRetVal;
end;

function TUAAttributeData.Get_ServerTimestamp: TDateTime;
begin
  Result := DefaultInterface.ServerTimestamp;
end;

procedure TUAAttributeData.Set_ServerTimestamp(pRetVal: TDateTime);
begin
  DefaultInterface.ServerTimestamp := pRetVal;
end;

function TUAAttributeData.Get_ServerTimestampDouble: Double;
begin
  Result := DefaultInterface.ServerTimestampDouble;
end;

procedure TUAAttributeData.Set_ServerTimestampDouble(pRetVal: Double);
begin
  DefaultInterface.ServerTimestampDouble := pRetVal;
end;

function TUAAttributeData.Get_ServerTimestampLocal: TDateTime;
begin
  Result := DefaultInterface.ServerTimestampLocal;
end;

procedure TUAAttributeData.Set_ServerTimestampLocal(pRetVal: TDateTime);
begin
  DefaultInterface.ServerTimestampLocal := pRetVal;
end;

function TUAAttributeData.Get_ServerTimestampLocalDouble: Double;
begin
  Result := DefaultInterface.ServerTimestampLocalDouble;
end;

procedure TUAAttributeData.Set_ServerTimestampLocalDouble(pRetVal: Double);
begin
  DefaultInterface.ServerTimestampLocalDouble := pRetVal;
end;

function TUAAttributeData.Get_SourcePicoseconds: Integer;
begin
  Result := DefaultInterface.SourcePicoseconds;
end;

procedure TUAAttributeData.Set_SourcePicoseconds(pRetVal: Integer);
begin
  DefaultInterface.SourcePicoseconds := pRetVal;
end;

function TUAAttributeData.Get_SourceTimestamp: TDateTime;
begin
  Result := DefaultInterface.SourceTimestamp;
end;

procedure TUAAttributeData.Set_SourceTimestamp(pRetVal: TDateTime);
begin
  DefaultInterface.SourceTimestamp := pRetVal;
end;

function TUAAttributeData.Get_SourceTimestampDouble: Double;
begin
  Result := DefaultInterface.SourceTimestampDouble;
end;

procedure TUAAttributeData.Set_SourceTimestampDouble(pRetVal: Double);
begin
  DefaultInterface.SourceTimestampDouble := pRetVal;
end;

function TUAAttributeData.Get_SourceTimestampLocal: TDateTime;
begin
  Result := DefaultInterface.SourceTimestampLocal;
end;

procedure TUAAttributeData.Set_SourceTimestampLocal(pRetVal: TDateTime);
begin
  DefaultInterface.SourceTimestampLocal := pRetVal;
end;

function TUAAttributeData.Get_SourceTimestampLocalDouble: Double;
begin
  Result := DefaultInterface.SourceTimestampLocalDouble;
end;

procedure TUAAttributeData.Set_SourceTimestampLocalDouble(pRetVal: Double);
begin
  DefaultInterface.SourceTimestampLocalDouble := pRetVal;
end;

function TUAAttributeData.Get_StatusCode: _UAStatusCode;
begin
  Result := DefaultInterface.StatusCode;
end;

procedure TUAAttributeData._Set_StatusCode(const pRetVal: _UAStatusCode);
begin
  DefaultInterface.StatusCode := pRetVal;
end;

function TUAAttributeData.Get_StatusInfo: StatusInfo;
begin
  Result := DefaultInterface.StatusInfo;
end;

function TUAAttributeData.Get_value: OleVariant;
begin
  Result := DefaultInterface.value;
end;

procedure TUAAttributeData._Set_value(pRetVal: OleVariant);
begin
  DefaultInterface.value := pRetVal;
end;

function TUAAttributeData.Get_ValueType: _Type;
begin
  Result := DefaultInterface.ValueType;
end;

function TUAAttributeData.Get_ValueTypeName: WideString;
begin
  Result := DefaultInterface.ValueTypeName;
end;

function TUAAttributeData.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAAttributeData.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAAttributeData.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAAttributeData.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUAAttributeData.DisplayValue: WideString;
begin
  Result := DefaultInterface.DisplayValue;
end;

procedure TUAAttributeData.SetValue(value: OleVariant);
begin
  DefaultInterface.SetValue(value);
end;

class function CoUAEndpointDescriptor.Create: _UAEndpointDescriptor;
begin
  Result := CreateComObject(CLASS_UAEndpointDescriptor) as _UAEndpointDescriptor;
end;

class function CoUAEndpointDescriptor.CreateRemote(const MachineName: string): _UAEndpointDescriptor;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAEndpointDescriptor) as _UAEndpointDescriptor;
end;

procedure TUAEndpointDescriptor.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{F4773A26-7A58-4349-8326-873629FC483F}';
    IntfIID:   '{39E66E2C-2192-414C-86D8-41022342C186}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAEndpointDescriptor.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAEndpointDescriptor;
  end;
end;

procedure TUAEndpointDescriptor.ConnectTo(svrIntf: _UAEndpointDescriptor);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAEndpointDescriptor.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAEndpointDescriptor.GetDefaultInterface: _UAEndpointDescriptor;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAEndpointDescriptor.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAEndpointDescriptor.Destroy;
begin
  inherited Destroy;
end;

function TUAEndpointDescriptor.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAEndpointDescriptor.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAEndpointDescriptor.Get_AliasName: WideString;
begin
  Result := DefaultInterface.AliasName;
end;

procedure TUAEndpointDescriptor.Set_AliasName(const pRetVal: WideString);
begin
  DefaultInterface.AliasName := pRetVal;
end;

function TUAEndpointDescriptor.Get_IsAliased: WordBool;
begin
  Result := DefaultInterface.IsAliased;
end;

function TUAEndpointDescriptor.Get_Authority: WideString;
begin
  Result := DefaultInterface.Authority;
end;

procedure TUAEndpointDescriptor.Set_Authority(const pRetVal: WideString);
begin
  DefaultInterface.Authority := pRetVal;
end;

function TUAEndpointDescriptor.Get_DescriptorString: WideString;
begin
  Result := DefaultInterface.DescriptorString;
end;

procedure TUAEndpointDescriptor.Set_DescriptorString(const pRetVal: WideString);
begin
  DefaultInterface.DescriptorString := pRetVal;
end;

function TUAEndpointDescriptor.Get_PathAndQuery: WideString;
begin
  Result := DefaultInterface.PathAndQuery;
end;

procedure TUAEndpointDescriptor.Set_PathAndQuery(const pRetVal: WideString);
begin
  DefaultInterface.PathAndQuery := pRetVal;
end;

function TUAEndpointDescriptor.Get_SchemeAndAuthority: WideString;
begin
  Result := DefaultInterface.SchemeAndAuthority;
end;

procedure TUAEndpointDescriptor.Set_SchemeAndAuthority(const pRetVal: WideString);
begin
  DefaultInterface.SchemeAndAuthority := pRetVal;
end;

function TUAEndpointDescriptor.Get_UserInfo: WideString;
begin
  Result := DefaultInterface.UserInfo;
end;

procedure TUAEndpointDescriptor.Set_UserInfo(const pRetVal: WideString);
begin
  DefaultInterface.UserInfo := pRetVal;
end;

function TUAEndpointDescriptor.Get_UrlString: WideString;
begin
  Result := DefaultInterface.UrlString;
end;

procedure TUAEndpointDescriptor.Set_UrlString(const pRetVal: WideString);
begin
  DefaultInterface.UrlString := pRetVal;
end;

function TUAEndpointDescriptor.Get_Fragment: WideString;
begin
  Result := DefaultInterface.Fragment;
end;

procedure TUAEndpointDescriptor.Set_Fragment(const pRetVal: WideString);
begin
  DefaultInterface.Fragment := pRetVal;
end;

function TUAEndpointDescriptor.Get_Host: WideString;
begin
  Result := DefaultInterface.Host;
end;

procedure TUAEndpointDescriptor.Set_Host(const pRetVal: WideString);
begin
  DefaultInterface.Host := pRetVal;
end;

function TUAEndpointDescriptor.Get_IsNull: WordBool;
begin
  Result := DefaultInterface.IsNull;
end;

function TUAEndpointDescriptor.Get_Password: WideString;
begin
  Result := DefaultInterface.Password;
end;

procedure TUAEndpointDescriptor.Set_Password(const pRetVal: WideString);
begin
  DefaultInterface.Password := pRetVal;
end;

function TUAEndpointDescriptor.Get_Path: WideString;
begin
  Result := DefaultInterface.Path;
end;

procedure TUAEndpointDescriptor.Set_Path(const pRetVal: WideString);
begin
  DefaultInterface.Path := pRetVal;
end;

function TUAEndpointDescriptor.Get_Port: Integer;
begin
  Result := DefaultInterface.Port;
end;

procedure TUAEndpointDescriptor.Set_Port(pRetVal: Integer);
begin
  DefaultInterface.Port := pRetVal;
end;

function TUAEndpointDescriptor.Get_prefix: WideString;
begin
  Result := DefaultInterface.prefix;
end;

procedure TUAEndpointDescriptor.Set_prefix(const pRetVal: WideString);
begin
  DefaultInterface.prefix := pRetVal;
end;

function TUAEndpointDescriptor.Get_Query: WideString;
begin
  Result := DefaultInterface.Query;
end;

procedure TUAEndpointDescriptor.Set_Query(const pRetVal: WideString);
begin
  DefaultInterface.Query := pRetVal;
end;

function TUAEndpointDescriptor.Get_Scheme: WideString;
begin
  Result := DefaultInterface.Scheme;
end;

procedure TUAEndpointDescriptor.Set_Scheme(const pRetVal: WideString);
begin
  DefaultInterface.Scheme := pRetVal;
end;

function TUAEndpointDescriptor.Get_UserName: WideString;
begin
  Result := DefaultInterface.UserName;
end;

procedure TUAEndpointDescriptor.Set_UserName(const pRetVal: WideString);
begin
  DefaultInterface.UserName := pRetVal;
end;

function TUAEndpointDescriptor.Get_NetworkSecurity: _NetworkSecurity;
begin
  Result := DefaultInterface.NetworkSecurity;
end;

procedure TUAEndpointDescriptor._Set_NetworkSecurity(const pRetVal: _NetworkSecurity);
begin
  DefaultInterface.NetworkSecurity := pRetVal;
end;

function TUAEndpointDescriptor.Get_CertificateAcceptancePolicy: _UACertificateAcceptancePolicy;
begin
  Result := DefaultInterface.CertificateAcceptancePolicy;
end;

procedure TUAEndpointDescriptor._Set_CertificateAcceptancePolicy(const pRetVal: _UACertificateAcceptancePolicy);
begin
  DefaultInterface.CertificateAcceptancePolicy := pRetVal;
end;

function TUAEndpointDescriptor.Get_certificateSubId: WideString;
begin
  Result := DefaultInterface.certificateSubId;
end;

procedure TUAEndpointDescriptor.Set_certificateSubId(const pRetVal: WideString);
begin
  DefaultInterface.certificateSubId := pRetVal;
end;

function TUAEndpointDescriptor.Get_EndpointSelectionPolicy: _UAEndpointSelectionPolicy;
begin
  Result := DefaultInterface.EndpointSelectionPolicy;
end;

procedure TUAEndpointDescriptor._Set_EndpointSelectionPolicy(const pRetVal: _UAEndpointSelectionPolicy);
begin
  DefaultInterface.EndpointSelectionPolicy := pRetVal;
end;

function TUAEndpointDescriptor.Get_HasServerCertificate: WordBool;
begin
  Result := DefaultInterface.HasServerCertificate;
end;

function TUAEndpointDescriptor.Get_ServerCertificate: _PkiCertificate;
begin
  Result := DefaultInterface.ServerCertificate;
end;

procedure TUAEndpointDescriptor._Set_ServerCertificate(const pRetVal: _PkiCertificate);
begin
  DefaultInterface.ServerCertificate := pRetVal;
end;

function TUAEndpointDescriptor.Get_ServerCertificateByteArray: OleVariant;
begin
  Result := DefaultInterface.ServerCertificateByteArray;
end;

procedure TUAEndpointDescriptor._Set_ServerCertificateByteArray(pRetVal: OleVariant);
begin
  DefaultInterface.ServerCertificateByteArray := pRetVal;
end;

function TUAEndpointDescriptor.Get_UserIdentity: _UserIdentity;
begin
  Result := DefaultInterface.UserIdentity;
end;

procedure TUAEndpointDescriptor._Set_UserIdentity(const pRetVal: _UserIdentity);
begin
  DefaultInterface.UserIdentity := pRetVal;
end;

function TUAEndpointDescriptor.Get_UserTokenPolicyId: WideString;
begin
  Result := DefaultInterface.UserTokenPolicyId;
end;

procedure TUAEndpointDescriptor.Set_UserTokenPolicyId(const pRetVal: WideString);
begin
  DefaultInterface.UserTokenPolicyId := pRetVal;
end;

function TUAEndpointDescriptor.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAEndpointDescriptor.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAEndpointDescriptor.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAEndpointDescriptor.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

procedure TUAEndpointDescriptor.SetServerCertificateByteArray(value: OleVariant);
begin
  DefaultInterface.SetServerCertificateByteArray(value);
end;

class function CoUAEndpointDescriptorCollection.Create: _UAEndpointDescriptorCollection;
begin
  Result := CreateComObject(CLASS_UAEndpointDescriptorCollection) as _UAEndpointDescriptorCollection;
end;

class function CoUAEndpointDescriptorCollection.CreateRemote(const MachineName: string): _UAEndpointDescriptorCollection;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAEndpointDescriptorCollection) as _UAEndpointDescriptorCollection;
end;

procedure TUAEndpointDescriptorCollection.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{F6E3B776-0BFD-4116-9306-A7A8BC417000}';
    IntfIID:   '{B62C28B1-A42F-400C-8C82-D6BE8EEE6455}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAEndpointDescriptorCollection.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAEndpointDescriptorCollection;
  end;
end;

procedure TUAEndpointDescriptorCollection.ConnectTo(svrIntf: _UAEndpointDescriptorCollection);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAEndpointDescriptorCollection.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAEndpointDescriptorCollection.GetDefaultInterface: _UAEndpointDescriptorCollection;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAEndpointDescriptorCollection.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAEndpointDescriptorCollection.Destroy;
begin
  inherited Destroy;
end;

function TUAEndpointDescriptorCollection.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAEndpointDescriptorCollection.Get_Item(index: Integer): _UAEndpointDescriptor;
begin
  Result := DefaultInterface.Item[index];
end;

procedure TUAEndpointDescriptorCollection._Set_Item(index: Integer; 
                                                    const pRetVal: _UAEndpointDescriptor);
begin
  DefaultInterface.Item[index] := pRetVal;
end;

function TUAEndpointDescriptorCollection.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

function TUAEndpointDescriptorCollection.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAEndpointDescriptorCollection.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAEndpointDescriptorCollection.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAEndpointDescriptorCollection.GetEnumerator: IEnumVARIANT;
begin
  Result := DefaultInterface.GetEnumerator;
end;

procedure TUAEndpointDescriptorCollection.Add(Item: OleVariant);
begin
  DefaultInterface.Add(Item);
end;

procedure TUAEndpointDescriptorCollection.Clear;
begin
  DefaultInterface.Clear;
end;

function TUAEndpointDescriptorCollection.Contains(Item: OleVariant): WordBool;
begin
  Result := DefaultInterface.Contains(Item);
end;

function TUAEndpointDescriptorCollection.IndexOf(Item: OleVariant): Integer;
begin
  Result := DefaultInterface.IndexOf(Item);
end;

procedure TUAEndpointDescriptorCollection.Insert(index: Integer; Item: OleVariant);
begin
  DefaultInterface.Insert(index, Item);
end;

function TUAEndpointDescriptorCollection.Remove(Item: OleVariant): WordBool;
begin
  Result := DefaultInterface.Remove(Item);
end;

procedure TUAEndpointDescriptorCollection.RemoveAt(index: Integer);
begin
  DefaultInterface.RemoveAt(index);
end;

function TUAEndpointDescriptorCollection.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUAEndpointDescriptorUANodeIdDictionary.Create: _UAEndpointDescriptorUANodeIdReadOnlyDictionary;
begin
  Result := CreateComObject(CLASS_UAEndpointDescriptorUANodeIdDictionary) as _UAEndpointDescriptorUANodeIdReadOnlyDictionary;
end;

class function CoUAEndpointDescriptorUANodeIdDictionary.CreateRemote(const MachineName: string): _UAEndpointDescriptorUANodeIdReadOnlyDictionary;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAEndpointDescriptorUANodeIdDictionary) as _UAEndpointDescriptorUANodeIdReadOnlyDictionary;
end;

procedure TUAEndpointDescriptorUANodeIdDictionary.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{E42458F2-34A7-4A87-9F6C-8CB98A5C3859}';
    IntfIID:   '{49652E16-8921-4980-B090-A16B2B5AFD4F}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAEndpointDescriptorUANodeIdDictionary.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAEndpointDescriptorUANodeIdReadOnlyDictionary;
  end;
end;

procedure TUAEndpointDescriptorUANodeIdDictionary.ConnectTo(svrIntf: _UAEndpointDescriptorUANodeIdReadOnlyDictionary);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAEndpointDescriptorUANodeIdDictionary.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAEndpointDescriptorUANodeIdDictionary.GetDefaultInterface: _UAEndpointDescriptorUANodeIdReadOnlyDictionary;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAEndpointDescriptorUANodeIdDictionary.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAEndpointDescriptorUANodeIdDictionary.Destroy;
begin
  inherited Destroy;
end;

function TUAEndpointDescriptorUANodeIdDictionary.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAEndpointDescriptorUANodeIdDictionary.Get_Item(key: OleVariant): _UANodeId;
begin
  Result := DefaultInterface.Item[key];
end;

function TUAEndpointDescriptorUANodeIdDictionary.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

function TUAEndpointDescriptorUANodeIdDictionary.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAEndpointDescriptorUANodeIdDictionary.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAEndpointDescriptorUANodeIdDictionary.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAEndpointDescriptorUANodeIdDictionary.GetEnumerator: IEnumVARIANT;
begin
  Result := DefaultInterface.GetEnumerator;
end;

function TUAEndpointDescriptorUANodeIdDictionary.ContainsKey(key: OleVariant): WordBool;
begin
  Result := DefaultInterface.ContainsKey(key);
end;

function TUAEndpointDescriptorUANodeIdDictionary.TryGetValue(key: OleVariant; out value: OleVariant): WordBool;
begin
  Result := DefaultInterface.TryGetValue(key, value);
end;

function TUAEndpointDescriptorUANodeIdDictionary.ContainsValue(value: OleVariant): WordBool;
begin
  Result := DefaultInterface.ContainsValue(value);
end;

class function CoUAEventData.Create: _UAEventData;
begin
  Result := CreateComObject(CLASS_UAEventData) as _UAEventData;
end;

class function CoUAEventData.CreateRemote(const MachineName: string): _UAEventData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAEventData) as _UAEventData;
end;

procedure TUAEventData.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{907185B4-264D-4838-AC2E-F68E36B01845}';
    IntfIID:   '{865781B1-A39D-4513-A283-6234A3205CDB}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAEventData.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAEventData;
  end;
end;

procedure TUAEventData.ConnectTo(svrIntf: _UAEventData);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAEventData.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAEventData.GetDefaultInterface: _UAEventData;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAEventData.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAEventData.Destroy;
begin
  inherited Destroy;
end;

function TUAEventData.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAEventData.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAEventData.Get_BaseEvent: _UABaseEventObject;
begin
  Result := DefaultInterface.BaseEvent;
end;

function TUAEventData.Get_FieldResults: _UAFieldResultDictionary;
begin
  Result := DefaultInterface.FieldResults;
end;

procedure TUAEventData._Set_FieldResults(const pRetVal: _UAFieldResultDictionary);
begin
  DefaultInterface.FieldResults := pRetVal;
end;

function TUAEventData.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAEventData.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAEventData.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAEventData.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

procedure TUAEventData.SetFieldValue(attributeField: OleVariant; value: OleVariant);
begin
  DefaultInterface.SetFieldValue(attributeField, value);
end;

function TUAEventData.TryGetFieldValue(attributeField: OleVariant; out value: OleVariant): WordBool;
begin
  Result := DefaultInterface.TryGetFieldValue(attributeField, value);
end;

class function CoUAEventFilter.Create: _UAEventFilter;
begin
  Result := CreateComObject(CLASS_UAEventFilter) as _UAEventFilter;
end;

class function CoUAEventFilter.CreateRemote(const MachineName: string): _UAEventFilter;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAEventFilter) as _UAEventFilter;
end;

procedure TUAEventFilter.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{BEF1C056-D153-4049-B3D5-2FD57E3049EC}';
    IntfIID:   '{5E9D0A8F-D791-4FE8-856F-C4699F7C2A46}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAEventFilter.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAEventFilter;
  end;
end;

procedure TUAEventFilter.ConnectTo(svrIntf: _UAEventFilter);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAEventFilter.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAEventFilter.GetDefaultInterface: _UAEventFilter;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAEventFilter.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAEventFilter.Destroy;
begin
  inherited Destroy;
end;

function TUAEventFilter.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAEventFilter.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAEventFilter.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUAEventFilter.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUAEventFilter.Get_SelectClauses: _UAAttributeFieldCollection;
begin
  Result := DefaultInterface.SelectClauses;
end;

procedure TUAEventFilter._Set_SelectClauses(const pRetVal: _UAAttributeFieldCollection);
begin
  DefaultInterface.SelectClauses := pRetVal;
end;

function TUAEventFilter.Get_WhereClause: _UAContentFilterElement;
begin
  Result := DefaultInterface.WhereClause;
end;

procedure TUAEventFilter._Set_WhereClause(const pRetVal: _UAContentFilterElement);
begin
  DefaultInterface.WhereClause := pRetVal;
end;

function TUAEventFilter.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAEventFilter.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAEventFilter.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAEventFilter.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUAExtensionObject.Create: _UAExtensionObject;
begin
  Result := CreateComObject(CLASS_UAExtensionObject) as _UAExtensionObject;
end;

class function CoUAExtensionObject.CreateRemote(const MachineName: string): _UAExtensionObject;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAExtensionObject) as _UAExtensionObject;
end;

procedure TUAExtensionObject.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{3EB51E10-7A60-4BEF-ADD5-6DAFC053BBBD}';
    IntfIID:   '{F01EF350-CBBA-46B2-96FA-8590C6568C21}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAExtensionObject.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAExtensionObject;
  end;
end;

procedure TUAExtensionObject.ConnectTo(svrIntf: _UAExtensionObject);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAExtensionObject.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAExtensionObject.GetDefaultInterface: _UAExtensionObject;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAExtensionObject.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAExtensionObject.Destroy;
begin
  inherited Destroy;
end;

function TUAExtensionObject.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAExtensionObject.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAExtensionObject.Get_BinaryBody: OleVariant;
begin
  Result := DefaultInterface.BinaryBody;
end;

procedure TUAExtensionObject._Set_BinaryBody(pRetVal: OleVariant);
begin
  DefaultInterface.BinaryBody := pRetVal;
end;

function TUAExtensionObject.Get_Body: OleVariant;
begin
  Result := DefaultInterface.Body;
end;

procedure TUAExtensionObject._Set_Body(pRetVal: OleVariant);
begin
  DefaultInterface.Body := pRetVal;
end;

function TUAExtensionObject.Get_dataTypeEncodingId: _UANodeId;
begin
  Result := DefaultInterface.dataTypeEncodingId;
end;

procedure TUAExtensionObject._Set_dataTypeEncodingId(const pRetVal: _UANodeId);
begin
  DefaultInterface.dataTypeEncodingId := pRetVal;
end;

function TUAExtensionObject.Get_extensionObjectType: UAExtensionObjectType;
begin
  Result := DefaultInterface.extensionObjectType;
end;

function TUAExtensionObject.Get_XmlBodyText: WideString;
begin
  Result := DefaultInterface.XmlBodyText;
end;

procedure TUAExtensionObject.Set_XmlBodyText(const pRetVal: WideString);
begin
  DefaultInterface.XmlBodyText := pRetVal;
end;

function TUAExtensionObject.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAExtensionObject.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAExtensionObject.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAExtensionObject.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

procedure TUAExtensionObject.SetBinaryBody(var BinaryBody: PSafeArray);
begin
  DefaultInterface.SetBinaryBody(BinaryBody);
end;

procedure TUAExtensionObject.SetBody(Body: OleVariant);
begin
  DefaultInterface.SetBody(Body);
end;

class function CoUAFieldResultDictionary.Create: _UAFieldResultDictionary;
begin
  Result := CreateComObject(CLASS_UAFieldResultDictionary) as _UAFieldResultDictionary;
end;

class function CoUAFieldResultDictionary.CreateRemote(const MachineName: string): _UAFieldResultDictionary;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAFieldResultDictionary) as _UAFieldResultDictionary;
end;

procedure TUAFieldResultDictionary.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{8BDA3D94-4ABB-445F-B7C2-D7E81CED4025}';
    IntfIID:   '{30ECB8F5-C32F-40F0-BD69-397417BC354A}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAFieldResultDictionary.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAFieldResultDictionary;
  end;
end;

procedure TUAFieldResultDictionary.ConnectTo(svrIntf: _UAFieldResultDictionary);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAFieldResultDictionary.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAFieldResultDictionary.GetDefaultInterface: _UAFieldResultDictionary;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAFieldResultDictionary.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAFieldResultDictionary.Destroy;
begin
  inherited Destroy;
end;

function TUAFieldResultDictionary.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAFieldResultDictionary.Get_Item(key: OleVariant): _ValueResult;
begin
  Result := DefaultInterface.Item[key];
end;

procedure TUAFieldResultDictionary._Set_Item(key: OleVariant; const pRetVal: _ValueResult);
begin
  DefaultInterface.Item[key] := pRetVal;
end;

function TUAFieldResultDictionary.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

function TUAFieldResultDictionary.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAFieldResultDictionary.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAFieldResultDictionary.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAFieldResultDictionary.GetEnumerator: IEnumVARIANT;
begin
  Result := DefaultInterface.GetEnumerator;
end;

procedure TUAFieldResultDictionary.Add(key: OleVariant; Item: OleVariant);
begin
  DefaultInterface.Add(key, Item);
end;

procedure TUAFieldResultDictionary.Clear;
begin
  DefaultInterface.Clear;
end;

function TUAFieldResultDictionary.ContainsKey(key: OleVariant): WordBool;
begin
  Result := DefaultInterface.ContainsKey(key);
end;

function TUAFieldResultDictionary.Remove(key: OleVariant): WordBool;
begin
  Result := DefaultInterface.Remove(key);
end;

function TUAFieldResultDictionary.TryGetValue(key: OleVariant; out value: OleVariant): WordBool;
begin
  Result := DefaultInterface.TryGetValue(key, value);
end;

function TUAFieldResultDictionary.ContainsValue(value: OleVariant): WordBool;
begin
  Result := DefaultInterface.ContainsValue(value);
end;

class function CoUAIndexRange.Create: _UAIndexRange;
begin
  Result := CreateComObject(CLASS_UAIndexRange) as _UAIndexRange;
end;

class function CoUAIndexRange.CreateRemote(const MachineName: string): _UAIndexRange;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAIndexRange) as _UAIndexRange;
end;

procedure TUAIndexRange.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{761CC6CA-BE3D-4034-BD5E-17A63AA55BCF}';
    IntfIID:   '{7EC9D06E-F36E-466E-9213-ADAFFC0B9789}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAIndexRange.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAIndexRange;
  end;
end;

procedure TUAIndexRange.ConnectTo(svrIntf: _UAIndexRange);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAIndexRange.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAIndexRange.GetDefaultInterface: _UAIndexRange;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAIndexRange.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAIndexRange.Destroy;
begin
  inherited Destroy;
end;

function TUAIndexRange.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAIndexRange.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAIndexRange.Get_IsSingle: WordBool;
begin
  Result := DefaultInterface.IsSingle;
end;

function TUAIndexRange.Get_Maximum: Integer;
begin
  Result := DefaultInterface.Maximum;
end;

procedure TUAIndexRange.Set_Maximum(pRetVal: Integer);
begin
  DefaultInterface.Maximum := pRetVal;
end;

function TUAIndexRange.Get_Minimum: Integer;
begin
  Result := DefaultInterface.Minimum;
end;

procedure TUAIndexRange.Set_Minimum(pRetVal: Integer);
begin
  DefaultInterface.Minimum := pRetVal;
end;

function TUAIndexRange.Get_Span: Integer;
begin
  Result := DefaultInterface.Span;
end;

function TUAIndexRange.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAIndexRange.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAIndexRange.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAIndexRange.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

procedure TUAIndexRange.SetRange(Minimum: Integer; Maximum: Integer);
begin
  DefaultInterface.SetRange(Minimum, Maximum);
end;

class function CoUAIndexRangeList.Create: _UAIndexRangeList;
begin
  Result := CreateComObject(CLASS_UAIndexRangeList) as _UAIndexRangeList;
end;

class function CoUAIndexRangeList.CreateRemote(const MachineName: string): _UAIndexRangeList;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAIndexRangeList) as _UAIndexRangeList;
end;

procedure TUAIndexRangeList.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{92147D88-FA19-4C0A-B63E-9DCD30CE6DC4}';
    IntfIID:   '{1C890D25-D1FA-49EF-A5DB-077F9176324F}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAIndexRangeList.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAIndexRangeList;
  end;
end;

procedure TUAIndexRangeList.ConnectTo(svrIntf: _UAIndexRangeList);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAIndexRangeList.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAIndexRangeList.GetDefaultInterface: _UAIndexRangeList;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAIndexRangeList.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAIndexRangeList.Destroy;
begin
  inherited Destroy;
end;

function TUAIndexRangeList.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAIndexRangeList.Get_Item(index: Integer): _UAIndexRange;
begin
  Result := DefaultInterface.Item[index];
end;

procedure TUAIndexRangeList._Set_Item(index: Integer; const pRetVal: _UAIndexRange);
begin
  DefaultInterface.Item[index] := pRetVal;
end;

function TUAIndexRangeList.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

function TUAIndexRangeList.Get_ArrayLength: Integer;
begin
  Result := DefaultInterface.ArrayLength;
end;

function TUAIndexRangeList.Get_AsString: WideString;
begin
  Result := DefaultInterface.AsString;
end;

function TUAIndexRangeList.Get_LongArrayLength: Int64;
begin
  Result := DefaultInterface.LongArrayLength;
end;

function TUAIndexRangeList.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAIndexRangeList.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAIndexRangeList.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAIndexRangeList.GetEnumerator: IEnumVARIANT;
begin
  Result := DefaultInterface.GetEnumerator;
end;

procedure TUAIndexRangeList.Add(Item: OleVariant);
begin
  DefaultInterface.Add(Item);
end;

procedure TUAIndexRangeList.Clear;
begin
  DefaultInterface.Clear;
end;

function TUAIndexRangeList.Contains(Item: OleVariant): WordBool;
begin
  Result := DefaultInterface.Contains(Item);
end;

function TUAIndexRangeList.IndexOf(Item: OleVariant): Integer;
begin
  Result := DefaultInterface.IndexOf(Item);
end;

procedure TUAIndexRangeList.Insert(index: Integer; Item: OleVariant);
begin
  DefaultInterface.Insert(index, Item);
end;

function TUAIndexRangeList.Remove(Item: OleVariant): WordBool;
begin
  Result := DefaultInterface.Remove(Item);
end;

procedure TUAIndexRangeList.RemoveAt(index: Integer);
begin
  DefaultInterface.RemoveAt(index);
end;

function TUAIndexRangeList.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUAKeyValueDictionary.Create: _UAKeyValueDictionary;
begin
  Result := CreateComObject(CLASS_UAKeyValueDictionary) as _UAKeyValueDictionary;
end;

class function CoUAKeyValueDictionary.CreateRemote(const MachineName: string): _UAKeyValueDictionary;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAKeyValueDictionary) as _UAKeyValueDictionary;
end;

procedure TUAKeyValueDictionary.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{6141B86E-6B7C-429B-9D48-009B99C36964}';
    IntfIID:   '{DC5653A0-EC58-41F3-B719-73EB4A04A154}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAKeyValueDictionary.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAKeyValueDictionary;
  end;
end;

procedure TUAKeyValueDictionary.ConnectTo(svrIntf: _UAKeyValueDictionary);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAKeyValueDictionary.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAKeyValueDictionary.GetDefaultInterface: _UAKeyValueDictionary;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAKeyValueDictionary.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAKeyValueDictionary.Destroy;
begin
  inherited Destroy;
end;

function TUAKeyValueDictionary.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAKeyValueDictionary.Get_Item(key: OleVariant): OleVariant;
begin
  Result := DefaultInterface.Item[key];
end;

procedure TUAKeyValueDictionary._Set_Item(key: OleVariant; pRetVal: OleVariant);
begin
  DefaultInterface.Item[key] := pRetVal;
end;

function TUAKeyValueDictionary.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

function TUAKeyValueDictionary.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAKeyValueDictionary.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAKeyValueDictionary.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAKeyValueDictionary.GetEnumerator: IEnumVARIANT;
begin
  Result := DefaultInterface.GetEnumerator;
end;

procedure TUAKeyValueDictionary.Add(key: OleVariant; Item: OleVariant);
begin
  DefaultInterface.Add(key, Item);
end;

procedure TUAKeyValueDictionary.Clear;
begin
  DefaultInterface.Clear;
end;

function TUAKeyValueDictionary.ContainsKey(key: OleVariant): WordBool;
begin
  Result := DefaultInterface.ContainsKey(key);
end;

function TUAKeyValueDictionary.Remove(key: OleVariant): WordBool;
begin
  Result := DefaultInterface.Remove(key);
end;

function TUAKeyValueDictionary.TryGetValue(key: OleVariant; out value: OleVariant): WordBool;
begin
  Result := DefaultInterface.TryGetValue(key, value);
end;

function TUAKeyValueDictionary.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUAKeyValueDictionary.ContainsValue(value: OleVariant): WordBool;
begin
  Result := DefaultInterface.ContainsValue(value);
end;

class function CoUAKeyValuePair.Create: _UAKeyValuePair;
begin
  Result := CreateComObject(CLASS_UAKeyValuePair) as _UAKeyValuePair;
end;

class function CoUAKeyValuePair.CreateRemote(const MachineName: string): _UAKeyValuePair;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAKeyValuePair) as _UAKeyValuePair;
end;

procedure TUAKeyValuePair.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{3C740834-CD69-42E4-BA7F-482BA13712C0}';
    IntfIID:   '{AA44D00D-CA8A-4893-9046-ADAC86691C56}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAKeyValuePair.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAKeyValuePair;
  end;
end;

procedure TUAKeyValuePair.ConnectTo(svrIntf: _UAKeyValuePair);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAKeyValuePair.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAKeyValuePair.GetDefaultInterface: _UAKeyValuePair;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAKeyValuePair.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAKeyValuePair.Destroy;
begin
  inherited Destroy;
end;

function TUAKeyValuePair.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAKeyValuePair.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAKeyValuePair.Get_key: _UAQualifiedName;
begin
  Result := DefaultInterface.key;
end;

procedure TUAKeyValuePair._Set_key(const pRetVal: _UAQualifiedName);
begin
  DefaultInterface.key := pRetVal;
end;

function TUAKeyValuePair.Get_value: OleVariant;
begin
  Result := DefaultInterface.value;
end;

procedure TUAKeyValuePair._Set_value(pRetVal: OleVariant);
begin
  DefaultInterface.value := pRetVal;
end;

function TUAKeyValuePair.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAKeyValuePair.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAKeyValuePair.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAKeyValuePair.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

procedure TUAKeyValuePair.SetValue(value: OleVariant);
begin
  DefaultInterface.SetValue(value);
end;

class function CoUAMonitoringParameters.Create: _UAMonitoringParameters;
begin
  Result := CreateComObject(CLASS_UAMonitoringParameters) as _UAMonitoringParameters;
end;

class function CoUAMonitoringParameters.CreateRemote(const MachineName: string): _UAMonitoringParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAMonitoringParameters) as _UAMonitoringParameters;
end;

procedure TUAMonitoringParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{1517B3D6-C70D-462A-9C36-5A3C32C32A85}';
    IntfIID:   '{2037F99C-D57F-46B9-A7D1-6EFFCAA6A2C8}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAMonitoringParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAMonitoringParameters;
  end;
end;

procedure TUAMonitoringParameters.ConnectTo(svrIntf: _UAMonitoringParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAMonitoringParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAMonitoringParameters.GetDefaultInterface: _UAMonitoringParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAMonitoringParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAMonitoringParameters.Destroy;
begin
  inherited Destroy;
end;

function TUAMonitoringParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAMonitoringParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAMonitoringParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUAMonitoringParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUAMonitoringParameters.Get_DataChangeFilter: _UADataChangeFilter;
begin
  Result := DefaultInterface.DataChangeFilter;
end;

procedure TUAMonitoringParameters._Set_DataChangeFilter(const pRetVal: _UADataChangeFilter);
begin
  DefaultInterface.DataChangeFilter := pRetVal;
end;

function TUAMonitoringParameters.Get_DiscardOldest: WordBool;
begin
  Result := DefaultInterface.DiscardOldest;
end;

procedure TUAMonitoringParameters.Set_DiscardOldest(pRetVal: WordBool);
begin
  DefaultInterface.DiscardOldest := pRetVal;
end;

function TUAMonitoringParameters.Get_encodingName: _UAQualifiedName;
begin
  Result := DefaultInterface.encodingName;
end;

procedure TUAMonitoringParameters._Set_encodingName(const pRetVal: _UAQualifiedName);
begin
  DefaultInterface.encodingName := pRetVal;
end;

function TUAMonitoringParameters.Get_EventFilter: _UAEventFilter;
begin
  Result := DefaultInterface.EventFilter;
end;

procedure TUAMonitoringParameters._Set_EventFilter(const pRetVal: _UAEventFilter);
begin
  DefaultInterface.EventFilter := pRetVal;
end;

function TUAMonitoringParameters.Get_Filter: OleVariant;
begin
  Result := DefaultInterface.Filter;
end;

procedure TUAMonitoringParameters._Set_Filter(pRetVal: OleVariant);
begin
  DefaultInterface.Filter := pRetVal;
end;

function TUAMonitoringParameters.Get_QueueSize: Integer;
begin
  Result := DefaultInterface.QueueSize;
end;

procedure TUAMonitoringParameters.Set_QueueSize(pRetVal: Integer);
begin
  DefaultInterface.QueueSize := pRetVal;
end;

function TUAMonitoringParameters.Get_samplingInterval: Integer;
begin
  Result := DefaultInterface.samplingInterval;
end;

procedure TUAMonitoringParameters.Set_samplingInterval(pRetVal: Integer);
begin
  DefaultInterface.samplingInterval := pRetVal;
end;

function TUAMonitoringParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAMonitoringParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAMonitoringParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAMonitoringParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

procedure TUAMonitoringParameters.SetFilter(Filter: OleVariant);
begin
  DefaultInterface.SetFilter(Filter);
end;

class function CoUANodeDescriptor.Create: _UANodeDescriptor;
begin
  Result := CreateComObject(CLASS_UANodeDescriptor) as _UANodeDescriptor;
end;

class function CoUANodeDescriptor.CreateRemote(const MachineName: string): _UANodeDescriptor;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UANodeDescriptor) as _UANodeDescriptor;
end;

procedure TUANodeDescriptor.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{90BFBFFE-2E2A-4B09-818F-2994AFBEBA63}';
    IntfIID:   '{8687F067-3D6F-41DB-B149-33225CE13A48}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUANodeDescriptor.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UANodeDescriptor;
  end;
end;

procedure TUANodeDescriptor.ConnectTo(svrIntf: _UANodeDescriptor);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUANodeDescriptor.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUANodeDescriptor.GetDefaultInterface: _UANodeDescriptor;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUANodeDescriptor.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUANodeDescriptor.Destroy;
begin
  inherited Destroy;
end;

function TUANodeDescriptor.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUANodeDescriptor.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUANodeDescriptor.Get_AliasName: WideString;
begin
  Result := DefaultInterface.AliasName;
end;

procedure TUANodeDescriptor.Set_AliasName(const pRetVal: WideString);
begin
  DefaultInterface.AliasName := pRetVal;
end;

function TUANodeDescriptor.Get_IsAliased: WordBool;
begin
  Result := DefaultInterface.IsAliased;
end;

function TUANodeDescriptor.Get_ArgumentString: WideString;
begin
  Result := DefaultInterface.ArgumentString;
end;

function TUANodeDescriptor.Get_browsePath: _UABrowsePath;
begin
  Result := DefaultInterface.browsePath;
end;

procedure TUANodeDescriptor._Set_browsePath(const pRetVal: _UABrowsePath);
begin
  DefaultInterface.browsePath := pRetVal;
end;

function TUANodeDescriptor.Get_HasBrowsePath: WordBool;
begin
  Result := DefaultInterface.HasBrowsePath;
end;

function TUANodeDescriptor.Get_HasNodeId: WordBool;
begin
  Result := DefaultInterface.HasNodeId;
end;

function TUANodeDescriptor.Get_IsNull: WordBool;
begin
  Result := DefaultInterface.IsNull;
end;

function TUANodeDescriptor.Get_NodeId: _UANodeId;
begin
  Result := DefaultInterface.NodeId;
end;

procedure TUANodeDescriptor._Set_NodeId(const pRetVal: _UANodeId);
begin
  DefaultInterface.NodeId := pRetVal;
end;

function TUANodeDescriptor.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUANodeDescriptor.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUANodeDescriptor.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUANodeDescriptor.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUANodeDescriptor.Flatten: _UANodeDescriptor;
begin
  Result := DefaultInterface.Flatten;
end;

function TUANodeDescriptor.Match(other: OleVariant): WordBool;
begin
  Result := DefaultInterface.Match(other);
end;

class function CoUANodeIdUAApplicationElementDictionary.Create: _UANodeIdUAApplicationElementReadOnlyDictionary;
begin
  Result := CreateComObject(CLASS_UANodeIdUAApplicationElementDictionary) as _UANodeIdUAApplicationElementReadOnlyDictionary;
end;

class function CoUANodeIdUAApplicationElementDictionary.CreateRemote(const MachineName: string): _UANodeIdUAApplicationElementReadOnlyDictionary;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UANodeIdUAApplicationElementDictionary) as _UANodeIdUAApplicationElementReadOnlyDictionary;
end;

procedure TUANodeIdUAApplicationElementDictionary.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{CDA1D5BD-DB12-41D7-B769-0E954517CDD7}';
    IntfIID:   '{ED1E8655-709D-4630-9617-E51EF097C384}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUANodeIdUAApplicationElementDictionary.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UANodeIdUAApplicationElementReadOnlyDictionary;
  end;
end;

procedure TUANodeIdUAApplicationElementDictionary.ConnectTo(svrIntf: _UANodeIdUAApplicationElementReadOnlyDictionary);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUANodeIdUAApplicationElementDictionary.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUANodeIdUAApplicationElementDictionary.GetDefaultInterface: _UANodeIdUAApplicationElementReadOnlyDictionary;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUANodeIdUAApplicationElementDictionary.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUANodeIdUAApplicationElementDictionary.Destroy;
begin
  inherited Destroy;
end;

function TUANodeIdUAApplicationElementDictionary.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUANodeIdUAApplicationElementDictionary.Get_Item(key: OleVariant): _UAApplicationElement;
begin
  Result := DefaultInterface.Item[key];
end;

function TUANodeIdUAApplicationElementDictionary.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

function TUANodeIdUAApplicationElementDictionary.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUANodeIdUAApplicationElementDictionary.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUANodeIdUAApplicationElementDictionary.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUANodeIdUAApplicationElementDictionary.GetEnumerator: IEnumVARIANT;
begin
  Result := DefaultInterface.GetEnumerator;
end;

function TUANodeIdUAApplicationElementDictionary.ContainsKey(key: OleVariant): WordBool;
begin
  Result := DefaultInterface.ContainsKey(key);
end;

function TUANodeIdUAApplicationElementDictionary.TryGetValue(key: OleVariant; out value: OleVariant): WordBool;
begin
  Result := DefaultInterface.TryGetValue(key, value);
end;

function TUANodeIdUAApplicationElementDictionary.ContainsValue(value: OleVariant): WordBool;
begin
  Result := DefaultInterface.ContainsValue(value);
end;

class function CoUAReadParameters.Create: _UAReadParameters;
begin
  Result := CreateComObject(CLASS_UAReadParameters) as _UAReadParameters;
end;

class function CoUAReadParameters.CreateRemote(const MachineName: string): _UAReadParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAReadParameters) as _UAReadParameters;
end;

procedure TUAReadParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{8E8DD329-8822-46E5-89D8-79DF3F3B8C3C}';
    IntfIID:   '{F50E67FF-583F-4666-956F-79A6E8992B9D}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAReadParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAReadParameters;
  end;
end;

procedure TUAReadParameters.ConnectTo(svrIntf: _UAReadParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAReadParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAReadParameters.GetDefaultInterface: _UAReadParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAReadParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAReadParameters.Destroy;
begin
  inherited Destroy;
end;

function TUAReadParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAReadParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAReadParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUAReadParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUAReadParameters.Get_encodingName: _UAQualifiedName;
begin
  Result := DefaultInterface.encodingName;
end;

procedure TUAReadParameters._Set_encodingName(const pRetVal: _UAQualifiedName);
begin
  DefaultInterface.encodingName := pRetVal;
end;

function TUAReadParameters.Get_MaximumAge: Double;
begin
  Result := DefaultInterface.MaximumAge;
end;

procedure TUAReadParameters.Set_MaximumAge(pRetVal: Double);
begin
  DefaultInterface.MaximumAge := pRetVal;
end;

function TUAReadParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAReadParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAReadParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAReadParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUAMethodOutputException.Create: _UAMethodOutputException;
begin
  Result := CreateComObject(CLASS_UAMethodOutputException) as _UAMethodOutputException;
end;

class function CoUAMethodOutputException.CreateRemote(const MachineName: string): _UAMethodOutputException;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAMethodOutputException) as _UAMethodOutputException;
end;

procedure TUAMethodOutputException.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{DDC51C56-2E81-40D6-AF65-9E28D3B11499}';
    IntfIID:   '{98B7AE16-7B8E-4868-934A-B5BB38AD0485}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAMethodOutputException.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAMethodOutputException;
  end;
end;

procedure TUAMethodOutputException.ConnectTo(svrIntf: _UAMethodOutputException);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAMethodOutputException.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAMethodOutputException.GetDefaultInterface: _UAMethodOutputException;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAMethodOutputException.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAMethodOutputException.Destroy;
begin
  inherited Destroy;
end;

function TUAMethodOutputException.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAMethodOutputException.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAMethodOutputException.Get_Message: WideString;
begin
  Result := DefaultInterface.Message;
end;

function TUAMethodOutputException.Get_StackTrace: WideString;
begin
  Result := DefaultInterface.StackTrace;
end;

function TUAMethodOutputException.Get_HelpLink: WideString;
begin
  Result := DefaultInterface.HelpLink;
end;

procedure TUAMethodOutputException.Set_HelpLink(const pRetVal: WideString);
begin
  DefaultInterface.HelpLink := pRetVal;
end;

function TUAMethodOutputException.Get_Source: WideString;
begin
  Result := DefaultInterface.Source;
end;

procedure TUAMethodOutputException.Set_Source(const pRetVal: WideString);
begin
  DefaultInterface.Source := pRetVal;
end;

function TUAMethodOutputException.Get_InnerException: _Exception;
begin
  Result := DefaultInterface.InnerException;
end;

function TUAMethodOutputException.Get_TargetSite: _MethodBase;
begin
  Result := DefaultInterface.TargetSite;
end;

function TUAMethodOutputException.Get_Data: _Dictionary;
begin
  Result := DefaultInterface.Data;
end;

function TUAMethodOutputException.Get_HResult: Integer;
begin
  Result := DefaultInterface.HResult;
end;

function TUAMethodOutputException.Get_MethodNodeId: _UANodeId;
begin
  Result := DefaultInterface.MethodNodeId;
end;

function TUAMethodOutputException.Get_ArgumentIndex: Integer;
begin
  Result := DefaultInterface.ArgumentIndex;
end;

function TUAMethodOutputException.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAMethodOutputException.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAMethodOutputException.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAMethodOutputException.GetBaseException: _Exception;
begin
  Result := DefaultInterface.GetBaseException;
end;

procedure TUAMethodOutputException.GetObjectData(const info: _SerializationInfo; 
                                                 context: StreamingContext);
begin
  DefaultInterface.GetObjectData(info, context);
end;

class function CoUACallServiceException.Create: _UACallServiceException;
begin
  Result := CreateComObject(CLASS_UACallServiceException) as _UACallServiceException;
end;

class function CoUACallServiceException.CreateRemote(const MachineName: string): _UACallServiceException;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UACallServiceException) as _UACallServiceException;
end;

procedure TUACallServiceException.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{E3DC60A3-FA7D-4901-B893-B714581DFBE4}';
    IntfIID:   '{5318A0D0-CBFE-407F-9ED8-49814B480370}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUACallServiceException.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UACallServiceException;
  end;
end;

procedure TUACallServiceException.ConnectTo(svrIntf: _UACallServiceException);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUACallServiceException.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUACallServiceException.GetDefaultInterface: _UACallServiceException;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUACallServiceException.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUACallServiceException.Destroy;
begin
  inherited Destroy;
end;

function TUACallServiceException.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUACallServiceException.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUACallServiceException.Get_Message: WideString;
begin
  Result := DefaultInterface.Message;
end;

function TUACallServiceException.Get_StackTrace: WideString;
begin
  Result := DefaultInterface.StackTrace;
end;

function TUACallServiceException.Get_HelpLink: WideString;
begin
  Result := DefaultInterface.HelpLink;
end;

procedure TUACallServiceException.Set_HelpLink(const pRetVal: WideString);
begin
  DefaultInterface.HelpLink := pRetVal;
end;

function TUACallServiceException.Get_Source: WideString;
begin
  Result := DefaultInterface.Source;
end;

procedure TUACallServiceException.Set_Source(const pRetVal: WideString);
begin
  DefaultInterface.Source := pRetVal;
end;

function TUACallServiceException.Get_InnerException: _Exception;
begin
  Result := DefaultInterface.InnerException;
end;

function TUACallServiceException.Get_TargetSite: _MethodBase;
begin
  Result := DefaultInterface.TargetSite;
end;

function TUACallServiceException.Get_Data: _Dictionary;
begin
  Result := DefaultInterface.Data;
end;

function TUACallServiceException.Get_HResult: Integer;
begin
  Result := DefaultInterface.HResult;
end;

function TUACallServiceException.Get_ErrorId: WideString;
begin
  Result := DefaultInterface.ErrorId;
end;

function TUACallServiceException.Get_InternalCode: Integer;
begin
  Result := DefaultInterface.InternalCode;
end;

function TUACallServiceException.Get_ServiceResult: _UAServiceResult;
begin
  Result := DefaultInterface.ServiceResult;
end;

function TUACallServiceException.Get_ServiceTargetSite: _MethodBase;
begin
  Result := DefaultInterface.ServiceTargetSite;
end;

function TUACallServiceException.Get_InputArgumentExceptionArray: PSafeArray;
begin
  Result := DefaultInterface.InputArgumentExceptionArray;
end;

procedure TUACallServiceException.Set_InputArgumentExceptionArray(pRetVal: PSafeArray);
begin
  DefaultInterface.InputArgumentExceptionArray := pRetVal;
end;

function TUACallServiceException.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUACallServiceException.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUACallServiceException.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUACallServiceException.GetBaseException: _Exception;
begin
  Result := DefaultInterface.GetBaseException;
end;

procedure TUACallServiceException.GetObjectData(const info: _SerializationInfo; 
                                                context: StreamingContext);
begin
  DefaultInterface.GetObjectData(info, context);
end;

procedure TUACallServiceException.SetInputArgumentExceptionArray(InputArgumentExceptionArray: OleVariant);
begin
  DefaultInterface.SetInputArgumentExceptionArray(InputArgumentExceptionArray);
end;

class function CoUAServiceResult.Create: _UAServiceResult;
begin
  Result := CreateComObject(CLASS_UAServiceResult) as _UAServiceResult;
end;

class function CoUAServiceResult.CreateRemote(const MachineName: string): _UAServiceResult;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAServiceResult) as _UAServiceResult;
end;

procedure TUAServiceResult.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{FD8498B2-E9F1-4636-98FB-8462190804D0}';
    IntfIID:   '{4FC070CC-3154-410D-8C6C-102D49B9E192}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAServiceResult.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAServiceResult;
  end;
end;

procedure TUAServiceResult.ConnectTo(svrIntf: _UAServiceResult);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAServiceResult.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAServiceResult.GetDefaultInterface: _UAServiceResult;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAServiceResult.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAServiceResult.Destroy;
begin
  inherited Destroy;
end;

function TUAServiceResult.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAServiceResult.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAServiceResult.Get_AdditionalInfo: WideString;
begin
  Result := DefaultInterface.AdditionalInfo;
end;

procedure TUAServiceResult.Set_AdditionalInfo(const pRetVal: WideString);
begin
  DefaultInterface.AdditionalInfo := pRetVal;
end;

function TUAServiceResult.Get_Description: WideString;
begin
  Result := DefaultInterface.Description;
end;

procedure TUAServiceResult.Set_Description(const pRetVal: WideString);
begin
  DefaultInterface.Description := pRetVal;
end;

function TUAServiceResult.Get_InnerResult: _UAServiceResult;
begin
  Result := DefaultInterface.InnerResult;
end;

procedure TUAServiceResult._Set_InnerResult(const pRetVal: _UAServiceResult);
begin
  DefaultInterface.InnerResult := pRetVal;
end;

function TUAServiceResult.Get_Message: WideString;
begin
  Result := DefaultInterface.Message;
end;

function TUAServiceResult.Get_QualifiedSymbolicId: _UAQualifiedName;
begin
  Result := DefaultInterface.QualifiedSymbolicId;
end;

procedure TUAServiceResult._Set_QualifiedSymbolicId(const pRetVal: _UAQualifiedName);
begin
  DefaultInterface.QualifiedSymbolicId := pRetVal;
end;

function TUAServiceResult.Get_Text: WideString;
begin
  Result := DefaultInterface.Text;
end;

function TUAServiceResult.Get_StatusCode: _UAStatusCode;
begin
  Result := DefaultInterface.StatusCode;
end;

procedure TUAServiceResult._Set_StatusCode(const pRetVal: _UAStatusCode);
begin
  DefaultInterface.StatusCode := pRetVal;
end;

function TUAServiceResult.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAServiceResult.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAServiceResult.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAServiceResult.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUAServiceResult.ToUACodeBits: UACodeBits;
begin
  Result := DefaultInterface.ToUACodeBits;
end;

class function CoUAStatusCode.Create: _UAStatusCode;
begin
  Result := CreateComObject(CLASS_UAStatusCode) as _UAStatusCode;
end;

class function CoUAStatusCode.CreateRemote(const MachineName: string): _UAStatusCode;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAStatusCode) as _UAStatusCode;
end;

procedure TUAStatusCode.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{7E377F45-8FD7-4193-A3BD-090E04864AE5}';
    IntfIID:   '{4B00D336-5728-47D1-B3CE-585C09DBE8E5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAStatusCode.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAStatusCode;
  end;
end;

procedure TUAStatusCode.ConnectTo(svrIntf: _UAStatusCode);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAStatusCode.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAStatusCode.GetDefaultInterface: _UAStatusCode;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAStatusCode.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAStatusCode.Destroy;
begin
  inherited Destroy;
end;

function TUAStatusCode.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAStatusCode.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAStatusCode.Get_ToString_2(const format: WideString; 
                                      const formatProvider: IFormatProvider): WideString;
begin
  Result := DefaultInterface.ToString_2[format, formatProvider];
end;

function TUAStatusCode.Get_ToString_3(const format: WideString): WideString;
begin
  Result := DefaultInterface.ToString_3[format];
end;

function TUAStatusCode.Get_CodeBits: UACodeBits;
begin
  Result := DefaultInterface.CodeBits;
end;

procedure TUAStatusCode.Set_CodeBits(pRetVal: UACodeBits);
begin
  DefaultInterface.CodeBits := pRetVal;
end;

function TUAStatusCode.Get_CodeBitsSymbol: WideString;
begin
  Result := DefaultInterface.CodeBitsSymbol;
end;

procedure TUAStatusCode.Set_CodeBitsSymbol(const pRetVal: WideString);
begin
  DefaultInterface.CodeBitsSymbol := pRetVal;
end;

function TUAStatusCode.Get_Condition: Smallint;
begin
  Result := DefaultInterface.Condition;
end;

procedure TUAStatusCode.Set_Condition(pRetVal: Smallint);
begin
  DefaultInterface.Condition := pRetVal;
end;

function TUAStatusCode.Get_Description: WideString;
begin
  Result := DefaultInterface.Description;
end;

function TUAStatusCode.Get_FlagBits: Integer;
begin
  Result := DefaultInterface.FlagBits;
end;

procedure TUAStatusCode.Set_FlagBits(pRetVal: Integer);
begin
  DefaultInterface.FlagBits := pRetVal;
end;

function TUAStatusCode.Get_HasDataValueInfo: WordBool;
begin
  Result := DefaultInterface.HasDataValueInfo;
end;

function TUAStatusCode.Get_InfoType: UAInfoType;
begin
  Result := DefaultInterface.InfoType;
end;

procedure TUAStatusCode.Set_InfoType(pRetVal: UAInfoType);
begin
  DefaultInterface.InfoType := pRetVal;
end;

function TUAStatusCode.Get_InternalValue: Integer;
begin
  Result := DefaultInterface.InternalValue;
end;

procedure TUAStatusCode.Set_InternalValue(pRetVal: Integer);
begin
  DefaultInterface.InternalValue := pRetVal;
end;

function TUAStatusCode.Get_IsBad: WordBool;
begin
  Result := DefaultInterface.IsBad;
end;

function TUAStatusCode.Get_IsGood: WordBool;
begin
  Result := DefaultInterface.IsGood;
end;

function TUAStatusCode.Get_IsUncertain: WordBool;
begin
  Result := DefaultInterface.IsUncertain;
end;

function TUAStatusCode.Get_LimitInfo: UALimitInfo;
begin
  Result := DefaultInterface.LimitInfo;
end;

procedure TUAStatusCode.Set_LimitInfo(pRetVal: UALimitInfo);
begin
  DefaultInterface.LimitInfo := pRetVal;
end;

function TUAStatusCode.Get_Overflow: WordBool;
begin
  Result := DefaultInterface.Overflow;
end;

procedure TUAStatusCode.Set_Overflow(pRetVal: WordBool);
begin
  DefaultInterface.Overflow := pRetVal;
end;

function TUAStatusCode.Get_Severity: UASeverity;
begin
  Result := DefaultInterface.Severity;
end;

procedure TUAStatusCode.Set_Severity(pRetVal: UASeverity);
begin
  DefaultInterface.Severity := pRetVal;
end;

function TUAStatusCode.Get_SemanticsChanged: WordBool;
begin
  Result := DefaultInterface.SemanticsChanged;
end;

procedure TUAStatusCode.Set_SemanticsChanged(pRetVal: WordBool);
begin
  DefaultInterface.SemanticsChanged := pRetVal;
end;

function TUAStatusCode.Get_StatusInfo: StatusInfo;
begin
  Result := DefaultInterface.StatusInfo;
end;

function TUAStatusCode.Get_StructureChanged: WordBool;
begin
  Result := DefaultInterface.StructureChanged;
end;

procedure TUAStatusCode.Set_StructureChanged(pRetVal: WordBool);
begin
  DefaultInterface.StructureChanged := pRetVal;
end;

function TUAStatusCode.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAStatusCode.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAStatusCode.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAStatusCode.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUAStatusCode.ToInt64: Int64;
begin
  Result := DefaultInterface.ToInt64;
end;

class function CoUAStatusCodeException.Create: _UAStatusCodeException;
begin
  Result := CreateComObject(CLASS_UAStatusCodeException) as _UAStatusCodeException;
end;

class function CoUAStatusCodeException.CreateRemote(const MachineName: string): _UAStatusCodeException;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAStatusCodeException) as _UAStatusCodeException;
end;

procedure TUAStatusCodeException.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{084E2E96-4D23-464D-9BBC-C0EB3A666A7D}';
    IntfIID:   '{3F285DEA-2A11-408B-9C9B-8304F9A675F5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAStatusCodeException.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAStatusCodeException;
  end;
end;

procedure TUAStatusCodeException.ConnectTo(svrIntf: _UAStatusCodeException);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAStatusCodeException.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAStatusCodeException.GetDefaultInterface: _UAStatusCodeException;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAStatusCodeException.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAStatusCodeException.Destroy;
begin
  inherited Destroy;
end;

function TUAStatusCodeException.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAStatusCodeException.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAStatusCodeException.Get_Message: WideString;
begin
  Result := DefaultInterface.Message;
end;

function TUAStatusCodeException.Get_StackTrace: WideString;
begin
  Result := DefaultInterface.StackTrace;
end;

function TUAStatusCodeException.Get_HelpLink: WideString;
begin
  Result := DefaultInterface.HelpLink;
end;

procedure TUAStatusCodeException.Set_HelpLink(const pRetVal: WideString);
begin
  DefaultInterface.HelpLink := pRetVal;
end;

function TUAStatusCodeException.Get_Source: WideString;
begin
  Result := DefaultInterface.Source;
end;

procedure TUAStatusCodeException.Set_Source(const pRetVal: WideString);
begin
  DefaultInterface.Source := pRetVal;
end;

function TUAStatusCodeException.Get_InnerException: _Exception;
begin
  Result := DefaultInterface.InnerException;
end;

function TUAStatusCodeException.Get_TargetSite: _MethodBase;
begin
  Result := DefaultInterface.TargetSite;
end;

function TUAStatusCodeException.Get_Data: _Dictionary;
begin
  Result := DefaultInterface.Data;
end;

function TUAStatusCodeException.Get_HResult: Integer;
begin
  Result := DefaultInterface.HResult;
end;

function TUAStatusCodeException.Get_ErrorId: WideString;
begin
  Result := DefaultInterface.ErrorId;
end;

function TUAStatusCodeException.Get_StatusCode: _UAStatusCode;
begin
  Result := DefaultInterface.StatusCode;
end;

function TUAStatusCodeException.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAStatusCodeException.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAStatusCodeException.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAStatusCodeException.GetBaseException: _Exception;
begin
  Result := DefaultInterface.GetBaseException;
end;

procedure TUAStatusCodeException.GetObjectData(const info: _SerializationInfo; 
                                               context: StreamingContext);
begin
  DefaultInterface.GetObjectData(info, context);
end;

class function CoUASubscriptionParameters.Create: _UASubscriptionParameters;
begin
  Result := CreateComObject(CLASS_UASubscriptionParameters) as _UASubscriptionParameters;
end;

class function CoUASubscriptionParameters.CreateRemote(const MachineName: string): _UASubscriptionParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UASubscriptionParameters) as _UASubscriptionParameters;
end;

procedure TUASubscriptionParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{923C6BDE-C564-4544-85A6-5F5C7B3D0B0A}';
    IntfIID:   '{5D75AE7B-22D0-4777-894A-B355351B8417}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUASubscriptionParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UASubscriptionParameters;
  end;
end;

procedure TUASubscriptionParameters.ConnectTo(svrIntf: _UASubscriptionParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUASubscriptionParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUASubscriptionParameters.GetDefaultInterface: _UASubscriptionParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUASubscriptionParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUASubscriptionParameters.Destroy;
begin
  inherited Destroy;
end;

function TUASubscriptionParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUASubscriptionParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUASubscriptionParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUASubscriptionParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUASubscriptionParameters.Get_Priority: Byte;
begin
  Result := DefaultInterface.Priority;
end;

procedure TUASubscriptionParameters.Set_Priority(pRetVal: Byte);
begin
  DefaultInterface.Priority := pRetVal;
end;

function TUASubscriptionParameters.Get_PublishingInterval: Integer;
begin
  Result := DefaultInterface.PublishingInterval;
end;

procedure TUASubscriptionParameters.Set_PublishingInterval(pRetVal: Integer);
begin
  DefaultInterface.PublishingInterval := pRetVal;
end;

function TUASubscriptionParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUASubscriptionParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUASubscriptionParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUASubscriptionParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUATimeZoneData.Create: _UATimeZoneData;
begin
  Result := CreateComObject(CLASS_UATimeZoneData) as _UATimeZoneData;
end;

class function CoUATimeZoneData.CreateRemote(const MachineName: string): _UATimeZoneData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UATimeZoneData) as _UATimeZoneData;
end;

procedure TUATimeZoneData.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{3F4224AD-6683-4067-9270-A3D241544A56}';
    IntfIID:   '{00C84025-D680-4152-8E77-11F7C7807E06}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUATimeZoneData.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UATimeZoneData;
  end;
end;

procedure TUATimeZoneData.ConnectTo(svrIntf: _UATimeZoneData);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUATimeZoneData.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUATimeZoneData.GetDefaultInterface: _UATimeZoneData;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUATimeZoneData.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUATimeZoneData.Destroy;
begin
  inherited Destroy;
end;

function TUATimeZoneData.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUATimeZoneData.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUATimeZoneData.Get_DaylightSavingInOffset: WordBool;
begin
  Result := DefaultInterface.DaylightSavingInOffset;
end;

procedure TUATimeZoneData.Set_DaylightSavingInOffset(pRetVal: WordBool);
begin
  DefaultInterface.DaylightSavingInOffset := pRetVal;
end;

function TUATimeZoneData.Get_Offset: Smallint;
begin
  Result := DefaultInterface.Offset;
end;

procedure TUATimeZoneData.Set_Offset(pRetVal: Smallint);
begin
  DefaultInterface.Offset := pRetVal;
end;

function TUATimeZoneData.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUATimeZoneData.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUATimeZoneData.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUATimeZoneData.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUAComplexDataParameters.Create: _UAComplexDataParameters;
begin
  Result := CreateComObject(CLASS_UAComplexDataParameters) as _UAComplexDataParameters;
end;

class function CoUAComplexDataParameters.CreateRemote(const MachineName: string): _UAComplexDataParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAComplexDataParameters) as _UAComplexDataParameters;
end;

procedure TUAComplexDataParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{18D80FB0-78AE-4F75-AC79-B03F32F46D05}';
    IntfIID:   '{A30C4F5C-981B-4705-BB41-79BDA441BE67}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAComplexDataParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAComplexDataParameters;
  end;
end;

procedure TUAComplexDataParameters.ConnectTo(svrIntf: _UAComplexDataParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAComplexDataParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAComplexDataParameters.GetDefaultInterface: _UAComplexDataParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAComplexDataParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAComplexDataParameters.Destroy;
begin
  inherited Destroy;
end;

function TUAComplexDataParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAComplexDataParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAComplexDataParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUAComplexDataParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUAComplexDataParameters.Get_TryResolveMissingDataTypeEncodingIds: WordBool;
begin
  Result := DefaultInterface.TryResolveMissingDataTypeEncodingIds;
end;

procedure TUAComplexDataParameters.Set_TryResolveMissingDataTypeEncodingIds(pRetVal: WordBool);
begin
  DefaultInterface.TryResolveMissingDataTypeEncodingIds := pRetVal;
end;

function TUAComplexDataParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAComplexDataParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAComplexDataParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAComplexDataParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUAComplexDataClientPluginParameters.Create: _UAComplexDataClientPluginParameters;
begin
  Result := CreateComObject(CLASS_UAComplexDataClientPluginParameters) as _UAComplexDataClientPluginParameters;
end;

class function CoUAComplexDataClientPluginParameters.CreateRemote(const MachineName: string): _UAComplexDataClientPluginParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAComplexDataClientPluginParameters) as _UAComplexDataClientPluginParameters;
end;

procedure TUAComplexDataClientPluginParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{830D6E6A-2BA1-4FB2-8EB1-83F9352C0E49}';
    IntfIID:   '{2CBDA1F2-B1D6-4D92-A9D0-DE86F91F868D}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAComplexDataClientPluginParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAComplexDataClientPluginParameters;
  end;
end;

procedure TUAComplexDataClientPluginParameters.ConnectTo(svrIntf: _UAComplexDataClientPluginParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAComplexDataClientPluginParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAComplexDataClientPluginParameters.GetDefaultInterface: _UAComplexDataClientPluginParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAComplexDataClientPluginParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAComplexDataClientPluginParameters.Destroy;
begin
  inherited Destroy;
end;

function TUAComplexDataClientPluginParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAComplexDataClientPluginParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAComplexDataClientPluginParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUAComplexDataClientPluginParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUAComplexDataClientPluginParameters.Get_TryResolveMissingDataTypeEncodingIds: WordBool;
begin
  Result := DefaultInterface.TryResolveMissingDataTypeEncodingIds;
end;

procedure TUAComplexDataClientPluginParameters.Set_TryResolveMissingDataTypeEncodingIds(pRetVal: WordBool);
begin
  DefaultInterface.TryResolveMissingDataTypeEncodingIds := pRetVal;
end;

function TUAComplexDataClientPluginParameters.Get_IsolatedDataTypeModelProvider: WordBool;
begin
  Result := DefaultInterface.IsolatedDataTypeModelProvider;
end;

procedure TUAComplexDataClientPluginParameters.Set_IsolatedDataTypeModelProvider(pRetVal: WordBool);
begin
  DefaultInterface.IsolatedDataTypeModelProvider := pRetVal;
end;

function TUAComplexDataClientPluginParameters.Get_ThisClientForProviderOperations: WordBool;
begin
  Result := DefaultInterface.ThisClientForProviderOperations;
end;

procedure TUAComplexDataClientPluginParameters.Set_ThisClientForProviderOperations(pRetVal: WordBool);
begin
  DefaultInterface.ThisClientForProviderOperations := pRetVal;
end;

function TUAComplexDataClientPluginParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAComplexDataClientPluginParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAComplexDataClientPluginParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAComplexDataClientPluginParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUAGenericObject.Create: _UAGenericObject;
begin
  Result := CreateComObject(CLASS_UAGenericObject) as _UAGenericObject;
end;

class function CoUAGenericObject.CreateRemote(const MachineName: string): _UAGenericObject;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAGenericObject) as _UAGenericObject;
end;

procedure TUAGenericObject.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{4A00DA64-BA81-474A-B0AC-2014E469A0C8}';
    IntfIID:   '{51B9880D-7CA2-4532-9099-22AB2D463604}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAGenericObject.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAGenericObject;
  end;
end;

procedure TUAGenericObject.ConnectTo(svrIntf: _UAGenericObject);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAGenericObject.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAGenericObject.GetDefaultInterface: _UAGenericObject;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAGenericObject.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAGenericObject.Destroy;
begin
  inherited Destroy;
end;

function TUAGenericObject.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAGenericObject.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAGenericObject.Get_DataTypeId: _UAModelNodeDescriptor;
begin
  Result := DefaultInterface.DataTypeId;
end;

procedure TUAGenericObject._Set_DataTypeId(const pRetVal: _UAModelNodeDescriptor);
begin
  DefaultInterface.DataTypeId := pRetVal;
end;

function TUAGenericObject.Get_genericData: _GenericData;
begin
  Result := DefaultInterface.genericData;
end;

procedure TUAGenericObject._Set_genericData(const pRetVal: _GenericData);
begin
  DefaultInterface.genericData := pRetVal;
end;

function TUAGenericObject.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAGenericObject.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAGenericObject.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAGenericObject.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUANodeBrowseFilter.Create: _UANodeBrowseFilter;
begin
  Result := CreateComObject(CLASS_UANodeBrowseFilter) as _UANodeBrowseFilter;
end;

class function CoUANodeBrowseFilter.CreateRemote(const MachineName: string): _UANodeBrowseFilter;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UANodeBrowseFilter) as _UANodeBrowseFilter;
end;

procedure TUANodeBrowseFilter.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{11E22E80-E639-4330-996D-8A80CB6F5A0F}';
    IntfIID:   '{89938C70-AB6D-4E26-9208-83A1F5E8A4AB}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUANodeBrowseFilter.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UANodeBrowseFilter;
  end;
end;

procedure TUANodeBrowseFilter.ConnectTo(svrIntf: _UANodeBrowseFilter);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUANodeBrowseFilter.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUANodeBrowseFilter.GetDefaultInterface: _UANodeBrowseFilter;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUANodeBrowseFilter.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUANodeBrowseFilter.Destroy;
begin
  inherited Destroy;
end;

function TUANodeBrowseFilter.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUANodeBrowseFilter.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUANodeBrowseFilter.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUANodeBrowseFilter.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUANodeBrowseFilter.Get_IncludeProperties: WordBool;
begin
  Result := DefaultInterface.IncludeProperties;
end;

procedure TUANodeBrowseFilter.Set_IncludeProperties(pRetVal: WordBool);
begin
  DefaultInterface.IncludeProperties := pRetVal;
end;

function TUANodeBrowseFilter.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUANodeBrowseFilter.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUANodeBrowseFilter.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUANodeBrowseFilter.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoAbstractEasyUAClientServerApplication.Create: _EasyUAClientServerApplication;
begin
  Result := CreateComObject(CLASS_AbstractEasyUAClientServerApplication) as _EasyUAClientServerApplication;
end;

class function CoAbstractEasyUAClientServerApplication.CreateRemote(const MachineName: string): _EasyUAClientServerApplication;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AbstractEasyUAClientServerApplication) as _EasyUAClientServerApplication;
end;

procedure TAbstractEasyUAClientServerApplication.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{0CABA38D-0D77-40FE-BCDE-FDD8981B96AA}';
    IntfIID:   '{B7F50F59-162D-4BAD-829F-3069BD5BB8C3}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TAbstractEasyUAClientServerApplication.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _EasyUAClientServerApplication;
  end;
end;

procedure TAbstractEasyUAClientServerApplication.ConnectTo(svrIntf: _EasyUAClientServerApplication);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TAbstractEasyUAClientServerApplication.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TAbstractEasyUAClientServerApplication.GetDefaultInterface: _EasyUAClientServerApplication;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TAbstractEasyUAClientServerApplication.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TAbstractEasyUAClientServerApplication.Destroy;
begin
  inherited Destroy;
end;

function TAbstractEasyUAClientServerApplication.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TAbstractEasyUAClientServerApplication.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TAbstractEasyUAClientServerApplication.Get_ApplicationIdDictionary: _StringUANodeIdReadOnlyDictionary;
begin
  Result := DefaultInterface.ApplicationIdDictionary;
end;

function TAbstractEasyUAClientServerApplication.Get_ApplicationStoreGroup: IUnknown;
begin
  Result := DefaultInterface.ApplicationStoreGroup;
end;

function TAbstractEasyUAClientServerApplication.Get_CertificateGenerationParameters: _CertificateGenerationParameters;
begin
  Result := DefaultInterface.CertificateGenerationParameters;
end;

function TAbstractEasyUAClientServerApplication.Get_CertificateRequestParameters: _UACertificateRequestParameters;
begin
  Result := DefaultInterface.CertificateRequestParameters;
end;

function TAbstractEasyUAClientServerApplication.Get_HostNames: _StringCollection;
begin
  Result := DefaultInterface.HostNames;
end;

function TAbstractEasyUAClientServerApplication.Get_SupportsGds: WordBool;
begin
  Result := DefaultInterface.SupportsGds;
end;

function TAbstractEasyUAClientServerApplication.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TAbstractEasyUAClientServerApplication.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TAbstractEasyUAClientServerApplication.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TAbstractEasyUAClientServerApplication.AssureOwnCertificate(createOwnCertificateArguments: OleVariant): WordBool;
begin
  Result := DefaultInterface.AssureOwnCertificate(createOwnCertificateArguments);
end;

procedure TAbstractEasyUAClientServerApplication.CreateOwnCertificate(createOwnCertificateArguments: OleVariant);
begin
  DefaultInterface.CreateOwnCertificate(createOwnCertificateArguments);
end;

procedure TAbstractEasyUAClientServerApplication.ExportApplicationConfiguration(const stream: _Stream);
begin
  DefaultInterface.ExportApplicationConfiguration(stream);
end;

procedure TAbstractEasyUAClientServerApplication.ExportApplicationConfigurationToFile(const filePath: WideString);
begin
  DefaultInterface.ExportApplicationConfigurationToFile(filePath);
end;

procedure TAbstractEasyUAClientServerApplication.ExportOwnCertificateToFile(exportCertificateArguments: OleVariant);
begin
  DefaultInterface.ExportOwnCertificateToFile(exportCertificateArguments);
end;

procedure TAbstractEasyUAClientServerApplication.ExportRegisteredApplication(const stream: _Stream);
begin
  DefaultInterface.ExportRegisteredApplication(stream);
end;

procedure TAbstractEasyUAClientServerApplication.ExportRegisteredApplicationToFile(const filePath: WideString);
begin
  DefaultInterface.ExportRegisteredApplicationToFile(filePath);
end;

procedure TAbstractEasyUAClientServerApplication.ExportSecuredApplication(const stream: _Stream);
begin
  DefaultInterface.ExportSecuredApplication(stream);
end;

procedure TAbstractEasyUAClientServerApplication.ExportSecuredApplicationToFile(const filePath: WideString);
begin
  DefaultInterface.ExportSecuredApplicationToFile(filePath);
end;

function TAbstractEasyUAClientServerApplication.FindGdsRegistrations(gdsEndpointDescriptor: OleVariant): _UANodeIdUAApplicationElementReadOnlyDictionary;
begin
  Result := DefaultInterface.FindGdsRegistrations(gdsEndpointDescriptor);
end;

function TAbstractEasyUAClientServerApplication.FindOwnCertificate(const certificateSubId: WideString): _PkiCertificate;
begin
  Result := DefaultInterface.FindOwnCertificate(certificateSubId);
end;

function TAbstractEasyUAClientServerApplication.GetApplicationElement: _UAApplicationElement;
begin
  Result := DefaultInterface.GetApplicationElement;
end;

function TAbstractEasyUAClientServerApplication.GetApplicationId(gdsEndpointDescriptor: OleVariant): _UANodeId;
begin
  Result := DefaultInterface.GetApplicationId(gdsEndpointDescriptor);
end;

function TAbstractEasyUAClientServerApplication.GetCertificateSubjectName(const certificateSubId: WideString): WideString;
begin
  Result := DefaultInterface.GetCertificateSubjectName(certificateSubId);
end;

function TAbstractEasyUAClientServerApplication.GetCertificateSubjectNameDictionary: _StringStringDictionary;
begin
  Result := DefaultInterface.GetCertificateSubjectNameDictionary;
end;

function TAbstractEasyUAClientServerApplication.GetEffectiveApplicationManifest: _UAApplicationManifest;
begin
  Result := DefaultInterface.GetEffectiveApplicationManifest;
end;

function TAbstractEasyUAClientServerApplication.GetEffectiveHostNames(alternateHostNames: OleVariant): _StringCollection;
begin
  Result := DefaultInterface.GetEffectiveHostNames(alternateHostNames);
end;

function TAbstractEasyUAClientServerApplication.GetPrivateKeyPasswordStrength(const certificateSubId: WideString): Single;
begin
  Result := DefaultInterface.GetPrivateKeyPasswordStrength(certificateSubId);
end;

function TAbstractEasyUAClientServerApplication.HasOwnCertificate(const certificateSubId: WideString): WordBool;
begin
  Result := DefaultInterface.HasOwnCertificate(certificateSubId);
end;

function TAbstractEasyUAClientServerApplication.HasPrivateKeyPassword(const certificateSubId: WideString): WordBool;
begin
  Result := DefaultInterface.HasPrivateKeyPassword(certificateSubId);
end;

procedure TAbstractEasyUAClientServerApplication.ImportOwnCertificateFromFile(importCertificateArguments: OleVariant);
begin
  DefaultInterface.ImportOwnCertificateFromFile(importCertificateArguments);
end;

function TAbstractEasyUAClientServerApplication.ListCertificateSubIds: _StringSet;
begin
  Result := DefaultInterface.ListCertificateSubIds;
end;

function TAbstractEasyUAClientServerApplication.ListCertificateTypeElements(gdsEndpointDescriptor: OleVariant; 
                                                                            applicationStoreKind: PkiApplicationStoreKind): _UACertificateTypeElementCollection;
begin
  Result := DefaultInterface.ListCertificateTypeElements(gdsEndpointDescriptor, applicationStoreKind);
end;

function TAbstractEasyUAClientServerApplication.ObtainNewCertificate(Arguments: OleVariant): _PkiCertificate;
begin
  Result := DefaultInterface.ObtainNewCertificate(Arguments);
end;

function TAbstractEasyUAClientServerApplication.ProtectOrUnprotectOwnCertificate(const certificateSubId: WideString; 
                                                                                 const newPrivateKeyPassword: WideString): WordBool;
begin
  Result := DefaultInterface.ProtectOrUnprotectOwnCertificate(certificateSubId, 
                                                              newPrivateKeyPassword);
end;

procedure TAbstractEasyUAClientServerApplication.ProtectOwnCertificate(const newPrivateKeyPassword: WideString);
begin
  DefaultInterface.ProtectOwnCertificate(newPrivateKeyPassword);
end;

function TAbstractEasyUAClientServerApplication.RefreshTrustLists(gdsEndpointDescriptor: OleVariant; 
                                                                  updateGdsRegistration: WordBool): UATrustListMasks;
begin
  Result := DefaultInterface.RefreshTrustLists(gdsEndpointDescriptor, updateGdsRegistration);
end;

function TAbstractEasyUAClientServerApplication.RegisterToGds(gdsEndpointDescriptor: OleVariant): _UANodeId;
begin
  Result := DefaultInterface.RegisterToGds(gdsEndpointDescriptor);
end;

function TAbstractEasyUAClientServerApplication.RemoveOwnCertificates(const certificateSubIdPattern: WideString; 
                                                                      mustExist: WordBool; 
                                                                      updateTrustedPeerCertificates: WordBool): Integer;
begin
  Result := DefaultInterface.RemoveOwnCertificates(certificateSubIdPattern, mustExist, 
                                                   updateTrustedPeerCertificates);
end;

procedure TAbstractEasyUAClientServerApplication.RemovePrivateKeyPassword(const certificateSubId: WideString);
begin
  DefaultInterface.RemovePrivateKeyPassword(certificateSubId);
end;

procedure TAbstractEasyUAClientServerApplication.SetPrivateKeyPassword(const certificateSubId: WideString; 
                                                                       const privateKeyPassword: WideString);
begin
  DefaultInterface.SetPrivateKeyPassword(certificateSubId, privateKeyPassword);
end;

procedure TAbstractEasyUAClientServerApplication.UnprotectOwnCertificate;
begin
  DefaultInterface.UnprotectOwnCertificate;
end;

procedure TAbstractEasyUAClientServerApplication.UnregisterFromGds(gdsEndpointDescriptor: OleVariant);
begin
  DefaultInterface.UnregisterFromGds(gdsEndpointDescriptor);
end;

function TAbstractEasyUAClientServerApplication.updateGdsRegistration(gdsEndpointDescriptor: OleVariant): _UANodeId;
begin
  Result := DefaultInterface.updateGdsRegistration(gdsEndpointDescriptor);
end;

procedure TAbstractEasyUAClientServerApplication.ValidateOwnCertificate(certificateGenerationArguments: OleVariant);
begin
  DefaultInterface.ValidateOwnCertificate(certificateGenerationArguments);
end;

class function CoUACertificateArguments.Create: _UACertificateArguments;
begin
  Result := CreateComObject(CLASS_UACertificateArguments) as _UACertificateArguments;
end;

class function CoUACertificateArguments.CreateRemote(const MachineName: string): _UACertificateArguments;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UACertificateArguments) as _UACertificateArguments;
end;

procedure TUACertificateArguments.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{89389B00-51DC-4320-A5ED-856C41DFB7E6}';
    IntfIID:   '{CB255BA0-8B5C-4BBE-9A86-98FF964C36A5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUACertificateArguments.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UACertificateArguments;
  end;
end;

procedure TUACertificateArguments.ConnectTo(svrIntf: _UACertificateArguments);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUACertificateArguments.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUACertificateArguments.GetDefaultInterface: _UACertificateArguments;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUACertificateArguments.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUACertificateArguments.Destroy;
begin
  inherited Destroy;
end;

function TUACertificateArguments.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUACertificateArguments.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUACertificateArguments.Get_State: OleVariant;
begin
  Result := DefaultInterface.State;
end;

procedure TUACertificateArguments._Set_State(pRetVal: OleVariant);
begin
  DefaultInterface.State := pRetVal;
end;

function TUACertificateArguments.Get_certificateSubId: WideString;
begin
  Result := DefaultInterface.certificateSubId;
end;

procedure TUACertificateArguments.Set_certificateSubId(const pRetVal: WideString);
begin
  DefaultInterface.certificateSubId := pRetVal;
end;

function TUACertificateArguments.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUACertificateArguments.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUACertificateArguments.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUACertificateArguments.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUACertificateArguments.MemberwiseClone: _OperationArguments;
begin
  Result := DefaultInterface.MemberwiseClone;
end;

procedure TUACertificateArguments.SetState(State: OleVariant);
begin
  DefaultInterface.SetState(State);
end;

class function CoUAIngestCertificateArguments.Create: _UAIngestCertificateArguments;
begin
  Result := CreateComObject(CLASS_UAIngestCertificateArguments) as _UAIngestCertificateArguments;
end;

class function CoUAIngestCertificateArguments.CreateRemote(const MachineName: string): _UAIngestCertificateArguments;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAIngestCertificateArguments) as _UAIngestCertificateArguments;
end;

procedure TUAIngestCertificateArguments.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{6F6E6E03-C683-4AF7-8D80-9184DF30699F}';
    IntfIID:   '{F863E242-D441-426F-89A1-E74949181DB0}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAIngestCertificateArguments.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAIngestCertificateArguments;
  end;
end;

procedure TUAIngestCertificateArguments.ConnectTo(svrIntf: _UAIngestCertificateArguments);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAIngestCertificateArguments.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAIngestCertificateArguments.GetDefaultInterface: _UAIngestCertificateArguments;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAIngestCertificateArguments.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAIngestCertificateArguments.Destroy;
begin
  inherited Destroy;
end;

function TUAIngestCertificateArguments.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAIngestCertificateArguments.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAIngestCertificateArguments.Get_State: OleVariant;
begin
  Result := DefaultInterface.State;
end;

procedure TUAIngestCertificateArguments._Set_State(pRetVal: OleVariant);
begin
  DefaultInterface.State := pRetVal;
end;

function TUAIngestCertificateArguments.Get_certificateSubId: WideString;
begin
  Result := DefaultInterface.certificateSubId;
end;

procedure TUAIngestCertificateArguments.Set_certificateSubId(const pRetVal: WideString);
begin
  DefaultInterface.certificateSubId := pRetVal;
end;

function TUAIngestCertificateArguments.Get_newPrivateKeyPassword: WideString;
begin
  Result := DefaultInterface.newPrivateKeyPassword;
end;

procedure TUAIngestCertificateArguments.Set_newPrivateKeyPassword(const pRetVal: WideString);
begin
  DefaultInterface.newPrivateKeyPassword := pRetVal;
end;

function TUAIngestCertificateArguments.Get_SetNewPassword: WordBool;
begin
  Result := DefaultInterface.SetNewPassword;
end;

procedure TUAIngestCertificateArguments.Set_SetNewPassword(pRetVal: WordBool);
begin
  DefaultInterface.SetNewPassword := pRetVal;
end;

function TUAIngestCertificateArguments.Get_updateTrustedPeerCertificates: WordBool;
begin
  Result := DefaultInterface.updateTrustedPeerCertificates;
end;

procedure TUAIngestCertificateArguments.Set_updateTrustedPeerCertificates(pRetVal: WordBool);
begin
  DefaultInterface.updateTrustedPeerCertificates := pRetVal;
end;

function TUAIngestCertificateArguments.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAIngestCertificateArguments.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAIngestCertificateArguments.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAIngestCertificateArguments.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUAIngestCertificateArguments.MemberwiseClone: _OperationArguments;
begin
  Result := DefaultInterface.MemberwiseClone;
end;

procedure TUAIngestCertificateArguments.SetState(State: OleVariant);
begin
  DefaultInterface.SetState(State);
end;

class function CoUAValidateCertificateArguments.Create: _UAValidateCertificateArguments;
begin
  Result := CreateComObject(CLASS_UAValidateCertificateArguments) as _UAValidateCertificateArguments;
end;

class function CoUAValidateCertificateArguments.CreateRemote(const MachineName: string): _UAValidateCertificateArguments;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAValidateCertificateArguments) as _UAValidateCertificateArguments;
end;

procedure TUAValidateCertificateArguments.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{A35EF227-E187-42CF-B3C9-A256132EE0B1}';
    IntfIID:   '{52EA37D5-94AA-4EB9-9159-AF32E5D3C766}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAValidateCertificateArguments.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAValidateCertificateArguments;
  end;
end;

procedure TUAValidateCertificateArguments.ConnectTo(svrIntf: _UAValidateCertificateArguments);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAValidateCertificateArguments.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAValidateCertificateArguments.GetDefaultInterface: _UAValidateCertificateArguments;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAValidateCertificateArguments.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAValidateCertificateArguments.Destroy;
begin
  inherited Destroy;
end;

function TUAValidateCertificateArguments.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAValidateCertificateArguments.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAValidateCertificateArguments.Get_State: OleVariant;
begin
  Result := DefaultInterface.State;
end;

procedure TUAValidateCertificateArguments._Set_State(pRetVal: OleVariant);
begin
  DefaultInterface.State := pRetVal;
end;

function TUAValidateCertificateArguments.Get_certificateSubId: WideString;
begin
  Result := DefaultInterface.certificateSubId;
end;

procedure TUAValidateCertificateArguments.Set_certificateSubId(const pRetVal: WideString);
begin
  DefaultInterface.certificateSubId := pRetVal;
end;

function TUAValidateCertificateArguments.Get_Parameters: _CertificateGenerationParameters;
begin
  Result := DefaultInterface.Parameters;
end;

procedure TUAValidateCertificateArguments._Set_Parameters(const pRetVal: _CertificateGenerationParameters);
begin
  DefaultInterface.Parameters := pRetVal;
end;

function TUAValidateCertificateArguments.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAValidateCertificateArguments.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAValidateCertificateArguments.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAValidateCertificateArguments.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUAValidateCertificateArguments.MemberwiseClone: _OperationArguments;
begin
  Result := DefaultInterface.MemberwiseClone;
end;

procedure TUAValidateCertificateArguments.SetState(State: OleVariant);
begin
  DefaultInterface.SetState(State);
end;

class function CoNetSdkEasyUAClientServerApplication.Create: _EasyUAClientServerApplication;
begin
  Result := CreateComObject(CLASS_NetSdkEasyUAClientServerApplication) as _EasyUAClientServerApplication;
end;

class function CoNetSdkEasyUAClientServerApplication.CreateRemote(const MachineName: string): _EasyUAClientServerApplication;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NetSdkEasyUAClientServerApplication) as _EasyUAClientServerApplication;
end;

procedure TNetSdkEasyUAClientServerApplication.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{669E0C81-104E-44D7-A6FB-BCD5F1DDFF94}';
    IntfIID:   '{B7F50F59-162D-4BAD-829F-3069BD5BB8C3}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TNetSdkEasyUAClientServerApplication.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _EasyUAClientServerApplication;
  end;
end;

procedure TNetSdkEasyUAClientServerApplication.ConnectTo(svrIntf: _EasyUAClientServerApplication);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TNetSdkEasyUAClientServerApplication.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TNetSdkEasyUAClientServerApplication.GetDefaultInterface: _EasyUAClientServerApplication;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TNetSdkEasyUAClientServerApplication.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TNetSdkEasyUAClientServerApplication.Destroy;
begin
  inherited Destroy;
end;

function TNetSdkEasyUAClientServerApplication.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TNetSdkEasyUAClientServerApplication.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TNetSdkEasyUAClientServerApplication.Get_ApplicationIdDictionary: _StringUANodeIdReadOnlyDictionary;
begin
  Result := DefaultInterface.ApplicationIdDictionary;
end;

function TNetSdkEasyUAClientServerApplication.Get_ApplicationStoreGroup: IUnknown;
begin
  Result := DefaultInterface.ApplicationStoreGroup;
end;

function TNetSdkEasyUAClientServerApplication.Get_CertificateGenerationParameters: _CertificateGenerationParameters;
begin
  Result := DefaultInterface.CertificateGenerationParameters;
end;

function TNetSdkEasyUAClientServerApplication.Get_CertificateRequestParameters: _UACertificateRequestParameters;
begin
  Result := DefaultInterface.CertificateRequestParameters;
end;

function TNetSdkEasyUAClientServerApplication.Get_HostNames: _StringCollection;
begin
  Result := DefaultInterface.HostNames;
end;

function TNetSdkEasyUAClientServerApplication.Get_SupportsGds: WordBool;
begin
  Result := DefaultInterface.SupportsGds;
end;

function TNetSdkEasyUAClientServerApplication.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TNetSdkEasyUAClientServerApplication.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TNetSdkEasyUAClientServerApplication.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TNetSdkEasyUAClientServerApplication.AssureOwnCertificate(createOwnCertificateArguments: OleVariant): WordBool;
begin
  Result := DefaultInterface.AssureOwnCertificate(createOwnCertificateArguments);
end;

procedure TNetSdkEasyUAClientServerApplication.CreateOwnCertificate(createOwnCertificateArguments: OleVariant);
begin
  DefaultInterface.CreateOwnCertificate(createOwnCertificateArguments);
end;

procedure TNetSdkEasyUAClientServerApplication.ExportApplicationConfiguration(const stream: _Stream);
begin
  DefaultInterface.ExportApplicationConfiguration(stream);
end;

procedure TNetSdkEasyUAClientServerApplication.ExportApplicationConfigurationToFile(const filePath: WideString);
begin
  DefaultInterface.ExportApplicationConfigurationToFile(filePath);
end;

procedure TNetSdkEasyUAClientServerApplication.ExportOwnCertificateToFile(exportCertificateArguments: OleVariant);
begin
  DefaultInterface.ExportOwnCertificateToFile(exportCertificateArguments);
end;

procedure TNetSdkEasyUAClientServerApplication.ExportRegisteredApplication(const stream: _Stream);
begin
  DefaultInterface.ExportRegisteredApplication(stream);
end;

procedure TNetSdkEasyUAClientServerApplication.ExportRegisteredApplicationToFile(const filePath: WideString);
begin
  DefaultInterface.ExportRegisteredApplicationToFile(filePath);
end;

procedure TNetSdkEasyUAClientServerApplication.ExportSecuredApplication(const stream: _Stream);
begin
  DefaultInterface.ExportSecuredApplication(stream);
end;

procedure TNetSdkEasyUAClientServerApplication.ExportSecuredApplicationToFile(const filePath: WideString);
begin
  DefaultInterface.ExportSecuredApplicationToFile(filePath);
end;

function TNetSdkEasyUAClientServerApplication.FindGdsRegistrations(gdsEndpointDescriptor: OleVariant): _UANodeIdUAApplicationElementReadOnlyDictionary;
begin
  Result := DefaultInterface.FindGdsRegistrations(gdsEndpointDescriptor);
end;

function TNetSdkEasyUAClientServerApplication.FindOwnCertificate(const certificateSubId: WideString): _PkiCertificate;
begin
  Result := DefaultInterface.FindOwnCertificate(certificateSubId);
end;

function TNetSdkEasyUAClientServerApplication.GetApplicationElement: _UAApplicationElement;
begin
  Result := DefaultInterface.GetApplicationElement;
end;

function TNetSdkEasyUAClientServerApplication.GetApplicationId(gdsEndpointDescriptor: OleVariant): _UANodeId;
begin
  Result := DefaultInterface.GetApplicationId(gdsEndpointDescriptor);
end;

function TNetSdkEasyUAClientServerApplication.GetCertificateSubjectName(const certificateSubId: WideString): WideString;
begin
  Result := DefaultInterface.GetCertificateSubjectName(certificateSubId);
end;

function TNetSdkEasyUAClientServerApplication.GetCertificateSubjectNameDictionary: _StringStringDictionary;
begin
  Result := DefaultInterface.GetCertificateSubjectNameDictionary;
end;

function TNetSdkEasyUAClientServerApplication.GetEffectiveApplicationManifest: _UAApplicationManifest;
begin
  Result := DefaultInterface.GetEffectiveApplicationManifest;
end;

function TNetSdkEasyUAClientServerApplication.GetEffectiveHostNames(alternateHostNames: OleVariant): _StringCollection;
begin
  Result := DefaultInterface.GetEffectiveHostNames(alternateHostNames);
end;

function TNetSdkEasyUAClientServerApplication.GetPrivateKeyPasswordStrength(const certificateSubId: WideString): Single;
begin
  Result := DefaultInterface.GetPrivateKeyPasswordStrength(certificateSubId);
end;

function TNetSdkEasyUAClientServerApplication.HasOwnCertificate(const certificateSubId: WideString): WordBool;
begin
  Result := DefaultInterface.HasOwnCertificate(certificateSubId);
end;

function TNetSdkEasyUAClientServerApplication.HasPrivateKeyPassword(const certificateSubId: WideString): WordBool;
begin
  Result := DefaultInterface.HasPrivateKeyPassword(certificateSubId);
end;

procedure TNetSdkEasyUAClientServerApplication.ImportOwnCertificateFromFile(importCertificateArguments: OleVariant);
begin
  DefaultInterface.ImportOwnCertificateFromFile(importCertificateArguments);
end;

function TNetSdkEasyUAClientServerApplication.ListCertificateSubIds: _StringSet;
begin
  Result := DefaultInterface.ListCertificateSubIds;
end;

function TNetSdkEasyUAClientServerApplication.ListCertificateTypeElements(gdsEndpointDescriptor: OleVariant; 
                                                                          applicationStoreKind: PkiApplicationStoreKind): _UACertificateTypeElementCollection;
begin
  Result := DefaultInterface.ListCertificateTypeElements(gdsEndpointDescriptor, applicationStoreKind);
end;

function TNetSdkEasyUAClientServerApplication.ObtainNewCertificate(Arguments: OleVariant): _PkiCertificate;
begin
  Result := DefaultInterface.ObtainNewCertificate(Arguments);
end;

function TNetSdkEasyUAClientServerApplication.ProtectOrUnprotectOwnCertificate(const certificateSubId: WideString; 
                                                                               const newPrivateKeyPassword: WideString): WordBool;
begin
  Result := DefaultInterface.ProtectOrUnprotectOwnCertificate(certificateSubId, 
                                                              newPrivateKeyPassword);
end;

procedure TNetSdkEasyUAClientServerApplication.ProtectOwnCertificate(const newPrivateKeyPassword: WideString);
begin
  DefaultInterface.ProtectOwnCertificate(newPrivateKeyPassword);
end;

function TNetSdkEasyUAClientServerApplication.RefreshTrustLists(gdsEndpointDescriptor: OleVariant; 
                                                                updateGdsRegistration: WordBool): UATrustListMasks;
begin
  Result := DefaultInterface.RefreshTrustLists(gdsEndpointDescriptor, updateGdsRegistration);
end;

function TNetSdkEasyUAClientServerApplication.RegisterToGds(gdsEndpointDescriptor: OleVariant): _UANodeId;
begin
  Result := DefaultInterface.RegisterToGds(gdsEndpointDescriptor);
end;

function TNetSdkEasyUAClientServerApplication.RemoveOwnCertificates(const certificateSubIdPattern: WideString; 
                                                                    mustExist: WordBool; 
                                                                    updateTrustedPeerCertificates: WordBool): Integer;
begin
  Result := DefaultInterface.RemoveOwnCertificates(certificateSubIdPattern, mustExist, 
                                                   updateTrustedPeerCertificates);
end;

procedure TNetSdkEasyUAClientServerApplication.RemovePrivateKeyPassword(const certificateSubId: WideString);
begin
  DefaultInterface.RemovePrivateKeyPassword(certificateSubId);
end;

procedure TNetSdkEasyUAClientServerApplication.SetPrivateKeyPassword(const certificateSubId: WideString; 
                                                                     const privateKeyPassword: WideString);
begin
  DefaultInterface.SetPrivateKeyPassword(certificateSubId, privateKeyPassword);
end;

procedure TNetSdkEasyUAClientServerApplication.UnprotectOwnCertificate;
begin
  DefaultInterface.UnprotectOwnCertificate;
end;

procedure TNetSdkEasyUAClientServerApplication.UnregisterFromGds(gdsEndpointDescriptor: OleVariant);
begin
  DefaultInterface.UnregisterFromGds(gdsEndpointDescriptor);
end;

function TNetSdkEasyUAClientServerApplication.updateGdsRegistration(gdsEndpointDescriptor: OleVariant): _UANodeId;
begin
  Result := DefaultInterface.updateGdsRegistration(gdsEndpointDescriptor);
end;

procedure TNetSdkEasyUAClientServerApplication.ValidateOwnCertificate(certificateGenerationArguments: OleVariant);
begin
  DefaultInterface.ValidateOwnCertificate(certificateGenerationArguments);
end;

class function CoUAAssureCertificateArguments.Create: _UAAssureCertificateArguments;
begin
  Result := CreateComObject(CLASS_UAAssureCertificateArguments) as _UAAssureCertificateArguments;
end;

class function CoUAAssureCertificateArguments.CreateRemote(const MachineName: string): _UAAssureCertificateArguments;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAAssureCertificateArguments) as _UAAssureCertificateArguments;
end;

procedure TUAAssureCertificateArguments.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{DCD438B5-C31F-416F-9F3F-B3ABAA316321}';
    IntfIID:   '{A43AD8D1-11BD-4F9B-AC57-0CF9A4984AFC}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAAssureCertificateArguments.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAAssureCertificateArguments;
  end;
end;

procedure TUAAssureCertificateArguments.ConnectTo(svrIntf: _UAAssureCertificateArguments);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAAssureCertificateArguments.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAAssureCertificateArguments.GetDefaultInterface: _UAAssureCertificateArguments;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAAssureCertificateArguments.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAAssureCertificateArguments.Destroy;
begin
  inherited Destroy;
end;

function TUAAssureCertificateArguments.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAAssureCertificateArguments.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAAssureCertificateArguments.Get_State: OleVariant;
begin
  Result := DefaultInterface.State;
end;

procedure TUAAssureCertificateArguments._Set_State(pRetVal: OleVariant);
begin
  DefaultInterface.State := pRetVal;
end;

function TUAAssureCertificateArguments.Get_certificateSubId: WideString;
begin
  Result := DefaultInterface.certificateSubId;
end;

procedure TUAAssureCertificateArguments.Set_certificateSubId(const pRetVal: WideString);
begin
  DefaultInterface.certificateSubId := pRetVal;
end;

function TUAAssureCertificateArguments.Get_Parameters: _CertificateGenerationParameters;
begin
  Result := DefaultInterface.Parameters;
end;

procedure TUAAssureCertificateArguments._Set_Parameters(const pRetVal: _CertificateGenerationParameters);
begin
  DefaultInterface.Parameters := pRetVal;
end;

function TUAAssureCertificateArguments.Get_updateTrustedPeerCertificates: WordBool;
begin
  Result := DefaultInterface.updateTrustedPeerCertificates;
end;

procedure TUAAssureCertificateArguments.Set_updateTrustedPeerCertificates(pRetVal: WordBool);
begin
  DefaultInterface.updateTrustedPeerCertificates := pRetVal;
end;

function TUAAssureCertificateArguments.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAAssureCertificateArguments.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAAssureCertificateArguments.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAAssureCertificateArguments.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUAAssureCertificateArguments.MemberwiseClone: _OperationArguments;
begin
  Result := DefaultInterface.MemberwiseClone;
end;

procedure TUAAssureCertificateArguments.SetState(State: OleVariant);
begin
  DefaultInterface.SetState(State);
end;

class function CoUACertificateRequestParameters.Create: _UACertificateRequestParameters;
begin
  Result := CreateComObject(CLASS_UACertificateRequestParameters) as _UACertificateRequestParameters;
end;

class function CoUACertificateRequestParameters.CreateRemote(const MachineName: string): _UACertificateRequestParameters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UACertificateRequestParameters) as _UACertificateRequestParameters;
end;

procedure TUACertificateRequestParameters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{CDCB6AD2-4BB3-467A-BE96-1FE1F53C680F}';
    IntfIID:   '{2D9D29A3-02C1-4643-A9FE-9B665CCEF2E3}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUACertificateRequestParameters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UACertificateRequestParameters;
  end;
end;

procedure TUACertificateRequestParameters.ConnectTo(svrIntf: _UACertificateRequestParameters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUACertificateRequestParameters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUACertificateRequestParameters.GetDefaultInterface: _UACertificateRequestParameters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUACertificateRequestParameters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUACertificateRequestParameters.Destroy;
begin
  inherited Destroy;
end;

function TUACertificateRequestParameters.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUACertificateRequestParameters.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUACertificateRequestParameters.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUACertificateRequestParameters.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUACertificateRequestParameters.Get_certificateTypeId: _UANodeId;
begin
  Result := DefaultInterface.certificateTypeId;
end;

procedure TUACertificateRequestParameters._Set_certificateTypeId(const pRetVal: _UANodeId);
begin
  DefaultInterface.certificateTypeId := pRetVal;
end;

function TUACertificateRequestParameters.Get_FilePrivateKeyPassword: WideString;
begin
  Result := DefaultInterface.FilePrivateKeyPassword;
end;

procedure TUACertificateRequestParameters.Set_FilePrivateKeyPassword(const pRetVal: WideString);
begin
  DefaultInterface.FilePrivateKeyPassword := pRetVal;
end;

function TUACertificateRequestParameters.Get_gdsEndpointDescriptor: _UAEndpointDescriptor;
begin
  Result := DefaultInterface.gdsEndpointDescriptor;
end;

procedure TUACertificateRequestParameters._Set_gdsEndpointDescriptor(const pRetVal: _UAEndpointDescriptor);
begin
  DefaultInterface.gdsEndpointDescriptor := pRetVal;
end;

function TUACertificateRequestParameters.Get_PrivateKeyFileName: WideString;
begin
  Result := DefaultInterface.PrivateKeyFileName;
end;

procedure TUACertificateRequestParameters.Set_PrivateKeyFileName(const pRetVal: WideString);
begin
  DefaultInterface.PrivateKeyFileName := pRetVal;
end;

function TUACertificateRequestParameters.Get_privateKeyFormat: WideString;
begin
  Result := DefaultInterface.privateKeyFormat;
end;

procedure TUACertificateRequestParameters.Set_privateKeyFormat(const pRetVal: WideString);
begin
  DefaultInterface.privateKeyFormat := pRetVal;
end;

function TUACertificateRequestParameters.Get_TryReuseExistingPrivateKey: WordBool;
begin
  Result := DefaultInterface.TryReuseExistingPrivateKey;
end;

procedure TUACertificateRequestParameters.Set_TryReuseExistingPrivateKey(pRetVal: WordBool);
begin
  DefaultInterface.TryReuseExistingPrivateKey := pRetVal;
end;

function TUACertificateRequestParameters.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUACertificateRequestParameters.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUACertificateRequestParameters.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUACertificateRequestParameters.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUACertificateTypeElement.Create: _UACertificateTypeElement;
begin
  Result := CreateComObject(CLASS_UACertificateTypeElement) as _UACertificateTypeElement;
end;

class function CoUACertificateTypeElement.CreateRemote(const MachineName: string): _UACertificateTypeElement;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UACertificateTypeElement) as _UACertificateTypeElement;
end;

procedure TUACertificateTypeElement.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{5D0E1B0E-4495-458F-A6E3-0A4168AE4B4E}';
    IntfIID:   '{A229E427-67FC-4572-8F9A-8E3669275894}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUACertificateTypeElement.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UACertificateTypeElement;
  end;
end;

procedure TUACertificateTypeElement.ConnectTo(svrIntf: _UACertificateTypeElement);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUACertificateTypeElement.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUACertificateTypeElement.GetDefaultInterface: _UACertificateTypeElement;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUACertificateTypeElement.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUACertificateTypeElement.Destroy;
begin
  inherited Destroy;
end;

function TUACertificateTypeElement.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUACertificateTypeElement.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUACertificateTypeElement.Get_BaseCertificateTypeId: _UANodeId;
begin
  Result := DefaultInterface.BaseCertificateTypeId;
end;

procedure TUACertificateTypeElement._Set_BaseCertificateTypeId(const pRetVal: _UANodeId);
begin
  DefaultInterface.BaseCertificateTypeId := pRetVal;
end;

function TUACertificateTypeElement.Get_certificateTypeId: _UANodeId;
begin
  Result := DefaultInterface.certificateTypeId;
end;

procedure TUACertificateTypeElement._Set_certificateTypeId(const pRetVal: _UANodeId);
begin
  DefaultInterface.certificateTypeId := pRetVal;
end;

function TUACertificateTypeElement.Get_DisplayName: WideString;
begin
  Result := DefaultInterface.DisplayName;
end;

procedure TUACertificateTypeElement.Set_DisplayName(const pRetVal: WideString);
begin
  DefaultInterface.DisplayName := pRetVal;
end;

function TUACertificateTypeElement.Get_DisplayText: WideString;
begin
  Result := DefaultInterface.DisplayText;
end;

function TUACertificateTypeElement.Get_IsAbstract: WordBool;
begin
  Result := DefaultInterface.IsAbstract;
end;

procedure TUACertificateTypeElement.Set_IsAbstract(pRetVal: WordBool);
begin
  DefaultInterface.IsAbstract := pRetVal;
end;

function TUACertificateTypeElement.Get_MinimumRssKeySize: Integer;
begin
  Result := DefaultInterface.MinimumRssKeySize;
end;

function TUACertificateTypeElement.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUACertificateTypeElement.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUACertificateTypeElement.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUACertificateTypeElement.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUACertificateTypeElementCollection.Create: _UACertificateTypeElementCollection;
begin
  Result := CreateComObject(CLASS_UACertificateTypeElementCollection) as _UACertificateTypeElementCollection;
end;

class function CoUACertificateTypeElementCollection.CreateRemote(const MachineName: string): _UACertificateTypeElementCollection;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UACertificateTypeElementCollection) as _UACertificateTypeElementCollection;
end;

procedure TUACertificateTypeElementCollection.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{DA516A55-1CAC-4CD7-838C-80D3EA89FC45}';
    IntfIID:   '{BAA54122-5071-4DF4-8CA5-1CF17857C24B}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUACertificateTypeElementCollection.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UACertificateTypeElementCollection;
  end;
end;

procedure TUACertificateTypeElementCollection.ConnectTo(svrIntf: _UACertificateTypeElementCollection);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUACertificateTypeElementCollection.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUACertificateTypeElementCollection.GetDefaultInterface: _UACertificateTypeElementCollection;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUACertificateTypeElementCollection.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUACertificateTypeElementCollection.Destroy;
begin
  inherited Destroy;
end;

function TUACertificateTypeElementCollection.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUACertificateTypeElementCollection.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUACertificateTypeElementCollection.Get_Item(key: OleVariant): _UACertificateTypeElement;
begin
  Result := DefaultInterface.Item[key];
end;

function TUACertificateTypeElementCollection.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

function TUACertificateTypeElementCollection.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUACertificateTypeElementCollection.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUACertificateTypeElementCollection.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUACertificateTypeElementCollection.GetEnumerator: IEnumVARIANT;
begin
  Result := DefaultInterface.GetEnumerator;
end;

procedure TUACertificateTypeElementCollection.Add(Item: OleVariant);
begin
  DefaultInterface.Add(Item);
end;

procedure TUACertificateTypeElementCollection.Clear;
begin
  DefaultInterface.Clear;
end;

function TUACertificateTypeElementCollection.Contains(Item: OleVariant): WordBool;
begin
  Result := DefaultInterface.Contains(Item);
end;

function TUACertificateTypeElementCollection.IndexOf(Item: OleVariant): Integer;
begin
  Result := DefaultInterface.IndexOf(Item);
end;

function TUACertificateTypeElementCollection.Remove(key: OleVariant): WordBool;
begin
  Result := DefaultInterface.Remove(key);
end;

procedure TUACertificateTypeElementCollection.RemoveAt(index: Integer);
begin
  DefaultInterface.RemoveAt(index);
end;

function TUACertificateTypeElementCollection.ToList: _ElasticVector;
begin
  Result := DefaultInterface.ToList;
end;

function TUACertificateTypeElementCollection.TryGetValue(key: OleVariant; out Item: OleVariant): WordBool;
begin
  Result := DefaultInterface.TryGetValue(key, Item);
end;

function TUACertificateTypeElementCollection.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUAExportCertificateArguments.Create: _UAExportCertificateArguments;
begin
  Result := CreateComObject(CLASS_UAExportCertificateArguments) as _UAExportCertificateArguments;
end;

class function CoUAExportCertificateArguments.CreateRemote(const MachineName: string): _UAExportCertificateArguments;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAExportCertificateArguments) as _UAExportCertificateArguments;
end;

procedure TUAExportCertificateArguments.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{DF9AA87F-5FC2-4AF4-82EC-5189209B1A80}';
    IntfIID:   '{256110C5-CB3E-4FE6-9C0D-BBE67C1FE56D}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAExportCertificateArguments.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAExportCertificateArguments;
  end;
end;

procedure TUAExportCertificateArguments.ConnectTo(svrIntf: _UAExportCertificateArguments);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAExportCertificateArguments.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAExportCertificateArguments.GetDefaultInterface: _UAExportCertificateArguments;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAExportCertificateArguments.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAExportCertificateArguments.Destroy;
begin
  inherited Destroy;
end;

function TUAExportCertificateArguments.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAExportCertificateArguments.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAExportCertificateArguments.Get_State: OleVariant;
begin
  Result := DefaultInterface.State;
end;

procedure TUAExportCertificateArguments._Set_State(pRetVal: OleVariant);
begin
  DefaultInterface.State := pRetVal;
end;

function TUAExportCertificateArguments.Get_certificateSubId: WideString;
begin
  Result := DefaultInterface.certificateSubId;
end;

procedure TUAExportCertificateArguments.Set_certificateSubId(const pRetVal: WideString);
begin
  DefaultInterface.certificateSubId := pRetVal;
end;

function TUAExportCertificateArguments.Get_filePath: WideString;
begin
  Result := DefaultInterface.filePath;
end;

procedure TUAExportCertificateArguments.Set_filePath(const pRetVal: WideString);
begin
  DefaultInterface.filePath := pRetVal;
end;

function TUAExportCertificateArguments.Get_newPrivateKeyPassword: WideString;
begin
  Result := DefaultInterface.newPrivateKeyPassword;
end;

procedure TUAExportCertificateArguments.Set_newPrivateKeyPassword(const pRetVal: WideString);
begin
  DefaultInterface.newPrivateKeyPassword := pRetVal;
end;

function TUAExportCertificateArguments.Get_PkiFileFormat: PkiFileFormat;
begin
  Result := DefaultInterface.PkiFileFormat;
end;

procedure TUAExportCertificateArguments.Set_PkiFileFormat(pRetVal: PkiFileFormat);
begin
  DefaultInterface.PkiFileFormat := pRetVal;
end;

function TUAExportCertificateArguments.Get_WithPrivateKey: WordBool;
begin
  Result := DefaultInterface.WithPrivateKey;
end;

procedure TUAExportCertificateArguments.Set_WithPrivateKey(pRetVal: WordBool);
begin
  DefaultInterface.WithPrivateKey := pRetVal;
end;

function TUAExportCertificateArguments.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAExportCertificateArguments.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAExportCertificateArguments.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAExportCertificateArguments.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUAExportCertificateArguments.MemberwiseClone: _OperationArguments;
begin
  Result := DefaultInterface.MemberwiseClone;
end;

procedure TUAExportCertificateArguments.SetState(State: OleVariant);
begin
  DefaultInterface.SetState(State);
end;

class function CoUAImportCertificateArguments.Create: _UAImportCertificateArguments;
begin
  Result := CreateComObject(CLASS_UAImportCertificateArguments) as _UAImportCertificateArguments;
end;

class function CoUAImportCertificateArguments.CreateRemote(const MachineName: string): _UAImportCertificateArguments;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAImportCertificateArguments) as _UAImportCertificateArguments;
end;

procedure TUAImportCertificateArguments.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{F5C4C103-18D6-4D1A-B179-CD33C99679BA}';
    IntfIID:   '{CBD68FFD-F371-4719-9C6B-52D280FFD8CC}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAImportCertificateArguments.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAImportCertificateArguments;
  end;
end;

procedure TUAImportCertificateArguments.ConnectTo(svrIntf: _UAImportCertificateArguments);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAImportCertificateArguments.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAImportCertificateArguments.GetDefaultInterface: _UAImportCertificateArguments;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAImportCertificateArguments.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAImportCertificateArguments.Destroy;
begin
  inherited Destroy;
end;

function TUAImportCertificateArguments.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAImportCertificateArguments.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAImportCertificateArguments.Get_State: OleVariant;
begin
  Result := DefaultInterface.State;
end;

procedure TUAImportCertificateArguments._Set_State(pRetVal: OleVariant);
begin
  DefaultInterface.State := pRetVal;
end;

function TUAImportCertificateArguments.Get_certificateSubId: WideString;
begin
  Result := DefaultInterface.certificateSubId;
end;

procedure TUAImportCertificateArguments.Set_certificateSubId(const pRetVal: WideString);
begin
  DefaultInterface.certificateSubId := pRetVal;
end;

function TUAImportCertificateArguments.Get_newPrivateKeyPassword: WideString;
begin
  Result := DefaultInterface.newPrivateKeyPassword;
end;

procedure TUAImportCertificateArguments.Set_newPrivateKeyPassword(const pRetVal: WideString);
begin
  DefaultInterface.newPrivateKeyPassword := pRetVal;
end;

function TUAImportCertificateArguments.Get_SetNewPassword: WordBool;
begin
  Result := DefaultInterface.SetNewPassword;
end;

procedure TUAImportCertificateArguments.Set_SetNewPassword(pRetVal: WordBool);
begin
  DefaultInterface.SetNewPassword := pRetVal;
end;

function TUAImportCertificateArguments.Get_updateTrustedPeerCertificates: WordBool;
begin
  Result := DefaultInterface.updateTrustedPeerCertificates;
end;

procedure TUAImportCertificateArguments.Set_updateTrustedPeerCertificates(pRetVal: WordBool);
begin
  DefaultInterface.updateTrustedPeerCertificates := pRetVal;
end;

function TUAImportCertificateArguments.Get_filePath: WideString;
begin
  Result := DefaultInterface.filePath;
end;

procedure TUAImportCertificateArguments.Set_filePath(const pRetVal: WideString);
begin
  DefaultInterface.filePath := pRetVal;
end;

function TUAImportCertificateArguments.Get_OldPrivateKeyPassword: WideString;
begin
  Result := DefaultInterface.OldPrivateKeyPassword;
end;

procedure TUAImportCertificateArguments.Set_OldPrivateKeyPassword(const pRetVal: WideString);
begin
  DefaultInterface.OldPrivateKeyPassword := pRetVal;
end;

function TUAImportCertificateArguments.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAImportCertificateArguments.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAImportCertificateArguments.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAImportCertificateArguments.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUAImportCertificateArguments.MemberwiseClone: _OperationArguments;
begin
  Result := DefaultInterface.MemberwiseClone;
end;

procedure TUAImportCertificateArguments.SetState(State: OleVariant);
begin
  DefaultInterface.SetState(State);
end;

class function CoUAObtainCertificateArguments.Create: _UAObtainCertificateArguments;
begin
  Result := CreateComObject(CLASS_UAObtainCertificateArguments) as _UAObtainCertificateArguments;
end;

class function CoUAObtainCertificateArguments.CreateRemote(const MachineName: string): _UAObtainCertificateArguments;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAObtainCertificateArguments) as _UAObtainCertificateArguments;
end;

procedure TUAObtainCertificateArguments.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{A560BF3C-4DC8-434E-9510-9100B9A24E94}';
    IntfIID:   '{DED308CF-6087-4FA9-ABE7-4884279C1576}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAObtainCertificateArguments.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAObtainCertificateArguments;
  end;
end;

procedure TUAObtainCertificateArguments.ConnectTo(svrIntf: _UAObtainCertificateArguments);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAObtainCertificateArguments.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAObtainCertificateArguments.GetDefaultInterface: _UAObtainCertificateArguments;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAObtainCertificateArguments.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAObtainCertificateArguments.Destroy;
begin
  inherited Destroy;
end;

function TUAObtainCertificateArguments.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAObtainCertificateArguments.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAObtainCertificateArguments.Get_State: OleVariant;
begin
  Result := DefaultInterface.State;
end;

procedure TUAObtainCertificateArguments._Set_State(pRetVal: OleVariant);
begin
  DefaultInterface.State := pRetVal;
end;

function TUAObtainCertificateArguments.Get_certificateSubId: WideString;
begin
  Result := DefaultInterface.certificateSubId;
end;

procedure TUAObtainCertificateArguments.Set_certificateSubId(const pRetVal: WideString);
begin
  DefaultInterface.certificateSubId := pRetVal;
end;

function TUAObtainCertificateArguments.Get_newPrivateKeyPassword: WideString;
begin
  Result := DefaultInterface.newPrivateKeyPassword;
end;

procedure TUAObtainCertificateArguments.Set_newPrivateKeyPassword(const pRetVal: WideString);
begin
  DefaultInterface.newPrivateKeyPassword := pRetVal;
end;

function TUAObtainCertificateArguments.Get_SetNewPassword: WordBool;
begin
  Result := DefaultInterface.SetNewPassword;
end;

procedure TUAObtainCertificateArguments.Set_SetNewPassword(pRetVal: WordBool);
begin
  DefaultInterface.SetNewPassword := pRetVal;
end;

function TUAObtainCertificateArguments.Get_updateTrustedPeerCertificates: WordBool;
begin
  Result := DefaultInterface.updateTrustedPeerCertificates;
end;

procedure TUAObtainCertificateArguments.Set_updateTrustedPeerCertificates(pRetVal: WordBool);
begin
  DefaultInterface.updateTrustedPeerCertificates := pRetVal;
end;

function TUAObtainCertificateArguments.Get_HostNames: _StringCollection;
begin
  Result := DefaultInterface.HostNames;
end;

procedure TUAObtainCertificateArguments._Set_HostNames(const pRetVal: _StringCollection);
begin
  DefaultInterface.HostNames := pRetVal;
end;

function TUAObtainCertificateArguments.Get_HostNamesString: WideString;
begin
  Result := DefaultInterface.HostNamesString;
end;

procedure TUAObtainCertificateArguments.Set_HostNamesString(const pRetVal: WideString);
begin
  DefaultInterface.HostNamesString := pRetVal;
end;

function TUAObtainCertificateArguments.Get_Parameters: _UACertificateRequestParameters;
begin
  Result := DefaultInterface.Parameters;
end;

procedure TUAObtainCertificateArguments._Set_Parameters(const pRetVal: _UACertificateRequestParameters);
begin
  DefaultInterface.Parameters := pRetVal;
end;

function TUAObtainCertificateArguments.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAObtainCertificateArguments.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAObtainCertificateArguments.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAObtainCertificateArguments.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUAObtainCertificateArguments.MemberwiseClone: _OperationArguments;
begin
  Result := DefaultInterface.MemberwiseClone;
end;

procedure TUAObtainCertificateArguments.SetState(State: OleVariant);
begin
  DefaultInterface.SetState(State);
end;

class function CoUACreateCertificateArguments.Create: _UACreateCertificateArguments;
begin
  Result := CreateComObject(CLASS_UACreateCertificateArguments) as _UACreateCertificateArguments;
end;

class function CoUACreateCertificateArguments.CreateRemote(const MachineName: string): _UACreateCertificateArguments;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UACreateCertificateArguments) as _UACreateCertificateArguments;
end;

procedure TUACreateCertificateArguments.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{6734FCE5-BF4E-47D3-8A06-823DE9F1EDE0}';
    IntfIID:   '{51F1EA7A-6F62-4756-A3CD-3183D0DE84B3}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUACreateCertificateArguments.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UACreateCertificateArguments;
  end;
end;

procedure TUACreateCertificateArguments.ConnectTo(svrIntf: _UACreateCertificateArguments);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUACreateCertificateArguments.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUACreateCertificateArguments.GetDefaultInterface: _UACreateCertificateArguments;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUACreateCertificateArguments.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUACreateCertificateArguments.Destroy;
begin
  inherited Destroy;
end;

function TUACreateCertificateArguments.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUACreateCertificateArguments.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUACreateCertificateArguments.Get_State: OleVariant;
begin
  Result := DefaultInterface.State;
end;

procedure TUACreateCertificateArguments._Set_State(pRetVal: OleVariant);
begin
  DefaultInterface.State := pRetVal;
end;

function TUACreateCertificateArguments.Get_certificateSubId: WideString;
begin
  Result := DefaultInterface.certificateSubId;
end;

procedure TUACreateCertificateArguments.Set_certificateSubId(const pRetVal: WideString);
begin
  DefaultInterface.certificateSubId := pRetVal;
end;

function TUACreateCertificateArguments.Get_Parameters: _CertificateGenerationParameters;
begin
  Result := DefaultInterface.Parameters;
end;

procedure TUACreateCertificateArguments._Set_Parameters(const pRetVal: _CertificateGenerationParameters);
begin
  DefaultInterface.Parameters := pRetVal;
end;

function TUACreateCertificateArguments.Get_updateTrustedPeerCertificates: WordBool;
begin
  Result := DefaultInterface.updateTrustedPeerCertificates;
end;

procedure TUACreateCertificateArguments.Set_updateTrustedPeerCertificates(pRetVal: WordBool);
begin
  DefaultInterface.updateTrustedPeerCertificates := pRetVal;
end;

function TUACreateCertificateArguments.Get_HostNames: _StringCollection;
begin
  Result := DefaultInterface.HostNames;
end;

procedure TUACreateCertificateArguments._Set_HostNames(const pRetVal: _StringCollection);
begin
  DefaultInterface.HostNames := pRetVal;
end;

function TUACreateCertificateArguments.Get_HostNamesString: WideString;
begin
  Result := DefaultInterface.HostNamesString;
end;

procedure TUACreateCertificateArguments.Set_HostNamesString(const pRetVal: WideString);
begin
  DefaultInterface.HostNamesString := pRetVal;
end;

function TUACreateCertificateArguments.Get_MustNotExist: WordBool;
begin
  Result := DefaultInterface.MustNotExist;
end;

procedure TUACreateCertificateArguments.Set_MustNotExist(pRetVal: WordBool);
begin
  DefaultInterface.MustNotExist := pRetVal;
end;

function TUACreateCertificateArguments.Get_newPrivateKeyPassword: WideString;
begin
  Result := DefaultInterface.newPrivateKeyPassword;
end;

procedure TUACreateCertificateArguments.Set_newPrivateKeyPassword(const pRetVal: WideString);
begin
  DefaultInterface.newPrivateKeyPassword := pRetVal;
end;

function TUACreateCertificateArguments.Get_SetNewPassword: WordBool;
begin
  Result := DefaultInterface.SetNewPassword;
end;

procedure TUACreateCertificateArguments.Set_SetNewPassword(pRetVal: WordBool);
begin
  DefaultInterface.SetNewPassword := pRetVal;
end;

function TUACreateCertificateArguments.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUACreateCertificateArguments.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUACreateCertificateArguments.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUACreateCertificateArguments.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUACreateCertificateArguments.MemberwiseClone: _OperationArguments;
begin
  Result := DefaultInterface.MemberwiseClone;
end;

procedure TUACreateCertificateArguments.SetState(State: OleVariant);
begin
  DefaultInterface.SetState(State);
end;

class function CoUABaseEventObject.Create: _UABaseEventObject;
begin
  Result := CreateComObject(CLASS_UABaseEventObject) as _UABaseEventObject;
end;

class function CoUABaseEventObject.CreateRemote(const MachineName: string): _UABaseEventObject;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UABaseEventObject) as _UABaseEventObject;
end;

procedure TUABaseEventObject.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{ED33148F-DC26-4229-AF4C-41EA46A27831}';
    IntfIID:   '{58D1F42B-5E0F-43F9-9A4F-CDEE95DC922F}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUABaseEventObject.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UABaseEventObject;
  end;
end;

procedure TUABaseEventObject.ConnectTo(svrIntf: _UABaseEventObject);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUABaseEventObject.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUABaseEventObject.GetDefaultInterface: _UABaseEventObject;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUABaseEventObject.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUABaseEventObject.Destroy;
begin
  inherited Destroy;
end;

function TUABaseEventObject.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUABaseEventObject.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUABaseEventObject.Get_eventId: PSafeArray;
begin
  Result := DefaultInterface.eventId;
end;

function TUABaseEventObject.Get_EventType: _UANodeId;
begin
  Result := DefaultInterface.EventType;
end;

function TUABaseEventObject.Get_LocalTime: _UATimeZoneData;
begin
  Result := DefaultInterface.LocalTime;
end;

function TUABaseEventObject.Get_Message: WideString;
begin
  Result := DefaultInterface.Message;
end;

function TUABaseEventObject.Get_NodeId: _UANodeId;
begin
  Result := DefaultInterface.NodeId;
end;

function TUABaseEventObject.Get_ReceiveTime: TDateTime;
begin
  Result := DefaultInterface.ReceiveTime;
end;

function TUABaseEventObject.Get_ReceiveTimeDouble: Double;
begin
  Result := DefaultInterface.ReceiveTimeDouble;
end;

function TUABaseEventObject.Get_Severity: Integer;
begin
  Result := DefaultInterface.Severity;
end;

function TUABaseEventObject.Get_SourceName: WideString;
begin
  Result := DefaultInterface.SourceName;
end;

function TUABaseEventObject.Get_SourceNode: _UANodeId;
begin
  Result := DefaultInterface.SourceNode;
end;

function TUABaseEventObject.Get_Time: TDateTime;
begin
  Result := DefaultInterface.Time;
end;

function TUABaseEventObject.Get_TimeDouble: Double;
begin
  Result := DefaultInterface.TimeDouble;
end;

function TUABaseEventObject.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUABaseEventObject.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUABaseEventObject.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUABaseEventObject.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUAApplicationManifest.Create: _UAApplicationManifest;
begin
  Result := CreateComObject(CLASS_UAApplicationManifest) as _UAApplicationManifest;
end;

class function CoUAApplicationManifest.CreateRemote(const MachineName: string): _UAApplicationManifest;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAApplicationManifest) as _UAApplicationManifest;
end;

procedure TUAApplicationManifest.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{BBCB996F-93D7-49BB-B595-7430D42B570B}';
    IntfIID:   '{2C6D6170-BDF2-4932-BDBF-B82E8E8CC6B6}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAApplicationManifest.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAApplicationManifest;
  end;
end;

procedure TUAApplicationManifest.ConnectTo(svrIntf: _UAApplicationManifest);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAApplicationManifest.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAApplicationManifest.GetDefaultInterface: _UAApplicationManifest;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAApplicationManifest.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAApplicationManifest.Destroy;
begin
  inherited Destroy;
end;

function TUAApplicationManifest.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAApplicationManifest.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAApplicationManifest.Get_applicationName: WideString;
begin
  Result := DefaultInterface.applicationName;
end;

procedure TUAApplicationManifest.Set_applicationName(const pRetVal: WideString);
begin
  DefaultInterface.applicationName := pRetVal;
end;

function TUAApplicationManifest.Get_ApplicationType: UAApplicationTypes;
begin
  Result := DefaultInterface.ApplicationType;
end;

procedure TUAApplicationManifest.Set_ApplicationType(pRetVal: UAApplicationTypes);
begin
  DefaultInterface.ApplicationType := pRetVal;
end;

function TUAApplicationManifest.Get_applicationUriString: WideString;
begin
  Result := DefaultInterface.applicationUriString;
end;

procedure TUAApplicationManifest.Set_applicationUriString(const pRetVal: WideString);
begin
  DefaultInterface.applicationUriString := pRetVal;
end;

function TUAApplicationManifest.Get_DiscoveryUriString: WideString;
begin
  Result := DefaultInterface.DiscoveryUriString;
end;

procedure TUAApplicationManifest.Set_DiscoveryUriString(const pRetVal: WideString);
begin
  DefaultInterface.DiscoveryUriString := pRetVal;
end;

function TUAApplicationManifest.Get_DiscoveryUriStrings: _StringCollection;
begin
  Result := DefaultInterface.DiscoveryUriStrings;
end;

procedure TUAApplicationManifest._Set_DiscoveryUriStrings(const pRetVal: _StringCollection);
begin
  DefaultInterface.DiscoveryUriStrings := pRetVal;
end;

function TUAApplicationManifest.Get_productUriString: WideString;
begin
  Result := DefaultInterface.productUriString;
end;

procedure TUAApplicationManifest.Set_productUriString(const pRetVal: WideString);
begin
  DefaultInterface.productUriString := pRetVal;
end;

function TUAApplicationManifest.Get_serverCapabilities: _StringCollection;
begin
  Result := DefaultInterface.serverCapabilities;
end;

procedure TUAApplicationManifest._Set_serverCapabilities(const pRetVal: _StringCollection);
begin
  DefaultInterface.serverCapabilities := pRetVal;
end;

function TUAApplicationManifest.Get_ServerCapabilitySet: _StringSet;
begin
  Result := DefaultInterface.ServerCapabilitySet;
end;

function TUAApplicationManifest.Get_CountryName: WideString;
begin
  Result := DefaultInterface.CountryName;
end;

procedure TUAApplicationManifest.Set_CountryName(const pRetVal: WideString);
begin
  DefaultInterface.CountryName := pRetVal;
end;

function TUAApplicationManifest.Get_HttpsIssuerStorePath: WideString;
begin
  Result := DefaultInterface.HttpsIssuerStorePath;
end;

procedure TUAApplicationManifest.Set_HttpsIssuerStorePath(const pRetVal: WideString);
begin
  DefaultInterface.HttpsIssuerStorePath := pRetVal;
end;

function TUAApplicationManifest.Get_HttpsTrustedStorePath: WideString;
begin
  Result := DefaultInterface.HttpsTrustedStorePath;
end;

procedure TUAApplicationManifest.Set_HttpsTrustedStorePath(const pRetVal: WideString);
begin
  DefaultInterface.HttpsTrustedStorePath := pRetVal;
end;

function TUAApplicationManifest.Get_InstanceCertificateSubject: WideString;
begin
  Result := DefaultInterface.InstanceCertificateSubject;
end;

procedure TUAApplicationManifest.Set_InstanceCertificateSubject(const pRetVal: WideString);
begin
  DefaultInterface.InstanceCertificateSubject := pRetVal;
end;

function TUAApplicationManifest.Get_InstanceIssuerStorePath: WideString;
begin
  Result := DefaultInterface.InstanceIssuerStorePath;
end;

procedure TUAApplicationManifest.Set_InstanceIssuerStorePath(const pRetVal: WideString);
begin
  DefaultInterface.InstanceIssuerStorePath := pRetVal;
end;

function TUAApplicationManifest.Get_InstanceOwnStorePath: WideString;
begin
  Result := DefaultInterface.InstanceOwnStorePath;
end;

procedure TUAApplicationManifest.Set_InstanceOwnStorePath(const pRetVal: WideString);
begin
  DefaultInterface.InstanceOwnStorePath := pRetVal;
end;

function TUAApplicationManifest.Get_InstanceTrustedStorePath: WideString;
begin
  Result := DefaultInterface.InstanceTrustedStorePath;
end;

procedure TUAApplicationManifest.Set_InstanceTrustedStorePath(const pRetVal: WideString);
begin
  DefaultInterface.InstanceTrustedStorePath := pRetVal;
end;

function TUAApplicationManifest.Get_LocalityName: WideString;
begin
  Result := DefaultInterface.LocalityName;
end;

procedure TUAApplicationManifest.Set_LocalityName(const pRetVal: WideString);
begin
  DefaultInterface.LocalityName := pRetVal;
end;

function TUAApplicationManifest.Get_OrganizationName: WideString;
begin
  Result := DefaultInterface.OrganizationName;
end;

procedure TUAApplicationManifest.Set_OrganizationName(const pRetVal: WideString);
begin
  DefaultInterface.OrganizationName := pRetVal;
end;

function TUAApplicationManifest.Get_OrganizationalUnitName: WideString;
begin
  Result := DefaultInterface.OrganizationalUnitName;
end;

procedure TUAApplicationManifest.Set_OrganizationalUnitName(const pRetVal: WideString);
begin
  DefaultInterface.OrganizationalUnitName := pRetVal;
end;

function TUAApplicationManifest.Get_RejectedStorePath: WideString;
begin
  Result := DefaultInterface.RejectedStorePath;
end;

procedure TUAApplicationManifest.Set_RejectedStorePath(const pRetVal: WideString);
begin
  DefaultInterface.RejectedStorePath := pRetVal;
end;

function TUAApplicationManifest.Get_StateOrProvinceName: WideString;
begin
  Result := DefaultInterface.StateOrProvinceName;
end;

procedure TUAApplicationManifest.Set_StateOrProvinceName(const pRetVal: WideString);
begin
  DefaultInterface.StateOrProvinceName := pRetVal;
end;

function TUAApplicationManifest.Get_UserIssuerStorePath: WideString;
begin
  Result := DefaultInterface.UserIssuerStorePath;
end;

procedure TUAApplicationManifest.Set_UserIssuerStorePath(const pRetVal: WideString);
begin
  DefaultInterface.UserIssuerStorePath := pRetVal;
end;

function TUAApplicationManifest.Get_UserTrustedStorePath: WideString;
begin
  Result := DefaultInterface.UserTrustedStorePath;
end;

procedure TUAApplicationManifest.Set_UserTrustedStorePath(const pRetVal: WideString);
begin
  DefaultInterface.UserTrustedStorePath := pRetVal;
end;

function TUAApplicationManifest.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAApplicationManifest.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAApplicationManifest.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAApplicationManifest.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUAApplicationManifest.ToUAEndpointDescriptor: _UAEndpointDescriptor;
begin
  Result := DefaultInterface.ToUAEndpointDescriptor;
end;

class function CoUANodeIdFormatException.Create: _UANodeIdFormatException;
begin
  Result := CreateComObject(CLASS_UANodeIdFormatException) as _UANodeIdFormatException;
end;

class function CoUANodeIdFormatException.CreateRemote(const MachineName: string): _UANodeIdFormatException;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UANodeIdFormatException) as _UANodeIdFormatException;
end;

procedure TUANodeIdFormatException.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{7AFA22BC-070F-4266-B286-3D910F91F5FC}';
    IntfIID:   '{44629368-6947-4DF4-A2AC-B6B4D1D69117}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUANodeIdFormatException.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UANodeIdFormatException;
  end;
end;

procedure TUANodeIdFormatException.ConnectTo(svrIntf: _UANodeIdFormatException);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUANodeIdFormatException.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUANodeIdFormatException.GetDefaultInterface: _UANodeIdFormatException;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUANodeIdFormatException.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUANodeIdFormatException.Destroy;
begin
  inherited Destroy;
end;

function TUANodeIdFormatException.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUANodeIdFormatException.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUANodeIdFormatException.Get_Message: WideString;
begin
  Result := DefaultInterface.Message;
end;

function TUANodeIdFormatException.Get_StackTrace: WideString;
begin
  Result := DefaultInterface.StackTrace;
end;

function TUANodeIdFormatException.Get_HelpLink: WideString;
begin
  Result := DefaultInterface.HelpLink;
end;

procedure TUANodeIdFormatException.Set_HelpLink(const pRetVal: WideString);
begin
  DefaultInterface.HelpLink := pRetVal;
end;

function TUANodeIdFormatException.Get_Source: WideString;
begin
  Result := DefaultInterface.Source;
end;

procedure TUANodeIdFormatException.Set_Source(const pRetVal: WideString);
begin
  DefaultInterface.Source := pRetVal;
end;

function TUANodeIdFormatException.Get_InnerException: _Exception;
begin
  Result := DefaultInterface.InnerException;
end;

function TUANodeIdFormatException.Get_TargetSite: _MethodBase;
begin
  Result := DefaultInterface.TargetSite;
end;

function TUANodeIdFormatException.Get_Data: _Dictionary;
begin
  Result := DefaultInterface.Data;
end;

function TUANodeIdFormatException.Get_HResult: Integer;
begin
  Result := DefaultInterface.HResult;
end;

function TUANodeIdFormatException.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUANodeIdFormatException.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUANodeIdFormatException.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUANodeIdFormatException.GetBaseException: _Exception;
begin
  Result := DefaultInterface.GetBaseException;
end;

procedure TUANodeIdFormatException.GetObjectData(const info: _SerializationInfo; 
                                                 context: StreamingContext);
begin
  DefaultInterface.GetObjectData(info, context);
end;

class function CoUANodeIdParser.Create: _UANodeIdParser;
begin
  Result := CreateComObject(CLASS_UANodeIdParser) as _UANodeIdParser;
end;

class function CoUANodeIdParser.CreateRemote(const MachineName: string): _UANodeIdParser;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UANodeIdParser) as _UANodeIdParser;
end;

procedure TUANodeIdParser.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{AB36C612-6FCE-4013-8F3F-59BE26DC387C}';
    IntfIID:   '{4A66442A-68A8-4FCD-BB63-F4DA1BC8CE2A}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUANodeIdParser.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UANodeIdParser;
  end;
end;

procedure TUANodeIdParser.ConnectTo(svrIntf: _UANodeIdParser);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUANodeIdParser.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUANodeIdParser.GetDefaultInterface: _UANodeIdParser;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUANodeIdParser.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUANodeIdParser.Destroy;
begin
  inherited Destroy;
end;

function TUANodeIdParser.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUANodeIdParser.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUANodeIdParser.Get_DefaultNamespaceUriString: WideString;
begin
  Result := DefaultInterface.DefaultNamespaceUriString;
end;

procedure TUANodeIdParser.Set_DefaultNamespaceUriString(const pRetVal: WideString);
begin
  DefaultInterface.DefaultNamespaceUriString := pRetVal;
end;

function TUANodeIdParser.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUANodeIdParser.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUANodeIdParser.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUANodeIdParser.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUANodeIdParser.Parse(const s: WideString; requireNamespace: WordBool): _UANodeId;
begin
  Result := DefaultInterface.Parse(s, requireNamespace);
end;

function TUANodeIdParser.TryParse(const s: WideString; requireNamespace: WordBool; 
                                  out NodeId: OleVariant): _StringParsingError;
begin
  Result := DefaultInterface.TryParse(s, requireNamespace, NodeId);
end;

class function CoUAQualifiedNameFormatException.Create: _UAQualifiedNameFormatException;
begin
  Result := CreateComObject(CLASS_UAQualifiedNameFormatException) as _UAQualifiedNameFormatException;
end;

class function CoUAQualifiedNameFormatException.CreateRemote(const MachineName: string): _UAQualifiedNameFormatException;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAQualifiedNameFormatException) as _UAQualifiedNameFormatException;
end;

procedure TUAQualifiedNameFormatException.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{C163F819-B1EC-4C88-AF6D-58CF89BD75CA}';
    IntfIID:   '{1A3F1A78-2F42-4BD7-924F-55771EFB5E57}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAQualifiedNameFormatException.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAQualifiedNameFormatException;
  end;
end;

procedure TUAQualifiedNameFormatException.ConnectTo(svrIntf: _UAQualifiedNameFormatException);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAQualifiedNameFormatException.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAQualifiedNameFormatException.GetDefaultInterface: _UAQualifiedNameFormatException;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAQualifiedNameFormatException.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAQualifiedNameFormatException.Destroy;
begin
  inherited Destroy;
end;

function TUAQualifiedNameFormatException.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAQualifiedNameFormatException.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAQualifiedNameFormatException.Get_Message: WideString;
begin
  Result := DefaultInterface.Message;
end;

function TUAQualifiedNameFormatException.Get_StackTrace: WideString;
begin
  Result := DefaultInterface.StackTrace;
end;

function TUAQualifiedNameFormatException.Get_HelpLink: WideString;
begin
  Result := DefaultInterface.HelpLink;
end;

procedure TUAQualifiedNameFormatException.Set_HelpLink(const pRetVal: WideString);
begin
  DefaultInterface.HelpLink := pRetVal;
end;

function TUAQualifiedNameFormatException.Get_Source: WideString;
begin
  Result := DefaultInterface.Source;
end;

procedure TUAQualifiedNameFormatException.Set_Source(const pRetVal: WideString);
begin
  DefaultInterface.Source := pRetVal;
end;

function TUAQualifiedNameFormatException.Get_InnerException: _Exception;
begin
  Result := DefaultInterface.InnerException;
end;

function TUAQualifiedNameFormatException.Get_TargetSite: _MethodBase;
begin
  Result := DefaultInterface.TargetSite;
end;

function TUAQualifiedNameFormatException.Get_Data: _Dictionary;
begin
  Result := DefaultInterface.Data;
end;

function TUAQualifiedNameFormatException.Get_HResult: Integer;
begin
  Result := DefaultInterface.HResult;
end;

function TUAQualifiedNameFormatException.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAQualifiedNameFormatException.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAQualifiedNameFormatException.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAQualifiedNameFormatException.GetBaseException: _Exception;
begin
  Result := DefaultInterface.GetBaseException;
end;

procedure TUAQualifiedNameFormatException.GetObjectData(const info: _SerializationInfo; 
                                                        context: StreamingContext);
begin
  DefaultInterface.GetObjectData(info, context);
end;

class function CoUAQualifiedNameParser.Create: _UAQualifiedNameParser;
begin
  Result := CreateComObject(CLASS_UAQualifiedNameParser) as _UAQualifiedNameParser;
end;

class function CoUAQualifiedNameParser.CreateRemote(const MachineName: string): _UAQualifiedNameParser;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAQualifiedNameParser) as _UAQualifiedNameParser;
end;

procedure TUAQualifiedNameParser.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{5C8C6E25-2D58-41E2-9E05-C0D6568AB138}';
    IntfIID:   '{17B3E4AF-76E9-440D-8B76-117E574F0574}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAQualifiedNameParser.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAQualifiedNameParser;
  end;
end;

procedure TUAQualifiedNameParser.ConnectTo(svrIntf: _UAQualifiedNameParser);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAQualifiedNameParser.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAQualifiedNameParser.GetDefaultInterface: _UAQualifiedNameParser;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAQualifiedNameParser.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAQualifiedNameParser.Destroy;
begin
  inherited Destroy;
end;

function TUAQualifiedNameParser.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAQualifiedNameParser.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAQualifiedNameParser.Get_DefaultNamespaceUriString: WideString;
begin
  Result := DefaultInterface.DefaultNamespaceUriString;
end;

procedure TUAQualifiedNameParser.Set_DefaultNamespaceUriString(const pRetVal: WideString);
begin
  DefaultInterface.DefaultNamespaceUriString := pRetVal;
end;

function TUAQualifiedNameParser.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAQualifiedNameParser.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAQualifiedNameParser.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAQualifiedNameParser.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUAQualifiedNameParser.Parse(const expandedText: WideString): _UAQualifiedName;
begin
  Result := DefaultInterface.Parse(expandedText);
end;

function TUAQualifiedNameParser.TryParse(const s: WideString; out qualifiedName: OleVariant): _StringParsingError;
begin
  Result := DefaultInterface.TryParse(s, qualifiedName);
end;

class function CoUANodeElement.Create: _UANodeElement;
begin
  Result := CreateComObject(CLASS_UANodeElement) as _UANodeElement;
end;

class function CoUANodeElement.CreateRemote(const MachineName: string): _UANodeElement;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UANodeElement) as _UANodeElement;
end;

procedure TUANodeElement.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{EF28FB7A-CF19-4288-ACC3-5A87085D7ECC}';
    IntfIID:   '{6D3A4DCC-A15C-43B6-9472-3BF8339144E9}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUANodeElement.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UANodeElement;
  end;
end;

procedure TUANodeElement.ConnectTo(svrIntf: _UANodeElement);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUANodeElement.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUANodeElement.GetDefaultInterface: _UANodeElement;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUANodeElement.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUANodeElement.Destroy;
begin
  inherited Destroy;
end;

function TUANodeElement.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUANodeElement.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUANodeElement.Get_BrowseName: _UAQualifiedName;
begin
  Result := DefaultInterface.BrowseName;
end;

procedure TUANodeElement._Set_BrowseName(const pRetVal: _UAQualifiedName);
begin
  DefaultInterface.BrowseName := pRetVal;
end;

function TUANodeElement.Get_browsePath: _UABrowsePath;
begin
  Result := DefaultInterface.browsePath;
end;

procedure TUANodeElement._Set_browsePath(const pRetVal: _UABrowsePath);
begin
  DefaultInterface.browsePath := pRetVal;
end;

function TUANodeElement.Get_NodeId: _UANodeId;
begin
  Result := DefaultInterface.NodeId;
end;

procedure TUANodeElement._Set_NodeId(const pRetVal: _UANodeId);
begin
  DefaultInterface.NodeId := pRetVal;
end;

function TUANodeElement.Get_IsForward: WordBool;
begin
  Result := DefaultInterface.IsForward;
end;

procedure TUANodeElement.Set_IsForward(pRetVal: WordBool);
begin
  DefaultInterface.IsForward := pRetVal;
end;

function TUANodeElement.Get_DisplayName: WideString;
begin
  Result := DefaultInterface.DisplayName;
end;

procedure TUANodeElement.Set_DisplayName(const pRetVal: WideString);
begin
  DefaultInterface.DisplayName := pRetVal;
end;

function TUANodeElement.Get_NodeClass: UANodeClass;
begin
  Result := DefaultInterface.NodeClass;
end;

procedure TUANodeElement.Set_NodeClass(pRetVal: UANodeClass);
begin
  DefaultInterface.NodeClass := pRetVal;
end;

function TUANodeElement.Get_ReferenceTypeId: _UANodeId;
begin
  Result := DefaultInterface.ReferenceTypeId;
end;

procedure TUANodeElement._Set_ReferenceTypeId(const pRetVal: _UANodeId);
begin
  DefaultInterface.ReferenceTypeId := pRetVal;
end;

function TUANodeElement.Get_TypeDefinition: _UANodeId;
begin
  Result := DefaultInterface.TypeDefinition;
end;

procedure TUANodeElement._Set_TypeDefinition(const pRetVal: _UANodeId);
begin
  DefaultInterface.TypeDefinition := pRetVal;
end;

function TUANodeElement.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUANodeElement.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUANodeElement.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUANodeElement.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUANodeElement.ToUANodeDescriptor: _UANodeDescriptor;
begin
  Result := DefaultInterface.ToUANodeDescriptor;
end;

class function CoUANodeElementCollection.Create: _UANodeElementCollection;
begin
  Result := CreateComObject(CLASS_UANodeElementCollection) as _UANodeElementCollection;
end;

class function CoUANodeElementCollection.CreateRemote(const MachineName: string): _UANodeElementCollection;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UANodeElementCollection) as _UANodeElementCollection;
end;

procedure TUANodeElementCollection.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{F10BE69C-6077-4A5C-A76E-EBD079098D6F}';
    IntfIID:   '{F0541F57-231E-4A80-83A2-23DA5BF73140}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUANodeElementCollection.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UANodeElementCollection;
  end;
end;

procedure TUANodeElementCollection.ConnectTo(svrIntf: _UANodeElementCollection);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUANodeElementCollection.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUANodeElementCollection.GetDefaultInterface: _UANodeElementCollection;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUANodeElementCollection.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUANodeElementCollection.Destroy;
begin
  inherited Destroy;
end;

function TUANodeElementCollection.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUANodeElementCollection.Get_Item(index: Integer): _UANodeElement;
begin
  Result := DefaultInterface.Item[index];
end;

procedure TUANodeElementCollection._Set_Item(index: Integer; const pRetVal: _UANodeElement);
begin
  DefaultInterface.Item[index] := pRetVal;
end;

function TUANodeElementCollection.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

function TUANodeElementCollection.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUANodeElementCollection.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUANodeElementCollection.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUANodeElementCollection.GetEnumerator: IEnumVARIANT;
begin
  Result := DefaultInterface.GetEnumerator;
end;

procedure TUANodeElementCollection.Add(Item: OleVariant);
begin
  DefaultInterface.Add(Item);
end;

procedure TUANodeElementCollection.Clear;
begin
  DefaultInterface.Clear;
end;

function TUANodeElementCollection.Contains(Item: OleVariant): WordBool;
begin
  Result := DefaultInterface.Contains(Item);
end;

function TUANodeElementCollection.IndexOf(Item: OleVariant): Integer;
begin
  Result := DefaultInterface.IndexOf(Item);
end;

procedure TUANodeElementCollection.Insert(index: Integer; Item: OleVariant);
begin
  DefaultInterface.Insert(index, Item);
end;

function TUANodeElementCollection.Remove(Item: OleVariant): WordBool;
begin
  Result := DefaultInterface.Remove(Item);
end;

procedure TUANodeElementCollection.RemoveAt(index: Integer);
begin
  DefaultInterface.RemoveAt(index);
end;

function TUANodeElementCollection.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

class function CoUANodeId.Create: _UANodeId;
begin
  Result := CreateComObject(CLASS_UANodeId) as _UANodeId;
end;

class function CoUANodeId.CreateRemote(const MachineName: string): _UANodeId;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UANodeId) as _UANodeId;
end;

procedure TUANodeId.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{6764BAF9-CA48-42E5-8485-09321CD6A01C}';
    IntfIID:   '{888C25BD-F172-47AC-81C6-4451F084C995}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUANodeId.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UANodeId;
  end;
end;

procedure TUANodeId.ConnectTo(svrIntf: _UANodeId);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUANodeId.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUANodeId.GetDefaultInterface: _UANodeId;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUANodeId.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUANodeId.Destroy;
begin
  inherited Destroy;
end;

function TUANodeId.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUANodeId.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUANodeId.Get_IsStandard: WordBool;
begin
  Result := DefaultInterface.IsStandard;
end;

function TUANodeId.Get_NamespaceIndex: Integer;
begin
  Result := DefaultInterface.NamespaceIndex;
end;

procedure TUANodeId.Set_NamespaceIndex(pRetVal: Integer);
begin
  DefaultInterface.NamespaceIndex := pRetVal;
end;

function TUANodeId.Get_NamespaceUriString: WideString;
begin
  Result := DefaultInterface.NamespaceUriString;
end;

procedure TUANodeId.Set_NamespaceUriString(const pRetVal: WideString);
begin
  DefaultInterface.NamespaceUriString := pRetVal;
end;

function TUANodeId.Get_expandedText: WideString;
begin
  Result := DefaultInterface.expandedText;
end;

procedure TUANodeId.Set_expandedText(const pRetVal: WideString);
begin
  DefaultInterface.expandedText := pRetVal;
end;

function TUANodeId.Get_GuidIdentifier: TGUID;
begin
  Result := DefaultInterface.GuidIdentifier;
end;

procedure TUANodeId.Set_GuidIdentifier(pRetVal: TGUID);
begin
  DefaultInterface.GuidIdentifier := pRetVal;
end;

function TUANodeId.Get_GuidIdentifierString: WideString;
begin
  Result := DefaultInterface.GuidIdentifierString;
end;

procedure TUANodeId.Set_GuidIdentifierString(const pRetVal: WideString);
begin
  DefaultInterface.GuidIdentifierString := pRetVal;
end;

function TUANodeId.Get_identifier: OleVariant;
begin
  Result := DefaultInterface.identifier;
end;

procedure TUANodeId._Set_identifier(pRetVal: OleVariant);
begin
  DefaultInterface.identifier := pRetVal;
end;

function TUANodeId.Get_IsNull: WordBool;
begin
  Result := DefaultInterface.IsNull;
end;

function TUANodeId.Get_NodeIdType: UANodeIdType;
begin
  Result := DefaultInterface.NodeIdType;
end;

procedure TUANodeId.Set_NodeIdType(pRetVal: UANodeIdType);
begin
  DefaultInterface.NodeIdType := pRetVal;
end;

function TUANodeId.Get_NumericIdentifier: Integer;
begin
  Result := DefaultInterface.NumericIdentifier;
end;

procedure TUANodeId.Set_NumericIdentifier(pRetVal: Integer);
begin
  DefaultInterface.NumericIdentifier := pRetVal;
end;

function TUANodeId.Get_OpaqueIdentifier: PSafeArray;
begin
  Result := DefaultInterface.OpaqueIdentifier;
end;

procedure TUANodeId.Set_OpaqueIdentifier(pRetVal: PSafeArray);
begin
  DefaultInterface.OpaqueIdentifier := pRetVal;
end;

function TUANodeId.Get_StringIdentifier: WideString;
begin
  Result := DefaultInterface.StringIdentifier;
end;

procedure TUANodeId.Set_StringIdentifier(const pRetVal: WideString);
begin
  DefaultInterface.StringIdentifier := pRetVal;
end;

function TUANodeId.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUANodeId.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUANodeId.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUANodeId.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUANodeId.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUANodeId.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUANodeId.format(const DefaultNamespaceUriString: WideString; useStandardNames: WordBool): WideString;
begin
  Result := DefaultInterface.format(DefaultNamespaceUriString, useStandardNames);
end;

function TUANodeId.Match(other: OleVariant): WordBool;
begin
  Result := DefaultInterface.Match(other);
end;

procedure TUANodeId.SetIdentifier(identifier: OleVariant);
begin
  DefaultInterface.SetIdentifier(identifier);
end;

procedure TUANodeId.SetOpaqueIdentifier(var OpaqueIdentifier: PSafeArray);
begin
  DefaultInterface.SetOpaqueIdentifier(OpaqueIdentifier);
end;

function TUANodeId.ToBrowsePath: _UABrowsePath;
begin
  Result := DefaultInterface.ToBrowsePath;
end;

function TUANodeId.ToUABuiltInType: UABuiltInType;
begin
  Result := DefaultInterface.ToUABuiltInType;
end;

class function CoUANodeIdCollection.Create: _UANodeIdCollection;
begin
  Result := CreateComObject(CLASS_UANodeIdCollection) as _UANodeIdCollection;
end;

class function CoUANodeIdCollection.CreateRemote(const MachineName: string): _UANodeIdCollection;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UANodeIdCollection) as _UANodeIdCollection;
end;

procedure TUANodeIdCollection.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{A8FC28A7-BE89-474F-8476-1DC15C56D356}';
    IntfIID:   '{6334ED0F-0CD9-4580-9716-41447B458F85}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUANodeIdCollection.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UANodeIdCollection;
  end;
end;

procedure TUANodeIdCollection.ConnectTo(svrIntf: _UANodeIdCollection);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUANodeIdCollection.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUANodeIdCollection.GetDefaultInterface: _UANodeIdCollection;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUANodeIdCollection.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUANodeIdCollection.Destroy;
begin
  inherited Destroy;
end;

function TUANodeIdCollection.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUANodeIdCollection.Get_Item(index: Integer): _UANodeId;
begin
  Result := DefaultInterface.Item[index];
end;

procedure TUANodeIdCollection._Set_Item(index: Integer; const pRetVal: _UANodeId);
begin
  DefaultInterface.Item[index] := pRetVal;
end;

function TUANodeIdCollection.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

function TUANodeIdCollection.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUANodeIdCollection.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUANodeIdCollection.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUANodeIdCollection.GetEnumerator: IEnumVARIANT;
begin
  Result := DefaultInterface.GetEnumerator;
end;

procedure TUANodeIdCollection.Add(Item: OleVariant);
begin
  DefaultInterface.Add(Item);
end;

procedure TUANodeIdCollection.Clear;
begin
  DefaultInterface.Clear;
end;

function TUANodeIdCollection.Contains(Item: OleVariant): WordBool;
begin
  Result := DefaultInterface.Contains(Item);
end;

function TUANodeIdCollection.IndexOf(Item: OleVariant): Integer;
begin
  Result := DefaultInterface.IndexOf(Item);
end;

procedure TUANodeIdCollection.Insert(index: Integer; Item: OleVariant);
begin
  DefaultInterface.Insert(index, Item);
end;

function TUANodeIdCollection.Remove(Item: OleVariant): WordBool;
begin
  Result := DefaultInterface.Remove(Item);
end;

procedure TUANodeIdCollection.RemoveAt(index: Integer);
begin
  DefaultInterface.RemoveAt(index);
end;

class function CoUANodeIdSet.Create: _UANodeIdSet;
begin
  Result := CreateComObject(CLASS_UANodeIdSet) as _UANodeIdSet;
end;

class function CoUANodeIdSet.CreateRemote(const MachineName: string): _UANodeIdSet;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UANodeIdSet) as _UANodeIdSet;
end;

procedure TUANodeIdSet.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{0A007C33-D273-44D2-8EEA-FB4A77B26ACB}';
    IntfIID:   '{6AAF2015-1F72-43F4-A301-7590BF3FA4A1}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUANodeIdSet.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UANodeIdSet;
  end;
end;

procedure TUANodeIdSet.ConnectTo(svrIntf: _UANodeIdSet);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUANodeIdSet.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUANodeIdSet.GetDefaultInterface: _UANodeIdSet;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUANodeIdSet.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUANodeIdSet.Destroy;
begin
  inherited Destroy;
end;

function TUANodeIdSet.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUANodeIdSet.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

function TUANodeIdSet.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUANodeIdSet.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUANodeIdSet.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUANodeIdSet.Add(Item: OleVariant): WordBool;
begin
  Result := DefaultInterface.Add(Item);
end;

function TUANodeIdSet.GetEnumerator: IEnumVARIANT;
begin
  Result := DefaultInterface.GetEnumerator;
end;

procedure TUANodeIdSet.Clear;
begin
  DefaultInterface.Clear;
end;

function TUANodeIdSet.Contains(Item: OleVariant): WordBool;
begin
  Result := DefaultInterface.Contains(Item);
end;

function TUANodeIdSet.Remove(Item: OleVariant): WordBool;
begin
  Result := DefaultInterface.Remove(Item);
end;

procedure TUANodeIdSet.UnionWith(other: OleVariant);
begin
  DefaultInterface.UnionWith(other);
end;

procedure TUANodeIdSet.IntersectWith(other: OleVariant);
begin
  DefaultInterface.IntersectWith(other);
end;

procedure TUANodeIdSet.ExceptWith(other: OleVariant);
begin
  DefaultInterface.ExceptWith(other);
end;

procedure TUANodeIdSet.SymmetricExceptWith(other: OleVariant);
begin
  DefaultInterface.SymmetricExceptWith(other);
end;

function TUANodeIdSet.IsSubsetOf(other: OleVariant): WordBool;
begin
  Result := DefaultInterface.IsSubsetOf(other);
end;

function TUANodeIdSet.IsSupersetOf(other: OleVariant): WordBool;
begin
  Result := DefaultInterface.IsSupersetOf(other);
end;

function TUANodeIdSet.IsProperSupersetOf(other: OleVariant): WordBool;
begin
  Result := DefaultInterface.IsProperSupersetOf(other);
end;

function TUANodeIdSet.IsProperSubsetOf(other: OleVariant): WordBool;
begin
  Result := DefaultInterface.IsProperSubsetOf(other);
end;

function TUANodeIdSet.Overlaps(other: OleVariant): WordBool;
begin
  Result := DefaultInterface.Overlaps(other);
end;

function TUANodeIdSet.SetEquals(other: OleVariant): WordBool;
begin
  Result := DefaultInterface.SetEquals(other);
end;

procedure TUANodeIdSet.TrimExcess;
begin
  DefaultInterface.TrimExcess;
end;

function TUANodeIdSet.TryGetValue(equalValue: OleVariant; out actualValue: OleVariant): WordBool;
begin
  Result := DefaultInterface.TryGetValue(equalValue, actualValue);
end;

class function CoUAQualifiedName.Create: _UAQualifiedName;
begin
  Result := CreateComObject(CLASS_UAQualifiedName) as _UAQualifiedName;
end;

class function CoUAQualifiedName.CreateRemote(const MachineName: string): _UAQualifiedName;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAQualifiedName) as _UAQualifiedName;
end;

procedure TUAQualifiedName.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{2673FDA6-CDA0-41D4-9D2F-BFD1B99EAACA}';
    IntfIID:   '{C33E897C-F0F5-4ADD-B836-1904602FF0CF}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAQualifiedName.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAQualifiedName;
  end;
end;

procedure TUAQualifiedName.ConnectTo(svrIntf: _UAQualifiedName);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAQualifiedName.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAQualifiedName.GetDefaultInterface: _UAQualifiedName;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAQualifiedName.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAQualifiedName.Destroy;
begin
  inherited Destroy;
end;

function TUAQualifiedName.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAQualifiedName.Get_DisplayString: WideString;
begin
  Result := DefaultInterface.DisplayString;
end;

function TUAQualifiedName.Get_IsStandard: WordBool;
begin
  Result := DefaultInterface.IsStandard;
end;

function TUAQualifiedName.Get_NamespaceIndex: Integer;
begin
  Result := DefaultInterface.NamespaceIndex;
end;

procedure TUAQualifiedName.Set_NamespaceIndex(pRetVal: Integer);
begin
  DefaultInterface.NamespaceIndex := pRetVal;
end;

function TUAQualifiedName.Get_NamespaceUriString: WideString;
begin
  Result := DefaultInterface.NamespaceUriString;
end;

procedure TUAQualifiedName.Set_NamespaceUriString(const pRetVal: WideString);
begin
  DefaultInterface.NamespaceUriString := pRetVal;
end;

function TUAQualifiedName.Get_expandedText: WideString;
begin
  Result := DefaultInterface.expandedText;
end;

procedure TUAQualifiedName.Set_expandedText(const pRetVal: WideString);
begin
  DefaultInterface.expandedText := pRetVal;
end;

function TUAQualifiedName.Get_IsNull: WordBool;
begin
  Result := DefaultInterface.IsNull;
end;

function TUAQualifiedName.Get_Name: WideString;
begin
  Result := DefaultInterface.Name;
end;

procedure TUAQualifiedName.Set_Name(const pRetVal: WideString);
begin
  DefaultInterface.Name := pRetVal;
end;

function TUAQualifiedName.Get_StandardName: WideString;
begin
  Result := DefaultInterface.StandardName;
end;

procedure TUAQualifiedName.Set_StandardName(const pRetVal: WideString);
begin
  DefaultInterface.StandardName := pRetVal;
end;

function TUAQualifiedName.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAQualifiedName.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAQualifiedName.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAQualifiedName.Clone: OleVariant;
begin
  Result := DefaultInterface.Clone;
end;

function TUAQualifiedName.format(const DefaultNamespaceUriString: WideString): WideString;
begin
  Result := DefaultInterface.format(DefaultNamespaceUriString);
end;

function TUAQualifiedName.Match(other: OleVariant): WordBool;
begin
  Result := DefaultInterface.Match(other);
end;

class function CoUAQualifiedNameCollection.Create: _UAQualifiedNameCollection;
begin
  Result := CreateComObject(CLASS_UAQualifiedNameCollection) as _UAQualifiedNameCollection;
end;

class function CoUAQualifiedNameCollection.CreateRemote(const MachineName: string): _UAQualifiedNameCollection;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAQualifiedNameCollection) as _UAQualifiedNameCollection;
end;

procedure TUAQualifiedNameCollection.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{3744F21C-7A5E-44D5-96FD-DA62E20CC2B9}';
    IntfIID:   '{41932E02-2889-404A-B769-6557B74B6B87}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAQualifiedNameCollection.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAQualifiedNameCollection;
  end;
end;

procedure TUAQualifiedNameCollection.ConnectTo(svrIntf: _UAQualifiedNameCollection);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAQualifiedNameCollection.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAQualifiedNameCollection.GetDefaultInterface: _UAQualifiedNameCollection;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAQualifiedNameCollection.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAQualifiedNameCollection.Destroy;
begin
  inherited Destroy;
end;

function TUAQualifiedNameCollection.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAQualifiedNameCollection.Get_Item(index: Integer): _UAQualifiedName;
begin
  Result := DefaultInterface.Item[index];
end;

procedure TUAQualifiedNameCollection._Set_Item(index: Integer; const pRetVal: _UAQualifiedName);
begin
  DefaultInterface.Item[index] := pRetVal;
end;

function TUAQualifiedNameCollection.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

function TUAQualifiedNameCollection.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAQualifiedNameCollection.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAQualifiedNameCollection.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAQualifiedNameCollection.GetEnumerator: IEnumVARIANT;
begin
  Result := DefaultInterface.GetEnumerator;
end;

procedure TUAQualifiedNameCollection.Add(Item: OleVariant);
begin
  DefaultInterface.Add(Item);
end;

procedure TUAQualifiedNameCollection.Clear;
begin
  DefaultInterface.Clear;
end;

function TUAQualifiedNameCollection.Contains(Item: OleVariant): WordBool;
begin
  Result := DefaultInterface.Contains(Item);
end;

function TUAQualifiedNameCollection.IndexOf(Item: OleVariant): Integer;
begin
  Result := DefaultInterface.IndexOf(Item);
end;

procedure TUAQualifiedNameCollection.Insert(index: Integer; Item: OleVariant);
begin
  DefaultInterface.Insert(index, Item);
end;

function TUAQualifiedNameCollection.Remove(Item: OleVariant): WordBool;
begin
  Result := DefaultInterface.Remove(Item);
end;

procedure TUAQualifiedNameCollection.RemoveAt(index: Integer);
begin
  DefaultInterface.RemoveAt(index);
end;

class function CoUAQualifiedNameSet.Create: _UAQualifiedNameSet;
begin
  Result := CreateComObject(CLASS_UAQualifiedNameSet) as _UAQualifiedNameSet;
end;

class function CoUAQualifiedNameSet.CreateRemote(const MachineName: string): _UAQualifiedNameSet;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UAQualifiedNameSet) as _UAQualifiedNameSet;
end;

procedure TUAQualifiedNameSet.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{5E1FBBF6-EA18-408D-A4D4-F4458F7ED4CB}';
    IntfIID:   '{D97A1F7A-7BA0-46E8-BE95-C685AE94F3C5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TUAQualifiedNameSet.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as _UAQualifiedNameSet;
  end;
end;

procedure TUAQualifiedNameSet.ConnectTo(svrIntf: _UAQualifiedNameSet);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TUAQualifiedNameSet.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TUAQualifiedNameSet.GetDefaultInterface: _UAQualifiedNameSet;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TUAQualifiedNameSet.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TUAQualifiedNameSet.Destroy;
begin
  inherited Destroy;
end;

function TUAQualifiedNameSet.Get_ToString: WideString;
begin
  Result := DefaultInterface.ToString;
end;

function TUAQualifiedNameSet.Get_Count: Integer;
begin
  Result := DefaultInterface.Count;
end;

function TUAQualifiedNameSet.Equals(obj: OleVariant): WordBool;
begin
  Result := DefaultInterface.Equals(obj);
end;

function TUAQualifiedNameSet.GetHashCode: Integer;
begin
  Result := DefaultInterface.GetHashCode;
end;

function TUAQualifiedNameSet.GetType: _Type;
begin
  Result := DefaultInterface.GetType;
end;

function TUAQualifiedNameSet.Add(Item: OleVariant): WordBool;
begin
  Result := DefaultInterface.Add(Item);
end;

function TUAQualifiedNameSet.GetEnumerator: IEnumVARIANT;
begin
  Result := DefaultInterface.GetEnumerator;
end;

procedure TUAQualifiedNameSet.Clear;
begin
  DefaultInterface.Clear;
end;

function TUAQualifiedNameSet.Contains(Item: OleVariant): WordBool;
begin
  Result := DefaultInterface.Contains(Item);
end;

function TUAQualifiedNameSet.Remove(Item: OleVariant): WordBool;
begin
  Result := DefaultInterface.Remove(Item);
end;

procedure TUAQualifiedNameSet.UnionWith(other: OleVariant);
begin
  DefaultInterface.UnionWith(other);
end;

procedure TUAQualifiedNameSet.IntersectWith(other: OleVariant);
begin
  DefaultInterface.IntersectWith(other);
end;

procedure TUAQualifiedNameSet.ExceptWith(other: OleVariant);
begin
  DefaultInterface.ExceptWith(other);
end;

procedure TUAQualifiedNameSet.SymmetricExceptWith(other: OleVariant);
begin
  DefaultInterface.SymmetricExceptWith(other);
end;

function TUAQualifiedNameSet.IsSubsetOf(other: OleVariant): WordBool;
begin
  Result := DefaultInterface.IsSubsetOf(other);
end;

function TUAQualifiedNameSet.IsSupersetOf(other: OleVariant): WordBool;
begin
  Result := DefaultInterface.IsSupersetOf(other);
end;

function TUAQualifiedNameSet.IsProperSupersetOf(other: OleVariant): WordBool;
begin
  Result := DefaultInterface.IsProperSupersetOf(other);
end;

function TUAQualifiedNameSet.IsProperSubsetOf(other: OleVariant): WordBool;
begin
  Result := DefaultInterface.IsProperSubsetOf(other);
end;

function TUAQualifiedNameSet.Overlaps(other: OleVariant): WordBool;
begin
  Result := DefaultInterface.Overlaps(other);
end;

function TUAQualifiedNameSet.SetEquals(other: OleVariant): WordBool;
begin
  Result := DefaultInterface.SetEquals(other);
end;

procedure TUAQualifiedNameSet.TrimExcess;
begin
  DefaultInterface.TrimExcess;
end;

function TUAQualifiedNameSet.TryGetValue(equalValue: OleVariant; out actualValue: OleVariant): WordBool;
begin
  Result := DefaultInterface.TryGetValue(equalValue, actualValue);
end;

procedure Register;
begin
  RegisterComponents(dtlServerPage, [TUADataValue, TUAResultException, TUAServiceException, TComEasyUAClientConnectionControl, 
    TComEasyUAClientNodeRegistration, TUAPubSubHeader, TUAPubSubLocators, TUASubscribeDataSetArguments, TEasyUADataSetSubscriptionChangeArguments, 
    TEasyUADataSetMessageEventArgs, TEasyUAResolverAccessEventArgs, TEasyUASubscribeDataSetArgumentsDictionary, TEasyUASubscriptionResolvedEventArgs, TEasyUASubscribeDataSetArguments, 
    TUAPublishSubscribeElement, TUAPublisherSubscriberAdaptableParameters, TUAPubSubResolverParameters, TEasyUASubscriberInstanceParameters, TEasyUASubscriberSharedParameters, 
    TUAPublisherConfigurationResolutionParameters, TUAPublisherEndpointResolverParameters, TEasyUASubscriberAdaptableParameters, TEasyUAPubSubResolverParameters, TUAPublishedDataSetElement, 
    TUAPubSubConfigurationElement, TUAPubSubConnectionElement, TUAConnectionTransportParameters, TUAConfigurationVersion, TUABrokerConnectionTransportParameters, 
    TUADatagramConnectionTransportParameters, TUADatagramWriterGroupTransportParameters, TUADataSetFolderData, TUADataSetFolderDataCollection, TUADataSetReaderMessageParameters, 
    TUABrokerDataSetReaderTransportParameters, TUADataSetWriterDataCollection, TUADataSetWriterElement, TUADataSetWriterLocator, TUABrokerDataSetWriterTransportParameters, 
    TUAFieldMetaDataCollection, TUAJsonDataSetReaderMessageParameters, TUAJsonDataSetWriterMessageParameters, TUAPublishedDataSetDataCollection, TUAPublishedDataSetData, 
    TUAPublishedDataItemsElement, TUAPublishedEventsElement, TUAPublishedVariableData, TUAPublishedVariableDataCollection, TUADataSetWriterData, 
    TUAPubSubConfigurationData, TUAPubSubConnectionDataCollection, TUAPubSubConnectionData, TUAFieldMetaData, TUAUadpDataSetReaderMessageParameters, 
    TUAUadpDataSetWriterMessageParameters, TUAUadpWriterGroupMessageParameters, TUAWriterGroupData, TUAWriterGroupDataCollection, TUAWriterGroupElement, 
    TUAJsonWriterGroupMessageParameters, TUABrokerWriterGroupTransportParameters, TEasyUASubscriberSelector, TUADataSetFieldData, TUADataSetSubscriptionDescriptor, 
    TUADataSetWriterDescriptor, TUAGuidDataSetFieldDataDictionary, TUAPublisherId, TUAPubSubCommunicationParameters, TUAPubSubConnectionDescriptor, 
    TUADataSetHeader, TUADataSetData, TUADataSetFieldDescriptor, TUAPubSubResolverDescriptor, TUAStringDataSetFieldDataDictionary, 
    TUASubscribeDataSetFilter, TUASubscriberCommunicationParameters, TUAWriterGroupDescriptor, TUAOptimizerPluginParameters, TUAClientServerTables, 
    TEasyUAClientComplexData, TUAComplexDataSubscriberPluginParameters, TUAIndexRangeListFormatException, TUAIndexRangeListParser, TUANodeArguments, 
    TEasyUADataChangeNotificationEventArgs, TEasyUAEventNotificationEventArgs, TEasyUAMonitoredItemArgumentsDictionary, TEasyUAServerConditionChangedEventArgs, TEasyUASubscriptionChangeArguments, 
    TUAAttributeArguments, TUAAttributeDataResult, TUABrowseArguments, TUACallArguments, TUAException, 
    TUALogicalException, TUAMonitoredItemArguments, TEasyUAMonitoredItemArguments, TUANodeElementCollectionResult, TUAReadArguments, 
    TUAWriteArguments, TUAWriteResult, TUAWriteValueArguments, TUABrowsePathFormatException, TUABrowsePathParser, 
    TUABrowsePath, TUABrowsePathElement, TUABrowsePathElementCollection, TUAModelClientException, TUAModellingException, 
    TUAModelNodeDescriptor, TUACertificateGroupElement, TUACertificateGroupElementCollection, TUAAttributeOperand, TUAContentFilterElement, 
    TUAFilterOperand, TUAFilterOperandCollection, TUALiteralOperand, TUASimpleAttributeOperand, TUASimpleAttributeOperandCollection, 
    TUAClientAdaptableParameters, TUAClientServerEngineParameters, TEasyUAClientInstanceParameters, TEasyUAClientMode, TEasyUAClientSharedParameters, 
    TUACertificateAcceptancePolicy, TEasyUAClientAdaptableParameters, TUAClientEngineParameters, TUAClientMonitoredItemParameters, TUAClientServerApplicationParameters, 
    TEasyUAClientEngineParameters, TUAClientSessionParameters, TUAClientSubscriptionParameters, TUADiscoveryParameters, TUAEndpointDescriptionChecks, 
    TUAEndpointSelectionPolicy, TUAEngineException, TUAEnhancedClientSessionParameters, TUAHostParameters, TUASmartClientEngineParameters, 
    TUASmartClientSessionParameters, TUAUserInteractionParameters, TUAApplicationElement, TUAApplicationDescription, TUAApplicationRecordDataType, 
    TUADiscoveryElement, TUADiscoveryElementCollection, TUAGlobalApplicationDiscoveryQuery, TUALocalApplicationDiscoveryQuery, TUALocalEndpointDiscoveryQuery, 
    TUANetworkServerDiscoveryQuery, TUAQueryApplicationsFilter, TUAServerOnNetwork, TUAEnumValue, TUADataTypeInfo, 
    TUAEnumDefinition, TUAEnumDescription, TUAEnumFieldInfo, TUAEnumTypeInfo, TUAEnumField, 
    TUAHeaderDataTypeSchema, TUADataSetMetaData, TUASimpleTypeDescription, TUASimpleTypeInfo, TUAStructureDefinition, 
    TUAStructureDescription, TUAStructureField, TUAStructureFieldInfo, TUAStructureTypeInfo, TUAServerDtmpParameters, 
    TUADataTypeDescriptor, TUADataTypeSystemParameters, TUAOpcBinaryDtsParameters, TUAServerDtmpPluginParameters, TUAXmlSchemaDtsParameters, 
    TUAEUInformation, TUARange, TComEasyUAClientConnectionMonitoring, TEasyUAClientSelector, TEasyUAEngineException, 
    TEasyUASpecializedClient, TStringUANodeIdDictionary, TUAAttributeField, TUAAttributeFieldCollection, TUABrowseParameters, 
    TUADataChangeFilter, TUAAttributeData, TUAEndpointDescriptor, TUAEndpointDescriptorCollection, TUAEndpointDescriptorUANodeIdDictionary, 
    TUAEventData, TUAEventFilter, TUAExtensionObject, TUAFieldResultDictionary, TUAIndexRange, 
    TUAIndexRangeList, TUAKeyValueDictionary, TUAKeyValuePair, TUAMonitoringParameters, TUANodeDescriptor, 
    TUANodeIdUAApplicationElementDictionary, TUAReadParameters, TUAMethodOutputException, TUACallServiceException, TUAServiceResult, 
    TUAStatusCode, TUAStatusCodeException, TUASubscriptionParameters, TUATimeZoneData, TUAComplexDataParameters, 
    TUAComplexDataClientPluginParameters, TUAGenericObject, TUANodeBrowseFilter, TAbstractEasyUAClientServerApplication, TUACertificateArguments, 
    TUAIngestCertificateArguments, TUAValidateCertificateArguments, TNetSdkEasyUAClientServerApplication, TUAAssureCertificateArguments, TUACertificateRequestParameters, 
    TUACertificateTypeElement, TUACertificateTypeElementCollection, TUAExportCertificateArguments, TUAImportCertificateArguments, TUAObtainCertificateArguments, 
    TUACreateCertificateArguments, TUABaseEventObject, TUAApplicationManifest, TUANodeIdFormatException, TUANodeIdParser, 
    TUAQualifiedNameFormatException, TUAQualifiedNameParser, TUANodeElement, TUANodeElementCollection, TUANodeId, 
    TUANodeIdCollection, TUANodeIdSet, TUAQualifiedName, TUAQualifiedNameCollection, TUAQualifiedNameSet]);
end;

end.
